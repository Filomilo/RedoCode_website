2024-08-30T19:19:33.9625775Z Current runner version: '2.319.1'
2024-08-30T19:19:33.9650513Z ##[group]Operating System
2024-08-30T19:19:33.9651655Z Ubuntu
2024-08-30T19:19:33.9652041Z 20.04.6
2024-08-30T19:19:33.9652330Z LTS
2024-08-30T19:19:33.9652728Z ##[endgroup]
2024-08-30T19:19:33.9653103Z ##[group]Runner Image
2024-08-30T19:19:33.9653504Z Image: ubuntu-20.04
2024-08-30T19:19:33.9653947Z Version: 20240825.1.0
2024-08-30T19:19:33.9654944Z Included Software: https://github.com/actions/runner-images/blob/ubuntu20/20240825.1/images/ubuntu/Ubuntu2004-Readme.md
2024-08-30T19:19:33.9656334Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu20%2F20240825.1
2024-08-30T19:19:33.9657225Z ##[endgroup]
2024-08-30T19:19:33.9657620Z ##[group]Runner Image Provisioner
2024-08-30T19:19:33.9658063Z 2.0.384.1
2024-08-30T19:19:33.9658432Z ##[endgroup]
2024-08-30T19:19:33.9674929Z ##[group]GITHUB_TOKEN Permissions
2024-08-30T19:19:33.9676654Z Actions: write
2024-08-30T19:19:33.9677357Z Attestations: write
2024-08-30T19:19:33.9677819Z Checks: write
2024-08-30T19:19:33.9678203Z Contents: write
2024-08-30T19:19:33.9678598Z Deployments: write
2024-08-30T19:19:33.9679020Z Discussions: write
2024-08-30T19:19:33.9679405Z Issues: write
2024-08-30T19:19:33.9679777Z Metadata: read
2024-08-30T19:19:33.9680170Z Packages: write
2024-08-30T19:19:33.9680547Z Pages: write
2024-08-30T19:19:33.9680910Z PullRequests: write
2024-08-30T19:19:33.9681338Z RepositoryProjects: write
2024-08-30T19:19:33.9681784Z SecurityEvents: write
2024-08-30T19:19:33.9682175Z Statuses: write
2024-08-30T19:19:33.9682558Z ##[endgroup]
2024-08-30T19:19:33.9685662Z Secret source: Actions
2024-08-30T19:19:33.9686293Z Prepare workflow directory
2024-08-30T19:19:34.0449078Z Prepare all required actions
2024-08-30T19:19:34.0611982Z Getting action download info
2024-08-30T19:19:34.2176221Z Download action repository 'actions/checkout@v2' (SHA:ee0669bd1cc54295c223e0bb666b733df41de1c5)
2024-08-30T19:19:34.3594940Z Download action repository 'actions/setup-node@v3' (SHA:1a4442cacd436585916779262731d5b162bc6ec7)
2024-08-30T19:19:34.5153935Z Download action repository 'actions/upload-artifact@v4' (SHA:834a144ee995460fba8ed112a2fc961b36a5ec5a)
2024-08-30T19:19:35.0481189Z Complete job name: docker_structure_test
2024-08-30T19:19:35.1455511Z ##[group]Run actions/checkout@v2
2024-08-30T19:19:35.1456099Z with:
2024-08-30T19:19:35.1456495Z   repository: Filomilo/RedoCode_website
2024-08-30T19:19:35.1457349Z   token: ***
2024-08-30T19:19:35.1457725Z   ssh-strict: true
2024-08-30T19:19:35.1458178Z   persist-credentials: true
2024-08-30T19:19:35.1458668Z   clean: true
2024-08-30T19:19:35.1459005Z   fetch-depth: 1
2024-08-30T19:19:35.1459392Z   lfs: false
2024-08-30T19:19:35.1459774Z   submodules: false
2024-08-30T19:19:35.1460147Z   set-safe-directory: true
2024-08-30T19:19:35.1460592Z ##[endgroup]
2024-08-30T19:19:35.3676069Z Syncing repository: Filomilo/RedoCode_website
2024-08-30T19:19:35.3678565Z ##[group]Getting Git version info
2024-08-30T19:19:35.3679891Z Working directory is '/home/runner/work/RedoCode_website/RedoCode_website'
2024-08-30T19:19:35.3681217Z [command]/usr/bin/git version
2024-08-30T19:19:35.3744182Z git version 2.46.0
2024-08-30T19:19:35.3770596Z ##[endgroup]
2024-08-30T19:19:35.3790586Z Temporarily overriding HOME='/home/runner/work/_temp/bdd46b99-5737-4a53-b7b8-94a2e10640d3' before making global git config changes
2024-08-30T19:19:35.3792095Z Adding repository directory to the temporary git global config as a safe directory
2024-08-30T19:19:35.3793896Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/RedoCode_website/RedoCode_website
2024-08-30T19:19:35.3835325Z Deleting the contents of '/home/runner/work/RedoCode_website/RedoCode_website'
2024-08-30T19:19:35.3838666Z ##[group]Initializing the repository
2024-08-30T19:19:35.3842145Z [command]/usr/bin/git init /home/runner/work/RedoCode_website/RedoCode_website
2024-08-30T19:19:35.3918217Z hint: Using 'master' as the name for the initial branch. This default branch name
2024-08-30T19:19:35.3920124Z hint: is subject to change. To configure the initial branch name to use in all
2024-08-30T19:19:35.3921626Z hint: of your new repositories, which will suppress this warning, call:
2024-08-30T19:19:35.3922396Z hint:
2024-08-30T19:19:35.3922993Z hint: 	git config --global init.defaultBranch <name>
2024-08-30T19:19:35.3923623Z hint:
2024-08-30T19:19:35.3924269Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2024-08-30T19:19:35.3925368Z hint: 'development'. The just-created branch can be renamed via this command:
2024-08-30T19:19:35.3926128Z hint:
2024-08-30T19:19:35.3926530Z hint: 	git branch -m <name>
2024-08-30T19:19:35.3927401Z Initialized empty Git repository in /home/runner/work/RedoCode_website/RedoCode_website/.git/
2024-08-30T19:19:35.3929005Z [command]/usr/bin/git remote add origin https://github.com/Filomilo/RedoCode_website
2024-08-30T19:19:35.3963849Z ##[endgroup]
2024-08-30T19:19:35.3965138Z ##[group]Disabling automatic garbage collection
2024-08-30T19:19:35.3968623Z [command]/usr/bin/git config --local gc.auto 0
2024-08-30T19:19:35.3996399Z ##[endgroup]
2024-08-30T19:19:35.3997585Z ##[group]Setting up auth
2024-08-30T19:19:35.4003875Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2024-08-30T19:19:35.4032426Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2024-08-30T19:19:35.4350854Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2024-08-30T19:19:35.4379871Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2024-08-30T19:19:35.4602062Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2024-08-30T19:19:35.4637238Z ##[endgroup]
2024-08-30T19:19:35.4638223Z ##[group]Fetching the repository
2024-08-30T19:19:35.4645604Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +d32c359ff46e91e0c9067b9af7d6089f0e22c51e:refs/remotes/origin/main
2024-08-30T19:19:35.6793339Z remote: Enumerating objects: 616, done.        
2024-08-30T19:19:35.6794617Z remote: Counting objects:   0% (1/616)        
2024-08-30T19:19:35.6795580Z remote: Counting objects:   1% (7/616)        
2024-08-30T19:19:35.6796356Z remote: Counting objects:   2% (13/616)        
2024-08-30T19:19:35.6797169Z remote: Counting objects:   3% (19/616)        
2024-08-30T19:19:35.6798193Z remote: Counting objects:   4% (25/616)        
2024-08-30T19:19:35.6798976Z remote: Counting objects:   5% (31/616)        
2024-08-30T19:19:35.6799796Z remote: Counting objects:   6% (37/616)        
2024-08-30T19:19:35.6800616Z remote: Counting objects:   7% (44/616)        
2024-08-30T19:19:35.6801386Z remote: Counting objects:   8% (50/616)        
2024-08-30T19:19:35.6802273Z remote: Counting objects:   9% (56/616)        
2024-08-30T19:19:35.6803152Z remote: Counting objects:  10% (62/616)        
2024-08-30T19:19:35.6803909Z remote: Counting objects:  11% (68/616)        
2024-08-30T19:19:35.6804698Z remote: Counting objects:  12% (74/616)        
2024-08-30T19:19:35.6805549Z remote: Counting objects:  13% (81/616)        
2024-08-30T19:19:35.6806319Z remote: Counting objects:  14% (87/616)        
2024-08-30T19:19:35.6807025Z remote: Counting objects:  15% (93/616)        
2024-08-30T19:19:35.6807815Z remote: Counting objects:  16% (99/616)        
2024-08-30T19:19:35.6808449Z remote: Counting objects:  17% (105/616)        
2024-08-30T19:19:35.6809039Z remote: Counting objects:  18% (111/616)        
2024-08-30T19:19:35.6809704Z remote: Counting objects:  19% (118/616)        
2024-08-30T19:19:35.6843233Z remote: Counting objects:  20% (124/616)        
2024-08-30T19:19:35.6844567Z remote: Counting objects:  21% (130/616)        
2024-08-30T19:19:35.6846221Z remote: Counting objects:  22% (136/616)        
2024-08-30T19:19:35.6846997Z remote: Counting objects:  23% (142/616)        
2024-08-30T19:19:35.6847684Z remote: Counting objects:  24% (148/616)        
2024-08-30T19:19:35.6848501Z remote: Counting objects:  25% (154/616)        
2024-08-30T19:19:35.6849209Z remote: Counting objects:  26% (161/616)        
2024-08-30T19:19:35.6849989Z remote: Counting objects:  27% (167/616)        
2024-08-30T19:19:35.6850744Z remote: Counting objects:  28% (173/616)        
2024-08-30T19:19:35.6851708Z remote: Counting objects:  29% (179/616)        
2024-08-30T19:19:35.6852463Z remote: Counting objects:  30% (185/616)        
2024-08-30T19:19:35.6853131Z remote: Counting objects:  31% (191/616)        
2024-08-30T19:19:35.6853841Z remote: Counting objects:  32% (198/616)        
2024-08-30T19:19:35.6854592Z remote: Counting objects:  33% (204/616)        
2024-08-30T19:19:35.6855254Z remote: Counting objects:  34% (210/616)        
2024-08-30T19:19:35.6855964Z remote: Counting objects:  35% (216/616)        
2024-08-30T19:19:35.6856704Z remote: Counting objects:  36% (222/616)        
2024-08-30T19:19:35.6857289Z remote: Counting objects:  37% (228/616)        
2024-08-30T19:19:35.6857900Z remote: Counting objects:  38% (235/616)        
2024-08-30T19:19:35.6858561Z remote: Counting objects:  39% (241/616)        
2024-08-30T19:19:35.6859143Z remote: Counting objects:  40% (247/616)        
2024-08-30T19:19:35.6859755Z remote: Counting objects:  41% (253/616)        
2024-08-30T19:19:35.6860623Z remote: Counting objects:  42% (259/616)        
2024-08-30T19:19:35.6861245Z remote: Counting objects:  43% (265/616)        
2024-08-30T19:19:35.6862054Z remote: Counting objects:  44% (272/616)        
2024-08-30T19:19:35.6863005Z remote: Counting objects:  45% (278/616)        
2024-08-30T19:19:35.6863613Z remote: Counting objects:  46% (284/616)        
2024-08-30T19:19:35.6864250Z remote: Counting objects:  47% (290/616)        
2024-08-30T19:19:35.6864920Z remote: Counting objects:  48% (296/616)        
2024-08-30T19:19:35.6896948Z remote: Counting objects:  49% (302/616)        
2024-08-30T19:19:35.6898262Z remote: Counting objects:  50% (308/616)        
2024-08-30T19:19:35.6899800Z remote: Counting objects:  51% (315/616)        
2024-08-30T19:19:35.6900762Z remote: Counting objects:  52% (321/616)        
2024-08-30T19:19:35.6901388Z remote: Counting objects:  53% (327/616)        
2024-08-30T19:19:35.6902092Z remote: Counting objects:  54% (333/616)        
2024-08-30T19:19:35.6902751Z remote: Counting objects:  55% (339/616)        
2024-08-30T19:19:35.6903369Z remote: Counting objects:  56% (345/616)        
2024-08-30T19:19:35.6903993Z remote: Counting objects:  57% (352/616)        
2024-08-30T19:19:35.6904604Z remote: Counting objects:  58% (358/616)        
2024-08-30T19:19:35.6905233Z remote: Counting objects:  59% (364/616)        
2024-08-30T19:19:35.6905838Z remote: Counting objects:  60% (370/616)        
2024-08-30T19:19:35.6906467Z remote: Counting objects:  61% (376/616)        
2024-08-30T19:19:35.6907119Z remote: Counting objects:  62% (382/616)        
2024-08-30T19:19:35.6907745Z remote: Counting objects:  63% (389/616)        
2024-08-30T19:19:35.6908588Z remote: Counting objects:  64% (395/616)        
2024-08-30T19:19:35.6909226Z remote: Counting objects:  65% (401/616)        
2024-08-30T19:19:35.6909875Z remote: Counting objects:  66% (407/616)        
2024-08-30T19:19:35.6910505Z remote: Counting objects:  67% (413/616)        
2024-08-30T19:19:35.6911144Z remote: Counting objects:  68% (419/616)        
2024-08-30T19:19:35.6911783Z remote: Counting objects:  69% (426/616)        
2024-08-30T19:19:35.6912352Z remote: Counting objects:  70% (432/616)        
2024-08-30T19:19:35.6912975Z remote: Counting objects:  71% (438/616)        
2024-08-30T19:19:35.6913609Z remote: Counting objects:  72% (444/616)        
2024-08-30T19:19:35.6914176Z remote: Counting objects:  73% (450/616)        
2024-08-30T19:19:35.6914800Z remote: Counting objects:  74% (456/616)        
2024-08-30T19:19:35.6915673Z remote: Counting objects:  75% (462/616)        
2024-08-30T19:19:35.6916265Z remote: Counting objects:  76% (469/616)        
2024-08-30T19:19:35.6916877Z remote: Counting objects:  77% (475/616)        
2024-08-30T19:19:35.6917508Z remote: Counting objects:  78% (481/616)        
2024-08-30T19:19:35.6918091Z remote: Counting objects:  79% (487/616)        
2024-08-30T19:19:35.6918694Z remote: Counting objects:  80% (493/616)        
2024-08-30T19:19:35.6919338Z remote: Counting objects:  81% (499/616)        
2024-08-30T19:19:35.6919902Z remote: Counting objects:  82% (506/616)        
2024-08-30T19:19:35.6920504Z remote: Counting objects:  83% (512/616)        
2024-08-30T19:19:35.6921146Z remote: Counting objects:  84% (518/616)        
2024-08-30T19:19:35.6921745Z remote: Counting objects:  85% (524/616)        
2024-08-30T19:19:35.6922307Z remote: Counting objects:  86% (530/616)        
2024-08-30T19:19:35.6922946Z remote: Counting objects:  87% (536/616)        
2024-08-30T19:19:35.6923560Z remote: Counting objects:  88% (543/616)        
2024-08-30T19:19:35.6924131Z remote: Counting objects:  89% (549/616)        
2024-08-30T19:19:35.6924840Z remote: Counting objects:  90% (555/616)        
2024-08-30T19:19:35.6925445Z remote: Counting objects:  91% (561/616)        
2024-08-30T19:19:35.6984767Z remote: Counting objects:  92% (567/616)        
2024-08-30T19:19:35.6986107Z remote: Counting objects:  93% (573/616)        
2024-08-30T19:19:35.6986868Z remote: Counting objects:  94% (580/616)        
2024-08-30T19:19:35.6987594Z remote: Counting objects:  95% (586/616)        
2024-08-30T19:19:35.6988199Z remote: Counting objects:  96% (592/616)        
2024-08-30T19:19:35.6988815Z remote: Counting objects:  97% (598/616)        
2024-08-30T19:19:35.6989475Z remote: Counting objects:  98% (604/616)        
2024-08-30T19:19:35.6990048Z remote: Counting objects:  99% (610/616)        
2024-08-30T19:19:35.6990658Z remote: Counting objects: 100% (616/616)        
2024-08-30T19:19:35.6991397Z remote: Counting objects: 100% (616/616), done.        
2024-08-30T19:19:35.6992054Z remote: Compressing objects:   0% (1/565)        
2024-08-30T19:19:35.6992936Z remote: Compressing objects:   1% (6/565)        
2024-08-30T19:19:35.6993669Z remote: Compressing objects:   2% (12/565)        
2024-08-30T19:19:35.6994312Z remote: Compressing objects:   3% (17/565)        
2024-08-30T19:19:35.6994983Z remote: Compressing objects:   4% (23/565)        
2024-08-30T19:19:35.6995664Z remote: Compressing objects:   5% (29/565)        
2024-08-30T19:19:35.6996279Z remote: Compressing objects:   6% (34/565)        
2024-08-30T19:19:35.6996938Z remote: Compressing objects:   7% (40/565)        
2024-08-30T19:19:35.6997612Z remote: Compressing objects:   8% (46/565)        
2024-08-30T19:19:35.6998236Z remote: Compressing objects:   9% (51/565)        
2024-08-30T19:19:35.6998907Z remote: Compressing objects:  10% (57/565)        
2024-08-30T19:19:35.6999594Z remote: Compressing objects:  11% (63/565)        
2024-08-30T19:19:35.7000264Z remote: Compressing objects:  12% (68/565)        
2024-08-30T19:19:35.7000878Z remote: Compressing objects:  13% (74/565)        
2024-08-30T19:19:35.7001552Z remote: Compressing objects:  14% (80/565)        
2024-08-30T19:19:35.7002205Z remote: Compressing objects:  15% (85/565)        
2024-08-30T19:19:35.7002810Z remote: Compressing objects:  16% (91/565)        
2024-08-30T19:19:35.7003477Z remote: Compressing objects:  17% (97/565)        
2024-08-30T19:19:35.7004134Z remote: Compressing objects:  18% (102/565)        
2024-08-30T19:19:35.7004764Z remote: Compressing objects:  19% (108/565)        
2024-08-30T19:19:35.7005459Z remote: Compressing objects:  20% (113/565)        
2024-08-30T19:19:35.7006129Z remote: Compressing objects:  21% (119/565)        
2024-08-30T19:19:35.7006745Z remote: Compressing objects:  22% (125/565)        
2024-08-30T19:19:35.7007435Z remote: Compressing objects:  23% (130/565)        
2024-08-30T19:19:35.7008091Z remote: Compressing objects:  24% (136/565)        
2024-08-30T19:19:35.7260446Z remote: Compressing objects:  25% (142/565)        
2024-08-30T19:19:35.7262453Z remote: Compressing objects:  26% (147/565)        
2024-08-30T19:19:35.7265032Z remote: Compressing objects:  27% (153/565)        
2024-08-30T19:19:35.7268051Z remote: Compressing objects:  28% (159/565)        
2024-08-30T19:19:35.7269342Z remote: Compressing objects:  29% (164/565)        
2024-08-30T19:19:35.7270297Z remote: Compressing objects:  30% (170/565)        
2024-08-30T19:19:35.7271429Z remote: Compressing objects:  31% (176/565)        
2024-08-30T19:19:35.7272761Z remote: Compressing objects:  32% (181/565)        
2024-08-30T19:19:35.7274241Z remote: Compressing objects:  33% (187/565)        
2024-08-30T19:19:35.7285897Z remote: Compressing objects:  34% (193/565)        
2024-08-30T19:19:35.7287448Z remote: Compressing objects:  35% (198/565)        
2024-08-30T19:19:35.7288526Z remote: Compressing objects:  36% (204/565)        
2024-08-30T19:19:35.7289536Z remote: Compressing objects:  37% (210/565)        
2024-08-30T19:19:35.7297306Z remote: Compressing objects:  38% (215/565)        
2024-08-30T19:19:35.7301568Z remote: Compressing objects:  39% (221/565)        
2024-08-30T19:19:35.7303275Z remote: Compressing objects:  40% (226/565)        
2024-08-30T19:19:35.7304667Z remote: Compressing objects:  41% (232/565)        
2024-08-30T19:19:35.7305507Z remote: Compressing objects:  42% (238/565)        
2024-08-30T19:19:35.7306613Z remote: Compressing objects:  43% (243/565)        
2024-08-30T19:19:35.7308069Z remote: Compressing objects:  44% (249/565)        
2024-08-30T19:19:35.7308938Z remote: Compressing objects:  45% (255/565)        
2024-08-30T19:19:35.7309965Z remote: Compressing objects:  46% (260/565)        
2024-08-30T19:19:35.7311103Z remote: Compressing objects:  47% (266/565)        
2024-08-30T19:19:35.7313849Z remote: Compressing objects:  48% (272/565)        
2024-08-30T19:19:35.7317343Z remote: Compressing objects:  49% (277/565)        
2024-08-30T19:19:35.7318969Z remote: Compressing objects:  50% (283/565)        
2024-08-30T19:19:35.7320367Z remote: Compressing objects:  51% (289/565)        
2024-08-30T19:19:35.7323671Z remote: Compressing objects:  52% (294/565)        
2024-08-30T19:19:35.7327402Z remote: Compressing objects:  53% (300/565)        
2024-08-30T19:19:35.7333182Z remote: Compressing objects:  54% (306/565)        
2024-08-30T19:19:35.7343867Z remote: Compressing objects:  55% (311/565)        
2024-08-30T19:19:35.7355556Z remote: Compressing objects:  56% (317/565)        
2024-08-30T19:19:35.7456223Z remote: Compressing objects:  57% (323/565)        
2024-08-30T19:19:35.7457875Z remote: Compressing objects:  58% (328/565)        
2024-08-30T19:19:35.7459129Z remote: Compressing objects:  59% (334/565)        
2024-08-30T19:19:35.7460136Z remote: Compressing objects:  60% (339/565)        
2024-08-30T19:19:35.7461448Z remote: Compressing objects:  61% (345/565)        
2024-08-30T19:19:35.7462329Z remote: Compressing objects:  62% (351/565)        
2024-08-30T19:19:35.7463129Z remote: Compressing objects:  63% (356/565)        
2024-08-30T19:19:35.7463985Z remote: Compressing objects:  64% (362/565)        
2024-08-30T19:19:35.7464837Z remote: Compressing objects:  65% (368/565)        
2024-08-30T19:19:35.7465645Z remote: Compressing objects:  66% (373/565)        
2024-08-30T19:19:35.7466522Z remote: Compressing objects:  67% (379/565)        
2024-08-30T19:19:35.7467356Z remote: Compressing objects:  68% (385/565)        
2024-08-30T19:19:35.7472276Z remote: Compressing objects:  69% (390/565)        
2024-08-30T19:19:35.7484889Z remote: Compressing objects:  70% (396/565)        
2024-08-30T19:19:35.7492414Z remote: Compressing objects:  71% (402/565)        
2024-08-30T19:19:35.7496622Z remote: Compressing objects:  72% (407/565)        
2024-08-30T19:19:35.7501425Z remote: Compressing objects:  73% (413/565)        
2024-08-30T19:19:35.7503426Z remote: Compressing objects:  74% (419/565)        
2024-08-30T19:19:35.7507569Z remote: Compressing objects:  75% (424/565)        
2024-08-30T19:19:35.7511886Z remote: Compressing objects:  76% (430/565)        
2024-08-30T19:19:35.7515025Z remote: Compressing objects:  77% (436/565)        
2024-08-30T19:19:35.7518843Z remote: Compressing objects:  78% (441/565)        
2024-08-30T19:19:35.7520673Z remote: Compressing objects:  79% (447/565)        
2024-08-30T19:19:35.7524347Z remote: Compressing objects:  80% (452/565)        
2024-08-30T19:19:35.7529145Z remote: Compressing objects:  81% (458/565)        
2024-08-30T19:19:35.7533270Z remote: Compressing objects:  82% (464/565)        
2024-08-30T19:19:35.7534498Z remote: Compressing objects:  83% (469/565)        
2024-08-30T19:19:35.7535764Z remote: Compressing objects:  84% (475/565)        
2024-08-30T19:19:35.7536736Z remote: Compressing objects:  85% (481/565)        
2024-08-30T19:19:35.7537445Z remote: Compressing objects:  86% (486/565)        
2024-08-30T19:19:35.7538151Z remote: Compressing objects:  87% (492/565)        
2024-08-30T19:19:35.7538870Z remote: Compressing objects:  88% (498/565)        
2024-08-30T19:19:35.7539530Z remote: Compressing objects:  89% (503/565)        
2024-08-30T19:19:35.7540309Z remote: Compressing objects:  90% (509/565)        
2024-08-30T19:19:35.7540973Z remote: Compressing objects:  91% (515/565)        
2024-08-30T19:19:35.7541625Z remote: Compressing objects:  92% (520/565)        
2024-08-30T19:19:35.7542631Z remote: Compressing objects:  93% (526/565)        
2024-08-30T19:19:35.7543827Z remote: Compressing objects:  94% (532/565)        
2024-08-30T19:19:35.7544953Z remote: Compressing objects:  95% (537/565)        
2024-08-30T19:19:35.7546269Z remote: Compressing objects:  96% (543/565)        
2024-08-30T19:19:35.7547370Z remote: Compressing objects:  97% (549/565)        
2024-08-30T19:19:35.7548311Z remote: Compressing objects:  98% (554/565)        
2024-08-30T19:19:35.7549077Z remote: Compressing objects:  99% (560/565)        
2024-08-30T19:19:35.7549917Z remote: Compressing objects: 100% (565/565)        
2024-08-30T19:19:35.7550739Z remote: Compressing objects: 100% (565/565), done.        
2024-08-30T19:19:35.7577277Z Receiving objects:   0% (1/616)
2024-08-30T19:19:35.7579041Z Receiving objects:   1% (7/616)
2024-08-30T19:19:35.7580156Z Receiving objects:   2% (13/616)
2024-08-30T19:19:35.7581127Z Receiving objects:   3% (19/616)
2024-08-30T19:19:35.7581938Z Receiving objects:   4% (25/616)
2024-08-30T19:19:35.7582562Z Receiving objects:   5% (31/616)
2024-08-30T19:19:35.7743868Z Receiving objects:   6% (37/616)
2024-08-30T19:19:35.7746240Z Receiving objects:   7% (44/616)
2024-08-30T19:19:35.7747284Z Receiving objects:   8% (50/616)
2024-08-30T19:19:35.7749748Z Receiving objects:   9% (56/616)
2024-08-30T19:19:35.7750743Z Receiving objects:  10% (62/616)
2024-08-30T19:19:35.7751697Z Receiving objects:  11% (68/616)
2024-08-30T19:19:35.7752491Z Receiving objects:  12% (74/616)
2024-08-30T19:19:35.7754710Z Receiving objects:  13% (81/616)
2024-08-30T19:19:35.7755718Z Receiving objects:  14% (87/616)
2024-08-30T19:19:35.7756547Z Receiving objects:  15% (93/616)
2024-08-30T19:19:35.7757108Z Receiving objects:  16% (99/616)
2024-08-30T19:19:35.7758630Z Receiving objects:  17% (105/616)
2024-08-30T19:19:35.7857974Z Receiving objects:  18% (111/616)
2024-08-30T19:19:35.7859093Z Receiving objects:  19% (118/616)
2024-08-30T19:19:35.7860054Z Receiving objects:  20% (124/616)
2024-08-30T19:19:35.7861152Z Receiving objects:  21% (130/616)
2024-08-30T19:19:35.7862998Z Receiving objects:  22% (136/616)
2024-08-30T19:19:35.7864474Z Receiving objects:  23% (142/616)
2024-08-30T19:19:35.7867252Z Receiving objects:  24% (148/616)
2024-08-30T19:19:35.7868860Z Receiving objects:  25% (154/616)
2024-08-30T19:19:35.7919233Z Receiving objects:  26% (161/616)
2024-08-30T19:19:35.7920642Z Receiving objects:  27% (167/616)
2024-08-30T19:19:35.7921743Z Receiving objects:  28% (173/616)
2024-08-30T19:19:35.7922411Z Receiving objects:  29% (179/616)
2024-08-30T19:19:35.7930227Z Receiving objects:  30% (185/616)
2024-08-30T19:19:35.7933471Z Receiving objects:  31% (191/616)
2024-08-30T19:19:35.7935765Z Receiving objects:  32% (198/616)
2024-08-30T19:19:35.7936759Z Receiving objects:  33% (204/616)
2024-08-30T19:19:35.7938471Z Receiving objects:  34% (210/616)
2024-08-30T19:19:35.7941182Z Receiving objects:  35% (216/616)
2024-08-30T19:19:35.7942074Z Receiving objects:  36% (222/616)
2024-08-30T19:19:35.7943335Z Receiving objects:  37% (228/616)
2024-08-30T19:19:35.7947689Z Receiving objects:  38% (235/616)
2024-08-30T19:19:35.7949302Z Receiving objects:  39% (241/616)
2024-08-30T19:19:35.7951598Z Receiving objects:  40% (247/616)
2024-08-30T19:19:35.7952582Z Receiving objects:  41% (253/616)
2024-08-30T19:19:35.7956400Z Receiving objects:  42% (259/616)
2024-08-30T19:19:35.7959117Z Receiving objects:  43% (265/616)
2024-08-30T19:19:35.7962386Z Receiving objects:  44% (272/616)
2024-08-30T19:19:35.7965031Z Receiving objects:  45% (278/616)
2024-08-30T19:19:35.7967362Z Receiving objects:  46% (284/616)
2024-08-30T19:19:35.7968346Z Receiving objects:  47% (290/616)
2024-08-30T19:19:35.7969208Z Receiving objects:  48% (296/616)
2024-08-30T19:19:35.7971497Z Receiving objects:  49% (302/616)
2024-08-30T19:19:35.7975280Z Receiving objects:  50% (308/616)
2024-08-30T19:19:35.7976696Z Receiving objects:  51% (315/616)
2024-08-30T19:19:35.7977554Z Receiving objects:  52% (321/616)
2024-08-30T19:19:35.8945925Z Receiving objects:  53% (327/616)
2024-08-30T19:19:35.8946845Z Receiving objects:  54% (333/616)
2024-08-30T19:19:35.9031892Z Receiving objects:  55% (339/616)
2024-08-30T19:19:35.9061757Z Receiving objects:  56% (345/616)
2024-08-30T19:19:35.9090933Z Receiving objects:  57% (352/616)
2024-08-30T19:19:35.9094298Z Receiving objects:  58% (358/616)
2024-08-30T19:19:35.9095586Z Receiving objects:  59% (364/616)
2024-08-30T19:19:35.9097341Z Receiving objects:  60% (370/616)
2024-08-30T19:19:35.9098675Z Receiving objects:  61% (376/616)
2024-08-30T19:19:35.9100417Z Receiving objects:  62% (382/616)
2024-08-30T19:19:35.9101749Z Receiving objects:  63% (389/616)
2024-08-30T19:19:35.9103795Z Receiving objects:  64% (395/616)
2024-08-30T19:19:35.9104888Z Receiving objects:  65% (401/616)
2024-08-30T19:19:35.9106062Z Receiving objects:  66% (407/616)
2024-08-30T19:19:35.9107595Z Receiving objects:  67% (413/616)
2024-08-30T19:19:35.9108320Z Receiving objects:  68% (419/616)
2024-08-30T19:19:35.9112595Z Receiving objects:  69% (426/616)
2024-08-30T19:19:35.9115574Z Receiving objects:  70% (432/616)
2024-08-30T19:19:35.9116515Z Receiving objects:  71% (438/616)
2024-08-30T19:19:35.9118200Z Receiving objects:  72% (444/616)
2024-08-30T19:19:35.9119031Z Receiving objects:  73% (450/616)
2024-08-30T19:19:35.9119981Z Receiving objects:  74% (456/616)
2024-08-30T19:19:35.9123572Z Receiving objects:  75% (462/616)
2024-08-30T19:19:35.9126895Z Receiving objects:  76% (469/616)
2024-08-30T19:19:35.9129091Z Receiving objects:  77% (475/616)
2024-08-30T19:19:35.9130157Z Receiving objects:  78% (481/616)
2024-08-30T19:19:35.9132256Z Receiving objects:  79% (487/616)
2024-08-30T19:19:35.9134912Z Receiving objects:  80% (493/616)
2024-08-30T19:19:35.9138330Z Receiving objects:  81% (499/616)
2024-08-30T19:19:35.9139496Z Receiving objects:  82% (506/616)
2024-08-30T19:19:35.9142808Z Receiving objects:  83% (512/616)
2024-08-30T19:19:35.9143855Z Receiving objects:  84% (518/616)
2024-08-30T19:19:35.9147080Z Receiving objects:  85% (524/616)
2024-08-30T19:19:35.9148744Z Receiving objects:  86% (530/616)
2024-08-30T19:19:35.9150383Z Receiving objects:  87% (536/616)
2024-08-30T19:19:35.9150972Z Receiving objects:  88% (543/616)
2024-08-30T19:19:35.9151663Z Receiving objects:  89% (549/616)
2024-08-30T19:19:35.9152258Z Receiving objects:  90% (555/616)
2024-08-30T19:19:35.9152963Z Receiving objects:  91% (561/616)
2024-08-30T19:19:35.9154073Z Receiving objects:  92% (567/616)
2024-08-30T19:19:35.9155770Z Receiving objects:  93% (573/616)
2024-08-30T19:19:35.9193391Z Receiving objects:  94% (580/616)
2024-08-30T19:19:35.9194607Z Receiving objects:  95% (586/616)
2024-08-30T19:19:35.9195284Z Receiving objects:  96% (592/616)
2024-08-30T19:19:36.0565465Z Receiving objects:  97% (598/616)
2024-08-30T19:19:36.2186447Z Receiving objects:  98% (604/616)
2024-08-30T19:19:36.3724344Z Receiving objects:  99% (610/616)
2024-08-30T19:19:36.3726125Z remote: Total 616 (delta 67), reused 270 (delta 26), pack-reused 0 (from 0)        
2024-08-30T19:19:36.3735844Z Receiving objects: 100% (616/616), 25.57 MiB | 51.13 MiB/s
2024-08-30T19:19:36.3740518Z Receiving objects: 100% (616/616), 32.42 MiB | 52.61 MiB/s, done.
2024-08-30T19:19:36.3743013Z Resolving deltas:   0% (0/67)
2024-08-30T19:19:36.3744808Z Resolving deltas:   1% (1/67)
2024-08-30T19:19:36.3745426Z Resolving deltas:   2% (2/67)
2024-08-30T19:19:36.3746058Z Resolving deltas:   4% (3/67)
2024-08-30T19:19:36.3746787Z Resolving deltas:   5% (4/67)
2024-08-30T19:19:36.3747409Z Resolving deltas:   7% (5/67)
2024-08-30T19:19:36.3748005Z Resolving deltas:   8% (6/67)
2024-08-30T19:19:36.3748580Z Resolving deltas:  10% (7/67)
2024-08-30T19:19:36.3749240Z Resolving deltas:  11% (8/67)
2024-08-30T19:19:36.3749851Z Resolving deltas:  13% (9/67)
2024-08-30T19:19:36.3750556Z Resolving deltas:  14% (10/67)
2024-08-30T19:19:36.3751144Z Resolving deltas:  16% (11/67)
2024-08-30T19:19:36.3751821Z Resolving deltas:  17% (12/67)
2024-08-30T19:19:36.3752407Z Resolving deltas:  19% (13/67)
2024-08-30T19:19:36.3752964Z Resolving deltas:  20% (14/67)
2024-08-30T19:19:36.3753585Z Resolving deltas:  22% (15/67)
2024-08-30T19:19:36.3754189Z Resolving deltas:  23% (16/67)
2024-08-30T19:19:36.3754778Z Resolving deltas:  25% (17/67)
2024-08-30T19:19:36.3755233Z Resolving deltas:  26% (18/67)
2024-08-30T19:19:36.3755700Z Resolving deltas:  28% (19/67)
2024-08-30T19:19:36.3756303Z Resolving deltas:  29% (20/67)
2024-08-30T19:19:36.3756994Z Resolving deltas:  31% (21/67)
2024-08-30T19:19:36.3757438Z Resolving deltas:  32% (22/67)
2024-08-30T19:19:36.3757862Z Resolving deltas:  34% (23/67)
2024-08-30T19:19:36.3758213Z Resolving deltas:  35% (24/67)
2024-08-30T19:19:36.3758638Z Resolving deltas:  37% (25/67)
2024-08-30T19:19:36.3759032Z Resolving deltas:  38% (26/67)
2024-08-30T19:19:36.3759482Z Resolving deltas:  40% (27/67)
2024-08-30T19:19:36.3760687Z Resolving deltas:  41% (28/67)
2024-08-30T19:19:36.3761579Z Resolving deltas:  43% (29/67)
2024-08-30T19:19:36.3762252Z Resolving deltas:  44% (30/67)
2024-08-30T19:19:36.3762958Z Resolving deltas:  46% (31/67)
2024-08-30T19:19:36.3763366Z Resolving deltas:  47% (32/67)
2024-08-30T19:19:36.3764014Z Resolving deltas:  49% (33/67)
2024-08-30T19:19:36.3764896Z Resolving deltas:  50% (34/67)
2024-08-30T19:19:36.3765704Z Resolving deltas:  52% (35/67)
2024-08-30T19:19:36.3766374Z Resolving deltas:  53% (36/67)
2024-08-30T19:19:36.3767042Z Resolving deltas:  55% (37/67)
2024-08-30T19:19:36.3767438Z Resolving deltas:  56% (38/67)
2024-08-30T19:19:36.3767797Z Resolving deltas:  58% (39/67)
2024-08-30T19:19:36.3768238Z Resolving deltas:  59% (40/67)
2024-08-30T19:19:36.3768622Z Resolving deltas:  61% (41/67)
2024-08-30T19:19:36.3769007Z Resolving deltas:  62% (42/67)
2024-08-30T19:19:36.3769445Z Resolving deltas:  64% (43/67)
2024-08-30T19:19:36.3769829Z Resolving deltas:  65% (44/67)
2024-08-30T19:19:36.3770183Z Resolving deltas:  67% (45/67)
2024-08-30T19:19:36.3770609Z Resolving deltas:  68% (46/67)
2024-08-30T19:19:36.3771232Z Resolving deltas:  70% (47/67)
2024-08-30T19:19:36.3771987Z Resolving deltas:  71% (48/67)
2024-08-30T19:19:36.3772693Z Resolving deltas:  73% (49/67)
2024-08-30T19:19:36.3773112Z Resolving deltas:  74% (50/67)
2024-08-30T19:19:36.3773485Z Resolving deltas:  76% (51/67)
2024-08-30T19:19:36.3773916Z Resolving deltas:  77% (52/67)
2024-08-30T19:19:36.3774309Z Resolving deltas:  79% (53/67)
2024-08-30T19:19:36.3774678Z Resolving deltas:  80% (54/67)
2024-08-30T19:19:36.3775104Z Resolving deltas:  82% (55/67)
2024-08-30T19:19:36.3775487Z Resolving deltas:  83% (56/67)
2024-08-30T19:19:36.3775853Z Resolving deltas:  85% (57/67)
2024-08-30T19:19:36.3776260Z Resolving deltas:  86% (58/67)
2024-08-30T19:19:36.3776897Z Resolving deltas:  88% (59/67)
2024-08-30T19:19:36.3777253Z Resolving deltas:  89% (60/67)
2024-08-30T19:19:36.3777673Z Resolving deltas:  91% (61/67)
2024-08-30T19:19:36.3778083Z Resolving deltas:  92% (62/67)
2024-08-30T19:19:36.3778429Z Resolving deltas:  94% (63/67)
2024-08-30T19:19:36.3778837Z Resolving deltas:  95% (64/67)
2024-08-30T19:19:36.3779313Z Resolving deltas:  97% (65/67)
2024-08-30T19:19:36.3838413Z Resolving deltas:  98% (66/67)
2024-08-30T19:19:36.3839155Z Resolving deltas: 100% (67/67)
2024-08-30T19:19:36.3839845Z Resolving deltas: 100% (67/67), done.
2024-08-30T19:19:36.4246773Z From https://github.com/Filomilo/RedoCode_website
2024-08-30T19:19:36.4248227Z  * [new ref]         d32c359ff46e91e0c9067b9af7d6089f0e22c51e -> origin/main
2024-08-30T19:19:36.4272157Z ##[endgroup]
2024-08-30T19:19:36.4272806Z ##[group]Determining the checkout info
2024-08-30T19:19:36.4274265Z ##[endgroup]
2024-08-30T19:19:36.4274841Z ##[group]Checking out the ref
2024-08-30T19:19:36.4278812Z [command]/usr/bin/git checkout --progress --force -B main refs/remotes/origin/main
2024-08-30T19:19:36.6119687Z Switched to a new branch 'main'
2024-08-30T19:19:36.6121784Z branch 'main' set up to track 'origin/main'.
2024-08-30T19:19:36.6142310Z ##[endgroup]
2024-08-30T19:19:36.6182135Z [command]/usr/bin/git log -1 --format='%H'
2024-08-30T19:19:36.6204360Z 'd32c359ff46e91e0c9067b9af7d6089f0e22c51e'
2024-08-30T19:19:36.6526868Z ##[group]Run sudo apt-get update
2024-08-30T19:19:36.6527444Z [36;1msudo apt-get update[0m
2024-08-30T19:19:36.6527946Z [36;1msudo apt-get install ca-certificates curl[0m
2024-08-30T19:19:36.6528531Z [36;1msudo install -m 0755 -d /etc/apt/keyrings[0m
2024-08-30T19:19:36.6529268Z [36;1msudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc[0m
2024-08-30T19:19:36.6530044Z [36;1msudo chmod a+r /etc/apt/keyrings/docker.asc[0m
2024-08-30T19:19:36.6530532Z [36;1mecho \[0m
2024-08-30T19:19:36.6531618Z [36;1m  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \[0m
2024-08-30T19:19:36.6532578Z [36;1m  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \[0m
2024-08-30T19:19:36.6533330Z [36;1m  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null[0m
2024-08-30T19:19:36.6533922Z [36;1msudo apt-get update[0m
2024-08-30T19:19:36.6534757Z [36;1msudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y[0m
2024-08-30T19:19:36.6648515Z shell: /usr/bin/bash -e {0}
2024-08-30T19:19:36.6649060Z ##[endgroup]
2024-08-30T19:19:36.7782162Z Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [142 B]
2024-08-30T19:19:36.8102509Z Hit:6 https://packages.microsoft.com/repos/azure-cli focal InRelease
2024-08-30T19:19:36.8103918Z Hit:2 http://azure.archive.ubuntu.com/ubuntu focal InRelease
2024-08-30T19:19:36.8105355Z Get:7 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease [3632 B]
2024-08-30T19:19:36.8219799Z Get:3 http://azure.archive.ubuntu.com/ubuntu focal-updates InRelease [128 kB]
2024-08-30T19:19:36.8316767Z Hit:4 http://azure.archive.ubuntu.com/ubuntu focal-backports InRelease
2024-08-30T19:19:36.8340372Z Hit:5 http://azure.archive.ubuntu.com/ubuntu focal-security InRelease
2024-08-30T19:19:37.0954904Z Get:8 https://packages.microsoft.com/ubuntu/20.04/prod focal/main amd64 Packages [312 kB]
2024-08-30T19:19:37.1128210Z Get:9 https://packages.microsoft.com/ubuntu/20.04/prod focal/main arm64 Packages [64.8 kB]
2024-08-30T19:19:37.1183552Z Get:10 https://packages.microsoft.com/ubuntu/20.04/prod focal/main all Packages [2942 B]
2024-08-30T19:19:37.1843134Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages [3533 kB]
2024-08-30T19:19:37.2128121Z Get:12 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 c-n-f Metadata [17.7 kB]
2024-08-30T19:19:37.2154626Z Get:13 http://azure.archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages [1220 kB]
2024-08-30T19:19:37.2296571Z Get:14 http://azure.archive.ubuntu.com/ubuntu focal-updates/universe amd64 c-n-f Metadata [27.8 kB]
2024-08-30T19:19:42.2341468Z Fetched 5310 kB in 1s (4985 kB/s)
2024-08-30T19:19:43.2745889Z Reading package lists...
2024-08-30T19:19:43.3481443Z Reading package lists...
2024-08-30T19:19:43.5656755Z Building dependency tree...
2024-08-30T19:19:43.5670234Z Reading state information...
2024-08-30T19:19:43.7695461Z ca-certificates is already the newest version (20230311ubuntu0.20.04.1).
2024-08-30T19:19:43.7696771Z curl is already the newest version (7.68.0-1ubuntu2.23).
2024-08-30T19:19:43.7699754Z 0 upgraded, 0 newly installed, 0 to remove and 10 not upgraded.
2024-08-30T19:19:43.9474968Z Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [142 B]
2024-08-30T19:19:43.9673887Z Get:6 https://download.docker.com/linux/ubuntu focal InRelease [57.7 kB]
2024-08-30T19:19:43.9790857Z Hit:2 http://azure.archive.ubuntu.com/ubuntu focal InRelease
2024-08-30T19:19:43.9826368Z Hit:3 http://azure.archive.ubuntu.com/ubuntu focal-updates InRelease
2024-08-30T19:19:43.9845306Z Hit:4 http://azure.archive.ubuntu.com/ubuntu focal-backports InRelease
2024-08-30T19:19:43.9866554Z Hit:5 http://azure.archive.ubuntu.com/ubuntu focal-security InRelease
2024-08-30T19:19:43.9888341Z Hit:7 https://packages.microsoft.com/repos/azure-cli focal InRelease
2024-08-30T19:19:43.9927532Z Hit:8 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease
2024-08-30T19:19:44.0550344Z Get:9 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages [49.7 kB]
2024-08-30T19:19:44.6666978Z Fetched 107 kB in 1s (169 kB/s)
2024-08-30T19:19:45.7129144Z Reading package lists...
2024-08-30T19:19:45.7885106Z Reading package lists...
2024-08-30T19:19:46.0234395Z Building dependency tree...
2024-08-30T19:19:46.0248653Z Reading state information...
2024-08-30T19:19:46.2423831Z Suggested packages:
2024-08-30T19:19:46.2424906Z   aufs-tools cgroupfs-mount | cgroup-lite
2024-08-30T19:19:46.2425763Z Recommended packages:
2024-08-30T19:19:46.2426463Z   docker-ce-rootless-extras
2024-08-30T19:19:46.2679023Z The following NEW packages will be installed:
2024-08-30T19:19:46.2687477Z   docker-buildx-plugin docker-compose-plugin
2024-08-30T19:19:46.2691584Z The following packages will be upgraded:
2024-08-30T19:19:46.2699589Z   containerd.io docker-ce docker-ce-cli
2024-08-30T19:19:46.3297221Z 3 upgraded, 2 newly installed, 0 to remove and 10 not upgraded.
2024-08-30T19:19:46.3298419Z Need to get 112 MB of archives.
2024-08-30T19:19:46.3299616Z After this operation, 144 MB of additional disk space will be used.
2024-08-30T19:19:46.3301058Z Get:1 https://download.docker.com/linux/ubuntu focal/stable amd64 containerd.io amd64 1.7.21-1 [29.5 MB]
2024-08-30T19:19:46.6047147Z Get:2 https://download.docker.com/linux/ubuntu focal/stable amd64 docker-buildx-plugin amd64 0.16.2-1~ubuntu.20.04~focal [29.9 MB]
2024-08-30T19:19:46.8791544Z Get:3 https://download.docker.com/linux/ubuntu focal/stable amd64 docker-ce-cli amd64 5:27.2.0-1~ubuntu.20.04~focal [14.8 MB]
2024-08-30T19:19:47.0152709Z Get:4 https://download.docker.com/linux/ubuntu focal/stable amd64 docker-ce amd64 5:27.2.0-1~ubuntu.20.04~focal [25.2 MB]
2024-08-30T19:19:47.2445571Z Get:5 https://download.docker.com/linux/ubuntu focal/stable amd64 docker-compose-plugin amd64 2.29.2-1~ubuntu.20.04~focal [12.5 MB]
2024-08-30T19:19:47.7108160Z Fetched 112 MB in 1s (103 MB/s)
2024-08-30T19:19:47.7716250Z (Reading database ... 
2024-08-30T19:19:47.7717252Z (Reading database ... 5%
2024-08-30T19:19:47.7717905Z (Reading database ... 10%
2024-08-30T19:19:47.7718378Z (Reading database ... 15%
2024-08-30T19:19:47.7718968Z (Reading database ... 20%
2024-08-30T19:19:47.7719745Z (Reading database ... 25%
2024-08-30T19:19:47.7720820Z (Reading database ... 30%
2024-08-30T19:19:47.7724166Z (Reading database ... 35%
2024-08-30T19:19:47.7724810Z (Reading database ... 40%
2024-08-30T19:19:47.7725528Z (Reading database ... 45%
2024-08-30T19:19:47.7726009Z (Reading database ... 50%
2024-08-30T19:19:47.8032465Z (Reading database ... 55%
2024-08-30T19:19:47.8357665Z (Reading database ... 60%
2024-08-30T19:19:47.8603520Z (Reading database ... 65%
2024-08-30T19:19:47.9302954Z (Reading database ... 70%
2024-08-30T19:19:47.9776707Z (Reading database ... 75%
2024-08-30T19:19:48.0350270Z (Reading database ... 80%
2024-08-30T19:19:48.1013652Z (Reading database ... 85%
2024-08-30T19:19:48.1456160Z (Reading database ... 90%
2024-08-30T19:19:48.2152716Z (Reading database ... 95%
2024-08-30T19:19:48.2153577Z (Reading database ... 100%
2024-08-30T19:19:48.2154484Z (Reading database ... 271096 files and directories currently installed.)
2024-08-30T19:19:48.2214197Z Preparing to unpack .../containerd.io_1.7.21-1_amd64.deb ...
2024-08-30T19:19:48.2304740Z Unpacking containerd.io (1.7.21-1) over (1.7.20-1) ...
2024-08-30T19:19:50.4490118Z Selecting previously unselected package docker-buildx-plugin.
2024-08-30T19:19:50.4656974Z Preparing to unpack .../docker-buildx-plugin_0.16.2-1~ubuntu.20.04~focal_amd64.deb ...
2024-08-30T19:19:50.4667378Z Unpacking docker-buildx-plugin (0.16.2-1~ubuntu.20.04~focal) ...
2024-08-30T19:19:51.8956426Z Preparing to unpack .../docker-ce-cli_5%3a27.2.0-1~ubuntu.20.04~focal_amd64.deb ...
2024-08-30T19:19:51.8987607Z Unpacking docker-ce-cli (5:27.2.0-1~ubuntu.20.04~focal) over (5:26.1.3-1~ubuntu.20.04~focal) ...
2024-08-30T19:19:52.6254179Z Preparing to unpack .../docker-ce_5%3a27.2.0-1~ubuntu.20.04~focal_amd64.deb ...
2024-08-30T19:19:52.6424976Z Unpacking docker-ce (5:27.2.0-1~ubuntu.20.04~focal) over (5:26.1.3-1~ubuntu.20.04~focal) ...
2024-08-30T19:19:54.6000291Z Selecting previously unselected package docker-compose-plugin.
2024-08-30T19:19:54.6165603Z Preparing to unpack .../docker-compose-plugin_2.29.2-1~ubuntu.20.04~focal_amd64.deb ...
2024-08-30T19:19:54.6175882Z Unpacking docker-compose-plugin (2.29.2-1~ubuntu.20.04~focal) ...
2024-08-30T19:19:55.5913254Z Setting up docker-buildx-plugin (0.16.2-1~ubuntu.20.04~focal) ...
2024-08-30T19:19:55.5946799Z Setting up containerd.io (1.7.21-1) ...
2024-08-30T19:19:56.0004923Z Setting up docker-compose-plugin (2.29.2-1~ubuntu.20.04~focal) ...
2024-08-30T19:19:56.0038575Z Setting up docker-ce-cli (5:27.2.0-1~ubuntu.20.04~focal) ...
2024-08-30T19:19:56.0065889Z Setting up docker-ce (5:27.2.0-1~ubuntu.20.04~focal) ...
2024-08-30T19:19:57.5169101Z Processing triggers for man-db (2.9.1-1) ...
2024-08-30T19:20:01.6511420Z Processing triggers for systemd (245.4-4ubuntu3.23) ...
2024-08-30T19:20:03.4615152Z ##[group]Run docker compose up -d
2024-08-30T19:20:03.4615702Z [36;1mdocker compose up -d[0m
2024-08-30T19:20:03.4616081Z [36;1mdocker ps[0m
2024-08-30T19:20:03.4670966Z shell: /usr/bin/bash -e {0}
2024-08-30T19:20:03.4671378Z ##[endgroup]
2024-08-30T19:20:03.5392224Z time="2024-08-30T19:20:03Z" level=warning msg="/home/runner/work/RedoCode_website/RedoCode_website/ProjectSource/docker-compose.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion"
2024-08-30T19:20:03.5446265Z  db Pulling 
2024-08-30T19:20:04.0863708Z  e4fff0779e6d Pulling fs layer 
2024-08-30T19:20:04.0864756Z  3dd23fa89c28 Pulling fs layer 
2024-08-30T19:20:04.0865520Z  9110f5284332 Pulling fs layer 
2024-08-30T19:20:04.0866170Z  b2a5b191a941 Pulling fs layer 
2024-08-30T19:20:04.0866944Z  f0baaf1c42c6 Pulling fs layer 
2024-08-30T19:20:04.0867497Z  3c42bd6bf488 Pulling fs layer 
2024-08-30T19:20:04.0867918Z  cb55f9f5ebf8 Pulling fs layer 
2024-08-30T19:20:04.0868747Z  6eeec50ef8e1 Pulling fs layer 
2024-08-30T19:20:04.0869219Z  ba3d1f8aa002 Pulling fs layer 
2024-08-30T19:20:04.0869765Z  199cdf05dfec Pulling fs layer 
2024-08-30T19:20:04.0870178Z  438d147df750 Pulling fs layer 
2024-08-30T19:20:04.0870665Z  a2e706f2e593 Pulling fs layer 
2024-08-30T19:20:04.0871085Z  2505d0b60422 Pulling fs layer 
2024-08-30T19:20:04.0871566Z  f0baaf1c42c6 Waiting 
2024-08-30T19:20:04.0871983Z  133de8acf4aa Pulling fs layer 
2024-08-30T19:20:04.0872453Z  3c42bd6bf488 Waiting 
2024-08-30T19:20:04.0872874Z  cb55f9f5ebf8 Waiting 
2024-08-30T19:20:04.0873241Z  6eeec50ef8e1 Waiting 
2024-08-30T19:20:04.0874020Z  ba3d1f8aa002 Waiting 
2024-08-30T19:20:04.0874359Z  a2e706f2e593 Waiting 
2024-08-30T19:20:04.0874758Z  199cdf05dfec Waiting 
2024-08-30T19:20:04.0875139Z  2505d0b60422 Waiting 
2024-08-30T19:20:04.0875563Z  438d147df750 Waiting 
2024-08-30T19:20:04.0875888Z  133de8acf4aa Waiting 
2024-08-30T19:20:04.0876347Z  b2a5b191a941 Waiting 
2024-08-30T19:20:04.1987406Z  9110f5284332 Downloading [>                                                  ]  45.72kB/4.534MB
2024-08-30T19:20:04.2104845Z  3dd23fa89c28 Downloading [==============================>                    ]     719B/1.168kB
2024-08-30T19:20:04.2109068Z  3dd23fa89c28 Downloading [==================================================>]  1.168kB/1.168kB
2024-08-30T19:20:04.2113959Z  3dd23fa89c28 Verifying Checksum 
2024-08-30T19:20:04.2115111Z  3dd23fa89c28 Download complete 
2024-08-30T19:20:04.2308215Z  9110f5284332 Verifying Checksum 
2024-08-30T19:20:04.2309088Z  9110f5284332 Download complete 
2024-08-30T19:20:04.2523730Z  e4fff0779e6d Downloading [>                                                  ]  293.1kB/29.13MB
2024-08-30T19:20:04.3295049Z  b2a5b191a941 Downloading [>                                                  ]  15.78kB/1.447MB
2024-08-30T19:20:04.3406113Z  b2a5b191a941 Download complete 
2024-08-30T19:20:04.3626265Z  e4fff0779e6d Downloading [=============>                                     ]  7.699MB/29.13MB
2024-08-30T19:20:04.3633951Z  f0baaf1c42c6 Downloading [>                                                  ]  81.54kB/8.066MB
2024-08-30T19:20:04.4564197Z  3c42bd6bf488 Downloading [>                                                  ]  13.04kB/1.196MB
2024-08-30T19:20:04.4660228Z  e4fff0779e6d Downloading [===============================>                   ]  18.11MB/29.13MB
2024-08-30T19:20:04.4694627Z  3c42bd6bf488 Download complete 
2024-08-30T19:20:04.4735672Z  f0baaf1c42c6 Downloading [==============================================>    ]  7.572MB/8.066MB
2024-08-30T19:20:04.4783061Z  f0baaf1c42c6 Downloading [==================================================>]  8.066MB/8.066MB
2024-08-30T19:20:04.4787790Z  f0baaf1c42c6 Verifying Checksum 
2024-08-30T19:20:04.4791836Z  f0baaf1c42c6 Download complete 
2024-08-30T19:20:04.5394561Z  e4fff0779e6d Verifying Checksum 
2024-08-30T19:20:04.5395795Z  e4fff0779e6d Download complete 
2024-08-30T19:20:04.5792260Z  e4fff0779e6d Extracting [>                                                  ]  294.9kB/29.13MB
2024-08-30T19:20:04.5931836Z  cb55f9f5ebf8 Downloading [==================================================>]     116B/116B
2024-08-30T19:20:04.5933071Z  cb55f9f5ebf8 Verifying Checksum 
2024-08-30T19:20:04.5933554Z  cb55f9f5ebf8 Download complete 
2024-08-30T19:20:04.5999524Z  6eeec50ef8e1 Downloading [===========>                                       ]     719B/3.14kB
2024-08-30T19:20:04.6000912Z  6eeec50ef8e1 Downloading [==================================================>]   3.14kB/3.14kB
2024-08-30T19:20:04.6002122Z  6eeec50ef8e1 Verifying Checksum 
2024-08-30T19:20:04.6002872Z  6eeec50ef8e1 Download complete 
2024-08-30T19:20:04.6700849Z  ba3d1f8aa002 Downloading [>                                                  ]  540.7kB/109.1MB
2024-08-30T19:20:04.6815986Z  e4fff0779e6d Extracting [=========>                                         ]  5.603MB/29.13MB
2024-08-30T19:20:04.7473049Z  199cdf05dfec Downloading [===>                                               ]     719B/9.917kB
2024-08-30T19:20:04.7474918Z  199cdf05dfec Downloading [==================================================>]  9.917kB/9.917kB
2024-08-30T19:20:04.7476341Z  199cdf05dfec Verifying Checksum 
2024-08-30T19:20:04.7477501Z  199cdf05dfec Download complete 
2024-08-30T19:20:04.7544150Z  438d147df750 Downloading [==================================================>]     128B/128B
2024-08-30T19:20:04.7545369Z  438d147df750 Verifying Checksum 
2024-08-30T19:20:04.7548348Z  438d147df750 Download complete 
2024-08-30T19:20:04.7801118Z  ba3d1f8aa002 Downloading [=====>                                             ]  12.83MB/109.1MB
2024-08-30T19:20:04.7946937Z  e4fff0779e6d Extracting [================>                                  ]  9.732MB/29.13MB
2024-08-30T19:20:04.8675907Z  2505d0b60422 Downloading [======>                                            ]     719B/5.417kB
2024-08-30T19:20:04.8677297Z  a2e706f2e593 Downloading [==================================================>]     168B/168B
2024-08-30T19:20:04.8678797Z  2505d0b60422 Downloading [==================================================>]  5.417kB/5.417kB
2024-08-30T19:20:04.8679839Z  2505d0b60422 Verifying Checksum 
2024-08-30T19:20:04.8680470Z  a2e706f2e593 Verifying Checksum 
2024-08-30T19:20:04.8681248Z  2505d0b60422 Download complete 
2024-08-30T19:20:04.8681949Z  a2e706f2e593 Download complete 
2024-08-30T19:20:04.8816499Z  ba3d1f8aa002 Downloading [=========>                                         ]   21.4MB/109.1MB
2024-08-30T19:20:04.8956753Z  e4fff0779e6d Extracting [=======================>                           ]  13.57MB/29.13MB
2024-08-30T19:20:04.9813513Z  ba3d1f8aa002 Downloading [==============>                                    ]   32.1MB/109.1MB
2024-08-30T19:20:04.9898033Z  133de8acf4aa Downloading [==================================================>]     184B/184B
2024-08-30T19:20:04.9899063Z  133de8acf4aa Verifying Checksum 
2024-08-30T19:20:04.9956466Z  133de8acf4aa Download complete 
2024-08-30T19:20:04.9957504Z  e4fff0779e6d Extracting [====================================>              ]  21.23MB/29.13MB
2024-08-30T19:20:05.1056816Z  ba3d1f8aa002 Downloading [=================>                                 ]  38.55MB/109.1MB
2024-08-30T19:20:05.1738777Z  e4fff0779e6d Extracting [==========================================>        ]  24.77MB/29.13MB
2024-08-30T19:20:05.2129539Z  ba3d1f8aa002 Downloading [====================>                              ]  45.51MB/109.1MB
2024-08-30T19:20:05.2864431Z  e4fff0779e6d Extracting [===============================================>   ]  27.72MB/29.13MB
2024-08-30T19:20:05.3166330Z  ba3d1f8aa002 Downloading [=========================>                         ]  54.64MB/109.1MB
2024-08-30T19:20:05.4172087Z  ba3d1f8aa002 Downloading [==============================>                    ]  66.96MB/109.1MB
2024-08-30T19:20:05.5173487Z  ba3d1f8aa002 Downloading [===================================>               ]  77.65MB/109.1MB
2024-08-30T19:20:05.5456164Z  e4fff0779e6d Extracting [================================================>  ]  28.31MB/29.13MB
2024-08-30T19:20:05.6263747Z  ba3d1f8aa002 Downloading [=========================================>         ]  89.45MB/109.1MB
2024-08-30T19:20:05.6478221Z  e4fff0779e6d Extracting [==================================================>]  29.13MB/29.13MB
2024-08-30T19:20:05.6759493Z  e4fff0779e6d Pull complete 
2024-08-30T19:20:05.6777302Z  3dd23fa89c28 Extracting [==================================================>]  1.168kB/1.168kB
2024-08-30T19:20:05.6782722Z  3dd23fa89c28 Extracting [==================================================>]  1.168kB/1.168kB
2024-08-30T19:20:05.7314370Z  ba3d1f8aa002 Downloading [================================================>  ]  106.6MB/109.1MB
2024-08-30T19:20:05.7538389Z  ba3d1f8aa002 Verifying Checksum 
2024-08-30T19:20:05.7539290Z  ba3d1f8aa002 Download complete 
2024-08-30T19:20:06.0503655Z  3dd23fa89c28 Pull complete 
2024-08-30T19:20:06.0519452Z  9110f5284332 Extracting [>                                                  ]  65.54kB/4.534MB
2024-08-30T19:20:06.1305444Z  9110f5284332 Extracting [==================================================>]  4.534MB/4.534MB
2024-08-30T19:20:06.1767705Z  9110f5284332 Pull complete 
2024-08-30T19:20:06.1782609Z  b2a5b191a941 Extracting [=>                                                 ]  32.77kB/1.447MB
2024-08-30T19:20:06.2034073Z  b2a5b191a941 Extracting [==================================================>]  1.447MB/1.447MB
2024-08-30T19:20:06.2218635Z  b2a5b191a941 Pull complete 
2024-08-30T19:20:06.2235529Z  f0baaf1c42c6 Extracting [>                                                  ]   98.3kB/8.066MB
2024-08-30T19:20:06.3243203Z  f0baaf1c42c6 Extracting [========================>                          ]  3.932MB/8.066MB
2024-08-30T19:20:06.4252463Z  f0baaf1c42c6 Extracting [=====================================>             ]  5.997MB/8.066MB
2024-08-30T19:20:06.4821576Z  f0baaf1c42c6 Extracting [==================================================>]  8.066MB/8.066MB
2024-08-30T19:20:06.5030319Z  f0baaf1c42c6 Pull complete 
2024-08-30T19:20:06.5047025Z  3c42bd6bf488 Extracting [=>                                                 ]  32.77kB/1.196MB
2024-08-30T19:20:06.5451460Z  3c42bd6bf488 Extracting [==================================================>]  1.196MB/1.196MB
2024-08-30T19:20:06.5505457Z  3c42bd6bf488 Extracting [==================================================>]  1.196MB/1.196MB
2024-08-30T19:20:06.5783460Z  3c42bd6bf488 Pull complete 
2024-08-30T19:20:06.5795421Z  cb55f9f5ebf8 Extracting [==================================================>]     116B/116B
2024-08-30T19:20:06.5797458Z  cb55f9f5ebf8 Extracting [==================================================>]     116B/116B
2024-08-30T19:20:06.5895572Z  cb55f9f5ebf8 Pull complete 
2024-08-30T19:20:06.5906586Z  6eeec50ef8e1 Extracting [==================================================>]   3.14kB/3.14kB
2024-08-30T19:20:06.5909723Z  6eeec50ef8e1 Extracting [==================================================>]   3.14kB/3.14kB
2024-08-30T19:20:06.6039460Z  6eeec50ef8e1 Pull complete 
2024-08-30T19:20:06.6514513Z  ba3d1f8aa002 Extracting [>                                                  ]  557.1kB/109.1MB
2024-08-30T19:20:06.7539138Z  ba3d1f8aa002 Extracting [===>                                               ]  7.242MB/109.1MB
2024-08-30T19:20:06.8543691Z  ba3d1f8aa002 Extracting [====>                                              ]  10.58MB/109.1MB
2024-08-30T19:20:06.9613501Z  ba3d1f8aa002 Extracting [=======>                                           ]  16.15MB/109.1MB
2024-08-30T19:20:07.0666256Z  ba3d1f8aa002 Extracting [=========>                                         ]  21.73MB/109.1MB
2024-08-30T19:20:07.1693749Z  ba3d1f8aa002 Extracting [============>                                      ]  26.18MB/109.1MB
2024-08-30T19:20:07.2738256Z  ba3d1f8aa002 Extracting [================>                                  ]  35.09MB/109.1MB
2024-08-30T19:20:07.3748110Z  ba3d1f8aa002 Extracting [===================>                               ]  43.45MB/109.1MB
2024-08-30T19:20:07.4829744Z  ba3d1f8aa002 Extracting [=======================>                           ]  51.81MB/109.1MB
2024-08-30T19:20:07.5988748Z  ba3d1f8aa002 Extracting [=========================>                         ]  55.15MB/109.1MB
2024-08-30T19:20:07.6999944Z  ba3d1f8aa002 Extracting [===========================>                       ]  60.16MB/109.1MB
2024-08-30T19:20:07.8047339Z  ba3d1f8aa002 Extracting [================================>                  ]  70.75MB/109.1MB
2024-08-30T19:20:07.9081446Z  ba3d1f8aa002 Extracting [====================================>              ]   79.1MB/109.1MB
2024-08-30T19:20:08.0094801Z  ba3d1f8aa002 Extracting [========================================>          ]  88.01MB/109.1MB
2024-08-30T19:20:08.1281503Z  ba3d1f8aa002 Extracting [==========================================>        ]  93.03MB/109.1MB
2024-08-30T19:20:08.2530778Z  ba3d1f8aa002 Extracting [============================================>      ]  96.93MB/109.1MB
2024-08-30T19:20:08.3565907Z  ba3d1f8aa002 Extracting [=============================================>     ]  100.3MB/109.1MB
2024-08-30T19:20:08.4867755Z  ba3d1f8aa002 Extracting [===============================================>   ]  103.6MB/109.1MB
2024-08-30T19:20:08.5939795Z  ba3d1f8aa002 Extracting [================================================>  ]  105.3MB/109.1MB
2024-08-30T19:20:08.8548738Z  ba3d1f8aa002 Extracting [=================================================> ]  107.5MB/109.1MB
2024-08-30T19:20:08.9783268Z  ba3d1f8aa002 Extracting [==================================================>]  109.1MB/109.1MB
2024-08-30T19:20:09.0127140Z  ba3d1f8aa002 Pull complete 
2024-08-30T19:20:09.0166193Z  199cdf05dfec Extracting [==================================================>]  9.917kB/9.917kB
2024-08-30T19:20:09.0169995Z  199cdf05dfec Extracting [==================================================>]  9.917kB/9.917kB
2024-08-30T19:20:09.0524340Z  199cdf05dfec Pull complete 
2024-08-30T19:20:09.0562116Z  438d147df750 Extracting [==================================================>]     128B/128B
2024-08-30T19:20:09.0568745Z  438d147df750 Extracting [==================================================>]     128B/128B
2024-08-30T19:20:09.1254274Z  438d147df750 Pull complete 
2024-08-30T19:20:09.1640431Z  a2e706f2e593 Extracting [==================================================>]     168B/168B
2024-08-30T19:20:09.1647179Z  a2e706f2e593 Extracting [==================================================>]     168B/168B
2024-08-30T19:20:09.5593540Z  a2e706f2e593 Pull complete 
2024-08-30T19:20:09.5607788Z  2505d0b60422 Extracting [==================================================>]  5.417kB/5.417kB
2024-08-30T19:20:09.5610905Z  2505d0b60422 Extracting [==================================================>]  5.417kB/5.417kB
2024-08-30T19:20:09.5730727Z  2505d0b60422 Pull complete 
2024-08-30T19:20:09.5743958Z  133de8acf4aa Extracting [==================================================>]     184B/184B
2024-08-30T19:20:09.5746601Z  133de8acf4aa Extracting [==================================================>]     184B/184B
2024-08-30T19:20:09.5846690Z  133de8acf4aa Pull complete 
2024-08-30T19:20:09.5918605Z  db Pulled 
2024-08-30T19:20:09.8620383Z #0 building with "default" instance using docker driver
2024-08-30T19:20:09.8621068Z 
2024-08-30T19:20:09.8622109Z #1 [dockerrunner internal] load build definition from Dockerfile
2024-08-30T19:20:09.8623186Z #1 transferring dockerfile: 295B done
2024-08-30T19:20:09.8623948Z #1 DONE 0.0s
2024-08-30T19:20:09.8624301Z 
2024-08-30T19:20:09.8625275Z #2 [dockerrunner auth] library/docker:pull token for registry-1.docker.io
2024-08-30T19:20:09.8626330Z #2 DONE 0.0s
2024-08-30T19:20:09.8626677Z 
2024-08-30T19:20:09.8627432Z #3 [dockerrunner internal] load metadata for docker.io/library/docker:25.0.2-dind
2024-08-30T19:20:10.0857926Z #3 DONE 0.4s
2024-08-30T19:20:10.1878184Z 
2024-08-30T19:20:10.1882101Z #4 [dockerrunner internal] load .dockerignore
2024-08-30T19:20:10.1883466Z #4 transferring context: 2B done
2024-08-30T19:20:10.1884217Z #4 DONE 0.0s
2024-08-30T19:20:10.1884537Z 
2024-08-30T19:20:10.1884823Z #5 [dockerrunner internal] load build context
2024-08-30T19:20:10.1885681Z #5 transferring context: 480B done
2024-08-30T19:20:10.1886267Z #5 DONE 0.0s
2024-08-30T19:20:10.1886562Z 
2024-08-30T19:20:10.1887957Z #6 [dockerrunner 1/3] FROM docker.io/library/docker:25.0.2-dind@sha256:fed3a24717ab1f0ba660bf2a7a8960743f7d5facd3a2f27b6da8bcae3bcf7409
2024-08-30T19:20:10.1890127Z #6 resolve docker.io/library/docker:25.0.2-dind@sha256:fed3a24717ab1f0ba660bf2a7a8960743f7d5facd3a2f27b6da8bcae3bcf7409 done
2024-08-30T19:20:10.1891894Z #6 extracting sha256:4abcf20661432fb2d719aaf90656f55c287f8ca915dc1c92ec14ff61e67fbaf8
2024-08-30T19:20:10.2977577Z #6 extracting sha256:4abcf20661432fb2d719aaf90656f55c287f8ca915dc1c92ec14ff61e67fbaf8 0.1s done
2024-08-30T19:20:10.2979425Z #6 sha256:ff7da5c2b684680135f3c21ff5550f166c3100f3a664292c24b8d4491591157c 12.13kB / 12.13kB done
2024-08-30T19:20:10.2980926Z #6 sha256:4abcf20661432fb2d719aaf90656f55c287f8ca915dc1c92ec14ff61e67fbaf8 3.41MB / 3.41MB 0.1s done
2024-08-30T19:20:10.2982455Z #6 sha256:fd6da5881d23400be91f76c66fa158878376ddadc8092ac43cd9fc788aad141e 0B / 549B 0.1s
2024-08-30T19:20:10.2983906Z #6 sha256:294bfcbbc5589fdc4f7e32864b08eee7d41a45856af541e1b000f8038ebf3c25 3.95kB / 3.95kB done
2024-08-30T19:20:10.2984852Z #6 sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 32B / 32B 0.1s done
2024-08-30T19:20:10.2985745Z #6 sha256:fed3a24717ab1f0ba660bf2a7a8960743f7d5facd3a2f27b6da8bcae3bcf7409 4.80kB / 4.80kB done
2024-08-30T19:20:10.3032414Z #6 sha256:d339c902f7d76917f54985966131501fd11a25559762adff7275666ad750e295 0B / 2.02MB 0.1s
2024-08-30T19:20:10.3033963Z #6 sha256:b6168663bbb0ae2a9f1a9704bfa7cdacac55433b1e8631328867a17244bc666d 0B / 16.89MB 0.1s
2024-08-30T19:20:10.3035177Z #6 extracting sha256:d339c902f7d76917f54985966131501fd11a25559762adff7275666ad750e295
2024-08-30T19:20:10.4045913Z #6 sha256:fd6da5881d23400be91f76c66fa158878376ddadc8092ac43cd9fc788aad141e 549B / 549B 0.1s done
2024-08-30T19:20:10.4048021Z #6 sha256:d339c902f7d76917f54985966131501fd11a25559762adff7275666ad750e295 2.02MB / 2.02MB 0.1s done
2024-08-30T19:20:10.4051180Z #6 sha256:b6168663bbb0ae2a9f1a9704bfa7cdacac55433b1e8631328867a17244bc666d 16.89MB / 16.89MB 0.3s done
2024-08-30T19:20:10.4052811Z #6 extracting sha256:d339c902f7d76917f54985966131501fd11a25559762adff7275666ad750e295 0.1s done
2024-08-30T19:20:10.4054392Z #6 sha256:b48a81fca6fc57f6bf47f0e7c3e4c0a8be2f25cd562b4a5cef90d2165bc57701 11.53MB / 18.20MB 0.3s
2024-08-30T19:20:10.4056103Z #6 sha256:a54bc4c52de5cd0d13b71e2b1717852501f664d523bbe2a1b9d8c0ecff365624 10.49MB / 17.20MB 0.3s
2024-08-30T19:20:10.4057520Z #6 sha256:c7f4b43f6a86af4e78ac5674307f9453e05cb7095dd1f303f67a1c01f988c5e1 0B / 543B 0.3s
2024-08-30T19:20:10.5185036Z #6 sha256:b48a81fca6fc57f6bf47f0e7c3e4c0a8be2f25cd562b4a5cef90d2165bc57701 18.20MB / 18.20MB 0.4s done
2024-08-30T19:20:10.5186856Z #6 sha256:a54bc4c52de5cd0d13b71e2b1717852501f664d523bbe2a1b9d8c0ecff365624 17.20MB / 17.20MB 0.4s done
2024-08-30T19:20:10.5188337Z #6 sha256:c7f4b43f6a86af4e78ac5674307f9453e05cb7095dd1f303f67a1c01f988c5e1 543B / 543B 0.4s done
2024-08-30T19:20:10.5189633Z #6 extracting sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 done
2024-08-30T19:20:10.5191049Z #6 extracting sha256:fd6da5881d23400be91f76c66fa158878376ddadc8092ac43cd9fc788aad141e done
2024-08-30T19:20:10.5192246Z #6 sha256:241e19d5bb55e813177832b0c5cacbe11121425b82f9711b266abea2c793cfe3 0B / 1.02kB 0.4s
2024-08-30T19:20:10.5193637Z #6 sha256:a18d6143d160d9220d446e915dd6fead256d9f28608917d182644f3c6474e100 0B / 116B 0.4s
2024-08-30T19:20:10.5194859Z #6 sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 0B / 7.07MB 0.4s
2024-08-30T19:20:10.5196420Z #6 extracting sha256:b6168663bbb0ae2a9f1a9704bfa7cdacac55433b1e8631328867a17244bc666d
2024-08-30T19:20:10.6189605Z #6 sha256:241e19d5bb55e813177832b0c5cacbe11121425b82f9711b266abea2c793cfe3 1.02kB / 1.02kB 0.5s done
2024-08-30T19:20:10.6190950Z #6 sha256:a18d6143d160d9220d446e915dd6fead256d9f28608917d182644f3c6474e100 116B / 116B 0.4s done
2024-08-30T19:20:10.6192328Z #6 sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 4.19MB / 7.07MB 0.5s
2024-08-30T19:20:10.6193504Z #6 sha256:2b031a68dd1131ad731d6c79630b223a7d3d741d687ca26193c714bc4febd62d 0B / 83.65kB 0.5s
2024-08-30T19:20:10.6194775Z #6 sha256:8921a83f1d31a536bf78b45436d0cadd5cfdd2a56958a82c7966aa094b4e2b8a 0B / 1.30kB 0.5s
2024-08-30T19:20:10.7580908Z #6 sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 7.07MB / 7.07MB 0.5s done
2024-08-30T19:20:10.7582631Z #6 extracting sha256:b6168663bbb0ae2a9f1a9704bfa7cdacac55433b1e8631328867a17244bc666d 0.2s done
2024-08-30T19:20:10.7584383Z #6 sha256:2b031a68dd1131ad731d6c79630b223a7d3d741d687ca26193c714bc4febd62d 83.65kB / 83.65kB 0.5s done
2024-08-30T19:20:10.7586018Z #6 sha256:8921a83f1d31a536bf78b45436d0cadd5cfdd2a56958a82c7966aa094b4e2b8a 1.30kB / 1.30kB 0.5s done
2024-08-30T19:20:10.7587691Z #6 sha256:3701828773b1739bd502bb852cfc28c9b9ae88d96b78697f2d536a63cc29a91f 1.51kB / 1.51kB 0.6s done
2024-08-30T19:20:10.7589360Z #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 5.24MB / 55.65MB 0.6s
2024-08-30T19:20:10.7590945Z #6 sha256:f810b3a3d2303285e785b87ed3a8d2bc904f9bb603e7668b03ef9d6024f1e758 3.25kB / 3.25kB 0.6s done
2024-08-30T19:20:10.7592507Z #6 extracting sha256:a54bc4c52de5cd0d13b71e2b1717852501f664d523bbe2a1b9d8c0ecff365624
2024-08-30T19:20:10.8585545Z #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 22.02MB / 55.65MB 0.7s
2024-08-30T19:20:10.9610433Z #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 35.65MB / 55.65MB 0.8s
2024-08-30T19:20:11.1054990Z #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 47.19MB / 55.65MB 1.0s
2024-08-30T19:20:11.1056247Z #6 extracting sha256:a54bc4c52de5cd0d13b71e2b1717852501f664d523bbe2a1b9d8c0ecff365624 0.3s done
2024-08-30T19:20:11.2415456Z #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 54.53MB / 55.65MB 1.1s
2024-08-30T19:20:11.2416998Z #6 extracting sha256:b48a81fca6fc57f6bf47f0e7c3e4c0a8be2f25cd562b4a5cef90d2165bc57701 0.1s
2024-08-30T19:20:11.3415516Z #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 55.65MB / 55.65MB 1.1s done
2024-08-30T19:20:11.4868931Z #6 extracting sha256:b48a81fca6fc57f6bf47f0e7c3e4c0a8be2f25cd562b4a5cef90d2165bc57701 0.3s done
2024-08-30T19:20:11.4872636Z #6 extracting sha256:c7f4b43f6a86af4e78ac5674307f9453e05cb7095dd1f303f67a1c01f988c5e1
2024-08-30T19:20:11.6262029Z #6 extracting sha256:c7f4b43f6a86af4e78ac5674307f9453e05cb7095dd1f303f67a1c01f988c5e1 done
2024-08-30T19:20:11.6264249Z #6 extracting sha256:241e19d5bb55e813177832b0c5cacbe11121425b82f9711b266abea2c793cfe3 done
2024-08-30T19:20:11.6265168Z #6 extracting sha256:a18d6143d160d9220d446e915dd6fead256d9f28608917d182644f3c6474e100 done
2024-08-30T19:20:11.6266039Z #6 extracting sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 0.1s
2024-08-30T19:20:11.7409217Z #6 extracting sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 0.2s done
2024-08-30T19:20:11.7411211Z #6 extracting sha256:2b031a68dd1131ad731d6c79630b223a7d3d741d687ca26193c714bc4febd62d
2024-08-30T19:20:11.8940269Z #6 extracting sha256:2b031a68dd1131ad731d6c79630b223a7d3d741d687ca26193c714bc4febd62d done
2024-08-30T19:20:11.8942169Z #6 extracting sha256:8921a83f1d31a536bf78b45436d0cadd5cfdd2a56958a82c7966aa094b4e2b8a done
2024-08-30T19:20:11.8944534Z #6 extracting sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 0.1s
2024-08-30T19:20:12.5476591Z #6 extracting sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 0.7s done
2024-08-30T19:20:12.5479855Z #6 extracting sha256:3701828773b1739bd502bb852cfc28c9b9ae88d96b78697f2d536a63cc29a91f
2024-08-30T19:20:12.7146340Z #6 extracting sha256:3701828773b1739bd502bb852cfc28c9b9ae88d96b78697f2d536a63cc29a91f done
2024-08-30T19:20:12.7149381Z #6 extracting sha256:f810b3a3d2303285e785b87ed3a8d2bc904f9bb603e7668b03ef9d6024f1e758 done
2024-08-30T19:20:12.7150712Z #6 DONE 2.6s
2024-08-30T19:20:12.8800997Z 
2024-08-30T19:20:12.8802118Z #7 [dockerrunner 2/3] COPY entrypoint.sh /usr/local/bin/
2024-08-30T19:20:12.8803051Z #7 DONE 0.0s
2024-08-30T19:20:12.8803318Z 
2024-08-30T19:20:12.8803591Z #8 [dockerrunner 3/3] RUN ls /usr/local/bin/
2024-08-30T19:20:12.9060959Z #8 0.177 containerd
2024-08-30T19:20:12.9062136Z #8 0.177 containerd-shim-runc-v2
2024-08-30T19:20:12.9062573Z #8 0.177 ctr
2024-08-30T19:20:12.9063006Z #8 0.177 dind
2024-08-30T19:20:12.9063403Z #8 0.177 docker
2024-08-30T19:20:12.9063793Z #8 0.177 docker-compose
2024-08-30T19:20:12.9064294Z #8 0.177 docker-entrypoint.sh
2024-08-30T19:20:12.9064755Z #8 0.177 docker-init
2024-08-30T19:20:12.9065148Z #8 0.177 docker-proxy
2024-08-30T19:20:12.9065494Z #8 0.177 dockerd
2024-08-30T19:20:12.9065907Z #8 0.177 dockerd-entrypoint.sh
2024-08-30T19:20:12.9066320Z #8 0.177 entrypoint.sh
2024-08-30T19:20:12.9066631Z #8 0.177 modprobe
2024-08-30T19:20:12.9066978Z #8 0.177 runc
2024-08-30T19:20:13.0312257Z #8 DONE 0.2s
2024-08-30T19:20:13.0312642Z 
2024-08-30T19:20:13.0313127Z #9 [dockerrunner] exporting to image
2024-08-30T19:20:13.0313793Z #9 exporting layers 0.1s done
2024-08-30T19:20:13.1815146Z #9 writing image sha256:92e5e36f694b1c9e3b103536aa7b9fe94c12bc0e5fb1d90719585e499be0fae3 done
2024-08-30T19:20:13.1817270Z #9 naming to docker.io/library/projectsource-dockerrunner done
2024-08-30T19:20:13.1818269Z #9 DONE 0.1s
2024-08-30T19:20:13.1818594Z 
2024-08-30T19:20:13.1819353Z #10 [dockerrunner] resolving provenance for metadata file
2024-08-30T19:20:13.1820384Z #10 DONE 0.0s
2024-08-30T19:20:13.1820669Z 
2024-08-30T19:20:13.1821090Z #11 [api internal] load build definition from Dockerfile
2024-08-30T19:20:13.1821778Z #11 transferring dockerfile: 591B done
2024-08-30T19:20:13.1822939Z #11 WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 2)
2024-08-30T19:20:13.1823988Z #11 WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 9)
2024-08-30T19:20:13.1824646Z #11 DONE 0.0s
2024-08-30T19:20:13.1824913Z 
2024-08-30T19:20:13.1825254Z #12 [api auth] library/maven:pull token for registry-1.docker.io
2024-08-30T19:20:13.3372776Z #12 DONE 0.0s
2024-08-30T19:20:13.3373365Z 
2024-08-30T19:20:13.3374354Z #13 [api auth] library/eclipse-temurin:pull token for registry-1.docker.io
2024-08-30T19:20:13.3375409Z #13 DONE 0.0s
2024-08-30T19:20:13.3375736Z 
2024-08-30T19:20:13.3376044Z #14 [api internal] load metadata for docker.io/library/maven:latest
2024-08-30T19:20:13.5564995Z #14 DONE 0.5s
2024-08-30T19:20:13.5565373Z 
2024-08-30T19:20:13.5566116Z #15 [api internal] load metadata for docker.io/library/eclipse-temurin:17-jdk-alpine
2024-08-30T19:20:13.6950620Z #15 DONE 0.5s
2024-08-30T19:20:13.6951055Z 
2024-08-30T19:20:13.6951404Z #16 [api internal] load .dockerignore
2024-08-30T19:20:13.6952189Z #16 transferring context: 34B done
2024-08-30T19:20:13.6953091Z #16 DONE 0.0s
2024-08-30T19:20:13.6953392Z 
2024-08-30T19:20:13.6953688Z #17 [api internal] load build context
2024-08-30T19:20:13.6954271Z #17 transferring context: 751.85kB 0.0s done
2024-08-30T19:20:13.6954922Z #17 DONE 0.0s
2024-08-30T19:20:13.6955185Z 
2024-08-30T19:20:13.6956325Z #18 [api build-stage 1/4] FROM docker.io/library/maven:latest@sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14
2024-08-30T19:20:13.6957963Z #18 resolve docker.io/library/maven:latest@sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14 done
2024-08-30T19:20:13.6959262Z #18 sha256:ec7dd0b9221516104f68da637bf3733fdc9b3d43d60e00d5c9f41e07381f0546 2.90kB / 2.90kB done
2024-08-30T19:20:13.6960227Z #18 sha256:c3b8e0feb0957694b9801367def14425845c1850de0eab772366283b306a8010 9.23kB / 9.23kB done
2024-08-30T19:20:13.6961237Z #18 sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14 5.26kB / 5.26kB done
2024-08-30T19:20:13.6962444Z #18 sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 0B / 30.57MB 0.1s
2024-08-30T19:20:13.6963370Z #18 sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d 0B / 19.77MB 0.1s
2024-08-30T19:20:13.6964285Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 0B / 158.59MB 0.1s
2024-08-30T19:20:13.7965992Z #18 sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 10.49MB / 30.57MB 0.2s
2024-08-30T19:20:13.7967344Z #18 sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d 6.29MB / 19.77MB 0.2s
2024-08-30T19:20:13.9954550Z #18 sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 30.57MB / 30.57MB 0.4s
2024-08-30T19:20:13.9956354Z #18 sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d 19.77MB / 19.77MB 0.4s done
2024-08-30T19:20:13.9957328Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 16.78MB / 158.59MB 0.4s
2024-08-30T19:20:14.1690713Z #18 sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 30.57MB / 30.57MB 0.4s done
2024-08-30T19:20:14.1695147Z #18 extracting sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 0.1s
2024-08-30T19:20:14.1696694Z #18 sha256:bb3fe075c198ddd7a31193d47754cdb43d384b3bcd7585284f478d8bd5fa5107 175B / 175B 0.5s done
2024-08-30T19:20:14.1698038Z #18 sha256:050e771ccdefcb1b205ba5a1a24919d9906e2d733ac9c51954e7300786806f30 0B / 9.17MB 0.5s
2024-08-30T19:20:14.1699509Z #18 sha256:ad28f0ce2ee5faf000467e3072dbaa09ec07d716c591a6871791efa036d05e9d 2.11kB / 2.11kB 0.5s done
2024-08-30T19:20:14.1700732Z #18 sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 0B / 23.12MB 0.5s
2024-08-30T19:20:14.2849740Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 26.21MB / 158.59MB 0.6s
2024-08-30T19:20:14.2851869Z #18 sha256:050e771ccdefcb1b205ba5a1a24919d9906e2d733ac9c51954e7300786806f30 7.34MB / 9.17MB 0.6s
2024-08-30T19:20:14.2853318Z #18 sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 9.44MB / 23.12MB 0.6s
2024-08-30T19:20:14.3872513Z #18 sha256:050e771ccdefcb1b205ba5a1a24919d9906e2d733ac9c51954e7300786806f30 9.17MB / 9.17MB 0.6s done
2024-08-30T19:20:14.3874501Z #18 sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 23.12MB / 23.12MB 0.7s
2024-08-30T19:20:14.3875413Z #18 sha256:3af36d13e53b0ef255380683b1edb913deef17c1982b62f31347f9cc2e69475b 851B / 851B 0.7s done
2024-08-30T19:20:14.4938724Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 35.65MB / 158.59MB 0.8s
2024-08-30T19:20:14.4940432Z #18 sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 23.12MB / 23.12MB 0.7s done
2024-08-30T19:20:14.4943690Z #18 sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 32B / 32B 0.7s done
2024-08-30T19:20:14.4946652Z #18 sha256:d9dd4afecf7af20948979e1239cc0d30ee5d37d1db4dea47cf7c549e09ac1bde 155B / 155B 0.8s done
2024-08-30T19:20:14.5946542Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 50.33MB / 158.59MB 1.0s
2024-08-30T19:20:14.6947999Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 61.25MB / 158.59MB 1.1s
2024-08-30T19:20:14.7963214Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 76.55MB / 158.59MB 1.2s
2024-08-30T19:20:14.8967854Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 87.03MB / 158.59MB 1.3s
2024-08-30T19:20:15.0969470Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 102.76MB / 158.59MB 1.5s
2024-08-30T19:20:15.1976685Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 114.29MB / 158.59MB 1.6s
2024-08-30T19:20:15.3949012Z #18 extracting sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 1.2s done
2024-08-30T19:20:15.4970543Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 128.97MB / 158.59MB 1.9s
2024-08-30T19:20:15.4975982Z #18 extracting sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d
2024-08-30T19:20:15.5968328Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 137.36MB / 158.59MB 2.0s
2024-08-30T19:20:15.8021234Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 152.04MB / 158.59MB 2.2s
2024-08-30T19:20:16.3786137Z #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 158.59MB / 158.59MB 2.6s done
2024-08-30T19:20:16.3788159Z #18 extracting sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d 0.8s done
2024-08-30T19:20:16.4801895Z #18 extracting sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031
2024-08-30T19:20:18.5911536Z #18 extracting sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 2.0s done
2024-08-30T19:20:18.8545093Z #18 extracting sha256:bb3fe075c198ddd7a31193d47754cdb43d384b3bcd7585284f478d8bd5fa5107
2024-08-30T19:20:19.0056700Z #18 extracting sha256:bb3fe075c198ddd7a31193d47754cdb43d384b3bcd7585284f478d8bd5fa5107 done
2024-08-30T19:20:19.3209746Z #18 extracting sha256:ad28f0ce2ee5faf000467e3072dbaa09ec07d716c591a6871791efa036d05e9d
2024-08-30T19:20:19.4513867Z #18 ...
2024-08-30T19:20:19.4517568Z 
2024-08-30T19:20:19.4522675Z #19 [api production-stage 1/5] FROM docker.io/library/eclipse-temurin:17-jdk-alpine@sha256:740ba0fb33e9a0264b576856ac9f7653121d96e23d35de43296ea4428f21d124
2024-08-30T19:20:19.4529726Z #19 resolve docker.io/library/eclipse-temurin:17-jdk-alpine@sha256:740ba0fb33e9a0264b576856ac9f7653121d96e23d35de43296ea4428f21d124 done
2024-08-30T19:20:19.4535820Z #19 sha256:b6508e7110ae0d56fc66f68c08fefd424efff29bfa0e34d10b31a4ff340dc8f5 1.37kB / 1.37kB done
2024-08-30T19:20:19.4540869Z #19 sha256:5ac3d50654b59a557367b6d638bf5171ae1fdb731ee5cf3cb6d291adef089390 4.58kB / 4.58kB done
2024-08-30T19:20:19.4545301Z #19 sha256:740ba0fb33e9a0264b576856ac9f7653121d96e23d35de43296ea4428f21d124 320B / 320B done
2024-08-30T19:20:19.4549050Z #19 sha256:479e64820c602a6421582ff22341d66b5c6938bee2115d203f3d03147a89505e 14.04MB / 14.04MB 1.0s done
2024-08-30T19:20:19.4552704Z #19 sha256:4e384a19a9b0cde9f53fc5c79a581f80b1606cb9b0c477b8019b1716ffe026fe 144.39MB / 144.39MB 2.6s done
2024-08-30T19:20:19.4556577Z #19 sha256:7ed71e81fa34c6c2e7902182aaf9da971d499b0e58d2dfcc2c789535bc6768e0 159B / 159B 1.0s done
2024-08-30T19:20:19.4560114Z #19 extracting sha256:479e64820c602a6421582ff22341d66b5c6938bee2115d203f3d03147a89505e 0.6s done
2024-08-30T19:20:19.4563831Z #19 sha256:7beb93379603195c1cd0e0fa2dfd4b31ab5a9580ed4dd4cc301f4ca12c31c1ff 2.11kB / 2.11kB 1.1s done
2024-08-30T19:20:19.4567558Z #19 extracting sha256:4e384a19a9b0cde9f53fc5c79a581f80b1606cb9b0c477b8019b1716ffe026fe 1.9s done
2024-08-30T19:20:19.4570945Z #19 extracting sha256:7ed71e81fa34c6c2e7902182aaf9da971d499b0e58d2dfcc2c789535bc6768e0 done
2024-08-30T19:20:19.4574335Z #19 extracting sha256:7beb93379603195c1cd0e0fa2dfd4b31ab5a9580ed4dd4cc301f4ca12c31c1ff done
2024-08-30T19:20:19.4577448Z #19 DONE 5.8s
2024-08-30T19:20:19.4579554Z 
2024-08-30T19:20:19.4582660Z #18 [api build-stage 1/4] FROM docker.io/library/maven:latest@sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14
2024-08-30T19:20:19.4590158Z #18 extracting sha256:ad28f0ce2ee5faf000467e3072dbaa09ec07d716c591a6871791efa036d05e9d done
2024-08-30T19:20:19.4591649Z #18 extracting sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 0.1s
2024-08-30T19:20:19.4592712Z #18 ...
2024-08-30T19:20:19.4593090Z 
2024-08-30T19:20:19.4593567Z #20 [api production-stage 2/5] RUN apk update
2024-08-30T19:20:20.0799504Z #20 0.663 fetch https://dl-cdn.alpinelinux.org/alpine/v3.20/main/x86_64/APKINDEX.tar.gz
2024-08-30T19:20:20.2423924Z #20 0.814 fetch https://dl-cdn.alpinelinux.org/alpine/v3.20/community/x86_64/APKINDEX.tar.gz
2024-08-30T19:20:20.4982067Z #20 1.137 v3.20.2-194-gc155d8b610b [https://dl-cdn.alpinelinux.org/alpine/v3.20/main]
2024-08-30T19:20:20.4983767Z #20 1.137 v3.20.2-193-g6407a2f28c2 [https://dl-cdn.alpinelinux.org/alpine/v3.20/community]
2024-08-30T19:20:20.4985686Z #20 1.137 OK: 24162 distinct packages available
2024-08-30T19:20:20.5983255Z #20 DONE 1.2s
2024-08-30T19:20:20.5983664Z 
2024-08-30T19:20:20.5985207Z #18 [api build-stage 1/4] FROM docker.io/library/maven:latest@sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14
2024-08-30T19:20:20.5987147Z #18 extracting sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 0.9s done
2024-08-30T19:20:20.5988111Z #18 extracting sha256:050e771ccdefcb1b205ba5a1a24919d9906e2d733ac9c51954e7300786806f30 0.1s done
2024-08-30T19:20:20.5989144Z #18 extracting sha256:3af36d13e53b0ef255380683b1edb913deef17c1982b62f31347f9cc2e69475b done
2024-08-30T19:20:20.5990429Z #18 extracting sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 done
2024-08-30T19:20:20.5991314Z #18 extracting sha256:d9dd4afecf7af20948979e1239cc0d30ee5d37d1db4dea47cf7c549e09ac1bde done
2024-08-30T19:20:20.5991937Z #18 DONE 7.0s
2024-08-30T19:20:20.5992130Z 
2024-08-30T19:20:20.5992637Z #21 [api production-stage 3/5] RUN apk upgrade
2024-08-30T19:20:20.8253518Z #21 ...
2024-08-30T19:20:20.8259538Z 
2024-08-30T19:20:20.8260661Z #22 [api build-stage 2/4] WORKDIR /backend/
2024-08-30T19:20:20.8261541Z #22 DONE 0.0s
2024-08-30T19:20:20.8261794Z 
2024-08-30T19:20:20.8262077Z #23 [api build-stage 3/4] COPY . ./
2024-08-30T19:20:20.8262878Z #23 DONE 0.1s
2024-08-30T19:20:20.9741279Z 
2024-08-30T19:20:20.9742599Z #24 [api build-stage 4/4] RUN mvn clean install -DskipTests
2024-08-30T19:20:21.3634570Z #24 ...
2024-08-30T19:20:21.3635018Z 
2024-08-30T19:20:21.3635751Z #21 [api production-stage 3/5] RUN apk upgrade
2024-08-30T19:20:21.3636938Z #21 0.638 OK: 41 MiB in 47 packages
2024-08-30T19:20:21.3638741Z #21 DONE 0.8s
2024-08-30T19:20:21.5151625Z 
2024-08-30T19:20:21.5152894Z #25 [api production-stage 4/5] RUN apk add curl
2024-08-30T19:20:22.0939522Z #25 0.731 (1/7) Installing c-ares (1.28.1-r0)
2024-08-30T19:20:22.2244550Z #25 0.778 (2/7) Installing libunistring (1.2-r0)
2024-08-30T19:20:22.2245584Z #25 0.801 (3/7) Installing libidn2 (2.3.7-r0)
2024-08-30T19:20:22.2247325Z #25 0.806 (4/7) Installing nghttp2-libs (1.62.1-r0)
2024-08-30T19:20:22.2248421Z #25 0.811 (5/7) Installing libpsl (0.21.5-r1)
2024-08-30T19:20:22.2249581Z #25 0.816 (6/7) Installing libcurl (8.9.1-r1)
2024-08-30T19:20:22.2250831Z #25 0.824 (7/7) Installing curl (8.9.1-r1)
2024-08-30T19:20:22.2251982Z #25 0.830 Executing busybox-1.36.1-r29.trigger
2024-08-30T19:20:22.2252862Z #25 0.861 OK: 44 MiB in 54 packages
2024-08-30T19:20:22.3595768Z #25 DONE 1.0s
2024-08-30T19:20:22.3596301Z 
2024-08-30T19:20:22.3597255Z #24 [api build-stage 4/4] RUN mvn clean install -DskipTests
2024-08-30T19:20:22.7511264Z #24 2.078 [INFO] Scanning for projects...
2024-08-30T19:20:23.1390131Z #24 2.315 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/3.2.2/spring-boot-starter-parent-3.2.2.pom
2024-08-30T19:20:23.3812967Z #24 2.605 Progress (1): 1.4/13 kB
2024-08-30T19:20:23.3814185Z Progress (1): 2.8/13 kB
2024-08-30T19:20:23.3815097Z Progress (1): 4.1/13 kB
2024-08-30T19:20:23.3815616Z Progress (1): 5.5/13 kB
2024-08-30T19:20:23.3816155Z Progress (1): 6.9/13 kB
2024-08-30T19:20:23.3816832Z Progress (1): 8.3/13 kB
2024-08-30T19:20:23.3817708Z Progress (1): 9.7/13 kB
2024-08-30T19:20:23.3818196Z Progress (1): 11/13 kB 
2024-08-30T19:20:23.3818793Z Progress (1): 12/13 kB
2024-08-30T19:20:23.3819317Z Progress (1): 13 kB   
2024-08-30T19:20:23.3821207Z                    
2024-08-30T19:20:23.3823931Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/3.2.2/spring-boot-starter-parent-3.2.2.pom (13 kB at 41 kB/s)
2024-08-30T19:20:23.3827307Z #24 2.651 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-dependencies/3.2.2/spring-boot-dependencies-3.2.2.pom
2024-08-30T19:20:23.3829188Z #24 2.673 Progress (1): 16/111 kB
2024-08-30T19:20:23.3830159Z Progress (1): 33/111 kB
2024-08-30T19:20:23.3831310Z Progress (1): 49/111 kB
2024-08-30T19:20:23.3832009Z Progress (1): 66/111 kB
2024-08-30T19:20:23.3832979Z Progress (1): 82/111 kB
2024-08-30T19:20:23.3833805Z Progress (1): 98/111 kB
2024-08-30T19:20:23.4788780Z Progress (1): 111 kB   
2024-08-30T19:20:23.4790296Z                     
2024-08-30T19:20:23.4792965Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-dependencies/3.2.2/spring-boot-dependencies-3.2.2.pom (111 kB at 1.8 MB/s)
2024-08-30T19:20:23.4796715Z #24 2.800 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-bom/3.24.2/assertj-bom-3.24.2.pom
2024-08-30T19:20:23.5849409Z #24 2.806 Progress (1): 3.7 kB
2024-08-30T19:20:23.5850867Z                     
2024-08-30T19:20:23.5853329Z Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-bom/3.24.2/assertj-bom-3.24.2.pom (3.7 kB at 456 kB/s)
2024-08-30T19:20:23.5856407Z #24 2.814 Downloading from central: https://repo.maven.apache.org/maven2/io/zipkin/brave/brave-bom/5.16.0/brave-bom-5.16.0.pom
2024-08-30T19:20:23.5858205Z #24 2.824 Progress (1): 12 kB
2024-08-30T19:20:23.5858989Z                    
2024-08-30T19:20:23.5860888Z Downloaded from central: https://repo.maven.apache.org/maven2/io/zipkin/brave/brave-bom/5.16.0/brave-bom-5.16.0.pom (12 kB at 1.0 MB/s)
2024-08-30T19:20:23.5863968Z #24 2.835 Downloading from central: https://repo.maven.apache.org/maven2/io/zipkin/reporter2/zipkin-reporter-bom/2.16.3/zipkin-reporter-bom-2.16.3.pom
2024-08-30T19:20:23.5868839Z #24 2.843 Progress (1): 6.9 kB
2024-08-30T19:20:23.5869514Z                     
2024-08-30T19:20:23.5872040Z Downloaded from central: https://repo.maven.apache.org/maven2/io/zipkin/reporter2/zipkin-reporter-bom/2.16.3/zipkin-reporter-bom-2.16.3.pom (6.9 kB at 626 kB/s)
2024-08-30T19:20:23.5875154Z #24 2.858 Downloading from central: https://repo.maven.apache.org/maven2/com/datastax/oss/java-driver-bom/4.17.0/java-driver-bom-4.17.0.pom
2024-08-30T19:20:23.5877241Z #24 2.867 Progress (1): 4.1 kB
2024-08-30T19:20:23.5881739Z                     
2024-08-30T19:20:23.5883569Z Downloaded from central: https://repo.maven.apache.org/maven2/com/datastax/oss/java-driver-bom/4.17.0/java-driver-bom-4.17.0.pom (4.1 kB at 377 kB/s)
2024-08-30T19:20:23.5886397Z #24 2.877 Downloading from central: https://repo.maven.apache.org/maven2/io/dropwizard/metrics/metrics-bom/4.2.23/metrics-bom-4.2.23.pom
2024-08-30T19:20:23.5888182Z #24 2.883 Progress (1): 8.2 kB
2024-08-30T19:20:23.5892204Z                     
2024-08-30T19:20:23.5894168Z Downloaded from central: https://repo.maven.apache.org/maven2/io/dropwizard/metrics/metrics-bom/4.2.23/metrics-bom-4.2.23.pom (8.2 kB at 1.0 MB/s)
2024-08-30T19:20:23.5896994Z #24 2.889 Downloading from central: https://repo.maven.apache.org/maven2/io/dropwizard/metrics/metrics-parent/4.2.23/metrics-parent-4.2.23.pom
2024-08-30T19:20:23.5932579Z #24 2.896 Progress (1): 16/21 kB
2024-08-30T19:20:23.5933366Z Progress (1): 21 kB   
2024-08-30T19:20:23.5933998Z                    
2024-08-30T19:20:23.5935930Z Downloaded from central: https://repo.maven.apache.org/maven2/io/dropwizard/metrics/metrics-parent/4.2.23/metrics-parent-4.2.23.pom (21 kB at 2.3 MB/s)
2024-08-30T19:20:23.6852450Z #24 2.912 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-bom/4.0.4/jaxb-bom-4.0.4.pom
2024-08-30T19:20:23.6854154Z #24 2.923 Progress (1): 12 kB
2024-08-30T19:20:23.6854970Z                    
2024-08-30T19:20:23.6856649Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-bom/4.0.4/jaxb-bom-4.0.4.pom (12 kB at 992 kB/s)
2024-08-30T19:20:23.6859092Z #24 2.929 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.8/project-1.0.8.pom
2024-08-30T19:20:23.6860734Z #24 2.937 Progress (1): 15 kB
2024-08-30T19:20:23.6861369Z                    
2024-08-30T19:20:23.6862838Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.8/project-1.0.8.pom (15 kB at 1.3 MB/s)
2024-08-30T19:20:23.6865646Z #24 2.951 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/groovy/groovy-bom/4.0.17/groovy-bom-4.0.17.pom
2024-08-30T19:20:23.6867099Z #24 2.961 Progress (1): 16/27 kB
2024-08-30T19:20:23.6867695Z Progress (1): 27 kB   
2024-08-30T19:20:23.6868326Z                    
2024-08-30T19:20:23.6869940Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/groovy/groovy-bom/4.0.17/groovy-bom-4.0.17.pom (27 kB at 1.9 MB/s)
2024-08-30T19:20:23.6872585Z #24 2.975 Downloading from central: https://repo.maven.apache.org/maven2/org/infinispan/infinispan-bom/14.0.21.Final/infinispan-bom-14.0.21.Final.pom
2024-08-30T19:20:23.6874252Z #24 2.981 Progress (1): 16/24 kB
2024-08-30T19:20:23.6874923Z Progress (1): 24 kB   
2024-08-30T19:20:23.6875474Z                    
2024-08-30T19:20:23.6877268Z Downloaded from central: https://repo.maven.apache.org/maven2/org/infinispan/infinispan-bom/14.0.21.Final/infinispan-bom-14.0.21.Final.pom (24 kB at 2.7 MB/s)
2024-08-30T19:20:23.6880677Z #24 2.991 Downloading from central: https://repo.maven.apache.org/maven2/org/infinispan/infinispan-build-configuration-parent/14.0.21.Final/infinispan-build-configuration-parent-14.0.21.Final.pom
2024-08-30T19:20:23.6882858Z #24 2.997 Progress (1): 16/24 kB
2024-08-30T19:20:23.6883540Z Progress (1): 24 kB   
2024-08-30T19:20:23.6884115Z                    
2024-08-30T19:20:23.6889427Z Downloaded from central: https://repo.maven.apache.org/maven2/org/infinispan/infinispan-build-configuration-parent/14.0.21.Final/infinispan-build-configuration-parent-14.0.21.Final.pom (24 kB at 2.6 MB/s)
2024-08-30T19:20:23.6891875Z #24 3.006 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/jboss-parent/39/jboss-parent-39.pom
2024-08-30T19:20:23.7868212Z #24 3.013 Progress (1): 16/68 kB
2024-08-30T19:20:23.7876127Z Progress (1): 33/68 kB
2024-08-30T19:20:23.7877014Z Progress (1): 49/68 kB
2024-08-30T19:20:23.7877592Z Progress (1): 66/68 kB
2024-08-30T19:20:23.7878259Z Progress (1): 68 kB   
2024-08-30T19:20:23.7878952Z                    
2024-08-30T19:20:23.7880684Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/jboss-parent/39/jboss-parent-39.pom (68 kB at 6.2 MB/s)
2024-08-30T19:20:23.7883160Z #24 3.033 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.15.3/jackson-bom-2.15.3.pom
2024-08-30T19:20:23.7884753Z #24 3.040 Progress (1): 16/18 kB
2024-08-30T19:20:23.7885390Z Progress (1): 18 kB   
2024-08-30T19:20:23.7885891Z                    
2024-08-30T19:20:23.7887667Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.15.3/jackson-bom-2.15.3.pom (18 kB at 1.6 MB/s)
2024-08-30T19:20:23.7890262Z #24 3.051 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.15/jackson-parent-2.15.pom
2024-08-30T19:20:23.7892061Z #24 3.059 Progress (1): 6.5 kB
2024-08-30T19:20:23.7892800Z                     
2024-08-30T19:20:23.7894613Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.15/jackson-parent-2.15.pom (6.5 kB at 725 kB/s)
2024-08-30T19:20:23.7897127Z #24 3.064 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/50/oss-parent-50.pom
2024-08-30T19:20:23.7898566Z #24 3.070 Progress (1): 16/24 kB
2024-08-30T19:20:23.7899211Z Progress (1): 24 kB   
2024-08-30T19:20:23.7899715Z                    
2024-08-30T19:20:23.7901202Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/50/oss-parent-50.pom (24 kB at 3.0 MB/s)
2024-08-30T19:20:23.7903279Z #24 3.084 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/jersey-bom/3.1.5/jersey-bom-3.1.5.pom
2024-08-30T19:20:23.7904769Z #24 3.091 Progress (1): 16/21 kB
2024-08-30T19:20:23.7905416Z Progress (1): 21 kB   
2024-08-30T19:20:23.7906003Z                    
2024-08-30T19:20:23.7908027Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/jersey-bom/3.1.5/jersey-bom-3.1.5.pom (21 kB at 2.3 MB/s)
2024-08-30T19:20:23.7910492Z #24 3.097 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/ee10/jetty-ee10-bom/12.0.5/jetty-ee10-bom-12.0.5.pom
2024-08-30T19:20:23.7912086Z #24 3.103 Progress (1): 9.2 kB
2024-08-30T19:20:23.7912760Z                     
2024-08-30T19:20:23.7914481Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/ee10/jetty-ee10-bom/12.0.5/jetty-ee10-bom-12.0.5.pom (9.2 kB at 1.5 MB/s)
2024-08-30T19:20:23.7917027Z #24 3.108 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-bom/12.0.5/jetty-bom-12.0.5.pom
2024-08-30T19:20:23.8914157Z #24 3.114 Progress (1): 14 kB
2024-08-30T19:20:23.8917809Z                    
2024-08-30T19:20:23.8919674Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-bom/12.0.5/jetty-bom-12.0.5.pom (14 kB at 2.0 MB/s)
2024-08-30T19:20:23.8922073Z #24 3.120 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.10.1/junit-bom-5.10.1.pom
2024-08-30T19:20:23.8923363Z #24 3.125 Progress (1): 5.6 kB
2024-08-30T19:20:23.8923923Z                     
2024-08-30T19:20:23.8925367Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.10.1/junit-bom-5.10.1.pom (5.6 kB at 942 kB/s)
2024-08-30T19:20:23.8927664Z #24 3.130 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-bom/1.9.22/kotlin-bom-1.9.22.pom
2024-08-30T19:20:23.8929073Z #24 3.134 Progress (1): 9.1 kB
2024-08-30T19:20:23.8930001Z                     
2024-08-30T19:20:23.8931892Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-bom/1.9.22/kotlin-bom-1.9.22.pom (9.1 kB at 1.5 MB/s)
2024-08-30T19:20:23.8940582Z #24 3.143 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlinx/kotlinx-coroutines-bom/1.7.3/kotlinx-coroutines-bom-1.7.3.pom
2024-08-30T19:20:23.8941774Z #24 3.150 Progress (1): 4.3 kB
2024-08-30T19:20:23.8942160Z                     
2024-08-30T19:20:23.8943447Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlinx/kotlinx-coroutines-bom/1.7.3/kotlinx-coroutines-bom-1.7.3.pom (4.3 kB at 477 kB/s)
2024-08-30T19:20:23.8945201Z #24 3.155 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlinx/kotlinx-serialization-bom/1.6.2/kotlinx-serialization-bom-1.6.2.pom
2024-08-30T19:20:23.8946639Z #24 3.161 Progress (1): 3.8 kB
2024-08-30T19:20:23.8947173Z                     
2024-08-30T19:20:23.8948851Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlinx/kotlinx-serialization-bom/1.6.2/kotlinx-serialization-bom-1.6.2.pom (3.8 kB at 538 kB/s)
2024-08-30T19:20:23.8950443Z #24 3.165 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-bom/2.21.1/log4j-bom-2.21.1.pom
2024-08-30T19:20:23.8951329Z #24 3.172 Progress (1): 12 kB
2024-08-30T19:20:23.8952131Z                    
2024-08-30T19:20:23.8953845Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-bom/2.21.1/log4j-bom-2.21.1.pom (12 kB at 1.6 MB/s)
2024-08-30T19:20:23.8956479Z #24 3.177 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/logging-parent/10.1.1/logging-parent-10.1.1.pom
2024-08-30T19:20:23.8957918Z #24 3.182 Progress (1): 16/39 kB
2024-08-30T19:20:23.8958557Z Progress (1): 33/39 kB
2024-08-30T19:20:23.8959325Z Progress (1): 39 kB   
2024-08-30T19:20:23.8959840Z                    
2024-08-30T19:20:23.8961591Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/logging-parent/10.1.1/logging-parent-10.1.1.pom (39 kB at 6.5 MB/s)
2024-08-30T19:20:23.8964337Z #24 3.191 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/30/apache-30.pom
2024-08-30T19:20:23.8965764Z #24 3.198 Progress (1): 16/23 kB
2024-08-30T19:20:23.8966767Z Progress (1): 23 kB   
2024-08-30T19:20:23.8967538Z                    
2024-08-30T19:20:23.8968933Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/30/apache-30.pom (23 kB at 2.6 MB/s)
2024-08-30T19:20:23.8971561Z #24 3.206 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-bom/1.12.2/micrometer-bom-1.12.2.pom
2024-08-30T19:20:23.8972793Z #24 3.213 Progress (1): 8.0 kB
2024-08-30T19:20:23.8973423Z                     
2024-08-30T19:20:23.8975013Z Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-bom/1.12.2/micrometer-bom-1.12.2.pom (8.0 kB at 1.0 MB/s)
2024-08-30T19:20:23.9969434Z #24 3.218 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-tracing-bom/1.2.2/micrometer-tracing-bom-1.2.2.pom
2024-08-30T19:20:23.9971393Z #24 3.225 Progress (1): 4.7 kB
2024-08-30T19:20:23.9972199Z                     
2024-08-30T19:20:23.9974196Z Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-tracing-bom/1.2.2/micrometer-tracing-bom-1.2.2.pom (4.7 kB at 667 kB/s)
2024-08-30T19:20:23.9977042Z #24 3.229 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/5.7.0/mockito-bom-5.7.0.pom
2024-08-30T19:20:23.9978497Z #24 3.233 Progress (1): 3.0 kB
2024-08-30T19:20:23.9979051Z                     
2024-08-30T19:20:23.9980489Z Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/5.7.0/mockito-bom-5.7.0.pom (3.0 kB at 591 kB/s)
2024-08-30T19:20:23.9982438Z #24 3.237 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-bom/4.1.105.Final/netty-bom-4.1.105.Final.pom
2024-08-30T19:20:23.9983580Z #24 3.243 Progress (1): 14 kB
2024-08-30T19:20:23.9983968Z                    
2024-08-30T19:20:23.9984948Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-bom/4.1.105.Final/netty-bom-4.1.105.Final.pom (14 kB at 2.3 MB/s)
2024-08-30T19:20:23.9986282Z #24 3.246 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/7/oss-parent-7.pom
2024-08-30T19:20:23.9987030Z #24 3.251 Progress (1): 4.8 kB
2024-08-30T19:20:23.9987422Z                     
2024-08-30T19:20:23.9988285Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/7/oss-parent-7.pom (4.8 kB at 804 kB/s)
2024-08-30T19:20:23.9989581Z #24 3.256 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp-bom/4.12.0/okhttp-bom-4.12.0.pom
2024-08-30T19:20:23.9990446Z #24 3.261 Progress (1): 3.1 kB
2024-08-30T19:20:23.9990828Z                     
2024-08-30T19:20:23.9991733Z Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp-bom/4.12.0/okhttp-bom-4.12.0.pom (3.1 kB at 436 kB/s)
2024-08-30T19:20:23.9993220Z #24 3.267 Downloading from central: https://repo.maven.apache.org/maven2/io/opentelemetry/opentelemetry-bom/1.31.0/opentelemetry-bom-1.31.0.pom
2024-08-30T19:20:23.9994107Z #24 3.275 Progress (1): 7.0 kB
2024-08-30T19:20:23.9994498Z                     
2024-08-30T19:20:23.9995448Z Downloaded from central: https://repo.maven.apache.org/maven2/io/opentelemetry/opentelemetry-bom/1.31.0/opentelemetry-bom-1.31.0.pom (7.0 kB at 872 kB/s)
2024-08-30T19:20:23.9997238Z #24 3.280 Downloading from central: https://repo.maven.apache.org/maven2/com/oracle/database/jdbc/ojdbc-bom/21.9.0.0/ojdbc-bom-21.9.0.0.pom
2024-08-30T19:20:23.9998262Z #24 3.284 Progress (1): 13 kB
2024-08-30T19:20:23.9998590Z                    
2024-08-30T19:20:23.9999576Z Downloaded from central: https://repo.maven.apache.org/maven2/com/oracle/database/jdbc/ojdbc-bom/21.9.0.0/ojdbc-bom-21.9.0.0.pom (13 kB at 2.1 MB/s)
2024-08-30T19:20:24.0001065Z #24 3.293 Downloading from central: https://repo.maven.apache.org/maven2/io/prometheus/simpleclient_bom/0.16.0/simpleclient_bom-0.16.0.pom
2024-08-30T19:20:24.0001866Z #24 3.298 Progress (1): 6.0 kB
2024-08-30T19:20:24.0002242Z                     
2024-08-30T19:20:24.0003431Z Downloaded from central: https://repo.maven.apache.org/maven2/io/prometheus/simpleclient_bom/0.16.0/simpleclient_bom-0.16.0.pom (6.0 kB at 1.0 MB/s)
2024-08-30T19:20:24.0004802Z #24 3.302 Downloading from central: https://repo.maven.apache.org/maven2/io/prometheus/parent/0.16.0/parent-0.16.0.pom
2024-08-30T19:20:24.0005514Z #24 3.307 Progress (1): 13 kB
2024-08-30T19:20:24.0005908Z                    
2024-08-30T19:20:24.0006744Z Downloaded from central: https://repo.maven.apache.org/maven2/io/prometheus/parent/0.16.0/parent-0.16.0.pom (13 kB at 1.8 MB/s)
2024-08-30T19:20:24.0007980Z #24 3.312 Downloading from central: https://repo.maven.apache.org/maven2/com/querydsl/querydsl-bom/5.0.0/querydsl-bom-5.0.0.pom
2024-08-30T19:20:24.0008816Z #24 3.317 Progress (1): 7.2 kB
2024-08-30T19:20:24.0009177Z                     
2024-08-30T19:20:24.0010019Z Downloaded from central: https://repo.maven.apache.org/maven2/com/querydsl/querydsl-bom/5.0.0/querydsl-bom-5.0.0.pom (7.2 kB at 1.2 MB/s)
2024-08-30T19:20:24.0988628Z #24 3.323 Downloading from central: https://repo.maven.apache.org/maven2/io/projectreactor/reactor-bom/2023.0.2/reactor-bom-2023.0.2.pom
2024-08-30T19:20:24.0990374Z #24 3.330 Progress (1): 4.8 kB
2024-08-30T19:20:24.0990945Z                     
2024-08-30T19:20:24.0992665Z Downloaded from central: https://repo.maven.apache.org/maven2/io/projectreactor/reactor-bom/2023.0.2/reactor-bom-2023.0.2.pom (4.8 kB at 596 kB/s)
2024-08-30T19:20:24.0995212Z #24 3.343 Downloading from central: https://repo.maven.apache.org/maven2/io/rest-assured/rest-assured-bom/5.3.2/rest-assured-bom-5.3.2.pom
2024-08-30T19:20:24.0996608Z #24 3.346 Progress (1): 4.3 kB
2024-08-30T19:20:24.0997516Z                     
2024-08-30T19:20:24.0999134Z Downloaded from central: https://repo.maven.apache.org/maven2/io/rest-assured/rest-assured-bom/5.3.2/rest-assured-bom-5.3.2.pom (4.3 kB at 711 kB/s)
2024-08-30T19:20:24.1001481Z #24 3.352 Downloading from central: https://repo.maven.apache.org/maven2/io/rsocket/rsocket-bom/1.1.3/rsocket-bom-1.1.3.pom
2024-08-30T19:20:24.1003279Z #24 3.356 Progress (1): 2.6 kB
2024-08-30T19:20:24.1003797Z                     
2024-08-30T19:20:24.1005264Z Downloaded from central: https://repo.maven.apache.org/maven2/io/rsocket/rsocket-bom/1.1.3/rsocket-bom-1.1.3.pom (2.6 kB at 439 kB/s)
2024-08-30T19:20:24.1007796Z #24 3.362 Downloading from central: https://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-bom/4.14.1/selenium-bom-4.14.1.pom
2024-08-30T19:20:24.1009220Z #24 3.366 Progress (1): 6.0 kB
2024-08-30T19:20:24.1009772Z                     
2024-08-30T19:20:24.1011677Z Downloaded from central: https://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-bom/4.14.1/selenium-bom-4.14.1.pom (6.0 kB at 1.0 MB/s)
2024-08-30T19:20:24.1014378Z #24 3.372 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/amqp/spring-amqp-bom/3.1.1/spring-amqp-bom-3.1.1.pom
2024-08-30T19:20:24.1015858Z #24 3.376 Progress (1): 3.9 kB
2024-08-30T19:20:24.1016481Z                     
2024-08-30T19:20:24.1018188Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/amqp/spring-amqp-bom/3.1.1/spring-amqp-bom-3.1.1.pom (3.9 kB at 645 kB/s)
2024-08-30T19:20:24.1020918Z #24 3.381 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/batch/spring-batch-bom/5.1.0/spring-batch-bom-5.1.0.pom
2024-08-30T19:20:24.1022511Z #24 3.386 Progress (1): 3.2 kB
2024-08-30T19:20:24.1023063Z                     
2024-08-30T19:20:24.1024780Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/batch/spring-batch-bom/5.1.0/spring-batch-bom-5.1.0.pom (3.2 kB at 540 kB/s)
2024-08-30T19:20:24.1027610Z #24 3.396 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-bom/2023.1.2/spring-data-bom-2023.1.2.pom
2024-08-30T19:20:24.1029156Z #24 3.402 Progress (1): 5.5 kB
2024-08-30T19:20:24.1029726Z                     
2024-08-30T19:20:24.1035629Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-bom/2023.1.2/spring-data-bom-2023.1.2.pom (5.5 kB at 688 kB/s)
2024-08-30T19:20:24.1038637Z #24 3.408 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-framework-bom/6.1.3/spring-framework-bom-6.1.3.pom
2024-08-30T19:20:24.1040252Z #24 3.411 Progress (1): 5.8 kB
2024-08-30T19:20:24.1040849Z                     
2024-08-30T19:20:24.1042618Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-framework-bom/6.1.3/spring-framework-bom-6.1.3.pom (5.8 kB at 829 kB/s)
2024-08-30T19:20:24.1045604Z #24 3.418 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/integration/spring-integration-bom/6.2.1/spring-integration-bom-6.2.1.pom
2024-08-30T19:20:24.2012774Z #24 3.425 Progress (1): 10 kB
2024-08-30T19:20:24.2013528Z                    
2024-08-30T19:20:24.2016020Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/integration/spring-integration-bom/6.2.1/spring-integration-bom-6.2.1.pom (10 kB at 1.2 MB/s)
2024-08-30T19:20:24.2019287Z #24 3.431 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/pulsar/spring-pulsar-bom/1.0.2/spring-pulsar-bom-1.0.2.pom
2024-08-30T19:20:24.2021049Z #24 3.439 Progress (1): 2.7 kB
2024-08-30T19:20:24.2021765Z                     
2024-08-30T19:20:24.2027044Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/pulsar/spring-pulsar-bom/1.0.2/spring-pulsar-bom-1.0.2.pom (2.7 kB at 274 kB/s)
2024-08-30T19:20:24.2030202Z #24 3.445 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/restdocs/spring-restdocs-bom/3.0.1/spring-restdocs-bom-3.0.1.pom
2024-08-30T19:20:24.2032434Z #24 3.453 Progress (1): 2.6 kB
2024-08-30T19:20:24.2033083Z                     
2024-08-30T19:20:24.2035053Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/restdocs/spring-restdocs-bom/3.0.1/spring-restdocs-bom-3.0.1.pom (2.6 kB at 234 kB/s)
2024-08-30T19:20:24.2038375Z #24 3.459 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-bom/6.2.1/spring-security-bom-6.2.1.pom
2024-08-30T19:20:24.2040199Z #24 3.463 Progress (1): 5.3 kB
2024-08-30T19:20:24.2040829Z                     
2024-08-30T19:20:24.2042981Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-bom/6.2.1/spring-security-bom-6.2.1.pom (5.3 kB at 888 kB/s)
2024-08-30T19:20:24.2046265Z #24 3.468 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/session/spring-session-bom/3.2.1/spring-session-bom-3.2.1.pom
2024-08-30T19:20:24.2048062Z #24 3.477 Progress (1): 2.9 kB
2024-08-30T19:20:24.2048809Z                     
2024-08-30T19:20:24.2050755Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/session/spring-session-bom/3.2.1/spring-session-bom-3.2.1.pom (2.9 kB at 289 kB/s)
2024-08-30T19:20:24.2053913Z #24 3.482 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/ws/spring-ws-bom/4.0.10/spring-ws-bom-4.0.10.pom
2024-08-30T19:20:24.2055625Z #24 3.487 Progress (1): 3.5 kB
2024-08-30T19:20:24.2056245Z                     
2024-08-30T19:20:24.2058014Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/ws/spring-ws-bom/4.0.10/spring-ws-bom-4.0.10.pom (3.5 kB at 583 kB/s)
2024-08-30T19:20:24.2070302Z #24 3.493 Downloading from central: https://repo.maven.apache.org/maven2/org/testcontainers/testcontainers-bom/1.19.3/testcontainers-bom-1.19.3.pom
2024-08-30T19:20:24.2072109Z #24 3.498 Progress (1): 9.0 kB
2024-08-30T19:20:24.2072747Z                     
2024-08-30T19:20:24.2074869Z Downloaded from central: https://repo.maven.apache.org/maven2/org/testcontainers/testcontainers-bom/1.19.3/testcontainers-bom-1.19.3.pom (9.0 kB at 1.5 MB/s)
2024-08-30T19:20:24.3013994Z #24 3.528 [WARNING] 
2024-08-30T19:20:24.3016513Z #24 3.534 [WARNING] Some problems were encountered while building the effective model for com.redocode:backend:jar:0.0.1-SNAPSHOT
2024-08-30T19:20:24.3019532Z #24 3.534 [WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.springframework.boot:spring-boot-starter-test:jar -> version 2.5.0 vs 3.3.1 @ line 136, column 15
2024-08-30T19:20:24.3021664Z #24 3.534 [WARNING] 
2024-08-30T19:20:24.3022935Z #24 3.534 [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
2024-08-30T19:20:24.3024255Z #24 3.534 [WARNING] 
2024-08-30T19:20:24.3025407Z #24 3.534 [WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
2024-08-30T19:20:24.3026265Z #24 3.534 [WARNING] 
2024-08-30T19:20:24.3026615Z #24 3.549 [INFO] 
2024-08-30T19:20:24.3027193Z #24 3.550 [INFO] ------------------------< com.redocode:backend >------------------------
2024-08-30T19:20:24.3027891Z #24 3.550 [INFO] Building backend 0.0.1-SNAPSHOT
2024-08-30T19:20:24.3028391Z #24 3.551 [INFO]   from pom.xml
2024-08-30T19:20:24.3028942Z #24 3.551 [INFO] --------------------------------[ jar ]---------------------------------
2024-08-30T19:20:24.3030255Z #24 3.555 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-maven-plugin/3.2.2/spring-boot-maven-plugin-3.2.2.pom
2024-08-30T19:20:24.3031255Z #24 3.560 Progress (1): 4.0 kB
2024-08-30T19:20:24.3031582Z                     
2024-08-30T19:20:24.3032733Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-maven-plugin/3.2.2/spring-boot-maven-plugin-3.2.2.pom (4.0 kB at 572 kB/s)
2024-08-30T19:20:24.3035052Z #24 3.574 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-maven-plugin/3.2.2/spring-boot-maven-plugin-3.2.2.jar
2024-08-30T19:20:24.3036337Z #24 3.581 Progress (1): 15/134 kB
2024-08-30T19:20:24.3036758Z Progress (1): 31/134 kB
2024-08-30T19:20:24.3037124Z Progress (1): 48/134 kB
2024-08-30T19:20:24.3037481Z Progress (1): 64/134 kB
2024-08-30T19:20:24.3037827Z Progress (1): 81/134 kB
2024-08-30T19:20:24.3038168Z Progress (1): 93/134 kB
2024-08-30T19:20:24.3038518Z Progress (1): 110/134 kB
2024-08-30T19:20:24.3038866Z Progress (1): 126/134 kB
2024-08-30T19:20:24.3039210Z Progress (1): 134 kB    
2024-08-30T19:20:24.3039552Z                     
2024-08-30T19:20:24.3041467Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-maven-plugin/3.2.2/spring-boot-maven-plugin-3.2.2.jar (134 kB at 9.6 MB/s)
2024-08-30T19:20:24.3044793Z #24 3.618 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.3.2/maven-clean-plugin-3.3.2.pom
2024-08-30T19:20:24.3046516Z #24 3.624 Progress (1): 5.3 kB
2024-08-30T19:20:24.3047182Z                     
2024-08-30T19:20:24.3048841Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.3.2/maven-clean-plugin-3.3.2.pom (5.3 kB at 761 kB/s)
2024-08-30T19:20:24.4077044Z #24 3.629 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/40/maven-plugins-40.pom
2024-08-30T19:20:24.4078751Z #24 3.633 Progress (1): 8.1 kB
2024-08-30T19:20:24.4079374Z                     
2024-08-30T19:20:24.4081243Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/40/maven-plugins-40.pom (8.1 kB at 1.6 MB/s)
2024-08-30T19:20:24.4083773Z #24 3.636 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/40/maven-parent-40.pom
2024-08-30T19:20:24.4085220Z #24 3.641 Progress (1): 16/49 kB
2024-08-30T19:20:24.4085943Z Progress (1): 33/49 kB
2024-08-30T19:20:24.4086454Z Progress (1): 49 kB   
2024-08-30T19:20:24.4086993Z                    
2024-08-30T19:20:24.4089088Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/40/maven-parent-40.pom (49 kB at 7.0 MB/s)
2024-08-30T19:20:24.4091923Z #24 3.651 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.3.2/maven-clean-plugin-3.3.2.jar
2024-08-30T19:20:24.4093632Z #24 3.659 Progress (1): 16/36 kB
2024-08-30T19:20:24.4094396Z Progress (1): 33/36 kB
2024-08-30T19:20:24.4094939Z Progress (1): 36 kB   
2024-08-30T19:20:24.4095472Z                    
2024-08-30T19:20:24.4097162Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.3.2/maven-clean-plugin-3.3.2.jar (36 kB at 3.6 MB/s)
2024-08-30T19:20:24.4099688Z #24 3.667 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.pom
2024-08-30T19:20:24.4101064Z #24 3.672 Progress (1): 8.2 kB
2024-08-30T19:20:24.4101609Z                     
2024-08-30T19:20:24.4103207Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.pom (8.2 kB at 1.6 MB/s)
2024-08-30T19:20:24.4105944Z #24 3.680 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/39/maven-plugins-39.pom
2024-08-30T19:20:24.4107477Z #24 3.686 Progress (1): 8.1 kB
2024-08-30T19:20:24.4108065Z                     
2024-08-30T19:20:24.4109655Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/39/maven-plugins-39.pom (8.1 kB at 1.2 MB/s)
2024-08-30T19:20:24.4112140Z #24 3.694 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/39/maven-parent-39.pom
2024-08-30T19:20:24.4113799Z #24 3.700 Progress (1): 16/48 kB
2024-08-30T19:20:24.4114427Z Progress (1): 33/48 kB
2024-08-30T19:20:24.4114867Z Progress (1): 48 kB   
2024-08-30T19:20:24.4115356Z                    
2024-08-30T19:20:24.4116839Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/39/maven-parent-39.pom (48 kB at 6.9 MB/s)
2024-08-30T19:20:24.4119050Z #24 3.706 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/29/apache-29.pom
2024-08-30T19:20:24.4120309Z #24 3.712 Progress (1): 16/21 kB
2024-08-30T19:20:24.4120940Z Progress (1): 21 kB   
2024-08-30T19:20:24.4121421Z                    
2024-08-30T19:20:24.4122616Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/29/apache-29.pom (21 kB at 2.1 MB/s)
2024-08-30T19:20:24.4124954Z #24 3.724 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.jar
2024-08-30T19:20:24.5090082Z #24 3.735 Progress (1): 16/31 kB
2024-08-30T19:20:24.5091198Z Progress (1): 31 kB   
2024-08-30T19:20:24.5092113Z                    
2024-08-30T19:20:24.5094435Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.jar (31 kB at 2.6 MB/s)
2024-08-30T19:20:24.5097734Z #24 3.749 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.11.0/maven-compiler-plugin-3.11.0.pom
2024-08-30T19:20:24.5099681Z #24 3.754 Progress (1): 9.8 kB
2024-08-30T19:20:24.5100338Z                     
2024-08-30T19:20:24.5102432Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.11.0/maven-compiler-plugin-3.11.0.pom (9.8 kB at 1.6 MB/s)
2024-08-30T19:20:24.5105831Z #24 3.773 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.11.0/maven-compiler-plugin-3.11.0.jar
2024-08-30T19:20:24.5107590Z #24 3.778 Progress (1): 16/66 kB
2024-08-30T19:20:24.5108238Z Progress (1): 32/66 kB
2024-08-30T19:20:24.5108815Z Progress (1): 49/66 kB
2024-08-30T19:20:24.5109353Z Progress (1): 65/66 kB
2024-08-30T19:20:24.5109853Z Progress (1): 66 kB   
2024-08-30T19:20:24.5110363Z                    
2024-08-30T19:20:24.5112650Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.11.0/maven-compiler-plugin-3.11.0.jar (66 kB at 5.5 MB/s)
2024-08-30T19:20:24.5115620Z #24 3.798 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/3.1.2/maven-surefire-plugin-3.1.2.pom
2024-08-30T19:20:24.5117352Z #24 3.804 Progress (1): 5.5 kB
2024-08-30T19:20:24.5118024Z                     
2024-08-30T19:20:24.5119995Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/3.1.2/maven-surefire-plugin-3.1.2.pom (5.5 kB at 779 kB/s)
2024-08-30T19:20:24.5122878Z #24 3.811 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire/3.1.2/surefire-3.1.2.pom
2024-08-30T19:20:24.5124321Z #24 3.818 Progress (1): 16/22 kB
2024-08-30T19:20:24.5124959Z Progress (1): 22 kB   
2024-08-30T19:20:24.5125603Z                    
2024-08-30T19:20:24.5127213Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire/3.1.2/surefire-3.1.2.pom (22 kB at 1.8 MB/s)
2024-08-30T19:20:24.6162495Z #24 3.835 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/3.1.2/maven-surefire-plugin-3.1.2.jar
2024-08-30T19:20:24.6164697Z #24 3.843 Progress (1): 16/43 kB
2024-08-30T19:20:24.6165459Z Progress (1): 33/43 kB
2024-08-30T19:20:24.6166120Z Progress (1): 43 kB   
2024-08-30T19:20:24.6166810Z                    
2024-08-30T19:20:24.6168815Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/3.1.2/maven-surefire-plugin-3.1.2.jar (43 kB at 4.8 MB/s)
2024-08-30T19:20:24.6172437Z #24 3.852 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/3.3.0/maven-jar-plugin-3.3.0.pom
2024-08-30T19:20:24.6174365Z #24 3.857 Progress (1): 6.8 kB
2024-08-30T19:20:24.6175115Z                     
2024-08-30T19:20:24.6176933Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/3.3.0/maven-jar-plugin-3.3.0.pom (6.8 kB at 1.4 MB/s)
2024-08-30T19:20:24.6179748Z #24 3.861 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/37/maven-plugins-37.pom
2024-08-30T19:20:24.6181429Z #24 3.866 Progress (1): 9.9 kB
2024-08-30T19:20:24.6182136Z                     
2024-08-30T19:20:24.6183989Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/37/maven-plugins-37.pom (9.9 kB at 2.0 MB/s)
2024-08-30T19:20:24.6187441Z #24 3.870 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/37/maven-parent-37.pom
2024-08-30T19:20:24.6189156Z #24 3.875 Progress (1): 16/46 kB
2024-08-30T19:20:24.6190017Z Progress (1): 32/46 kB
2024-08-30T19:20:24.6190358Z Progress (1): 46 kB   
2024-08-30T19:20:24.6190730Z                    
2024-08-30T19:20:24.6191832Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/37/maven-parent-37.pom (46 kB at 7.6 MB/s)
2024-08-30T19:20:24.6193107Z #24 3.882 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/27/apache-27.pom
2024-08-30T19:20:24.6193845Z #24 3.887 Progress (1): 16/20 kB
2024-08-30T19:20:24.6194283Z Progress (1): 20 kB   
2024-08-30T19:20:24.6194646Z                    
2024-08-30T19:20:24.6195414Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/27/apache-27.pom (20 kB at 4.1 MB/s)
2024-08-30T19:20:24.6196836Z #24 3.893 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/3.3.0/maven-jar-plugin-3.3.0.jar
2024-08-30T19:20:24.6197795Z #24 3.898 Progress (1): 16/27 kB
2024-08-30T19:20:24.6198152Z Progress (1): 27 kB   
2024-08-30T19:20:24.6198543Z                    
2024-08-30T19:20:24.6200294Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/3.3.0/maven-jar-plugin-3.3.0.jar (27 kB at 5.5 MB/s)
2024-08-30T19:20:24.6203380Z #24 3.902 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/3.1.1/maven-install-plugin-3.1.1.pom
2024-08-30T19:20:24.6204974Z #24 3.908 Progress (1): 7.8 kB
2024-08-30T19:20:24.6205582Z                     
2024-08-30T19:20:24.6207504Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/3.1.1/maven-install-plugin-3.1.1.pom (7.8 kB at 1.1 MB/s)
2024-08-30T19:20:24.6215695Z #24 3.915 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/3.1.1/maven-install-plugin-3.1.1.jar
2024-08-30T19:20:24.6217638Z #24 3.920 Progress (1): 16/31 kB
2024-08-30T19:20:24.6218437Z Progress (1): 31 kB   
2024-08-30T19:20:24.6219034Z                    
2024-08-30T19:20:24.6226667Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/3.1.1/maven-install-plugin-3.1.1.jar (31 kB at 4.5 MB/s)
2024-08-30T19:20:24.6229929Z #24 3.943 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter/3.2.2/spring-boot-starter-3.2.2.pom
2024-08-30T19:20:24.7197259Z #24 3.949 Progress (1): 3.0 kB
2024-08-30T19:20:24.7198780Z                     
2024-08-30T19:20:24.7201853Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter/3.2.2/spring-boot-starter-3.2.2.pom (3.0 kB at 434 kB/s)
2024-08-30T19:20:24.7204112Z #24 3.957 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.pom
2024-08-30T19:20:24.7205041Z #24 3.962 Progress (1): 2.2 kB
2024-08-30T19:20:24.7205466Z                     
2024-08-30T19:20:24.7206474Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.pom (2.2 kB at 314 kB/s)
2024-08-30T19:20:24.7208146Z #24 3.966 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.1.3/spring-core-6.1.3.pom
2024-08-30T19:20:24.7209009Z #24 3.971 Progress (1): 2.0 kB
2024-08-30T19:20:24.7209373Z                     
2024-08-30T19:20:24.7210328Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.1.3/spring-core-6.1.3.pom (2.0 kB at 336 kB/s)
2024-08-30T19:20:24.7211994Z #24 3.976 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.1.3/spring-jcl-6.1.3.pom
2024-08-30T19:20:24.7213326Z #24 3.981 Progress (1): 1.8 kB
2024-08-30T19:20:24.7214038Z                     
2024-08-30T19:20:24.7215840Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.1.3/spring-jcl-6.1.3.pom (1.8 kB at 306 kB/s)
2024-08-30T19:20:24.7218444Z #24 3.984 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-context/6.1.3/spring-context-6.1.3.pom
2024-08-30T19:20:24.7219972Z #24 3.989 Progress (1): 2.8 kB
2024-08-30T19:20:24.7220642Z                     
2024-08-30T19:20:24.7222287Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-context/6.1.3/spring-context-6.1.3.pom (2.8 kB at 462 kB/s)
2024-08-30T19:20:24.7224904Z #24 3.993 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aop/6.1.3/spring-aop-6.1.3.pom
2024-08-30T19:20:24.7226449Z #24 3.998 Progress (1): 2.2 kB
2024-08-30T19:20:24.7227056Z                     
2024-08-30T19:20:24.7228733Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aop/6.1.3/spring-aop-6.1.3.pom (2.2 kB at 366 kB/s)
2024-08-30T19:20:24.7231468Z #24 4.003 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-beans/6.1.3/spring-beans-6.1.3.pom
2024-08-30T19:20:24.7232984Z #24 4.009 Progress (1): 2.0 kB
2024-08-30T19:20:24.7233920Z                     
2024-08-30T19:20:24.7235718Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-beans/6.1.3/spring-beans-6.1.3.pom (2.0 kB at 288 kB/s)
2024-08-30T19:20:24.7238334Z #24 4.013 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-expression/6.1.3/spring-expression-6.1.3.pom
2024-08-30T19:20:24.7239465Z #24 4.017 Progress (1): 2.1 kB
2024-08-30T19:20:24.7239930Z                     
2024-08-30T19:20:24.7240994Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-expression/6.1.3/spring-expression-6.1.3.pom (2.1 kB at 344 kB/s)
2024-08-30T19:20:24.7242627Z #24 4.022 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-observation/1.12.2/micrometer-observation-1.12.2.pom
2024-08-30T19:20:24.7243515Z #24 4.028 Progress (1): 3.8 kB
2024-08-30T19:20:24.7243873Z                     
2024-08-30T19:20:24.7244953Z Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-observation/1.12.2/micrometer-observation-1.12.2.pom (3.8 kB at 548 kB/s)
2024-08-30T19:20:24.7246470Z #24 4.032 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-commons/1.12.2/micrometer-commons-1.12.2.pom
2024-08-30T19:20:24.7247335Z #24 4.038 Progress (1): 3.4 kB
2024-08-30T19:20:24.7247736Z                     
2024-08-30T19:20:24.7248672Z Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-commons/1.12.2/micrometer-commons-1.12.2.pom (3.4 kB at 487 kB/s)
2024-08-30T19:20:24.7250576Z #24 4.042 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-autoconfigure/3.2.2/spring-boot-autoconfigure-3.2.2.pom
2024-08-30T19:20:24.8196499Z #24 4.047 Progress (1): 2.1 kB
2024-08-30T19:20:24.8197299Z                     
2024-08-30T19:20:24.8198881Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-autoconfigure/3.2.2/spring-boot-autoconfigure-3.2.2.pom (2.1 kB at 343 kB/s)
2024-08-30T19:20:24.8201772Z #24 4.051 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-logging/3.2.2/spring-boot-starter-logging-3.2.2.pom
2024-08-30T19:20:24.8203816Z #24 4.055 Progress (1): 2.5 kB
2024-08-30T19:20:24.8204556Z                     
2024-08-30T19:20:24.8205992Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-logging/3.2.2/spring-boot-starter-logging-3.2.2.pom (2.5 kB at 492 kB/s)
2024-08-30T19:20:24.8207847Z #24 4.058 Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.pom
2024-08-30T19:20:24.8208817Z #24 4.064 Progress (1): 13 kB
2024-08-30T19:20:24.8209223Z                    
2024-08-30T19:20:24.8210291Z Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.pom (13 kB at 1.9 MB/s)
2024-08-30T19:20:24.8212308Z #24 4.069 Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-parent/1.4.14/logback-parent-1.4.14.pom
2024-08-30T19:20:24.8213282Z #24 4.073 Progress (1): 16/20 kB
2024-08-30T19:20:24.8213705Z Progress (1): 20 kB   
2024-08-30T19:20:24.8214157Z                    
2024-08-30T19:20:24.8215198Z Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-parent/1.4.14/logback-parent-1.4.14.pom (20 kB at 3.3 MB/s)
2024-08-30T19:20:24.8216679Z #24 4.083 Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.pom
2024-08-30T19:20:24.8217583Z #24 4.087 Progress (1): 5.0 kB
2024-08-30T19:20:24.8218034Z                     
2024-08-30T19:20:24.8219016Z Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.pom (5.0 kB at 842 kB/s)
2024-08-30T19:20:24.8220752Z #24 4.093 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/2.0.11/slf4j-api-2.0.11.pom
2024-08-30T19:20:24.8221591Z #24 4.099 Progress (1): 2.8 kB
2024-08-30T19:20:24.8222030Z                     
2024-08-30T19:20:24.8223005Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/2.0.11/slf4j-api-2.0.11.pom (2.8 kB at 353 kB/s)
2024-08-30T19:20:24.8225354Z #24 4.104 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/2.0.11/slf4j-parent-2.0.11.pom
2024-08-30T19:20:24.8226390Z #24 4.108 Progress (1): 15 kB
2024-08-30T19:20:24.8226826Z                    
2024-08-30T19:20:24.8227728Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/2.0.11/slf4j-parent-2.0.11.pom (15 kB at 2.6 MB/s)
2024-08-30T19:20:24.8229009Z #24 4.126 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-bom/2.0.11/slf4j-bom-2.0.11.pom
2024-08-30T19:20:24.8229799Z #24 4.130 Progress (1): 7.3 kB
2024-08-30T19:20:24.8230169Z                     
2024-08-30T19:20:24.8230990Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-bom/2.0.11/slf4j-bom-2.0.11.pom (7.3 kB at 1.5 MB/s)
2024-08-30T19:20:24.8232405Z #24 4.136 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.pom
2024-08-30T19:20:24.8233277Z #24 4.140 Progress (1): 4.2 kB
2024-08-30T19:20:24.8233652Z                     
2024-08-30T19:20:24.8234638Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.pom (4.2 kB at 846 kB/s)
2024-08-30T19:20:24.8237509Z #24 4.147 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j/2.21.1/log4j-2.21.1.pom
2024-08-30T19:20:24.9197671Z #24 4.153 Progress (1): 16/35 kB
2024-08-30T19:20:24.9198918Z Progress (1): 32/35 kB
2024-08-30T19:20:24.9199571Z Progress (1): 35 kB   
2024-08-30T19:20:24.9200221Z                    
2024-08-30T19:20:24.9202244Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j/2.21.1/log4j-2.21.1.pom (35 kB at 4.4 MB/s)
2024-08-30T19:20:24.9204751Z #24 4.161 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-bom/9.5/asm-bom-9.5.pom
2024-08-30T19:20:24.9206039Z #24 4.166 Progress (1): 3.2 kB
2024-08-30T19:20:24.9206796Z                     
2024-08-30T19:20:24.9208335Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-bom/9.5/asm-bom-9.5.pom (3.2 kB at 538 kB/s)
2024-08-30T19:20:24.9210300Z #24 4.169 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5.1/ow2-1.5.1.pom
2024-08-30T19:20:24.9211843Z #24 4.174 Progress (1): 11 kB
2024-08-30T19:20:24.9212443Z                    
2024-08-30T19:20:24.9213734Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5.1/ow2-1.5.1.pom (11 kB at 1.9 MB/s)
2024-08-30T19:20:24.9216024Z #24 4.178 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-bom/3.0.19/groovy-bom-3.0.19.pom
2024-08-30T19:20:24.9217407Z #24 4.182 Progress (1): 16/26 kB
2024-08-30T19:20:24.9218018Z Progress (1): 26 kB   
2024-08-30T19:20:24.9218687Z                    
2024-08-30T19:20:24.9220252Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-bom/3.0.19/groovy-bom-3.0.19.pom (26 kB at 4.4 MB/s)
2024-08-30T19:20:24.9222790Z #24 4.187 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.15.2/jackson-bom-2.15.2.pom
2024-08-30T19:20:24.9224322Z #24 4.191 Progress (1): 16/18 kB
2024-08-30T19:20:24.9224975Z Progress (1): 18 kB   
2024-08-30T19:20:24.9225541Z                    
2024-08-30T19:20:24.9227199Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.15.2/jackson-bom-2.15.2.pom (18 kB at 3.0 MB/s)
2024-08-30T19:20:24.9230248Z #24 4.196 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/platform/jakarta.jakartaee-bom/9.1.0/jakarta.jakartaee-bom-9.1.0.pom
2024-08-30T19:20:24.9231866Z #24 4.200 Progress (1): 9.6 kB
2024-08-30T19:20:24.9232513Z                     
2024-08-30T19:20:24.9234308Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/platform/jakarta.jakartaee-bom/9.1.0/jakarta.jakartaee-bom-9.1.0.pom (9.6 kB at 1.9 MB/s)
2024-08-30T19:20:24.9236844Z #24 4.204 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/platform/jakartaee-api-parent/9.1.0/jakartaee-api-parent-9.1.0.pom
2024-08-30T19:20:24.9237829Z #24 4.208 Progress (1): 15 kB
2024-08-30T19:20:24.9238205Z                    
2024-08-30T19:20:24.9239234Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/platform/jakartaee-api-parent/9.1.0/jakartaee-api-parent-9.1.0.pom (15 kB at 3.0 MB/s)
2024-08-30T19:20:24.9240720Z #24 4.211 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom
2024-08-30T19:20:24.9241456Z #24 4.215 Progress (1): 14 kB
2024-08-30T19:20:24.9241839Z                    
2024-08-30T19:20:24.9242736Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom (14 kB at 3.5 MB/s)
2024-08-30T19:20:24.9244110Z #24 4.221 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-bom/9.4.53.v20231009/jetty-bom-9.4.53.v20231009.pom
2024-08-30T19:20:24.9244994Z #24 4.225 Progress (1): 16/18 kB
2024-08-30T19:20:24.9245415Z Progress (1): 18 kB   
2024-08-30T19:20:24.9245749Z                    
2024-08-30T19:20:24.9246960Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-bom/9.4.53.v20231009/jetty-bom-9.4.53.v20231009.pom (18 kB at 3.5 MB/s)
2024-08-30T19:20:24.9248389Z #24 4.229 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.10.0/junit-bom-5.10.0.pom
2024-08-30T19:20:24.9249168Z #24 4.233 Progress (1): 5.6 kB
2024-08-30T19:20:24.9249532Z                     
2024-08-30T19:20:24.9250416Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.10.0/junit-bom-5.10.0.pom (5.6 kB at 1.1 MB/s)
2024-08-30T19:20:24.9252089Z #24 4.236 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-bom/5.12.4/kubernetes-client-bom-5.12.4.pom
2024-08-30T19:20:24.9252975Z #24 4.240 Progress (1): 16/26 kB
2024-08-30T19:20:24.9253400Z Progress (1): 26 kB   
2024-08-30T19:20:24.9253740Z                    
2024-08-30T19:20:24.9254702Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-bom/5.12.4/kubernetes-client-bom-5.12.4.pom (26 kB at 6.4 MB/s)
2024-08-30T19:20:24.9256153Z #24 4.244 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/4.11.0/mockito-bom-4.11.0.pom
2024-08-30T19:20:25.0201349Z #24 4.247 Progress (1): 3.2 kB
2024-08-30T19:20:25.0202317Z                     
2024-08-30T19:20:25.0204252Z Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/4.11.0/mockito-bom-4.11.0.pom (3.2 kB at 788 kB/s)
2024-08-30T19:20:25.0206768Z #24 4.251 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-bom/4.1.97.Final/netty-bom-4.1.97.Final.pom
2024-08-30T19:20:25.0208337Z #24 4.254 Progress (1): 13 kB
2024-08-30T19:20:25.0209004Z                    
2024-08-30T19:20:25.0210592Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-bom/4.1.97.Final/netty-bom-4.1.97.Final.pom (13 kB at 2.7 MB/s)
2024-08-30T19:20:25.0213343Z #24 4.258 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-framework-bom/5.3.29/spring-framework-bom-5.3.29.pom
2024-08-30T19:20:25.0214950Z #24 4.262 Progress (1): 5.7 kB
2024-08-30T19:20:25.0215472Z                     
2024-08-30T19:20:25.0217241Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-framework-bom/5.3.29/spring-framework-bom-5.3.29.pom (5.7 kB at 1.1 MB/s)
2024-08-30T19:20:25.0218829Z #24 4.269 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.pom
2024-08-30T19:20:25.0219740Z #24 4.273 Progress (1): 4.0 kB
2024-08-30T19:20:25.0220104Z                     
2024-08-30T19:20:25.0221070Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.pom (4.0 kB at 802 kB/s)
2024-08-30T19:20:25.0222486Z #24 4.283 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/jul-to-slf4j/2.0.11/jul-to-slf4j-2.0.11.pom
2024-08-30T19:20:25.0223262Z #24 4.287 Progress (1): 1.1 kB
2024-08-30T19:20:25.0223651Z                     
2024-08-30T19:20:25.0224570Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/jul-to-slf4j/2.0.11/jul-to-slf4j-2.0.11.pom (1.1 kB at 219 kB/s)
2024-08-30T19:20:25.0226086Z #24 4.292 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.pom
2024-08-30T19:20:25.0226984Z #24 4.304 Progress (1): 16 kB
2024-08-30T19:20:25.0227381Z                    
2024-08-30T19:20:25.0228401Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.pom (16 kB at 1.2 MB/s)
2024-08-30T19:20:25.0229734Z #24 4.309 Downloading from central: https://repo.maven.apache.org/maven2/org/yaml/snakeyaml/2.2/snakeyaml-2.2.pom
2024-08-30T19:20:25.0230511Z #24 4.314 Progress (1): 16/21 kB
2024-08-30T19:20:25.0230893Z Progress (1): 21 kB   
2024-08-30T19:20:25.0231396Z                    
2024-08-30T19:20:25.0232254Z Downloaded from central: https://repo.maven.apache.org/maven2/org/yaml/snakeyaml/2.2/snakeyaml-2.2.pom (21 kB at 3.5 MB/s)
2024-08-30T19:20:25.0233743Z #24 4.319 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-test/3.3.1/spring-boot-starter-test-3.3.1.pom
2024-08-30T19:20:25.0234743Z #24 4.323 Progress (1): 5.1 kB
2024-08-30T19:20:25.0235100Z                     
2024-08-30T19:20:25.0236243Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-test/3.3.1/spring-boot-starter-test-3.3.1.pom (5.1 kB at 1.0 MB/s)
2024-08-30T19:20:25.0237879Z #24 4.329 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test/3.2.2/spring-boot-test-3.2.2.pom
2024-08-30T19:20:25.0238762Z #24 4.334 Progress (1): 2.0 kB
2024-08-30T19:20:25.0239121Z                     
2024-08-30T19:20:25.0240127Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test/3.2.2/spring-boot-test-3.2.2.pom (2.0 kB at 338 kB/s)
2024-08-30T19:20:25.0241837Z #24 4.338 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test-autoconfigure/3.2.2/spring-boot-test-autoconfigure-3.2.2.pom
2024-08-30T19:20:25.0243641Z #24 4.343 Progress (1): 2.5 kB
2024-08-30T19:20:25.0244275Z                     
2024-08-30T19:20:25.0246428Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test-autoconfigure/3.2.2/spring-boot-test-autoconfigure-3.2.2.pom (2.5 kB at 412 kB/s)
2024-08-30T19:20:25.1237574Z #24 4.348 Downloading from central: https://repo.maven.apache.org/maven2/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.pom
2024-08-30T19:20:25.1239435Z #24 4.353 Progress (1): 1.9 kB
2024-08-30T19:20:25.1240108Z                     
2024-08-30T19:20:25.1242013Z Downloaded from central: https://repo.maven.apache.org/maven2/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.pom (1.9 kB at 320 kB/s)
2024-08-30T19:20:25.1244524Z #24 4.357 Downloading from central: https://repo.maven.apache.org/maven2/net/minidev/json-smart/2.5.0/json-smart-2.5.0.pom
2024-08-30T19:20:25.1245760Z #24 4.361 Progress (1): 9.2 kB
2024-08-30T19:20:25.1246233Z                     
2024-08-30T19:20:25.1247552Z Downloaded from central: https://repo.maven.apache.org/maven2/net/minidev/json-smart/2.5.0/json-smart-2.5.0.pom (9.2 kB at 1.5 MB/s)
2024-08-30T19:20:25.1249009Z #24 4.366 Downloading from central: https://repo.maven.apache.org/maven2/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.pom
2024-08-30T19:20:25.1249823Z #24 4.374 Progress (1): 11 kB
2024-08-30T19:20:25.1250202Z                    
2024-08-30T19:20:25.1251476Z Downloaded from central: https://repo.maven.apache.org/maven2/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.pom (11 kB at 1.2 MB/s)
2024-08-30T19:20:25.1253591Z #24 4.378 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.3/asm-9.3.pom
2024-08-30T19:20:25.1254756Z #24 4.383 Progress (1): 2.4 kB
2024-08-30T19:20:25.1255354Z                     
2024-08-30T19:20:25.1256681Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.3/asm-9.3.pom (2.4 kB at 474 kB/s)
2024-08-30T19:20:25.1258721Z #24 4.386 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5/ow2-1.5.pom
2024-08-30T19:20:25.1259992Z #24 4.390 Progress (1): 11 kB
2024-08-30T19:20:25.1260610Z                    
2024-08-30T19:20:25.1261910Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5/ow2-1.5.pom (11 kB at 2.2 MB/s)
2024-08-30T19:20:25.1264375Z #24 4.395 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.pom
2024-08-30T19:20:25.1266046Z #24 4.400 Progress (1): 13 kB
2024-08-30T19:20:25.1266639Z                    
2024-08-30T19:20:25.1268413Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.pom (13 kB at 2.1 MB/s)
2024-08-30T19:20:25.1270463Z #24 4.404 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api-parent/4.0.1/jakarta.xml.bind-api-parent-4.0.1.pom
2024-08-30T19:20:25.1271425Z #24 4.408 Progress (1): 9.2 kB
2024-08-30T19:20:25.1271854Z                     
2024-08-30T19:20:25.1272954Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api-parent/4.0.1/jakarta.xml.bind-api-parent-4.0.1.pom (9.2 kB at 1.5 MB/s)
2024-08-30T19:20:25.1274620Z #24 4.414 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.pom
2024-08-30T19:20:25.1275567Z #24 4.419 Progress (1): 16/18 kB
2024-08-30T19:20:25.1275948Z Progress (1): 18 kB   
2024-08-30T19:20:25.1276283Z                    
2024-08-30T19:20:25.1277334Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.pom (18 kB at 3.7 MB/s)
2024-08-30T19:20:25.1278803Z #24 4.424 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.pom
2024-08-30T19:20:25.1279618Z #24 4.429 Progress (1): 16/19 kB
2024-08-30T19:20:25.1280000Z Progress (1): 19 kB   
2024-08-30T19:20:25.1280507Z                    
2024-08-30T19:20:25.1282037Z Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.pom (19 kB at 3.2 MB/s)
2024-08-30T19:20:25.1284385Z #24 4.433 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-parent/3.24.2/assertj-parent-3.24.2.pom
2024-08-30T19:20:25.1285726Z #24 4.437 Progress (1): 13 kB
2024-08-30T19:20:25.1286326Z                    
2024-08-30T19:20:25.1287976Z Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-parent/3.24.2/assertj-parent-3.24.2.pom (13 kB at 2.7 MB/s)
2024-08-30T19:20:25.1290388Z #24 4.441 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-build/3.24.2/assertj-build-3.24.2.pom
2024-08-30T19:20:25.1292175Z #24 4.445 Progress (1): 8.8 kB
2024-08-30T19:20:25.1294490Z                     
2024-08-30T19:20:25.1297120Z Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-build/3.24.2/assertj-build-3.24.2.pom (8.8 kB at 1.8 MB/s)
2024-08-30T19:20:25.2250103Z #24 4.451 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.1/junit-bom-5.9.1.pom
2024-08-30T19:20:25.2251861Z #24 4.457 Progress (1): 5.6 kB
2024-08-30T19:20:25.2252584Z                     
2024-08-30T19:20:25.2254443Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.1/junit-bom-5.9.1.pom (5.6 kB at 626 kB/s)
2024-08-30T19:20:25.2256893Z #24 4.463 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.14.11/byte-buddy-1.14.11.pom
2024-08-30T19:20:25.2258189Z #24 4.468 Progress (1): 16 kB
2024-08-30T19:20:25.2258613Z                    
2024-08-30T19:20:25.2259592Z Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.14.11/byte-buddy-1.14.11.pom (16 kB at 2.3 MB/s)
2024-08-30T19:20:25.2261070Z #24 4.473 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-parent/1.14.11/byte-buddy-parent-1.14.11.pom
2024-08-30T19:20:25.2262030Z #24 4.477 Progress (1): 16/62 kB
2024-08-30T19:20:25.2262383Z Progress (1): 33/62 kB
2024-08-30T19:20:25.2262726Z Progress (1): 49/62 kB
2024-08-30T19:20:25.2263113Z Progress (1): 62 kB   
2024-08-30T19:20:25.2263414Z                    
2024-08-30T19:20:25.2264386Z Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-parent/1.14.11/byte-buddy-parent-1.14.11.pom (62 kB at 8.8 MB/s)
2024-08-30T19:20:25.2265864Z #24 4.485 Downloading from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.pom
2024-08-30T19:20:25.2266929Z #24 4.491 Progress (1): 3.5 kB
2024-08-30T19:20:25.2267316Z                     
2024-08-30T19:20:25.2268251Z Downloaded from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.pom (3.5 kB at 591 kB/s)
2024-08-30T19:20:25.2269620Z #24 4.494 Downloading from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility-parent/4.2.0/awaitility-parent-4.2.0.pom
2024-08-30T19:20:25.2270495Z #24 4.498 Progress (1): 10 kB
2024-08-30T19:20:25.2270879Z                    
2024-08-30T19:20:25.2271827Z Downloaded from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility-parent/4.2.0/awaitility-parent-4.2.0.pom (10 kB at 2.1 MB/s)
2024-08-30T19:20:25.2273155Z #24 4.502 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/9/oss-parent-9.pom
2024-08-30T19:20:25.2274466Z #24 4.506 Progress (1): 6.6 kB
2024-08-30T19:20:25.2275080Z                     
2024-08-30T19:20:25.2276561Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/9/oss-parent-9.pom (6.6 kB at 1.1 MB/s)
2024-08-30T19:20:25.2279105Z #24 4.511 Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.pom
2024-08-30T19:20:25.2280518Z #24 4.523 Progress (1): 1.1 kB
2024-08-30T19:20:25.2281152Z                     
2024-08-30T19:20:25.2282376Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.pom (1.1 kB at 87 kB/s)
2024-08-30T19:20:25.2283948Z #24 4.527 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.pom
2024-08-30T19:20:25.2284797Z #24 4.531 Progress (1): 3.2 kB
2024-08-30T19:20:25.2285175Z                     
2024-08-30T19:20:25.2286136Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.pom (3.2 kB at 801 kB/s)
2024-08-30T19:20:25.2287804Z #24 4.534 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.pom
2024-08-30T19:20:25.2289409Z #24 4.538 Progress (1): 3.2 kB
2024-08-30T19:20:25.2290097Z                     
2024-08-30T19:20:25.2292704Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.pom (3.2 kB at 796 kB/s)
2024-08-30T19:20:25.2294324Z #24 4.542 Downloading from central: https://repo.maven.apache.org/maven2/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.pom
2024-08-30T19:20:25.2295120Z #24 4.546 Progress (1): 2.0 kB
2024-08-30T19:20:25.2295622Z                     
2024-08-30T19:20:25.2297271Z Downloaded from central: https://repo.maven.apache.org/maven2/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.pom (2.0 kB at 407 kB/s)
2024-08-30T19:20:25.2300011Z #24 4.548 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.pom
2024-08-30T19:20:25.3258809Z #24 4.552 Progress (1): 2.8 kB
2024-08-30T19:20:25.3259705Z                     
2024-08-30T19:20:25.3261812Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.pom (2.8 kB at 567 kB/s)
2024-08-30T19:20:25.3264761Z #24 4.557 Downloading from central: https://repo.maven.apache.org/maven2/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.pom
2024-08-30T19:20:25.3266267Z #24 4.561 Progress (1): 1.5 kB
2024-08-30T19:20:25.3266884Z                     
2024-08-30T19:20:25.3268563Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.pom (1.5 kB at 305 kB/s)
2024-08-30T19:20:25.3271276Z #24 4.564 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.pom
2024-08-30T19:20:25.3273190Z #24 4.568 Progress (1): 3.0 kB
2024-08-30T19:20:25.3273818Z                     
2024-08-30T19:20:25.3275572Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.pom (3.0 kB at 752 kB/s)
2024-08-30T19:20:25.3278352Z #24 4.571 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.pom
2024-08-30T19:20:25.3279961Z #24 4.576 Progress (1): 3.2 kB
2024-08-30T19:20:25.3280507Z                     
2024-08-30T19:20:25.3282256Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.pom (3.2 kB at 641 kB/s)
2024-08-30T19:20:25.3285121Z #24 4.579 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.pom
2024-08-30T19:20:25.3286714Z #24 4.582 Progress (1): 3.2 kB
2024-08-30T19:20:25.3287255Z                     
2024-08-30T19:20:25.3289098Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.pom (3.2 kB at 641 kB/s)
2024-08-30T19:20:25.3291926Z #24 4.585 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.pom
2024-08-30T19:20:25.3293293Z #24 4.589 Progress (1): 2.5 kB
2024-08-30T19:20:25.3294002Z                     
2024-08-30T19:20:25.3295571Z Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.pom (2.5 kB at 616 kB/s)
2024-08-30T19:20:25.3298116Z #24 4.592 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-agent/1.14.11/byte-buddy-agent-1.14.11.pom
2024-08-30T19:20:25.3299729Z #24 4.597 Progress (1): 10 kB
2024-08-30T19:20:25.3300338Z                    
2024-08-30T19:20:25.3302055Z Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-agent/1.14.11/byte-buddy-agent-1.14.11.pom (10 kB at 1.7 MB/s)
2024-08-30T19:20:25.3304408Z #24 4.603 Downloading from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/3.3/objenesis-3.3.pom
2024-08-30T19:20:25.3305564Z #24 4.607 Progress (1): 3.0 kB
2024-08-30T19:20:25.3306267Z                     
2024-08-30T19:20:25.3307565Z Downloaded from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/3.3/objenesis-3.3.pom (3.0 kB at 501 kB/s)
2024-08-30T19:20:25.3308923Z #24 4.610 Downloading from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis-parent/3.3/objenesis-parent-3.3.pom
2024-08-30T19:20:25.3309762Z #24 4.614 Progress (1): 16/19 kB
2024-08-30T19:20:25.3310145Z Progress (1): 19 kB   
2024-08-30T19:20:25.3310473Z                    
2024-08-30T19:20:25.3311404Z Downloaded from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis-parent/3.3/objenesis-parent-3.3.pom (19 kB at 3.8 MB/s)
2024-08-30T19:20:25.3313352Z #24 4.618 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.pom
2024-08-30T19:20:25.3314213Z #24 4.622 Progress (1): 2.3 kB
2024-08-30T19:20:25.3314577Z                     
2024-08-30T19:20:25.3315608Z Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.pom (2.3 kB at 456 kB/s)
2024-08-30T19:20:25.3317016Z #24 4.627 Downloading from central: https://repo.maven.apache.org/maven2/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.pom
2024-08-30T19:20:25.3317813Z #24 4.631 Progress (1): 5.2 kB
2024-08-30T19:20:25.3318199Z                     
2024-08-30T19:20:25.3319057Z Downloaded from central: https://repo.maven.apache.org/maven2/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.pom (5.2 kB at 1.0 MB/s)
2024-08-30T19:20:25.3320637Z #24 4.635 Downloading from central: https://repo.maven.apache.org/maven2/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.pom
2024-08-30T19:20:25.3321885Z #24 4.639 Progress (1): 2.8 kB
2024-08-30T19:20:25.3322250Z                     
2024-08-30T19:20:25.3323348Z Downloaded from central: https://repo.maven.apache.org/maven2/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.pom (2.8 kB at 557 kB/s)
2024-08-30T19:20:25.3325313Z #24 4.644 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-test/6.1.3/spring-test-6.1.3.pom
2024-08-30T19:20:25.3326223Z #24 4.649 Progress (1): 2.0 kB
2024-08-30T19:20:25.3326543Z                     
2024-08-30T19:20:25.3327524Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-test/6.1.3/spring-test-6.1.3.pom (2.0 kB at 293 kB/s)
2024-08-30T19:20:25.3328860Z #24 4.653 Downloading from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.pom
2024-08-30T19:20:25.4291911Z #24 4.661 Progress (1): 2.4 kB
2024-08-30T19:20:25.4292806Z                     
2024-08-30T19:20:25.4294701Z Downloaded from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.pom (2.4 kB at 271 kB/s)
2024-08-30T19:20:25.4297205Z #24 4.664 Downloading from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-parent/2.9.1/xmlunit-parent-2.9.1.pom
2024-08-30T19:20:25.4298620Z #24 4.668 Progress (1): 16/21 kB
2024-08-30T19:20:25.4299316Z Progress (1): 21 kB   
2024-08-30T19:20:25.4299749Z                    
2024-08-30T19:20:25.4301511Z Downloaded from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-parent/2.9.1/xmlunit-parent-2.9.1.pom (21 kB at 5.2 MB/s)
2024-08-30T19:20:25.4304265Z #24 4.672 Downloading from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.7.1/postgresql-42.7.1.pom
2024-08-30T19:20:25.4305817Z #24 4.676 Progress (1): 2.9 kB
2024-08-30T19:20:25.4306406Z                     
2024-08-30T19:20:25.4308033Z Downloaded from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.7.1/postgresql-42.7.1.pom (2.9 kB at 581 kB/s)
2024-08-30T19:20:25.4310744Z #24 4.680 Downloading from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.41.0/checker-qual-3.41.0.pom
2024-08-30T19:20:25.4312286Z #24 4.686 Progress (1): 2.1 kB
2024-08-30T19:20:25.4313207Z                     
2024-08-30T19:20:25.4315000Z Downloaded from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.41.0/checker-qual-3.41.0.pom (2.1 kB at 299 kB/s)
2024-08-30T19:20:25.4317643Z #24 4.690 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.pom
2024-08-30T19:20:25.4319156Z #24 4.693 Progress (1): 3.2 kB
2024-08-30T19:20:25.4319798Z                     
2024-08-30T19:20:25.4321573Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.pom (3.2 kB at 800 kB/s)
2024-08-30T19:20:25.4323999Z #24 4.697 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.2/junit-bom-5.9.2.pom
2024-08-30T19:20:25.4325393Z #24 4.701 Progress (1): 5.6 kB
2024-08-30T19:20:25.4326018Z                     
2024-08-30T19:20:25.4327494Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.2/junit-bom-5.9.2.pom (5.6 kB at 1.1 MB/s)
2024-08-30T19:20:25.4330321Z #24 4.706 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-data-jpa/3.2.2/spring-boot-starter-data-jpa-3.2.2.pom
2024-08-30T19:20:25.4332856Z #24 4.710 Progress (1): 2.9 kB
2024-08-30T19:20:25.4333440Z                     
2024-08-30T19:20:25.4335532Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-data-jpa/3.2.2/spring-boot-starter-data-jpa-3.2.2.pom (2.9 kB at 574 kB/s)
2024-08-30T19:20:25.4339034Z #24 4.714 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-aop/3.2.2/spring-boot-starter-aop-3.2.2.pom
2024-08-30T19:20:25.4340674Z #24 4.720 Progress (1): 2.5 kB
2024-08-30T19:20:25.4341361Z                     
2024-08-30T19:20:25.4343031Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-aop/3.2.2/spring-boot-starter-aop-3.2.2.pom (2.5 kB at 352 kB/s)
2024-08-30T19:20:25.4344758Z #24 4.723 Downloading from central: https://repo.maven.apache.org/maven2/org/aspectj/aspectjweaver/1.9.21/aspectjweaver-1.9.21.pom
2024-08-30T19:20:25.4345660Z #24 4.728 Progress (1): 2.1 kB
2024-08-30T19:20:25.4345993Z                     
2024-08-30T19:20:25.4346915Z Downloaded from central: https://repo.maven.apache.org/maven2/org/aspectj/aspectjweaver/1.9.21/aspectjweaver-1.9.21.pom (2.1 kB at 344 kB/s)
2024-08-30T19:20:25.4348537Z #24 4.735 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-jdbc/3.2.2/spring-boot-starter-jdbc-3.2.2.pom
2024-08-30T19:20:25.4349529Z #24 4.740 Progress (1): 2.5 kB
2024-08-30T19:20:25.4349856Z                     
2024-08-30T19:20:25.4351006Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-jdbc/3.2.2/spring-boot-starter-jdbc-3.2.2.pom (2.5 kB at 408 kB/s)
2024-08-30T19:20:25.4352490Z #24 4.744 Downloading from central: https://repo.maven.apache.org/maven2/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.pom
2024-08-30T19:20:25.4353202Z #24 4.747 Progress (1): 16/25 kB
2024-08-30T19:20:25.4353626Z Progress (1): 25 kB   
2024-08-30T19:20:25.4353959Z                    
2024-08-30T19:20:25.4354763Z Downloaded from central: https://repo.maven.apache.org/maven2/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.pom (25 kB at 4.9 MB/s)
2024-08-30T19:20:25.4356100Z #24 4.752 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jdbc/6.1.3/spring-jdbc-6.1.3.pom
2024-08-30T19:20:25.5296426Z #24 4.757 Progress (1): 2.4 kB
2024-08-30T19:20:25.5297343Z                     
2024-08-30T19:20:25.5299159Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jdbc/6.1.3/spring-jdbc-6.1.3.pom (2.4 kB at 340 kB/s)
2024-08-30T19:20:25.5301972Z #24 4.761 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-tx/6.1.3/spring-tx-6.1.3.pom
2024-08-30T19:20:25.5303476Z #24 4.766 Progress (1): 2.2 kB
2024-08-30T19:20:25.5304037Z                     
2024-08-30T19:20:25.5305624Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-tx/6.1.3/spring-tx-6.1.3.pom (2.2 kB at 442 kB/s)
2024-08-30T19:20:25.5308200Z #24 4.769 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.4.1.Final/hibernate-core-6.4.1.Final.pom
2024-08-30T19:20:25.5309723Z #24 4.774 Progress (1): 5.8 kB
2024-08-30T19:20:25.5310277Z                     
2024-08-30T19:20:25.5312036Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.4.1.Final/hibernate-core-6.4.1.Final.pom (5.8 kB at 1.2 MB/s)
2024-08-30T19:20:25.5314997Z #24 4.777 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.pom
2024-08-30T19:20:25.5316674Z #24 4.781 Progress (1): 16 kB
2024-08-30T19:20:25.5317328Z                    
2024-08-30T19:20:25.5319167Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.pom (16 kB at 3.9 MB/s)
2024-08-30T19:20:25.5322206Z #24 4.785 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.pom
2024-08-30T19:20:25.5323809Z #24 4.789 Progress (1): 14 kB
2024-08-30T19:20:25.5324403Z                    
2024-08-30T19:20:25.5326206Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.pom (14 kB at 2.7 MB/s)
2024-08-30T19:20:25.5329478Z #24 4.792 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.6/project-1.0.6.pom
2024-08-30T19:20:25.5330812Z #24 4.795 Progress (1): 13 kB
2024-08-30T19:20:25.5331680Z                    
2024-08-30T19:20:25.5333143Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.6/project-1.0.6.pom (13 kB at 2.7 MB/s)
2024-08-30T19:20:25.5335724Z #24 4.799 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.pom
2024-08-30T19:20:25.5337371Z #24 4.805 Progress (1): 16/19 kB
2024-08-30T19:20:25.5338031Z Progress (1): 19 kB   
2024-08-30T19:20:25.5338523Z                    
2024-08-30T19:20:25.5340303Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.pom (19 kB at 3.1 MB/s)
2024-08-30T19:20:25.5343214Z #24 4.808 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/logging/logging-parent/1.0.1.Final/logging-parent-1.0.1.Final.pom
2024-08-30T19:20:25.5344768Z #24 4.811 Progress (1): 6.0 kB
2024-08-30T19:20:25.5345415Z                     
2024-08-30T19:20:25.5347228Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/logging/logging-parent/1.0.1.Final/logging-parent-1.0.1.Final.pom (6.0 kB at 1.2 MB/s)
2024-08-30T19:20:25.5349677Z #24 4.816 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.3/junit-bom-5.9.3.pom
2024-08-30T19:20:25.5350918Z #24 4.821 Progress (1): 5.6 kB
2024-08-30T19:20:25.5351467Z                     
2024-08-30T19:20:25.5352817Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.3/junit-bom-5.9.3.pom (5.6 kB at 1.1 MB/s)
2024-08-30T19:20:25.5355569Z #24 4.825 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.pom
2024-08-30T19:20:25.5357657Z #24 4.830 Progress (1): 2.1 kB
2024-08-30T19:20:25.5358115Z                     
2024-08-30T19:20:25.5359711Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.pom (2.1 kB at 346 kB/s)
2024-08-30T19:20:25.5361311Z #24 4.834 Downloading from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex/3.1.2/jandex-3.1.2.pom
2024-08-30T19:20:25.5362048Z #24 4.839 Progress (1): 7.0 kB
2024-08-30T19:20:25.5362462Z                     
2024-08-30T19:20:25.5363244Z Downloaded from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex/3.1.2/jandex-3.1.2.pom (7.0 kB at 1.4 MB/s)
2024-08-30T19:20:25.5364520Z #24 4.842 Downloading from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex-parent/3.1.2/jandex-parent-3.1.2.pom
2024-08-30T19:20:25.5365348Z #24 4.845 Progress (1): 7.2 kB
2024-08-30T19:20:25.5365673Z                     
2024-08-30T19:20:25.5366581Z Downloaded from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex-parent/3.1.2/jandex-parent-3.1.2.pom (7.2 kB at 1.4 MB/s)
2024-08-30T19:20:25.5368006Z #24 4.848 Downloading from central: https://repo.maven.apache.org/maven2/io/smallrye/smallrye-build-parent/39/smallrye-build-parent-39.pom
2024-08-30T19:20:25.5368846Z #24 4.852 Progress (1): 16/28 kB
2024-08-30T19:20:25.5369202Z Progress (1): 28 kB   
2024-08-30T19:20:25.5369556Z                    
2024-08-30T19:20:25.5370494Z Downloaded from central: https://repo.maven.apache.org/maven2/io/smallrye/smallrye-build-parent/39/smallrye-build-parent-39.pom (28 kB at 7.1 MB/s)
2024-08-30T19:20:25.6303331Z #24 4.857 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.6.0/classmate-1.6.0.pom
2024-08-30T19:20:25.6304881Z #24 4.867 Progress (1): 6.6 kB
2024-08-30T19:20:25.6305856Z                     
2024-08-30T19:20:25.6307525Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.6.0/classmate-1.6.0.pom (6.6 kB at 604 kB/s)
2024-08-30T19:20:25.6309822Z #24 4.870 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/55/oss-parent-55.pom
2024-08-30T19:20:25.6311145Z #24 4.874 Progress (1): 16/24 kB
2024-08-30T19:20:25.6311865Z Progress (1): 24 kB   
2024-08-30T19:20:25.6312405Z                    
2024-08-30T19:20:25.6313833Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/55/oss-parent-55.pom (24 kB at 4.7 MB/s)
2024-08-30T19:20:25.6316222Z #24 4.878 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.pom
2024-08-30T19:20:25.6317603Z #24 4.883 Progress (1): 11 kB
2024-08-30T19:20:25.6318237Z                    
2024-08-30T19:20:25.6319738Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.pom (11 kB at 1.8 MB/s)
2024-08-30T19:20:25.6322368Z #24 4.886 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-runtime-parent/4.0.4/jaxb-runtime-parent-4.0.4.pom
2024-08-30T19:20:25.6323996Z #24 4.891 Progress (1): 1.2 kB
2024-08-30T19:20:25.6324535Z                     
2024-08-30T19:20:25.6326349Z Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-runtime-parent/4.0.4/jaxb-runtime-parent-4.0.4.pom (1.2 kB at 238 kB/s)
2024-08-30T19:20:25.6329021Z #24 4.893 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-parent/4.0.4/jaxb-parent-4.0.4.pom
2024-08-30T19:20:25.6330467Z #24 4.898 Progress (1): 16/35 kB
2024-08-30T19:20:25.6331357Z Progress (1): 33/35 kB
2024-08-30T19:20:25.6332002Z Progress (1): 35 kB   
2024-08-30T19:20:25.6332542Z                    
2024-08-30T19:20:25.6334106Z Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-parent/4.0.4/jaxb-parent-4.0.4.pom (35 kB at 5.8 MB/s)
2024-08-30T19:20:25.6336564Z #24 4.901 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/jaxb-bom-ext/4.0.4/jaxb-bom-ext-4.0.4.pom
2024-08-30T19:20:25.6338003Z #24 4.906 Progress (1): 3.5 kB
2024-08-30T19:20:25.6338570Z                     
2024-08-30T19:20:25.6340579Z Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/jaxb-bom-ext/4.0.4/jaxb-bom-ext-4.0.4.pom (3.5 kB at 579 kB/s)
2024-08-30T19:20:25.6343134Z #24 4.913 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.pom
2024-08-30T19:20:25.6344486Z #24 4.918 Progress (1): 3.7 kB
2024-08-30T19:20:25.6345150Z                     
2024-08-30T19:20:25.6346710Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.pom (3.7 kB at 534 kB/s)
2024-08-30T19:20:25.6349221Z #24 4.924 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.pom
2024-08-30T19:20:25.6350720Z #24 4.928 Progress (1): 4.0 kB
2024-08-30T19:20:25.6351309Z                     
2024-08-30T19:20:25.6352910Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.pom (4.0 kB at 798 kB/s)
2024-08-30T19:20:25.6355673Z #24 4.931 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation-project/2.0.1/angus-activation-project-2.0.1.pom
2024-08-30T19:20:25.6357373Z #24 4.936 Progress (1): 16/20 kB
2024-08-30T19:20:25.6357991Z Progress (1): 20 kB   
2024-08-30T19:20:25.6358550Z                    
2024-08-30T19:20:25.6360412Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation-project/2.0.1/angus-activation-project-2.0.1.pom (20 kB at 2.9 MB/s)
2024-08-30T19:20:25.6362946Z #24 4.941 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.pom
2024-08-30T19:20:25.6364684Z #24 4.946 Progress (1): 1.8 kB
2024-08-30T19:20:25.6365236Z                     
2024-08-30T19:20:25.6366721Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.pom (1.8 kB at 297 kB/s)
2024-08-30T19:20:25.6369229Z #24 4.948 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-txw-parent/4.0.4/jaxb-txw-parent-4.0.4.pom
2024-08-30T19:20:25.6370676Z #24 4.953 Progress (1): 1.2 kB
2024-08-30T19:20:25.6371486Z                     
2024-08-30T19:20:25.6373257Z Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-txw-parent/4.0.4/jaxb-txw-parent-4.0.4.pom (1.2 kB at 240 kB/s)
2024-08-30T19:20:25.7309399Z #24 4.957 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.pom
2024-08-30T19:20:25.7311483Z #24 4.962 Progress (1): 1.6 kB
2024-08-30T19:20:25.7312194Z                     
2024-08-30T19:20:25.7314106Z Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.pom (1.6 kB at 267 kB/s)
2024-08-30T19:20:25.7315875Z #24 4.966 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons/4.1.2/istack-commons-4.1.2.pom
2024-08-30T19:20:25.7316768Z #24 4.971 Progress (1): 16/26 kB
2024-08-30T19:20:25.7317179Z Progress (1): 26 kB   
2024-08-30T19:20:25.7317556Z                    
2024-08-30T19:20:25.7318490Z Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons/4.1.2/istack-commons-4.1.2.pom (26 kB at 4.4 MB/s)
2024-08-30T19:20:25.7320018Z #24 4.975 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.pom
2024-08-30T19:20:25.7320959Z #24 4.979 Progress (1): 5.9 kB
2024-08-30T19:20:25.7321298Z                     
2024-08-30T19:20:25.7322301Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.pom (5.9 kB at 1.2 MB/s)
2024-08-30T19:20:25.7324062Z #24 4.982 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.pom
2024-08-30T19:20:25.7325138Z #24 4.986 Progress (1): 3.6 kB
2024-08-30T19:20:25.7325535Z                     
2024-08-30T19:20:25.7326477Z Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.pom (3.6 kB at 710 kB/s)
2024-08-30T19:20:25.7327837Z #24 4.988 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-master/4.13.0/antlr4-master-4.13.0.pom
2024-08-30T19:20:25.7328590Z #24 4.992 Progress (1): 4.8 kB
2024-08-30T19:20:25.7328983Z                     
2024-08-30T19:20:25.7329915Z Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-master/4.13.0/antlr4-master-4.13.0.pom (4.8 kB at 964 kB/s)
2024-08-30T19:20:25.7331609Z #24 4.996 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa/3.2.2/spring-data-jpa-3.2.2.pom
2024-08-30T19:20:25.7332562Z #24 5.002 Progress (1): 11 kB
2024-08-30T19:20:25.7332950Z                    
2024-08-30T19:20:25.7333938Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa/3.2.2/spring-data-jpa-3.2.2.pom (11 kB at 1.8 MB/s)
2024-08-30T19:20:25.7335602Z #24 5.006 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa-parent/3.2.2/spring-data-jpa-parent-3.2.2.pom
2024-08-30T19:20:25.7336751Z #24 5.011 Progress (1): 6.9 kB
2024-08-30T19:20:25.7337203Z                     
2024-08-30T19:20:25.7338348Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa-parent/3.2.2/spring-data-jpa-parent-3.2.2.pom (6.9 kB at 981 kB/s)
2024-08-30T19:20:25.7340327Z #24 5.015 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/build/spring-data-parent/3.2.2/spring-data-parent-3.2.2.pom
2024-08-30T19:20:25.7341369Z #24 5.020 Progress (1): 16/41 kB
2024-08-30T19:20:25.7341784Z Progress (1): 33/41 kB
2024-08-30T19:20:25.7342132Z Progress (1): 41 kB   
2024-08-30T19:20:25.7342476Z                    
2024-08-30T19:20:25.7344033Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/build/spring-data-parent/3.2.2/spring-data-parent-3.2.2.pom (41 kB at 6.8 MB/s)
2024-08-30T19:20:25.7346677Z #24 5.024 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/build/spring-data-build/3.2.2/spring-data-build-3.2.2.pom
2024-08-30T19:20:25.7347791Z #24 5.029 Progress (1): 7.3 kB
2024-08-30T19:20:25.7348292Z                     
2024-08-30T19:20:25.7350097Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/build/spring-data-build/3.2.2/spring-data-build-3.2.2.pom (7.3 kB at 1.2 MB/s)
2024-08-30T19:20:25.7352263Z #24 5.034 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-commons/3.2.2/spring-data-commons-3.2.2.pom
2024-08-30T19:20:25.7353273Z #24 5.042 Progress (1): 9.9 kB
2024-08-30T19:20:25.7353602Z                     
2024-08-30T19:20:25.7354672Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-commons/3.2.2/spring-data-commons-3.2.2.pom (9.9 kB at 991 kB/s)
2024-08-30T19:20:25.7356388Z #24 5.048 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-orm/6.1.3/spring-orm-6.1.3.pom
2024-08-30T19:20:25.7357217Z #24 5.053 Progress (1): 2.6 kB
2024-08-30T19:20:25.7357543Z                     
2024-08-30T19:20:25.7358474Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-orm/6.1.3/spring-orm-6.1.3.pom (2.6 kB at 373 kB/s)
2024-08-30T19:20:25.7360412Z #24 5.058 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aspects/6.1.3/spring-aspects-6.1.3.pom
2024-08-30T19:20:25.8331999Z #24 5.062 Progress (1): 2.0 kB
2024-08-30T19:20:25.8332735Z                     
2024-08-30T19:20:25.8335138Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aspects/6.1.3/spring-aspects-6.1.3.pom (2.0 kB at 405 kB/s)
2024-08-30T19:20:25.8338869Z #24 5.066 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5-jakarta/2.13.5/jackson-datatype-hibernate5-jakarta-2.13.5.pom
2024-08-30T19:20:25.8340981Z #24 5.071 Progress (1): 4.1 kB
2024-08-30T19:20:25.8341616Z                     
2024-08-30T19:20:25.8344134Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5-jakarta/2.13.5/jackson-datatype-hibernate5-jakarta-2.13.5.pom (4.1 kB at 690 kB/s)
2024-08-30T19:20:25.8348007Z #24 5.074 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate-parent/2.13.5/jackson-datatype-hibernate-parent-2.13.5.pom
2024-08-30T19:20:25.8350070Z #24 5.079 Progress (1): 4.5 kB
2024-08-30T19:20:25.8350729Z                     
2024-08-30T19:20:25.8353023Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate-parent/2.13.5/jackson-datatype-hibernate-parent-2.13.5.pom (4.5 kB at 753 kB/s)
2024-08-30T19:20:25.8356131Z #24 5.082 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.13.5/jackson-base-2.13.5.pom
2024-08-30T19:20:25.8357727Z #24 5.086 Progress (1): 10 kB
2024-08-30T19:20:25.8358340Z                    
2024-08-30T19:20:25.8360115Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.13.5/jackson-base-2.13.5.pom (10 kB at 2.5 MB/s)
2024-08-30T19:20:25.8362650Z #24 5.089 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.13.5/jackson-bom-2.13.5.pom
2024-08-30T19:20:25.8364502Z #24 5.093 Progress (1): 16/17 kB
2024-08-30T19:20:25.8365213Z Progress (1): 17 kB   
2024-08-30T19:20:25.8365723Z                    
2024-08-30T19:20:25.8367442Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.13.5/jackson-bom-2.13.5.pom (17 kB at 2.9 MB/s)
2024-08-30T19:20:25.8370141Z #24 5.096 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.13/jackson-parent-2.13.pom
2024-08-30T19:20:25.8371817Z #24 5.099 Progress (1): 7.4 kB
2024-08-30T19:20:25.8372460Z                     
2024-08-30T19:20:25.8374382Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.13/jackson-parent-2.13.pom (7.4 kB at 1.9 MB/s)
2024-08-30T19:20:25.8376902Z #24 5.102 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/43/oss-parent-43.pom
2024-08-30T19:20:25.8378273Z #24 5.105 Progress (1): 16/24 kB
2024-08-30T19:20:25.8378961Z Progress (1): 24 kB   
2024-08-30T19:20:25.8379533Z                    
2024-08-30T19:20:25.8380944Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/43/oss-parent-43.pom (24 kB at 4.7 MB/s)
2024-08-30T19:20:25.8383981Z #24 5.112 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.pom
2024-08-30T19:20:25.8385754Z #24 5.116 Progress (1): 9.8 kB
2024-08-30T19:20:25.8386306Z                     
2024-08-30T19:20:25.8388121Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.pom (9.8 kB at 1.2 MB/s)
2024-08-30T19:20:25.8390842Z #24 5.124 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.15.3/jackson-base-2.15.3.pom
2024-08-30T19:20:25.8392315Z #24 5.128 Progress (1): 11 kB
2024-08-30T19:20:25.8393215Z                    
2024-08-30T19:20:25.8395611Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.15.3/jackson-base-2.15.3.pom (11 kB at 2.3 MB/s)
2024-08-30T19:20:25.8399269Z #24 5.134 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.pom
2024-08-30T19:20:25.8400368Z #24 5.138 Progress (1): 16/19 kB
2024-08-30T19:20:25.8400777Z Progress (1): 19 kB   
2024-08-30T19:20:25.8401124Z                    
2024-08-30T19:20:25.8402239Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.pom (19 kB at 3.9 MB/s)
2024-08-30T19:20:25.8403914Z #24 5.144 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.pom
2024-08-30T19:20:25.8404884Z #24 5.149 Progress (1): 7.1 kB
2024-08-30T19:20:25.8405296Z                     
2024-08-30T19:20:25.8406368Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.pom (7.1 kB at 1.4 MB/s)
2024-08-30T19:20:25.8408124Z #24 5.153 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-web/3.2.2/spring-boot-starter-web-3.2.2.pom
2024-08-30T19:20:25.8409126Z #24 5.156 Progress (1): 2.9 kB
2024-08-30T19:20:25.8409454Z                     
2024-08-30T19:20:25.8410549Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-web/3.2.2/spring-boot-starter-web-3.2.2.pom (2.9 kB at 586 kB/s)
2024-08-30T19:20:25.9366254Z #24 5.160 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-json/3.2.2/spring-boot-starter-json-3.2.2.pom
2024-08-30T19:20:25.9368356Z #24 5.166 Progress (1): 3.1 kB
2024-08-30T19:20:25.9368935Z                     
2024-08-30T19:20:25.9371773Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-json/3.2.2/spring-boot-starter-json-3.2.2.pom (3.1 kB at 440 kB/s)
2024-08-30T19:20:25.9374713Z #24 5.171 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-web/6.1.3/spring-web-6.1.3.pom
2024-08-30T19:20:25.9376112Z #24 5.175 Progress (1): 2.4 kB
2024-08-30T19:20:25.9376794Z                     
2024-08-30T19:20:25.9378396Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-web/6.1.3/spring-web-6.1.3.pom (2.4 kB at 398 kB/s)
2024-08-30T19:20:25.9380483Z #24 5.179 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.pom
2024-08-30T19:20:25.9381574Z #24 5.184 Progress (1): 2.6 kB
2024-08-30T19:20:25.9381943Z                     
2024-08-30T19:20:25.9383091Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.pom (2.6 kB at 429 kB/s)
2024-08-30T19:20:25.9384886Z #24 5.187 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-java8/2.15.3/jackson-modules-java8-2.15.3.pom
2024-08-30T19:20:25.9385865Z #24 5.191 Progress (1): 3.1 kB
2024-08-30T19:20:25.9386230Z                     
2024-08-30T19:20:25.9387373Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-java8/2.15.3/jackson-modules-java8-2.15.3.pom (3.1 kB at 775 kB/s)
2024-08-30T19:20:25.9389130Z #24 5.196 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.pom
2024-08-30T19:20:25.9390215Z #24 5.201 Progress (1): 4.9 kB
2024-08-30T19:20:25.9390607Z                     
2024-08-30T19:20:25.9391699Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.pom (4.9 kB at 981 kB/s)
2024-08-30T19:20:25.9393590Z #24 5.206 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.pom
2024-08-30T19:20:25.9394958Z #24 5.210 Progress (1): 4.4 kB
2024-08-30T19:20:25.9395347Z                     
2024-08-30T19:20:25.9396519Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.pom (4.4 kB at 872 kB/s)
2024-08-30T19:20:25.9398406Z #24 5.214 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-tomcat/3.2.2/spring-boot-starter-tomcat-3.2.2.pom
2024-08-30T19:20:25.9399412Z #24 5.218 Progress (1): 3.1 kB
2024-08-30T19:20:25.9399733Z                     
2024-08-30T19:20:25.9400885Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-tomcat/3.2.2/spring-boot-starter-tomcat-3.2.2.pom (3.1 kB at 781 kB/s)
2024-08-30T19:20:25.9402580Z #24 5.221 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-core/10.1.18/tomcat-embed-core-10.1.18.pom
2024-08-30T19:20:25.9403521Z #24 5.225 Progress (1): 1.8 kB
2024-08-30T19:20:25.9403846Z                     
2024-08-30T19:20:25.9405252Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-core/10.1.18/tomcat-embed-core-10.1.18.pom (1.8 kB at 356 kB/s)
2024-08-30T19:20:25.9408147Z #24 5.227 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-el/10.1.18/tomcat-embed-el-10.1.18.pom
2024-08-30T19:20:25.9409739Z #24 5.232 Progress (1): 1.5 kB
2024-08-30T19:20:25.9410436Z                     
2024-08-30T19:20:25.9412069Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-el/10.1.18/tomcat-embed-el-10.1.18.pom (1.5 kB at 308 kB/s)
2024-08-30T19:20:25.9415668Z #24 5.235 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.18/tomcat-embed-websocket-10.1.18.pom
2024-08-30T19:20:25.9416679Z #24 5.240 Progress (1): 1.8 kB
2024-08-30T19:20:25.9417169Z                     
2024-08-30T19:20:25.9418350Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.18/tomcat-embed-websocket-10.1.18.pom (1.8 kB at 298 kB/s)
2024-08-30T19:20:25.9419900Z #24 5.243 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-webmvc/6.1.3/spring-webmvc-6.1.3.pom
2024-08-30T19:20:25.9420774Z #24 5.248 Progress (1): 2.9 kB
2024-08-30T19:20:25.9421231Z                     
2024-08-30T19:20:25.9422808Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-webmvc/6.1.3/spring-webmvc-6.1.3.pom (2.9 kB at 491 kB/s)
2024-08-30T19:20:25.9425150Z #24 5.252 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.3.1/spring-security-core-6.3.1.pom
2024-08-30T19:20:25.9426126Z #24 5.256 Progress (1): 3.2 kB
2024-08-30T19:20:25.9426491Z                     
2024-08-30T19:20:25.9427590Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.3.1/spring-security-core-6.3.1.pom (3.2 kB at 643 kB/s)
2024-08-30T19:20:25.9430086Z #24 5.264 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-crypto/6.2.1/spring-security-crypto-6.2.1.pom
2024-08-30T19:20:26.0386470Z #24 5.269 Progress (1): 1.9 kB
2024-08-30T19:20:26.0387294Z                     
2024-08-30T19:20:26.0390040Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-crypto/6.2.1/spring-security-crypto-6.2.1.pom (1.9 kB at 311 kB/s)
2024-08-30T19:20:26.0393259Z #24 5.272 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java/3.3.4/docker-java-3.3.4.pom
2024-08-30T19:20:26.0394810Z #24 5.277 Progress (1): 5.7 kB
2024-08-30T19:20:26.0395390Z                     
2024-08-30T19:20:26.0397660Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java/3.3.4/docker-java-3.3.4.pom (5.7 kB at 1.1 MB/s)
2024-08-30T19:20:26.0400521Z #24 5.279 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-parent/3.3.4/docker-java-parent-3.3.4.pom
2024-08-30T19:20:26.0402257Z #24 5.285 Progress (1): 12 kB
2024-08-30T19:20:26.0402960Z                    
2024-08-30T19:20:26.0404852Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-parent/3.3.4/docker-java-parent-3.3.4.pom (12 kB at 1.7 MB/s)
2024-08-30T19:20:26.0407643Z #24 5.288 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-core/3.3.4/docker-java-core-3.3.4.pom
2024-08-30T19:20:26.0657899Z #24 5.293 Progress (1): 2.9 kB
2024-08-30T19:20:26.0658715Z                     
2024-08-30T19:20:26.0660530Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-core/3.3.4/docker-java-core-3.3.4.pom (2.9 kB at 587 kB/s)
2024-08-30T19:20:26.0663148Z #24 5.297 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.pom
2024-08-30T19:20:26.0664407Z #24 5.302 Progress (1): 2.3 kB
2024-08-30T19:20:26.0664929Z                     
2024-08-30T19:20:26.0666396Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.pom (2.3 kB at 380 kB/s)
2024-08-30T19:20:26.0668621Z #24 5.305 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.pom
2024-08-30T19:20:26.0670607Z #24 5.309 Progress (1): 1.6 kB
2024-08-30T19:20:26.0671081Z                     
2024-08-30T19:20:26.0672785Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.pom (1.6 kB at 410 kB/s)
2024-08-30T19:20:26.0675324Z #24 5.312 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.pom
2024-08-30T19:20:26.0676508Z #24 5.316 Progress (1): 16/20 kB
2024-08-30T19:20:26.0676984Z Progress (1): 20 kB   
2024-08-30T19:20:26.0677387Z                    
2024-08-30T19:20:26.0678702Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.pom (20 kB at 4.1 MB/s)
2024-08-30T19:20:26.0680830Z #24 5.319 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/58/commons-parent-58.pom
2024-08-30T19:20:26.0682075Z #24 5.324 Progress (1): 16/83 kB
2024-08-30T19:20:26.0682566Z Progress (1): 33/83 kB
2024-08-30T19:20:26.0682976Z Progress (1): 37/83 kB
2024-08-30T19:20:26.0683370Z Progress (1): 53/83 kB
2024-08-30T19:20:26.0683776Z Progress (1): 69/83 kB
2024-08-30T19:20:26.0684217Z Progress (1): 83 kB   
2024-08-30T19:20:26.0684619Z                    
2024-08-30T19:20:26.0686003Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/58/commons-parent-58.pom (83 kB at 14 MB/s)
2024-08-30T19:20:26.0688297Z #24 5.330 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.21/commons-compress-1.21.pom
2024-08-30T19:20:26.0689625Z #24 5.333 Progress (1): 16/20 kB
2024-08-30T19:20:26.0690101Z Progress (1): 20 kB   
2024-08-30T19:20:26.0690502Z                    
2024-08-30T19:20:26.0692261Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.21/commons-compress-1.21.pom (20 kB at 4.9 MB/s)
2024-08-30T19:20:26.0694553Z #24 5.336 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/52/commons-parent-52.pom
2024-08-30T19:20:26.0695799Z #24 5.340 Progress (1): 16/79 kB
2024-08-30T19:20:26.0696322Z Progress (1): 32/79 kB
2024-08-30T19:20:26.0696808Z Progress (1): 49/79 kB
2024-08-30T19:20:26.0697276Z Progress (1): 65/79 kB
2024-08-30T19:20:26.0698086Z Progress (1): 79 kB   
2024-08-30T19:20:26.0698553Z                    
2024-08-30T19:20:26.0700054Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/52/commons-parent-52.pom (79 kB at 16 MB/s)
2024-08-30T19:20:26.0702101Z #24 5.344 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/23/apache-23.pom
2024-08-30T19:20:26.0703149Z #24 5.348 Progress (1): 16/18 kB
2024-08-30T19:20:26.0703645Z Progress (1): 18 kB   
2024-08-30T19:20:26.0704054Z                    
2024-08-30T19:20:26.0705201Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/23/apache-23.pom (18 kB at 4.6 MB/s)
2024-08-30T19:20:26.0706712Z #24 5.352 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.pom
2024-08-30T19:20:26.0707511Z #24 5.357 Progress (1): 16/31 kB
2024-08-30T19:20:26.0707816Z Progress (1): 31 kB   
2024-08-30T19:20:26.0708069Z                    
2024-08-30T19:20:26.0708951Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.pom (31 kB at 5.2 MB/s)
2024-08-30T19:20:26.0710201Z #24 5.366 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/19.0/guava-19.0.pom
2024-08-30T19:20:26.1425159Z #24 5.368 Progress (1): 6.8 kB
2024-08-30T19:20:26.1425733Z                     
2024-08-30T19:20:26.1427429Z Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/19.0/guava-19.0.pom (6.8 kB at 1.4 MB/s)
2024-08-30T19:20:26.1429771Z #24 5.374 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/19.0/guava-parent-19.0.pom
2024-08-30T19:20:26.1431565Z #24 5.377 Progress (1): 9.9 kB
2024-08-30T19:20:26.1431976Z                     
2024-08-30T19:20:26.1433069Z Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/19.0/guava-parent-19.0.pom (9.9 kB at 2.5 MB/s)
2024-08-30T19:20:26.1434694Z #24 5.381 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk18on/1.76/bcpkix-jdk18on-1.76.pom
2024-08-30T19:20:26.1435578Z #24 5.386 Progress (1): 1.6 kB
2024-08-30T19:20:26.1435869Z                     
2024-08-30T19:20:26.1436891Z Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk18on/1.76/bcpkix-jdk18on-1.76.pom (1.6 kB at 274 kB/s)
2024-08-30T19:20:26.1438528Z #24 5.390 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk18on/1.76/bcprov-jdk18on-1.76.pom
2024-08-30T19:20:26.1439428Z #24 5.393 Progress (1): 1.1 kB
2024-08-30T19:20:26.1439866Z                     
2024-08-30T19:20:26.1440933Z Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk18on/1.76/bcprov-jdk18on-1.76.pom (1.1 kB at 228 kB/s)
2024-08-30T19:20:26.1443274Z #24 5.398 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcutil-jdk18on/1.76/bcutil-jdk18on-1.76.pom
2024-08-30T19:20:26.1444594Z #24 5.402 Progress (1): 1.3 kB
2024-08-30T19:20:26.1445100Z                     
2024-08-30T19:20:26.1446700Z Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcutil-jdk18on/1.76/bcutil-jdk18on-1.76.pom (1.3 kB at 264 kB/s)
2024-08-30T19:20:26.1449562Z #24 5.405 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-jersey/3.3.4/docker-java-transport-jersey-3.3.4.pom
2024-08-30T19:20:26.1451844Z #24 5.409 Progress (1): 4.4 kB
2024-08-30T19:20:26.1452364Z                     
2024-08-30T19:20:26.1454333Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-jersey/3.3.4/docker-java-transport-jersey-3.3.4.pom (4.4 kB at 877 kB/s)
2024-08-30T19:20:26.1457667Z #24 5.413 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.15.3/jackson-jaxrs-json-provider-2.15.3.pom
2024-08-30T19:20:26.1459899Z #24 5.417 Progress (1): 4.5 kB
2024-08-30T19:20:26.1460458Z                     
2024-08-30T19:20:26.1462557Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.15.3/jackson-jaxrs-json-provider-2.15.3.pom (4.5 kB at 901 kB/s)
2024-08-30T19:20:26.1465844Z #24 5.420 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-providers/2.15.3/jackson-jaxrs-providers-2.15.3.pom
2024-08-30T19:20:26.1467510Z #24 5.424 Progress (1): 5.8 kB
2024-08-30T19:20:26.1467974Z                     
2024-08-30T19:20:26.1469875Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-providers/2.15.3/jackson-jaxrs-providers-2.15.3.pom (5.8 kB at 1.2 MB/s)
2024-08-30T19:20:26.1472883Z #24 5.429 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.15.3/jackson-jaxrs-base-2.15.3.pom
2024-08-30T19:20:26.1474465Z #24 5.434 Progress (1): 2.3 kB
2024-08-30T19:20:26.1474938Z                     
2024-08-30T19:20:26.1476717Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.15.3/jackson-jaxrs-base-2.15.3.pom (2.3 kB at 379 kB/s)
2024-08-30T19:20:26.1479946Z #24 5.439 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.15.3/jackson-module-jaxb-annotations-2.15.3.pom
2024-08-30T19:20:26.1481793Z #24 5.444 Progress (1): 3.8 kB
2024-08-30T19:20:26.1482284Z                     
2024-08-30T19:20:26.1484628Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.15.3/jackson-module-jaxb-annotations-2.15.3.pom (3.8 kB at 757 kB/s)
2024-08-30T19:20:26.1487786Z #24 5.447 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-base/2.15.3/jackson-modules-base-2.15.3.pom
2024-08-30T19:20:26.1489437Z #24 5.450 Progress (1): 3.8 kB
2024-08-30T19:20:26.1489932Z                     
2024-08-30T19:20:26.1492340Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-base/2.15.3/jackson-modules-base-2.15.3.pom (3.8 kB at 944 kB/s)
2024-08-30T19:20:26.1495498Z #24 5.456 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/jersey-apache-connector/3.1.5/jersey-apache-connector-3.1.5.pom
2024-08-30T19:20:26.1497232Z #24 5.461 Progress (1): 3.0 kB
2024-08-30T19:20:26.1497717Z                     
2024-08-30T19:20:26.1499635Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/jersey-apache-connector/3.1.5/jersey-apache-connector-3.1.5.pom (3.0 kB at 504 kB/s)
2024-08-30T19:20:26.1502447Z #24 5.465 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/project/3.1.5/project-3.1.5.pom
2024-08-30T19:20:26.2460042Z #24 5.470 Progress (1): 3.4 kB
2024-08-30T19:20:26.2460628Z                     
2024-08-30T19:20:26.2462440Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/project/3.1.5/project-3.1.5.pom (3.4 kB at 674 kB/s)
2024-08-30T19:20:26.2464671Z #24 5.473 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/project/3.1.5/project-3.1.5.pom
2024-08-30T19:20:26.2465917Z #24 5.478 Progress (1): 12/110 kB
2024-08-30T19:20:26.2466465Z Progress (1): 15/110 kB
2024-08-30T19:20:26.2466936Z Progress (1): 31/110 kB
2024-08-30T19:20:26.2467388Z Progress (1): 48/110 kB
2024-08-30T19:20:26.2467861Z Progress (1): 64/110 kB
2024-08-30T19:20:26.2468305Z Progress (1): 80/110 kB
2024-08-30T19:20:26.2468763Z Progress (1): 96/110 kB
2024-08-30T19:20:26.2469208Z Progress (1): 110 kB   
2024-08-30T19:20:26.2469642Z                     
2024-08-30T19:20:26.2471606Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/project/3.1.5/project-3.1.5.pom (110 kB at 12 MB/s)
2024-08-30T19:20:26.2473942Z #24 5.485 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.9/project-1.0.9.pom
2024-08-30T19:20:26.2475210Z #24 5.489 Progress (1): 16 kB
2024-08-30T19:20:26.2475663Z                    
2024-08-30T19:20:26.2477106Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.9/project-1.0.9.pom (16 kB at 3.2 MB/s)
2024-08-30T19:20:26.2479481Z #24 5.494 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.14/httpclient-4.5.14.pom
2024-08-30T19:20:26.2480883Z #24 5.500 Progress (1): 6.6 kB
2024-08-30T19:20:26.2481361Z                     
2024-08-30T19:20:26.2482930Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.14/httpclient-4.5.14.pom (6.6 kB at 828 kB/s)
2024-08-30T19:20:26.2485736Z #24 5.505 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.5.14/httpcomponents-client-4.5.14.pom
2024-08-30T19:20:26.2487278Z #24 5.509 Progress (1): 15 kB
2024-08-30T19:20:26.2487737Z                    
2024-08-30T19:20:26.2489520Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.5.14/httpcomponents-client-4.5.14.pom (15 kB at 2.5 MB/s)
2024-08-30T19:20:26.2492774Z #24 5.513 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-parent/11/httpcomponents-parent-11.pom
2024-08-30T19:20:26.2494333Z #24 5.517 Progress (1): 16/35 kB
2024-08-30T19:20:26.2495188Z Progress (1): 33/35 kB
2024-08-30T19:20:26.2495644Z Progress (1): 35 kB   
2024-08-30T19:20:26.2496062Z                    
2024-08-30T19:20:26.2497823Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-parent/11/httpcomponents-parent-11.pom (35 kB at 6.9 MB/s)
2024-08-30T19:20:26.2500234Z #24 5.521 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/21/apache-21.pom
2024-08-30T19:20:26.2501357Z #24 5.525 Progress (1): 16/17 kB
2024-08-30T19:20:26.2501862Z Progress (1): 17 kB   
2024-08-30T19:20:26.2502273Z                    
2024-08-30T19:20:26.2503529Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/21/apache-21.pom (17 kB at 4.3 MB/s)
2024-08-30T19:20:26.2505727Z #24 5.530 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.pom
2024-08-30T19:20:26.2507057Z #24 5.535 Progress (1): 5.0 kB
2024-08-30T19:20:26.2507535Z                     
2024-08-30T19:20:26.2509050Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.pom (5.0 kB at 993 kB/s)
2024-08-30T19:20:26.2511743Z #24 5.539 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-core/4.4.16/httpcomponents-core-4.4.16.pom
2024-08-30T19:20:26.2518874Z #24 5.543 Progress (1): 12 kB
2024-08-30T19:20:26.2519370Z                    
2024-08-30T19:20:26.2521201Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-core/4.4.16/httpcomponents-core-4.4.16.pom (12 kB at 2.4 MB/s)
2024-08-30T19:20:26.2523874Z #24 5.548 Downloading from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.pom
2024-08-30T19:20:26.2525214Z #24 5.552 Progress (1): 16/19 kB
2024-08-30T19:20:26.2525740Z Progress (1): 19 kB   
2024-08-30T19:20:26.2526141Z                    
2024-08-30T19:20:26.2527612Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.pom (19 kB at 3.8 MB/s)
2024-08-30T19:20:26.2530071Z #24 5.557 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/34/commons-parent-34.pom
2024-08-30T19:20:26.2532015Z #24 5.561 Progress (1): 16/56 kB
2024-08-30T19:20:26.2532889Z Progress (1): 33/56 kB
2024-08-30T19:20:26.2533374Z Progress (1): 49/56 kB
2024-08-30T19:20:26.2533807Z Progress (1): 56 kB   
2024-08-30T19:20:26.2534235Z                    
2024-08-30T19:20:26.2535774Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/34/commons-parent-34.pom (56 kB at 8.0 MB/s)
2024-08-30T19:20:26.2537914Z #24 5.568 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/13/apache-13.pom
2024-08-30T19:20:26.3520098Z #24 5.573 Progress (1): 14 kB
2024-08-30T19:20:26.3520701Z                    
2024-08-30T19:20:26.3522193Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/13/apache-13.pom (14 kB at 1.2 MB/s)
2024-08-30T19:20:26.3524286Z #24 5.589 Downloading from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.pom
2024-08-30T19:20:26.3525563Z #24 5.594 Progress (1): 16 kB
2024-08-30T19:20:26.3526024Z                    
2024-08-30T19:20:26.3527454Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.pom (16 kB at 2.3 MB/s)
2024-08-30T19:20:26.3530389Z #24 5.600 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-common/3.1.5/jersey-common-3.1.5.pom
2024-08-30T19:20:26.3532540Z #24 5.605 Progress (1): 13 kB
2024-08-30T19:20:26.3533009Z                    
2024-08-30T19:20:26.3534810Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-common/3.1.5/jersey-common-3.1.5.pom (13 kB at 1.8 MB/s)
2024-08-30T19:20:26.3538910Z #24 5.612 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.pom
2024-08-30T19:20:26.3540312Z #24 5.617 Progress (1): 16/18 kB
2024-08-30T19:20:26.3540820Z Progress (1): 18 kB   
2024-08-30T19:20:26.3541237Z                    
2024-08-30T19:20:26.3542768Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.pom (18 kB at 2.9 MB/s)
2024-08-30T19:20:26.3544949Z #24 5.621 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/all/3.1.0/all-3.1.0.pom
2024-08-30T19:20:26.3547687Z #24 5.626 Progress (1): 2.8 kB
2024-08-30T19:20:26.3548169Z                     
2024-08-30T19:20:26.3549427Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/all/3.1.0/all-3.1.0.pom (2.8 kB at 471 kB/s)
2024-08-30T19:20:26.3551752Z #24 5.630 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.pom
2024-08-30T19:20:26.3553250Z #24 5.634 Progress (1): 7.4 kB
2024-08-30T19:20:26.3553717Z                     
2024-08-30T19:20:26.3555393Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.pom (7.4 kB at 1.5 MB/s)
2024-08-30T19:20:26.3557842Z #24 5.637 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.5/project-1.0.5.pom
2024-08-30T19:20:26.3559076Z #24 5.641 Progress (1): 13 kB
2024-08-30T19:20:26.3559539Z                    
2024-08-30T19:20:26.3560892Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.5/project-1.0.5.pom (13 kB at 2.2 MB/s)
2024-08-30T19:20:26.3563240Z #24 5.645 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-client/3.1.5/jersey-client-3.1.5.pom
2024-08-30T19:20:26.3564657Z #24 5.649 Progress (1): 6.8 kB
2024-08-30T19:20:26.3565151Z                     
2024-08-30T19:20:26.3569025Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-client/3.1.5/jersey-client-3.1.5.pom (6.8 kB at 1.4 MB/s)
2024-08-30T19:20:26.3575138Z #24 5.655 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.pom
2024-08-30T19:20:26.3576565Z #24 5.658 Progress (1): 6.6 kB
2024-08-30T19:20:26.3577066Z                     
2024-08-30T19:20:26.3578678Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.pom (6.6 kB at 1.3 MB/s)
2024-08-30T19:20:26.3581647Z #24 5.662 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.5.12/httpcomponents-client-4.5.12.pom
2024-08-30T19:20:26.3583295Z #24 5.666 Progress (1): 16 kB
2024-08-30T19:20:26.3583773Z                    
2024-08-30T19:20:26.3585699Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.5.12/httpcomponents-client-4.5.12.pom (16 kB at 4.1 MB/s)
2024-08-30T19:20:26.3588437Z #24 5.672 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/jersey-hk2/3.1.5/jersey-hk2-3.1.5.pom
2024-08-30T19:20:26.4579014Z #24 5.679 Progress (1): 4.9 kB
2024-08-30T19:20:26.4579615Z                     
2024-08-30T19:20:26.4582135Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/jersey-hk2/3.1.5/jersey-hk2-3.1.5.pom (4.9 kB at 449 kB/s)
2024-08-30T19:20:26.4584563Z #24 5.685 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/project/3.1.5/project-3.1.5.pom
2024-08-30T19:20:26.4585864Z #24 5.690 Progress (1): 1.5 kB
2024-08-30T19:20:26.4586324Z                     
2024-08-30T19:20:26.4587793Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/project/3.1.5/project-3.1.5.pom (1.5 kB at 246 kB/s)
2024-08-30T19:20:26.4591364Z #24 5.696 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-locator/3.0.5/hk2-locator-3.0.5.pom
2024-08-30T19:20:26.4592629Z #24 5.702 Progress (1): 4.5 kB
2024-08-30T19:20:26.4593070Z                     
2024-08-30T19:20:26.4594472Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-locator/3.0.5/hk2-locator-3.0.5.pom (4.5 kB at 643 kB/s)
2024-08-30T19:20:26.4596632Z #24 5.705 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-parent/3.0.5/hk2-parent-3.0.5.pom
2024-08-30T19:20:26.4597868Z #24 5.710 Progress (1): 16/41 kB
2024-08-30T19:20:26.4598358Z Progress (1): 33/41 kB
2024-08-30T19:20:26.4598779Z Progress (1): 41 kB   
2024-08-30T19:20:26.4599166Z                    
2024-08-30T19:20:26.4600512Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-parent/3.0.5/hk2-parent-3.0.5.pom (41 kB at 5.9 MB/s)
2024-08-30T19:20:26.4603107Z #24 5.716 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/3.0.5/aopalliance-repackaged-3.0.5.pom
2024-08-30T19:20:26.4604831Z #24 5.723 Progress (1): 6.1 kB
2024-08-30T19:20:26.4605273Z                     
2024-08-30T19:20:26.4606987Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/3.0.5/aopalliance-repackaged-3.0.5.pom (6.1 kB at 865 kB/s)
2024-08-30T19:20:26.4609488Z #24 5.725 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/3.0.5/external-3.0.5.pom
2024-08-30T19:20:26.4610738Z #24 5.731 Progress (1): 1.4 kB
2024-08-30T19:20:26.4611326Z                     
2024-08-30T19:20:26.4612622Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/3.0.5/external-3.0.5.pom (1.4 kB at 205 kB/s)
2024-08-30T19:20:26.4614687Z #24 5.735 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-api/3.0.5/hk2-api-3.0.5.pom
2024-08-30T19:20:26.4615797Z #24 5.740 Progress (1): 4.0 kB
2024-08-30T19:20:26.4616435Z                     
2024-08-30T19:20:26.4618129Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-api/3.0.5/hk2-api-3.0.5.pom (4.0 kB at 660 kB/s)
2024-08-30T19:20:26.4620520Z #24 5.744 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-utils/3.0.5/hk2-utils-3.0.5.pom
2024-08-30T19:20:26.4621678Z #24 5.749 Progress (1): 4.8 kB
2024-08-30T19:20:26.4622100Z                     
2024-08-30T19:20:26.4623514Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-utils/3.0.5/hk2-utils-3.0.5.pom (4.8 kB at 684 kB/s)
2024-08-30T19:20:26.4626198Z #24 5.754 Downloading from central: https://repo.maven.apache.org/maven2/org/javassist/javassist/3.29.2-GA/javassist-3.29.2-GA.pom
2024-08-30T19:20:26.4627490Z #24 5.758 Progress (1): 11 kB
2024-08-30T19:20:26.4627953Z                    
2024-08-30T19:20:26.4629368Z Downloaded from central: https://repo.maven.apache.org/maven2/org/javassist/javassist/3.29.2-GA/javassist-3.29.2-GA.pom (11 kB at 2.2 MB/s)
2024-08-30T19:20:26.4631862Z #24 5.762 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-common/2.6.1/junixsocket-common-2.6.1.pom
2024-08-30T19:20:26.4633378Z #24 5.767 Progress (1): 2.9 kB
2024-08-30T19:20:26.4633828Z                     
2024-08-30T19:20:26.4635503Z Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-common/2.6.1/junixsocket-common-2.6.1.pom (2.9 kB at 420 kB/s)
2024-08-30T19:20:26.4638076Z #24 5.770 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket/2.6.1/junixsocket-2.6.1.pom
2024-08-30T19:20:26.4639407Z #24 5.775 Progress (1): 16 kB
2024-08-30T19:20:26.4639841Z                    
2024-08-30T19:20:26.4641318Z Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket/2.6.1/junixsocket-2.6.1.pom (16 kB at 3.2 MB/s)
2024-08-30T19:20:26.5605732Z #24 5.785 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/kohlschutter-parent-multirelease/1.5.1/kohlschutter-parent-multirelease-1.5.1.pom
2024-08-30T19:20:26.5607533Z #24 5.789 Progress (1): 10 kB
2024-08-30T19:20:26.5608079Z                    
2024-08-30T19:20:26.5610112Z Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/kohlschutter-parent-multirelease/1.5.1/kohlschutter-parent-multirelease-1.5.1.pom (10 kB at 2.1 MB/s)
2024-08-30T19:20:26.5613446Z #24 5.793 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/kohlschutter-parent/1.5.1/kohlschutter-parent-1.5.1.pom
2024-08-30T19:20:26.5614895Z #24 5.798 Progress (1): 15/62 kB
2024-08-30T19:20:26.5615378Z Progress (1): 31/62 kB
2024-08-30T19:20:26.5615818Z Progress (1): 48/62 kB
2024-08-30T19:20:26.5616231Z Progress (1): 62 kB   
2024-08-30T19:20:26.5616651Z                    
2024-08-30T19:20:26.5618357Z Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/kohlschutter-parent/1.5.1/kohlschutter-parent-1.5.1.pom (62 kB at 8.8 MB/s)
2024-08-30T19:20:26.5621216Z #24 5.804 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-native-common/2.6.1/junixsocket-native-common-2.6.1.pom
2024-08-30T19:20:26.5622819Z #24 5.812 Progress (1): 11 kB
2024-08-30T19:20:26.5623283Z                    
2024-08-30T19:20:26.5625053Z Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-native-common/2.6.1/junixsocket-native-common-2.6.1.pom (11 kB at 1.2 MB/s)
2024-08-30T19:20:26.5628036Z #24 5.817 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-netty/3.3.4/docker-java-transport-netty-3.3.4.pom
2024-08-30T19:20:26.5629657Z #24 5.823 Progress (1): 2.4 kB
2024-08-30T19:20:26.5630163Z                     
2024-08-30T19:20:26.5631953Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-netty/3.3.4/docker-java-transport-netty-3.3.4.pom (2.4 kB at 339 kB/s)
2024-08-30T19:20:26.5635075Z #24 5.828 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-http/4.1.105.Final/netty-codec-http-4.1.105.Final.pom
2024-08-30T19:20:26.5636490Z #24 5.832 Progress (1): 4.4 kB
2024-08-30T19:20:26.5636964Z                     
2024-08-30T19:20:26.5638543Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-http/4.1.105.Final/netty-codec-http-4.1.105.Final.pom (4.4 kB at 728 kB/s)
2024-08-30T19:20:26.5641021Z #24 5.836 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-parent/4.1.105.Final/netty-parent-4.1.105.Final.pom
2024-08-30T19:20:26.5642297Z #24 5.842 Progress (1): 16/85 kB
2024-08-30T19:20:26.5642772Z Progress (1): 33/85 kB
2024-08-30T19:20:26.5643202Z Progress (1): 49/85 kB
2024-08-30T19:20:26.5643643Z Progress (1): 64/85 kB
2024-08-30T19:20:26.5644061Z Progress (1): 80/85 kB
2024-08-30T19:20:26.5644467Z Progress (1): 85 kB   
2024-08-30T19:20:26.5644868Z                    
2024-08-30T19:20:26.5646363Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-parent/4.1.105.Final/netty-parent-4.1.105.Final.pom (85 kB at 11 MB/s)
2024-08-30T19:20:26.5648733Z #24 5.851 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-common/4.1.105.Final/netty-common-4.1.105.Final.pom
2024-08-30T19:20:26.5650061Z #24 5.857 Progress (1): 12 kB
2024-08-30T19:20:26.5650530Z                    
2024-08-30T19:20:26.5656309Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-common/4.1.105.Final/netty-common-4.1.105.Final.pom (12 kB at 1.7 MB/s)
2024-08-30T19:20:26.5658813Z #24 5.862 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-buffer/4.1.105.Final/netty-buffer-4.1.105.Final.pom
2024-08-30T19:20:26.5660611Z #24 5.867 Progress (1): 1.6 kB
2024-08-30T19:20:26.5661096Z                     
2024-08-30T19:20:26.5662594Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-buffer/4.1.105.Final/netty-buffer-4.1.105.Final.pom (1.6 kB at 316 kB/s)
2024-08-30T19:20:26.5667506Z #24 5.872 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport/4.1.105.Final/netty-transport-4.1.105.Final.pom
2024-08-30T19:20:26.5669387Z #24 5.877 Progress (1): 2.2 kB
2024-08-30T19:20:26.5669834Z                     
2024-08-30T19:20:26.5671177Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport/4.1.105.Final/netty-transport-4.1.105.Final.pom (2.2 kB at 309 kB/s)
2024-08-30T19:20:26.5672626Z #24 5.882 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-resolver/4.1.105.Final/netty-resolver-4.1.105.Final.pom
2024-08-30T19:20:26.6605822Z #24 5.888 Progress (1): 1.6 kB
2024-08-30T19:20:26.6606433Z                     
2024-08-30T19:20:26.6608907Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-resolver/4.1.105.Final/netty-resolver-4.1.105.Final.pom (1.6 kB at 198 kB/s)
2024-08-30T19:20:26.6610774Z #24 5.894 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec/4.1.105.Final/netty-codec-4.1.105.Final.pom
2024-08-30T19:20:26.6612081Z #24 5.911 Progress (1): 5.5 kB
2024-08-30T19:20:26.6612375Z                     
2024-08-30T19:20:26.6613282Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec/4.1.105.Final/netty-codec-4.1.105.Final.pom (5.5 kB at 304 kB/s)
2024-08-30T19:20:26.6614639Z #24 5.916 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler/4.1.105.Final/netty-handler-4.1.105.Final.pom
2024-08-30T19:20:26.6615416Z #24 5.920 Progress (1): 4.6 kB
2024-08-30T19:20:26.6615692Z                     
2024-08-30T19:20:26.6616556Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler/4.1.105.Final/netty-handler-4.1.105.Final.pom (4.6 kB at 770 kB/s)
2024-08-30T19:20:26.6618165Z #24 5.925 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-unix-common/4.1.105.Final/netty-transport-native-unix-common-4.1.105.Final.pom
2024-08-30T19:20:26.6619154Z #24 5.931 Progress (1): 16/33 kB
2024-08-30T19:20:26.6619770Z Progress (1): 33/33 kB
2024-08-30T19:20:26.6620037Z Progress (1): 33 kB   
2024-08-30T19:20:26.6620282Z                    
2024-08-30T19:20:26.6621394Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-unix-common/4.1.105.Final/netty-transport-native-unix-common-4.1.105.Final.pom (33 kB at 4.7 MB/s)
2024-08-30T19:20:26.6623073Z #24 5.937 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler-proxy/4.1.105.Final/netty-handler-proxy-4.1.105.Final.pom
2024-08-30T19:20:26.6623883Z #24 5.942 Progress (1): 3.6 kB
2024-08-30T19:20:26.6624161Z                     
2024-08-30T19:20:26.6625118Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler-proxy/4.1.105.Final/netty-handler-proxy-4.1.105.Final.pom (3.6 kB at 592 kB/s)
2024-08-30T19:20:26.6626587Z #24 5.947 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-socks/4.1.105.Final/netty-codec-socks-4.1.105.Final.pom
2024-08-30T19:20:26.6627452Z #24 5.952 Progress (1): 2.5 kB
2024-08-30T19:20:26.6627728Z                     
2024-08-30T19:20:26.6628628Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-socks/4.1.105.Final/netty-codec-socks-4.1.105.Final.pom (2.5 kB at 423 kB/s)
2024-08-30T19:20:26.6630195Z #24 5.957 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-epoll/4.1.105.Final/netty-transport-native-epoll-4.1.105.Final.pom
2024-08-30T19:20:26.6631118Z #24 5.962 Progress (1): 16/27 kB
2024-08-30T19:20:26.6631408Z Progress (1): 27 kB   
2024-08-30T19:20:26.6631643Z                    
2024-08-30T19:20:26.6632867Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-epoll/4.1.105.Final/netty-transport-native-epoll-4.1.105.Final.pom (27 kB at 5.3 MB/s)
2024-08-30T19:20:26.6634563Z #24 5.968 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-epoll/4.1.105.Final/netty-transport-classes-epoll-4.1.105.Final.pom
2024-08-30T19:20:26.6635487Z #24 5.973 Progress (1): 2.1 kB
2024-08-30T19:20:26.6635751Z                     
2024-08-30T19:20:26.6636794Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-epoll/4.1.105.Final/netty-transport-classes-epoll-4.1.105.Final.pom (2.1 kB at 356 kB/s)
2024-08-30T19:20:26.6638497Z #24 5.977 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-kqueue/4.1.105.Final/netty-transport-native-kqueue-4.1.105.Final.pom
2024-08-30T19:20:26.6639411Z #24 5.982 Progress (1): 16/31 kB
2024-08-30T19:20:26.6639708Z Progress (1): 31 kB   
2024-08-30T19:20:26.6639952Z                    
2024-08-30T19:20:26.6640979Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-kqueue/4.1.105.Final/netty-transport-native-kqueue-4.1.105.Final.pom (31 kB at 5.1 MB/s)
2024-08-30T19:20:26.6642700Z #24 5.988 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-kqueue/4.1.105.Final/netty-transport-classes-kqueue-4.1.105.Final.pom
2024-08-30T19:20:26.7638150Z #24 5.997 Progress (1): 2.1 kB
2024-08-30T19:20:26.7638786Z                     
2024-08-30T19:20:26.7641024Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-kqueue/4.1.105.Final/netty-transport-classes-kqueue-4.1.105.Final.pom (2.1 kB at 214 kB/s)
2024-08-30T19:20:26.7643870Z #24 6.002 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/2.0.11/jcl-over-slf4j-2.0.11.pom
2024-08-30T19:20:26.7645176Z #24 6.008 Progress (1): 1.7 kB
2024-08-30T19:20:26.7645651Z                     
2024-08-30T19:20:26.7647129Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/2.0.11/jcl-over-slf4j-2.0.11.pom (1.7 kB at 288 kB/s)
2024-08-30T19:20:26.7650354Z #24 6.012 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-httpclient5/3.3.4/docker-java-transport-httpclient5-3.3.4.pom
2024-08-30T19:20:26.7652347Z #24 6.017 Progress (1): 2.2 kB
2024-08-30T19:20:26.7652879Z                     
2024-08-30T19:20:26.7655023Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-httpclient5/3.3.4/docker-java-transport-httpclient5-3.3.4.pom (2.2 kB at 320 kB/s)
2024-08-30T19:20:26.7658059Z #24 6.021 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.2.3/httpclient5-5.2.3.pom
2024-08-30T19:20:26.7659571Z #24 6.025 Progress (1): 6.0 kB
2024-08-30T19:20:26.7660073Z                     
2024-08-30T19:20:26.7661820Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.2.3/httpclient5-5.2.3.pom (6.0 kB at 1.5 MB/s)
2024-08-30T19:20:26.7664691Z #24 6.027 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5-parent/5.2.3/httpclient5-parent-5.2.3.pom
2024-08-30T19:20:26.7666287Z #24 6.031 Progress (1): 16/17 kB
2024-08-30T19:20:26.7666780Z Progress (1): 17 kB   
2024-08-30T19:20:26.7667196Z                    
2024-08-30T19:20:26.7669037Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5-parent/5.2.3/httpclient5-parent-5.2.3.pom (17 kB at 4.2 MB/s)
2024-08-30T19:20:26.7671920Z #24 6.034 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-parent/13/httpcomponents-parent-13.pom
2024-08-30T19:20:26.7673511Z #24 6.038 Progress (1): 16/30 kB
2024-08-30T19:20:26.7674429Z Progress (1): 30 kB   
2024-08-30T19:20:26.7674833Z                    
2024-08-30T19:20:26.7676512Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-parent/13/httpcomponents-parent-13.pom (30 kB at 6.0 MB/s)
2024-08-30T19:20:26.7679095Z #24 6.042 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.pom
2024-08-30T19:20:26.7680470Z #24 6.045 Progress (1): 3.9 kB
2024-08-30T19:20:26.7680944Z                     
2024-08-30T19:20:26.7682541Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.pom (3.9 kB at 986 kB/s)
2024-08-30T19:20:26.7685272Z #24 6.047 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-parent/5.2.4/httpcore5-parent-5.2.4.pom
2024-08-30T19:20:26.7686873Z #24 6.051 Progress (1): 14 kB
2024-08-30T19:20:26.7687390Z                    
2024-08-30T19:20:26.7689163Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-parent/5.2.4/httpcore5-parent-5.2.4.pom (14 kB at 3.4 MB/s)
2024-08-30T19:20:26.7692567Z #24 6.055 Downloading from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna/5.13.0/jna-5.13.0.pom
2024-08-30T19:20:26.7695386Z #24 6.060 Progress (1): 2.0 kB
2024-08-30T19:20:26.7695859Z                     
2024-08-30T19:20:26.7697162Z Downloaded from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna/5.13.0/jna-5.13.0.pom (2.0 kB at 406 kB/s)
2024-08-30T19:20:26.7699554Z #24 6.063 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.pom
2024-08-30T19:20:26.7700955Z #24 6.067 Progress (1): 6.0 kB
2024-08-30T19:20:26.7701415Z                     
2024-08-30T19:20:26.7703677Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.pom (6.0 kB at 1.2 MB/s)
2024-08-30T19:20:26.7706510Z #24 6.069 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5-parent/5.3.1/httpclient5-parent-5.3.1.pom
2024-08-30T19:20:26.7708111Z #24 6.073 Progress (1): 16/17 kB
2024-08-30T19:20:26.7708607Z Progress (1): 17 kB   
2024-08-30T19:20:26.7709344Z                    
2024-08-30T19:20:26.7711063Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5-parent/5.3.1/httpclient5-parent-5.3.1.pom (17 kB at 4.2 MB/s)
2024-08-30T19:20:26.7713768Z #24 6.079 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.pom
2024-08-30T19:20:26.7715175Z #24 6.082 Progress (1): 3.6 kB
2024-08-30T19:20:26.7715652Z                     
2024-08-30T19:20:26.7717301Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.pom (3.6 kB at 904 kB/s)
2024-08-30T19:20:26.7719695Z #24 6.087 Downloading from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.pom
2024-08-30T19:20:26.8644174Z #24 6.091 Progress (1): 16/23 kB
2024-08-30T19:20:26.8644851Z Progress (1): 23 kB   
2024-08-30T19:20:26.8645289Z                    
2024-08-30T19:20:26.8646965Z Downloaded from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.pom (23 kB at 4.6 MB/s)
2024-08-30T19:20:26.8649263Z #24 6.097 Downloading from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api-parent/2.3.0/jaxb-api-parent-2.3.0.pom
2024-08-30T19:20:26.8650604Z #24 6.100 Progress (1): 5.6 kB
2024-08-30T19:20:26.8651332Z                     
2024-08-30T19:20:26.8652856Z Downloaded from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api-parent/2.3.0/jaxb-api-parent-2.3.0.pom (5.6 kB at 940 kB/s)
2024-08-30T19:20:26.8655425Z #24 6.104 Downloading from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/5/jvnet-parent-5.pom
2024-08-30T19:20:26.8656587Z #24 6.108 Progress (1): 8.9 kB
2024-08-30T19:20:26.8657370Z                     
2024-08-30T19:20:26.8658674Z Downloaded from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/5/jvnet-parent-5.pom (8.9 kB at 1.8 MB/s)
2024-08-30T19:20:26.8660900Z #24 6.112 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client/6.10.0/kubernetes-client-6.10.0.pom
2024-08-30T19:20:26.8662243Z #24 6.117 Progress (1): 9.4 kB
2024-08-30T19:20:26.8662705Z                     
2024-08-30T19:20:26.8664216Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client/6.10.0/kubernetes-client-6.10.0.pom (9.4 kB at 1.9 MB/s)
2024-08-30T19:20:26.8666815Z #24 6.120 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-project/6.10.0/kubernetes-client-project-6.10.0.pom
2024-08-30T19:20:26.8668819Z #24 6.125 Progress (1): 16/58 kB
2024-08-30T19:20:26.8669314Z Progress (1): 33/58 kB
2024-08-30T19:20:26.8669740Z Progress (1): 49/58 kB
2024-08-30T19:20:26.8670151Z Progress (1): 58 kB   
2024-08-30T19:20:26.8670560Z                    
2024-08-30T19:20:26.8672217Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-project/6.10.0/kubernetes-client-project-6.10.0.pom (58 kB at 7.2 MB/s)
2024-08-30T19:20:26.8674553Z #24 6.131 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.16.0/jackson-bom-2.16.0.pom
2024-08-30T19:20:26.8675804Z #24 6.135 Progress (1): 16/18 kB
2024-08-30T19:20:26.8676266Z Progress (1): 18 kB   
2024-08-30T19:20:26.8676642Z                    
2024-08-30T19:20:26.8678016Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.16.0/jackson-bom-2.16.0.pom (18 kB at 3.6 MB/s)
2024-08-30T19:20:26.8680267Z #24 6.139 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.16/jackson-parent-2.16.pom
2024-08-30T19:20:26.8681514Z #24 6.143 Progress (1): 6.5 kB
2024-08-30T19:20:26.8681945Z                     
2024-08-30T19:20:26.8683957Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.16/jackson-parent-2.16.pom (6.5 kB at 1.3 MB/s)
2024-08-30T19:20:26.8686522Z #24 6.146 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/56/oss-parent-56.pom
2024-08-30T19:20:26.8687687Z #24 6.150 Progress (1): 16/24 kB
2024-08-30T19:20:26.8688182Z Progress (1): 24 kB   
2024-08-30T19:20:26.8688591Z                    
2024-08-30T19:20:26.8689852Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/56/oss-parent-56.pom (24 kB at 4.7 MB/s)
2024-08-30T19:20:26.8696541Z #24 6.156 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-api/6.10.0/kubernetes-client-api-6.10.0.pom
2024-08-30T19:20:26.8697995Z #24 6.165 Progress (1): 11 kB
2024-08-30T19:20:26.8698455Z                    
2024-08-30T19:20:26.8704074Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-api/6.10.0/kubernetes-client-api-6.10.0.pom (11 kB at 1.3 MB/s)
2024-08-30T19:20:26.8706664Z #24 6.170 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-core/6.10.0/kubernetes-model-core-6.10.0.pom
2024-08-30T19:20:26.8708024Z #24 6.176 Progress (1): 8.9 kB
2024-08-30T19:20:26.8708470Z                     
2024-08-30T19:20:26.8709999Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-core/6.10.0/kubernetes-model-core-6.10.0.pom (8.9 kB at 1.3 MB/s)
2024-08-30T19:20:26.8712536Z #24 6.179 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-generator/6.10.0/kubernetes-model-generator-6.10.0.pom
2024-08-30T19:20:26.8713940Z #24 6.186 Progress (1): 9.1 kB
2024-08-30T19:20:26.8714723Z                     
2024-08-30T19:20:26.8716302Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-generator/6.10.0/kubernetes-model-generator-6.10.0.pom (9.1 kB at 1.3 MB/s)
2024-08-30T19:20:26.9648198Z #24 6.191 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-common/6.10.0/kubernetes-model-common-6.10.0.pom
2024-08-30T19:20:26.9649771Z #24 6.197 Progress (1): 3.5 kB
2024-08-30T19:20:26.9650267Z                     
2024-08-30T19:20:26.9652213Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-common/6.10.0/kubernetes-model-common-6.10.0.pom (3.5 kB at 494 kB/s)
2024-08-30T19:20:26.9655084Z #24 6.208 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-gatewayapi/6.10.0/kubernetes-model-gatewayapi-6.10.0.pom
2024-08-30T19:20:26.9656610Z #24 6.213 Progress (1): 2.5 kB
2024-08-30T19:20:26.9657105Z                     
2024-08-30T19:20:26.9658872Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-gatewayapi/6.10.0/kubernetes-model-gatewayapi-6.10.0.pom (2.5 kB at 422 kB/s)
2024-08-30T19:20:26.9661752Z #24 6.219 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-resource/6.10.0/kubernetes-model-resource-6.10.0.pom
2024-08-30T19:20:26.9663329Z #24 6.225 Progress (1): 2.5 kB
2024-08-30T19:20:26.9663855Z                     
2024-08-30T19:20:26.9665564Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-resource/6.10.0/kubernetes-model-resource-6.10.0.pom (2.5 kB at 360 kB/s)
2024-08-30T19:20:26.9668334Z #24 6.230 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-rbac/6.10.0/kubernetes-model-rbac-6.10.0.pom
2024-08-30T19:20:26.9669771Z #24 6.234 Progress (1): 2.4 kB
2024-08-30T19:20:26.9670239Z                     
2024-08-30T19:20:26.9671814Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-rbac/6.10.0/kubernetes-model-rbac-6.10.0.pom (2.4 kB at 394 kB/s)
2024-08-30T19:20:26.9674783Z #24 6.240 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-admissionregistration/6.10.0/kubernetes-model-admissionregistration-6.10.0.pom
2024-08-30T19:20:26.9676567Z #24 6.246 Progress (1): 3.6 kB
2024-08-30T19:20:26.9677465Z                     
2024-08-30T19:20:26.9679486Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-admissionregistration/6.10.0/kubernetes-model-admissionregistration-6.10.0.pom (3.6 kB at 518 kB/s)
2024-08-30T19:20:26.9682425Z #24 6.251 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apps/6.10.0/kubernetes-model-apps-6.10.0.pom
2024-08-30T19:20:26.9684190Z #24 6.256 Progress (1): 2.4 kB
2024-08-30T19:20:26.9684654Z                     
2024-08-30T19:20:26.9686283Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apps/6.10.0/kubernetes-model-apps-6.10.0.pom (2.4 kB at 394 kB/s)
2024-08-30T19:20:26.9693095Z #24 6.261 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-autoscaling/6.10.0/kubernetes-model-autoscaling-6.10.0.pom
2024-08-30T19:20:26.9694696Z #24 6.266 Progress (1): 2.4 kB
2024-08-30T19:20:26.9695190Z                     
2024-08-30T19:20:26.9701660Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-autoscaling/6.10.0/kubernetes-model-autoscaling-6.10.0.pom (2.4 kB at 477 kB/s)
2024-08-30T19:20:26.9704726Z #24 6.271 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apiextensions/6.10.0/kubernetes-model-apiextensions-6.10.0.pom
2024-08-30T19:20:26.9706363Z #24 6.277 Progress (1): 2.5 kB
2024-08-30T19:20:26.9706846Z                     
2024-08-30T19:20:26.9708682Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apiextensions/6.10.0/kubernetes-model-apiextensions-6.10.0.pom (2.5 kB at 362 kB/s)
2024-08-30T19:20:26.9711875Z #24 6.282 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-batch/6.10.0/kubernetes-model-batch-6.10.0.pom
2024-08-30T19:20:26.9713339Z #24 6.287 Progress (1): 2.4 kB
2024-08-30T19:20:26.9713812Z                     
2024-08-30T19:20:26.9715457Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-batch/6.10.0/kubernetes-model-batch-6.10.0.pom (2.4 kB at 394 kB/s)
2024-08-30T19:20:27.0719616Z #24 6.292 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-certificates/6.10.0/kubernetes-model-certificates-6.10.0.pom
2024-08-30T19:20:27.0721384Z #24 6.297 Progress (1): 2.5 kB
2024-08-30T19:20:27.0721889Z                     
2024-08-30T19:20:27.0723796Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-certificates/6.10.0/kubernetes-model-certificates-6.10.0.pom (2.5 kB at 421 kB/s)
2024-08-30T19:20:27.0726847Z #24 6.302 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-coordination/6.10.0/kubernetes-model-coordination-6.10.0.pom
2024-08-30T19:20:27.0728466Z #24 6.307 Progress (1): 3.1 kB
2024-08-30T19:20:27.0728959Z                     
2024-08-30T19:20:27.0730801Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-coordination/6.10.0/kubernetes-model-coordination-6.10.0.pom (3.1 kB at 436 kB/s)
2024-08-30T19:20:27.0734188Z #24 6.312 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-discovery/6.10.0/kubernetes-model-discovery-6.10.0.pom
2024-08-30T19:20:27.0735740Z #24 6.317 Progress (1): 2.4 kB
2024-08-30T19:20:27.0736209Z                     
2024-08-30T19:20:27.0737944Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-discovery/6.10.0/kubernetes-model-discovery-6.10.0.pom (2.4 kB at 396 kB/s)
2024-08-30T19:20:27.0740739Z #24 6.322 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-events/6.10.0/kubernetes-model-events-6.10.0.pom
2024-08-30T19:20:27.0742742Z #24 6.327 Progress (1): 2.4 kB
2024-08-30T19:20:27.0743235Z                     
2024-08-30T19:20:27.0745405Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-events/6.10.0/kubernetes-model-events-6.10.0.pom (2.4 kB at 338 kB/s)
2024-08-30T19:20:27.0748243Z #24 6.332 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-extensions/6.10.0/kubernetes-model-extensions-6.10.0.pom
2024-08-30T19:20:27.0749841Z #24 6.337 Progress (1): 2.4 kB
2024-08-30T19:20:27.0750321Z                     
2024-08-30T19:20:27.0756287Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-extensions/6.10.0/kubernetes-model-extensions-6.10.0.pom (2.4 kB at 340 kB/s)
2024-08-30T19:20:27.0759306Z #24 6.342 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-flowcontrol/6.10.0/kubernetes-model-flowcontrol-6.10.0.pom
2024-08-30T19:20:27.0760951Z #24 6.347 Progress (1): 2.6 kB
2024-08-30T19:20:27.0761420Z                     
2024-08-30T19:20:27.0763303Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-flowcontrol/6.10.0/kubernetes-model-flowcontrol-6.10.0.pom (2.6 kB at 518 kB/s)
2024-08-30T19:20:27.0766212Z #24 6.351 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-networking/6.10.0/kubernetes-model-networking-6.10.0.pom
2024-08-30T19:20:27.0767744Z #24 6.356 Progress (1): 2.5 kB
2024-08-30T19:20:27.0768223Z                     
2024-08-30T19:20:27.0770008Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-networking/6.10.0/kubernetes-model-networking-6.10.0.pom (2.5 kB at 420 kB/s)
2024-08-30T19:20:27.0772894Z #24 6.361 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-metrics/6.10.0/kubernetes-model-metrics-6.10.0.pom
2024-08-30T19:20:27.0774759Z #24 6.366 Progress (1): 2.5 kB
2024-08-30T19:20:27.0775242Z                     
2024-08-30T19:20:27.0776962Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-metrics/6.10.0/kubernetes-model-metrics-6.10.0.pom (2.5 kB at 503 kB/s)
2024-08-30T19:20:27.0779698Z #24 6.371 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-policy/6.10.0/kubernetes-model-policy-6.10.0.pom
2024-08-30T19:20:27.0781148Z #24 6.376 Progress (1): 2.5 kB
2024-08-30T19:20:27.0781617Z                     
2024-08-30T19:20:27.0783254Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-policy/6.10.0/kubernetes-model-policy-6.10.0.pom (2.5 kB at 418 kB/s)
2024-08-30T19:20:27.0786020Z #24 6.380 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-scheduling/6.10.0/kubernetes-model-scheduling-6.10.0.pom
2024-08-30T19:20:27.0787554Z #24 6.385 Progress (1): 2.4 kB
2024-08-30T19:20:27.0788023Z                     
2024-08-30T19:20:27.0789755Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-scheduling/6.10.0/kubernetes-model-scheduling-6.10.0.pom (2.4 kB at 397 kB/s)
2024-08-30T19:20:27.0792701Z #24 6.390 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-storageclass/6.10.0/kubernetes-model-storageclass-6.10.0.pom
2024-08-30T19:20:27.1710467Z #24 6.398 Progress (1): 2.5 kB
2024-08-30T19:20:27.1711036Z                     
2024-08-30T19:20:27.1713080Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-storageclass/6.10.0/kubernetes-model-storageclass-6.10.0.pom (2.5 kB at 281 kB/s)
2024-08-30T19:20:27.1715852Z #24 6.403 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-node/6.10.0/kubernetes-model-node-6.10.0.pom
2024-08-30T19:20:27.1717320Z #24 6.408 Progress (1): 2.4 kB
2024-08-30T19:20:27.1717791Z                     
2024-08-30T19:20:27.1719413Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-node/6.10.0/kubernetes-model-node-6.10.0.pom (2.4 kB at 338 kB/s)
2024-08-30T19:20:27.1722328Z #24 6.413 Downloading from central: https://repo.maven.apache.org/maven2/org/snakeyaml/snakeyaml-engine/2.7/snakeyaml-engine-2.7.pom
2024-08-30T19:20:27.1723676Z #24 6.419 Progress (1): 1.7/23 kB
2024-08-30T19:20:27.1724185Z Progress (1): 18/23 kB 
2024-08-30T19:20:27.1724625Z Progress (1): 23 kB   
2024-08-30T19:20:27.1725029Z                    
2024-08-30T19:20:27.1726485Z Downloaded from central: https://repo.maven.apache.org/maven2/org/snakeyaml/snakeyaml-engine/2.7/snakeyaml-engine-2.7.pom (23 kB at 3.3 MB/s)
2024-08-30T19:20:27.1729249Z #24 6.423 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.pom
2024-08-30T19:20:27.1731330Z #24 6.427 Progress (1): 2.6 kB
2024-08-30T19:20:27.1739738Z                     
2024-08-30T19:20:27.1742440Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.pom (2.6 kB at 526 kB/s)
2024-08-30T19:20:27.1745695Z #24 6.430 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformats-text/2.15.3/jackson-dataformats-text-2.15.3.pom
2024-08-30T19:20:27.1747425Z #24 6.434 Progress (1): 3.5 kB
2024-08-30T19:20:27.1747894Z                     
2024-08-30T19:20:27.1749822Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformats-text/2.15.3/jackson-dataformats-text-2.15.3.pom (3.5 kB at 869 kB/s)
2024-08-30T19:20:27.1752901Z #24 6.438 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-httpclient-okhttp/6.10.0/kubernetes-httpclient-okhttp-6.10.0.pom
2024-08-30T19:20:27.1754799Z #24 6.444 Progress (1): 6.9 kB
2024-08-30T19:20:27.1755275Z                     
2024-08-30T19:20:27.1757056Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-httpclient-okhttp/6.10.0/kubernetes-httpclient-okhttp-6.10.0.pom (6.9 kB at 986 kB/s)
2024-08-30T19:20:27.1759641Z #24 6.449 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp/4.12.0/okhttp-4.12.0.pom
2024-08-30T19:20:27.1760879Z #24 6.453 Progress (1): 1.8 kB
2024-08-30T19:20:27.1761342Z                     
2024-08-30T19:20:27.1762758Z Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp/4.12.0/okhttp-4.12.0.pom (1.8 kB at 363 kB/s)
2024-08-30T19:20:27.1764879Z #24 6.456 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio/3.6.0/okio-3.6.0.pom
2024-08-30T19:20:27.1766022Z #24 6.460 Progress (1): 1.7 kB
2024-08-30T19:20:27.1766486Z                     
2024-08-30T19:20:27.1767856Z Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio/3.6.0/okio-3.6.0.pom (1.7 kB at 421 kB/s)
2024-08-30T19:20:27.1769963Z #24 6.462 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio-jvm/3.6.0/okio-jvm-3.6.0.pom
2024-08-30T19:20:27.1790242Z #24 6.466 Progress (1): 1.9 kB
2024-08-30T19:20:27.1790783Z                     
2024-08-30T19:20:27.1792299Z Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio-jvm/3.6.0/okio-jvm-3.6.0.pom (1.9 kB at 379 kB/s)
2024-08-30T19:20:27.1794790Z #24 6.470 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.22/kotlin-stdlib-jdk8-1.9.22.pom
2024-08-30T19:20:27.1796273Z #24 6.474 Progress (1): 1.6 kB
2024-08-30T19:20:27.1796755Z                     
2024-08-30T19:20:27.1798413Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.22/kotlin-stdlib-jdk8-1.9.22.pom (1.6 kB at 316 kB/s)
2024-08-30T19:20:27.1801004Z #24 6.477 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.9.22/kotlin-stdlib-1.9.22.pom
2024-08-30T19:20:27.1802391Z #24 6.481 Progress (1): 2.8 kB
2024-08-30T19:20:27.1802857Z                     
2024-08-30T19:20:27.1804824Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.9.22/kotlin-stdlib-1.9.22.pom (2.8 kB at 712 kB/s)
2024-08-30T19:20:27.1807195Z #24 6.484 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.pom
2024-08-30T19:20:27.1808453Z #24 6.489 Progress (1): 4.9 kB
2024-08-30T19:20:27.1808931Z                     
2024-08-30T19:20:27.1810334Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.pom (4.9 kB at 822 kB/s)
2024-08-30T19:20:27.1813091Z #24 6.493 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.22/kotlin-stdlib-jdk7-1.9.22.pom
2024-08-30T19:20:27.1814577Z #24 6.497 Progress (1): 1.4 kB
2024-08-30T19:20:27.1815048Z                     
2024-08-30T19:20:27.2715821Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.22/kotlin-stdlib-jdk7-1.9.22.pom (1.4 kB at 232 kB/s)
2024-08-30T19:20:27.2717771Z #24 6.510 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-common/1.9.22/kotlin-stdlib-common-1.9.22.pom
2024-08-30T19:20:27.2718635Z #24 6.514 Progress (1): 1.8 kB
2024-08-30T19:20:27.2718931Z                     
2024-08-30T19:20:27.2719909Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-common/1.9.22/kotlin-stdlib-common-1.9.22.pom (1.8 kB at 302 kB/s)
2024-08-30T19:20:27.2721466Z #24 6.518 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/logging-interceptor/4.12.0/logging-interceptor-4.12.0.pom
2024-08-30T19:20:27.2722617Z #24 6.523 Progress (1): 1.9 kB
2024-08-30T19:20:27.2722896Z                     
2024-08-30T19:20:27.2723843Z Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/logging-interceptor/4.12.0/logging-interceptor-4.12.0.pom (1.9 kB at 265 kB/s)
2024-08-30T19:20:27.2725195Z #24 6.527 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/zjsonpatch/0.3.0/zjsonpatch-0.3.0.pom
2024-08-30T19:20:27.2725872Z #24 6.532 Progress (1): 14 kB
2024-08-30T19:20:27.2726146Z                    
2024-08-30T19:20:27.2726906Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/zjsonpatch/0.3.0/zjsonpatch-0.3.0.pom (14 kB at 2.3 MB/s)
2024-08-30T19:20:27.2728098Z #24 6.536 Downloading from central: https://repo.maven.apache.org/maven2/org/projectlombok/lombok/1.18.30/lombok-1.18.30.pom
2024-08-30T19:20:27.2728786Z #24 6.540 Progress (1): 1.5 kB
2024-08-30T19:20:27.2729061Z                     
2024-08-30T19:20:27.2729855Z Downloaded from central: https://repo.maven.apache.org/maven2/org/projectlombok/lombok/1.18.30/lombok-1.18.30.pom (1.5 kB at 371 kB/s)
2024-08-30T19:20:27.2731773Z #24 6.543 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-websocket/3.2.2/spring-boot-starter-websocket-3.2.2.pom
2024-08-30T19:20:27.2733193Z #24 6.547 Progress (1): 2.5 kB
2024-08-30T19:20:27.2733481Z                     
2024-08-30T19:20:27.2734601Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-websocket/3.2.2/spring-boot-starter-websocket-3.2.2.pom (2.5 kB at 420 kB/s)
2024-08-30T19:20:27.2736178Z #24 6.551 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.3/spring-messaging-6.1.3.pom
2024-08-30T19:20:27.2736954Z #24 6.556 Progress (1): 2.2 kB
2024-08-30T19:20:27.2737236Z                     
2024-08-30T19:20:27.2738393Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.3/spring-messaging-6.1.3.pom (2.2 kB at 443 kB/s)
2024-08-30T19:20:27.2740106Z #24 6.559 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-websocket/6.1.3/spring-websocket-6.1.3.pom
2024-08-30T19:20:27.2740881Z #24 6.563 Progress (1): 2.4 kB
2024-08-30T19:20:27.2741432Z                     
2024-08-30T19:20:27.2742561Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-websocket/6.1.3/spring-websocket-6.1.3.pom (2.4 kB at 481 kB/s)
2024-08-30T19:20:27.2744410Z #24 6.566 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-devtools/3.2.2/spring-boot-devtools-3.2.2.pom
2024-08-30T19:20:27.2747483Z #24 6.570 Progress (1): 2.3 kB
2024-08-30T19:20:27.2747878Z                     
2024-08-30T19:20:27.2749024Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-devtools/3.2.2/spring-boot-devtools-3.2.2.pom (2.3 kB at 451 kB/s)
2024-08-30T19:20:27.2752126Z #24 6.574 Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.pom
2024-08-30T19:20:27.2753917Z #24 6.578 Progress (1): 16/27 kB
2024-08-30T19:20:27.2754328Z Progress (1): 27 kB   
2024-08-30T19:20:27.2754581Z                    
2024-08-30T19:20:27.2755337Z Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.pom (27 kB at 5.4 MB/s)
2024-08-30T19:20:27.2756495Z #24 6.582 Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.pom
2024-08-30T19:20:27.2757219Z #24 6.586 Progress (1): 1.4 kB
2024-08-30T19:20:27.2757506Z                     
2024-08-30T19:20:27.2758307Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.pom (1.4 kB at 270 kB/s)
2024-08-30T19:20:27.2759823Z #24 6.589 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-validation/3.2.2/spring-boot-starter-validation-3.2.2.pom
2024-08-30T19:20:27.2761048Z #24 6.593 Progress (1): 2.5 kB
2024-08-30T19:20:27.2761329Z                     
2024-08-30T19:20:27.2762849Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-validation/3.2.2/spring-boot-starter-validation-3.2.2.pom (2.5 kB at 418 kB/s)
2024-08-30T19:20:27.2765911Z #24 6.598 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.pom
2024-08-30T19:20:27.3726947Z #24 6.602 Progress (1): 15 kB
2024-08-30T19:20:27.3727518Z                    
2024-08-30T19:20:27.3729545Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.pom (15 kB at 2.9 MB/s)
2024-08-30T19:20:27.3732982Z #24 6.605 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator-parent/8.0.1.Final/hibernate-validator-parent-8.0.1.Final.pom
2024-08-30T19:20:27.3734800Z #24 6.610 Progress (1): 16/81 kB
2024-08-30T19:20:27.3735288Z Progress (1): 33/81 kB
2024-08-30T19:20:27.3735693Z Progress (1): 49/81 kB
2024-08-30T19:20:27.3736081Z Progress (1): 66/81 kB
2024-08-30T19:20:27.3736516Z Progress (1): 81 kB   
2024-08-30T19:20:27.3736899Z                    
2024-08-30T19:20:27.3738845Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator-parent/8.0.1.Final/hibernate-validator-parent-8.0.1.Final.pom (81 kB at 16 MB/s)
2024-08-30T19:20:27.3741701Z #24 6.614 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/arquillian/arquillian-bom/1.7.0.Alpha10/arquillian-bom-1.7.0.Alpha10.pom
2024-08-30T19:20:27.3743095Z #24 6.618 Progress (1): 10 kB
2024-08-30T19:20:27.3743537Z                    
2024-08-30T19:20:27.3745155Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/arquillian/arquillian-bom/1.7.0.Alpha10/arquillian-bom-1.7.0.Alpha10.pom (10 kB at 2.1 MB/s)
2024-08-30T19:20:27.3747696Z #24 6.620 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/shrinkwrap-bom/1.2.6/shrinkwrap-bom-1.2.6.pom
2024-08-30T19:20:27.3749014Z #24 6.623 Progress (1): 4.0 kB
2024-08-30T19:20:27.3749873Z                     
2024-08-30T19:20:27.3751436Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/shrinkwrap-bom/1.2.6/shrinkwrap-bom-1.2.6.pom (4.0 kB at 996 kB/s)
2024-08-30T19:20:27.3754079Z #24 6.626 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-bom/3.1.4/shrinkwrap-resolver-bom-3.1.4.pom
2024-08-30T19:20:27.3755596Z #24 6.629 Progress (1): 7.0 kB
2024-08-30T19:20:27.3756064Z                     
2024-08-30T19:20:27.3761440Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-bom/3.1.4/shrinkwrap-resolver-bom-3.1.4.pom (7.0 kB at 1.4 MB/s)
2024-08-30T19:20:27.3763966Z #24 6.632 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/3.6.3/maven-3.6.3.pom
2024-08-30T19:20:27.3765063Z #24 6.635 Progress (1): 16/26 kB
2024-08-30T19:20:27.3765545Z Progress (1): 26 kB   
2024-08-30T19:20:27.3765933Z                    
2024-08-30T19:20:27.3767182Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/3.6.3/maven-3.6.3.pom (26 kB at 5.3 MB/s)
2024-08-30T19:20:27.3768806Z #24 6.638 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/33/maven-parent-33.pom
2024-08-30T19:20:27.3769521Z #24 6.642 Progress (1): 16/44 kB
2024-08-30T19:20:27.3769817Z Progress (1): 33/44 kB
2024-08-30T19:20:27.3770083Z Progress (1): 44 kB   
2024-08-30T19:20:27.3770333Z                    
2024-08-30T19:20:27.3771368Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/33/maven-parent-33.pom (44 kB at 11 MB/s)
2024-08-30T19:20:27.3773253Z #24 6.646 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/descriptors/shrinkwrap-descriptors-bom/2.0.0/shrinkwrap-descriptors-bom-2.0.0.pom
2024-08-30T19:20:27.3774254Z #24 6.650 Progress (1): 5.2 kB
2024-08-30T19:20:27.3774539Z                     
2024-08-30T19:20:27.3775920Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/descriptors/shrinkwrap-descriptors-bom/2.0.0/shrinkwrap-descriptors-bom-2.0.0.pom (5.2 kB at 1.3 MB/s)
2024-08-30T19:20:27.3777607Z #24 6.653 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.pom
2024-08-30T19:20:27.3778442Z #24 6.661 Progress (1): 11 kB
2024-08-30T19:20:27.3778711Z                    
2024-08-30T19:20:27.3779644Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.pom (11 kB at 1.2 MB/s)
2024-08-30T19:20:27.3781138Z #24 6.665 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.pom
2024-08-30T19:20:27.3781942Z #24 6.668 Progress (1): 5.8 kB
2024-08-30T19:20:27.3782216Z                     
2024-08-30T19:20:27.3783145Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.pom (5.8 kB at 1.2 MB/s)
2024-08-30T19:20:27.3785083Z #24 6.673 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-annotations/3.5.6-Final/hibernate-annotations-3.5.6-Final.pom
2024-08-30T19:20:27.3785943Z #24 6.678 Progress (1): 7.4 kB
2024-08-30T19:20:27.3786218Z                     
2024-08-30T19:20:27.3787184Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-annotations/3.5.6-Final/hibernate-annotations-3.5.6-Final.pom (7.4 kB at 1.2 MB/s)
2024-08-30T19:20:27.3788695Z #24 6.681 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-parent/3.5.6-Final/hibernate-parent-3.5.6-Final.pom
2024-08-30T19:20:27.3789499Z #24 6.687 Progress (1): 16/43 kB
2024-08-30T19:20:27.3789797Z Progress (1): 33/43 kB
2024-08-30T19:20:27.3790056Z Progress (1): 43 kB   
2024-08-30T19:20:27.3790288Z                    
2024-08-30T19:20:27.3791416Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-parent/3.5.6-Final/hibernate-parent-3.5.6-Final.pom (43 kB at 5.4 MB/s)
2024-08-30T19:20:27.3792866Z #24 6.694 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-core/3.5.6-Final/hibernate-core-3.5.6-Final.pom
2024-08-30T19:20:27.4736497Z #24 6.699 Progress (1): 7.3 kB
2024-08-30T19:20:27.4737090Z                     
2024-08-30T19:20:27.4738978Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-core/3.5.6-Final/hibernate-core-3.5.6-Final.pom (7.3 kB at 1.2 MB/s)
2024-08-30T19:20:27.4741241Z #24 6.704 Downloading from central: https://repo.maven.apache.org/maven2/antlr/antlr/2.7.6/antlr-2.7.6.pom
2024-08-30T19:20:27.4742299Z #24 6.708 Progress (1): 230 B
2024-08-30T19:20:27.4742778Z                    
2024-08-30T19:20:27.4743959Z Downloaded from central: https://repo.maven.apache.org/maven2/antlr/antlr/2.7.6/antlr-2.7.6.pom (230 B at 46 kB/s)
2024-08-30T19:20:27.4746125Z #24 6.711 Downloading from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.pom
2024-08-30T19:20:27.4747469Z #24 6.717 Progress (1): 6.1 kB
2024-08-30T19:20:27.4747914Z                     
2024-08-30T19:20:27.4749372Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.pom (6.1 kB at 869 kB/s)
2024-08-30T19:20:27.4751758Z #24 6.720 Downloading from central: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.pom
2024-08-30T19:20:27.4753447Z #24 6.724 Progress (1): 6.8 kB
2024-08-30T19:20:27.4753965Z                     
2024-08-30T19:20:27.4755298Z Downloaded from central: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.pom (6.8 kB at 1.7 MB/s)
2024-08-30T19:20:27.4757374Z #24 6.727 Downloading from central: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.pom
2024-08-30T19:20:27.4758584Z #24 6.730 Progress (1): 2.2 kB
2024-08-30T19:20:27.4759080Z                     
2024-08-30T19:20:27.4760451Z Downloaded from central: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.pom (2.2 kB at 450 kB/s)
2024-08-30T19:20:27.4762488Z #24 6.734 Downloading from central: https://repo.maven.apache.org/maven2/javax/transaction/jta/1.1/jta-1.1.pom
2024-08-30T19:20:27.4763627Z #24 6.738 Progress (1): 598 B
2024-08-30T19:20:27.4764125Z                    
2024-08-30T19:20:27.4765429Z Downloaded from central: https://repo.maven.apache.org/maven2/javax/transaction/jta/1.1/jta-1.1.pom (598 B at 100 kB/s)
2024-08-30T19:20:27.4768099Z #24 6.741 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-commons-annotations/3.2.0.Final/hibernate-commons-annotations-3.2.0.Final.pom
2024-08-30T19:20:27.4769874Z #24 6.747 Progress (1): 6.6 kB
2024-08-30T19:20:27.4770387Z                     
2024-08-30T19:20:27.4773484Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-commons-annotations/3.2.0.Final/hibernate-commons-annotations-3.2.0.Final.pom (6.6 kB at 1.1 MB/s)
2024-08-30T19:20:27.4777108Z #24 6.751 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/javax/persistence/hibernate-jpa-2.0-api/1.0.0.Final/hibernate-jpa-2.0-api-1.0.0.Final.pom
2024-08-30T19:20:27.4778941Z #24 6.757 Progress (1): 6.0 kB
2024-08-30T19:20:27.4779427Z                     
2024-08-30T19:20:27.4781219Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/javax/persistence/hibernate-jpa-2.0-api/1.0.0.Final/hibernate-jpa-2.0-api-1.0.0.Final.pom (6.0 kB at 859 kB/s)
2024-08-30T19:20:27.4784019Z #24 6.760 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.10/spring-messaging-6.1.10.pom
2024-08-30T19:20:27.4785355Z #24 6.763 Progress (1): 2.2 kB
2024-08-30T19:20:27.4785827Z                     
2024-08-30T19:20:27.4787750Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.10/spring-messaging-6.1.10.pom (2.2 kB at 445 kB/s)
2024-08-30T19:20:27.4791602Z #24 6.767 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-api/0.12.6/jjwt-api-0.12.6.pom
2024-08-30T19:20:27.4792783Z #24 6.773 Progress (1): 1.8 kB
2024-08-30T19:20:27.4793237Z                     
2024-08-30T19:20:27.4794652Z Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-api/0.12.6/jjwt-api-0.12.6.pom (1.8 kB at 254 kB/s)
2024-08-30T19:20:27.4796922Z #24 6.776 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-root/0.12.6/jjwt-root-0.12.6.pom
2024-08-30T19:20:27.4798207Z #24 6.782 Progress (1): 16/37 kB
2024-08-30T19:20:27.4798732Z Progress (1): 32/37 kB
2024-08-30T19:20:27.4799153Z Progress (1): 37 kB   
2024-08-30T19:20:27.4799579Z                    
2024-08-30T19:20:27.4800990Z Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-root/0.12.6/jjwt-root-0.12.6.pom (37 kB at 5.3 MB/s)
2024-08-30T19:20:27.4803142Z #24 6.788 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-impl/0.12.6/jjwt-impl-0.12.6.pom
2024-08-30T19:20:27.4804361Z #24 6.795 Progress (1): 2.5 kB
2024-08-30T19:20:27.4804853Z                     
2024-08-30T19:20:27.4806301Z Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-impl/0.12.6/jjwt-impl-0.12.6.pom (2.5 kB at 362 kB/s)
2024-08-30T19:20:27.5747107Z #24 6.801 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-jackson/0.12.6/jjwt-jackson-0.12.6.pom
2024-08-30T19:20:27.5748942Z #24 6.807 Progress (1): 2.9 kB
2024-08-30T19:20:27.5749449Z                     
2024-08-30T19:20:27.5751197Z Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-jackson/0.12.6/jjwt-jackson-0.12.6.pom (2.9 kB at 412 kB/s)
2024-08-30T19:20:27.5753845Z #24 6.811 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-web/6.3.1/spring-security-web-6.3.1.pom
2024-08-30T19:20:27.5755280Z #24 6.816 Progress (1): 3.2 kB
2024-08-30T19:20:27.5755742Z                     
2024-08-30T19:20:27.5757412Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-web/6.3.1/spring-security-web-6.3.1.pom (3.2 kB at 641 kB/s)
2024-08-30T19:20:27.5760150Z #24 6.819 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.2.1/spring-security-core-6.2.1.pom
2024-08-30T19:20:27.5761621Z #24 6.823 Progress (1): 3.2 kB
2024-08-30T19:20:27.5762107Z                     
2024-08-30T19:20:27.5763901Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.2.1/spring-security-core-6.2.1.pom (3.2 kB at 536 kB/s)
2024-08-30T19:20:27.5766898Z #24 6.827 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-config/6.3.1/spring-security-config-6.3.1.pom
2024-08-30T19:20:27.5768496Z #24 6.831 Progress (1): 2.8 kB
2024-08-30T19:20:27.5768947Z                     
2024-08-30T19:20:27.5770896Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-config/6.3.1/spring-security-config-6.3.1.pom (2.8 kB at 567 kB/s)
2024-08-30T19:20:27.5774252Z #24 6.880 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter/3.2.2/spring-boot-starter-3.2.2.jar
2024-08-30T19:20:27.5775798Z #24 6.885 Progress (1): 4.8 kB
2024-08-30T19:20:27.5776291Z                     
2024-08-30T19:20:27.5778090Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter/3.2.2/spring-boot-starter-3.2.2.jar (4.8 kB at 954 kB/s)
2024-08-30T19:20:27.5781409Z #24 6.887 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.jar
2024-08-30T19:20:27.5784268Z #24 6.888 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-autoconfigure/3.2.2/spring-boot-autoconfigure-3.2.2.jar
2024-08-30T19:20:27.5787313Z #24 6.889 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-logging/3.2.2/spring-boot-starter-logging-3.2.2.jar
2024-08-30T19:20:27.5789987Z #24 6.890 Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.jar
2024-08-30T19:20:27.5791371Z #24 6.893 Progress (1): 0/1.6 MB
2024-08-30T19:20:27.5791882Z Progress (1): 0/1.6 MB
2024-08-30T19:20:27.5792307Z Progress (1): 0/1.6 MB
2024-08-30T19:20:27.5792720Z Progress (1): 0.1/1.6 MB
2024-08-30T19:20:27.5793167Z Progress (1): 0.1/1.6 MB
2024-08-30T19:20:27.5793604Z Progress (1): 0.1/1.6 MB
2024-08-30T19:20:27.5794050Z Progress (1): 0.1/1.6 MB
2024-08-30T19:20:27.5794483Z Progress (1): 0.1/1.6 MB
2024-08-30T19:20:27.6747499Z Progress (1): 0.1/1.6 MB
2024-08-30T19:20:27.6748018Z                         
2024-08-30T19:20:27.6749563Z Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.jar
2024-08-30T19:20:27.6750801Z #24 6.909 Progress (1): 0.2/1.6 MB
2024-08-30T19:20:27.6751308Z Progress (1): 0.2/1.6 MB
2024-08-30T19:20:27.6751746Z Progress (1): 0.2/1.6 MB
2024-08-30T19:20:27.6781365Z Progress (1): 0.2/1.6 MB
2024-08-30T19:20:27.6782036Z Progress (2): 0.2/1.6 MB | 1.4/4.8 kB
2024-08-30T19:20:27.6782618Z Progress (2): 0.2/1.6 MB | 2.8/4.8 kB
2024-08-30T19:20:27.6783579Z Progress (2): 0.2/1.6 MB | 2.8/4.8 kB
2024-08-30T19:20:27.6784113Z Progress (2): 0.2/1.6 MB | 4.1/4.8 kB
2024-08-30T19:20:27.6784657Z Progress (2): 0.2/1.6 MB | 4.8 kB    
2024-08-30T19:20:27.6785172Z Progress (2): 0.2/1.6 MB | 4.8 kB
2024-08-30T19:20:27.6785674Z Progress (2): 0.3/1.6 MB | 4.8 kB
2024-08-30T19:20:27.6786177Z Progress (2): 0.3/1.6 MB | 4.8 kB
2024-08-30T19:20:27.6786699Z Progress (2): 0.3/1.6 MB | 4.8 kB
2024-08-30T19:20:27.6787156Z                                  
2024-08-30T19:20:27.6789332Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-logging/3.2.2/spring-boot-starter-logging-3.2.2.jar (4.8 kB at 190 kB/s)
2024-08-30T19:20:27.6792223Z #24 6.913 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar
2024-08-30T19:20:27.6793635Z #24 6.913 Progress (1): 0.3/1.6 MB
2024-08-30T19:20:27.6794134Z Progress (1): 0.3/1.6 MB
2024-08-30T19:20:27.6794579Z Progress (1): 0.3/1.6 MB
2024-08-30T19:20:27.6795009Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.6795414Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.6795837Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.6796262Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.6796671Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.6797112Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.6797562Z Progress (2): 0.4/1.6 MB | 1.4/284 kB
2024-08-30T19:20:27.6798097Z Progress (2): 0.4/1.6 MB | 2.8/284 kB
2024-08-30T19:20:27.6798613Z Progress (2): 0.4/1.6 MB | 4.1/284 kB
2024-08-30T19:20:27.6799139Z Progress (2): 0.4/1.6 MB | 5.5/284 kB
2024-08-30T19:20:27.6799664Z Progress (2): 0.4/1.6 MB | 6.9/284 kB
2024-08-30T19:20:27.6800209Z Progress (2): 0.4/1.6 MB | 8.3/284 kB
2024-08-30T19:20:27.6800776Z Progress (2): 0.4/1.6 MB | 9.7/284 kB
2024-08-30T19:20:27.6801327Z Progress (2): 0.4/1.6 MB | 11/284 kB 
2024-08-30T19:20:27.6801900Z Progress (2): 0.4/1.6 MB | 12/284 kB
2024-08-30T19:20:27.6802492Z Progress (2): 0.4/1.6 MB | 14/284 kB
2024-08-30T19:20:27.6803096Z Progress (2): 0.4/1.6 MB | 15/284 kB
2024-08-30T19:20:27.6803678Z Progress (2): 0.4/1.6 MB | 17/284 kB
2024-08-30T19:20:27.6804248Z Progress (2): 0.4/1.6 MB | 18/284 kB
2024-08-30T19:20:27.6804812Z Progress (2): 0.4/1.6 MB | 19/284 kB
2024-08-30T19:20:27.6805386Z Progress (2): 0.4/1.6 MB | 21/284 kB
2024-08-30T19:20:27.6806313Z Progress (2): 0.5/1.6 MB | 21/284 kB
2024-08-30T19:20:27.6806949Z Progress (2): 0.5/1.6 MB | 21/284 kB
2024-08-30T19:20:27.6807598Z Progress (3): 0.5/1.6 MB | 21/284 kB | 1.4/23 kB
2024-08-30T19:20:27.6808324Z Progress (3): 0.5/1.6 MB | 21/284 kB | 2.8/23 kB
2024-08-30T19:20:27.6809035Z Progress (3): 0.5/1.6 MB | 22/284 kB | 2.8/23 kB
2024-08-30T19:20:27.6809743Z Progress (3): 0.5/1.6 MB | 22/284 kB | 4.1/23 kB
2024-08-30T19:20:27.6810456Z Progress (3): 0.5/1.6 MB | 22/284 kB | 5.5/23 kB
2024-08-30T19:20:27.6811576Z Progress (3): 0.5/1.6 MB | 23/284 kB | 5.5/23 kB
2024-08-30T19:20:27.6812300Z Progress (3): 0.5/1.6 MB | 23/284 kB | 6.9/23 kB
2024-08-30T19:20:27.6813027Z Progress (3): 0.5/1.6 MB | 25/284 kB | 6.9/23 kB
2024-08-30T19:20:27.6813720Z Progress (3): 0.5/1.6 MB | 25/284 kB | 8.3/23 kB
2024-08-30T19:20:27.6814397Z Progress (3): 0.5/1.6 MB | 25/284 kB | 9.7/23 kB
2024-08-30T19:20:27.6815105Z Progress (3): 0.5/1.6 MB | 25/284 kB | 11/23 kB 
2024-08-30T19:20:27.6815780Z Progress (3): 0.5/1.6 MB | 25/284 kB | 12/23 kB
2024-08-30T19:20:27.6816428Z Progress (3): 0.5/1.6 MB | 25/284 kB | 14/23 kB
2024-08-30T19:20:27.6817092Z Progress (3): 0.5/1.6 MB | 25/284 kB | 15/23 kB
2024-08-30T19:20:27.6817693Z Progress (3): 0.5/1.6 MB | 25/284 kB | 16/23 kB
2024-08-30T19:20:27.6818302Z Progress (3): 0.5/1.6 MB | 26/284 kB | 16/23 kB
2024-08-30T19:20:27.6818919Z Progress (3): 0.5/1.6 MB | 28/284 kB | 16/23 kB
2024-08-30T19:20:27.6819534Z Progress (3): 0.5/1.6 MB | 28/284 kB | 18/23 kB
2024-08-30T19:20:27.6820179Z Progress (3): 0.5/1.6 MB | 29/284 kB | 18/23 kB
2024-08-30T19:20:27.6820783Z Progress (3): 0.5/1.6 MB | 29/284 kB | 19/23 kB
2024-08-30T19:20:27.6821491Z Progress (3): 0.5/1.6 MB | 29/284 kB | 21/23 kB
2024-08-30T19:20:27.6822568Z Progress (3): 0.5/1.6 MB | 29/284 kB | 22/23 kB
2024-08-30T19:20:27.6823236Z Progress (3): 0.5/1.6 MB | 29/284 kB | 23 kB   
2024-08-30T19:20:27.6823981Z Progress (3): 0.5/1.6 MB | 30/284 kB | 23 kB
2024-08-30T19:20:27.6824625Z Progress (3): 0.5/1.6 MB | 32/284 kB | 23 kB
2024-08-30T19:20:27.6825285Z Progress (3): 0.5/1.6 MB | 33/284 kB | 23 kB
2024-08-30T19:20:27.6825941Z                                             
2024-08-30T19:20:27.6827788Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar (23 kB at 741 kB/s)
2024-08-30T19:20:27.6830351Z #24 6.922 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar
2024-08-30T19:20:27.6831757Z #24 6.922 Progress (2): 0.5/1.6 MB | 34/284 kB
2024-08-30T19:20:27.6832365Z Progress (2): 0.5/1.6 MB | 36/284 kB
2024-08-30T19:20:27.6832898Z Progress (2): 0.5/1.6 MB | 37/284 kB
2024-08-30T19:20:27.6833427Z Progress (2): 0.5/1.6 MB | 39/284 kB
2024-08-30T19:20:27.6833965Z Progress (2): 0.5/1.6 MB | 40/284 kB
2024-08-30T19:20:27.6834494Z Progress (2): 0.5/1.6 MB | 41/284 kB
2024-08-30T19:20:27.6835010Z Progress (2): 0.5/1.6 MB | 43/284 kB
2024-08-30T19:20:27.6835545Z Progress (2): 0.5/1.6 MB | 44/284 kB
2024-08-30T19:20:27.6836068Z Progress (2): 0.5/1.6 MB | 46/284 kB
2024-08-30T19:20:27.6836609Z Progress (2): 0.5/1.6 MB | 47/284 kB
2024-08-30T19:20:27.6837170Z Progress (3): 0.5/1.6 MB | 47/284 kB | 16/317 kB
2024-08-30T19:20:27.6837827Z Progress (3): 0.5/1.6 MB | 47/284 kB | 16/317 kB
2024-08-30T19:20:27.6838473Z Progress (3): 0.5/1.6 MB | 48/284 kB | 16/317 kB
2024-08-30T19:20:27.6839113Z Progress (3): 0.5/1.6 MB | 48/284 kB | 33/317 kB
2024-08-30T19:20:27.6839757Z Progress (3): 0.5/1.6 MB | 50/284 kB | 33/317 kB
2024-08-30T19:20:27.6840402Z Progress (3): 0.5/1.6 MB | 51/284 kB | 33/317 kB
2024-08-30T19:20:27.6841151Z Progress (3): 0.5/1.6 MB | 51/284 kB | 49/317 kB
2024-08-30T19:20:27.6841872Z Progress (3): 0.5/1.6 MB | 51/284 kB | 49/317 kB
2024-08-30T19:20:27.6842529Z Progress (3): 0.5/1.6 MB | 52/284 kB | 49/317 kB
2024-08-30T19:20:27.6843150Z Progress (3): 0.5/1.6 MB | 54/284 kB | 49/317 kB
2024-08-30T19:20:27.6843785Z Progress (3): 0.5/1.6 MB | 54/284 kB | 64/317 kB
2024-08-30T19:20:27.6844766Z Progress (3): 0.5/1.6 MB | 54/284 kB | 80/317 kB
2024-08-30T19:20:27.6845420Z Progress (3): 0.5/1.6 MB | 54/284 kB | 97/317 kB
2024-08-30T19:20:27.6846049Z Progress (3): 0.5/1.6 MB | 54/284 kB | 113/317 kB
2024-08-30T19:20:27.6846694Z Progress (3): 0.5/1.6 MB | 54/284 kB | 130/317 kB
2024-08-30T19:20:27.6847345Z Progress (3): 0.5/1.6 MB | 54/284 kB | 146/317 kB
2024-08-30T19:20:27.6847979Z Progress (3): 0.5/1.6 MB | 54/284 kB | 162/317 kB
2024-08-30T19:20:27.6848637Z Progress (3): 0.5/1.6 MB | 54/284 kB | 179/317 kB
2024-08-30T19:20:27.6849255Z Progress (3): 0.5/1.6 MB | 54/284 kB | 195/317 kB
2024-08-30T19:20:27.6849870Z Progress (3): 0.5/1.6 MB | 55/284 kB | 195/317 kB
2024-08-30T19:20:27.6850509Z Progress (3): 0.5/1.6 MB | 57/284 kB | 195/317 kB
2024-08-30T19:20:27.6857048Z Progress (3): 0.5/1.6 MB | 57/284 kB | 211/317 kB
2024-08-30T19:20:27.6857952Z Progress (3): 0.5/1.6 MB | 57/284 kB | 211/317 kB
2024-08-30T19:20:27.6858616Z Progress (3): 0.5/1.6 MB | 57/284 kB | 228/317 kB
2024-08-30T19:20:27.6859293Z Progress (3): 0.5/1.6 MB | 58/284 kB | 228/317 kB
2024-08-30T19:20:27.6859948Z Progress (3): 0.5/1.6 MB | 58/284 kB | 244/317 kB
2024-08-30T19:20:27.6860612Z Progress (3): 0.5/1.6 MB | 58/284 kB | 261/317 kB
2024-08-30T19:20:27.6861225Z Progress (3): 0.5/1.6 MB | 58/284 kB | 277/317 kB
2024-08-30T19:20:27.6861842Z Progress (3): 0.5/1.6 MB | 58/284 kB | 293/317 kB
2024-08-30T19:20:27.6862469Z Progress (3): 0.5/1.6 MB | 58/284 kB | 310/317 kB
2024-08-30T19:20:27.6863100Z Progress (3): 0.5/1.6 MB | 58/284 kB | 317 kB    
2024-08-30T19:20:27.6863692Z                                              
2024-08-30T19:20:27.6865388Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar (317 kB at 8.4 MB/s)
2024-08-30T19:20:27.6867930Z #24 6.930 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/jul-to-slf4j/2.0.11/jul-to-slf4j-2.0.11.jar
2024-08-30T19:20:27.6869215Z #24 6.930 Progress (2): 0.5/1.6 MB | 59/284 kB
2024-08-30T19:20:27.6869828Z Progress (2): 0.5/1.6 MB | 61/284 kB
2024-08-30T19:20:27.6870340Z Progress (2): 0.5/1.6 MB | 61/284 kB
2024-08-30T19:20:27.6870901Z Progress (3): 0.5/1.6 MB | 61/284 kB | 6.3 kB
2024-08-30T19:20:27.6871479Z                                              
2024-08-30T19:20:27.6873020Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/jul-to-slf4j/2.0.11/jul-to-slf4j-2.0.11.jar (6.3 kB at 155 kB/s)
2024-08-30T19:20:27.6875477Z #24 6.932 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar
2024-08-30T19:20:27.6877059Z #24 6.932 Progress (2): 0.5/1.6 MB | 62/284 kB
2024-08-30T19:20:27.6877683Z Progress (2): 0.5/1.6 MB | 63/284 kB
2024-08-30T19:20:27.6878191Z Progress (2): 0.5/1.6 MB | 65/284 kB
2024-08-30T19:20:27.6878707Z Progress (2): 0.5/1.6 MB | 65/284 kB
2024-08-30T19:20:27.6879258Z Progress (2): 0.6/1.6 MB | 65/284 kB
2024-08-30T19:20:27.6879767Z Progress (2): 0.6/1.6 MB | 65/284 kB
2024-08-30T19:20:27.6880287Z Progress (2): 0.6/1.6 MB | 65/284 kB
2024-08-30T19:20:27.6880819Z Progress (2): 0.6/1.6 MB | 65/284 kB
2024-08-30T19:20:27.6881312Z Progress (2): 0.6/1.6 MB | 81/284 kB
2024-08-30T19:20:27.6881810Z Progress (2): 0.6/1.6 MB | 81/284 kB
2024-08-30T19:20:27.6882387Z Progress (3): 0.6/1.6 MB | 81/284 kB | 16/26 kB
2024-08-30T19:20:27.6883009Z Progress (3): 0.6/1.6 MB | 98/284 kB | 16/26 kB
2024-08-30T19:20:27.6883626Z Progress (3): 0.6/1.6 MB | 98/284 kB | 26 kB   
2024-08-30T19:20:27.6884243Z Progress (3): 0.6/1.6 MB | 114/284 kB | 26 kB
2024-08-30T19:20:27.6884894Z Progress (3): 0.6/1.6 MB | 130/284 kB | 26 kB
2024-08-30T19:20:27.6885503Z Progress (3): 0.6/1.6 MB | 147/284 kB | 26 kB
2024-08-30T19:20:27.6886069Z                                              
2024-08-30T19:20:27.6887878Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar (26 kB at 581 kB/s)
2024-08-30T19:20:27.6890626Z #24 6.937 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.1.3/spring-core-6.1.3.jar
2024-08-30T19:20:27.6892146Z #24 6.937 Progress (2): 0.6/1.6 MB | 147/284 kB
2024-08-30T19:20:27.6892770Z Progress (2): 0.7/1.6 MB | 147/284 kB
2024-08-30T19:20:27.6901673Z Progress (2): 0.7/1.6 MB | 147/284 kB
2024-08-30T19:20:27.6902223Z Progress (2): 0.7/1.6 MB | 147/284 kB
2024-08-30T19:20:27.6902757Z Progress (2): 0.7/1.6 MB | 147/284 kB
2024-08-30T19:20:27.6903310Z Progress (2): 0.7/1.6 MB | 147/284 kB
2024-08-30T19:20:27.6903833Z Progress (2): 0.7/1.6 MB | 147/284 kB
2024-08-30T19:20:27.6904358Z Progress (2): 0.8/1.6 MB | 147/284 kB
2024-08-30T19:20:27.6904927Z Progress (2): 0.8/1.6 MB | 147/284 kB
2024-08-30T19:20:27.6905432Z Progress (2): 0.8/1.6 MB | 163/284 kB
2024-08-30T19:20:27.6905954Z Progress (2): 0.8/1.6 MB | 163/284 kB
2024-08-30T19:20:27.6906506Z Progress (2): 0.8/1.6 MB | 180/284 kB
2024-08-30T19:20:27.6906999Z Progress (2): 0.8/1.6 MB | 180/284 kB
2024-08-30T19:20:27.6907522Z Progress (2): 0.8/1.6 MB | 196/284 kB
2024-08-30T19:20:27.6908074Z Progress (2): 0.8/1.6 MB | 196/284 kB
2024-08-30T19:20:27.6908572Z Progress (2): 0.8/1.6 MB | 212/284 kB
2024-08-30T19:20:27.6909085Z Progress (2): 0.8/1.6 MB | 212/284 kB
2024-08-30T19:20:27.6909626Z Progress (2): 0.8/1.6 MB | 229/284 kB
2024-08-30T19:20:27.6910271Z Progress (2): 0.9/1.6 MB | 229/284 kB
2024-08-30T19:20:27.6910779Z Progress (2): 0.9/1.6 MB | 245/284 kB
2024-08-30T19:20:27.6911287Z Progress (2): 0.9/1.6 MB | 245/284 kB
2024-08-30T19:20:27.6911805Z Progress (2): 0.9/1.6 MB | 262/284 kB
2024-08-30T19:20:27.6912319Z Progress (2): 0.9/1.6 MB | 262/284 kB
2024-08-30T19:20:27.6913128Z Progress (2): 0.9/1.6 MB | 278/284 kB
2024-08-30T19:20:27.6913641Z Progress (2): 0.9/1.6 MB | 284 kB    
2024-08-30T19:20:27.6914183Z Progress (2): 0.9/1.6 MB | 284 kB
2024-08-30T19:20:27.6914654Z Progress (2): 0.9/1.6 MB | 284 kB
2024-08-30T19:20:27.6915159Z Progress (2): 0.9/1.6 MB | 284 kB
2024-08-30T19:20:27.6915660Z Progress (2): 0.9/1.6 MB | 284 kB
2024-08-30T19:20:27.6916105Z                                  
2024-08-30T19:20:27.6917773Z Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.jar (284 kB at 4.6 MB/s)
2024-08-30T19:20:27.6919214Z #24 6.951 Progress (1): 1.0/1.6 MB
2024-08-30T19:20:27.6919706Z                         
2024-08-30T19:20:27.6920996Z Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.1.3/spring-jcl-6.1.3.jar
2024-08-30T19:20:27.6922217Z #24 6.953 Progress (1): 1.0/1.6 MB
2024-08-30T19:20:27.6922710Z Progress (1): 1.0/1.6 MB
2024-08-30T19:20:27.6923151Z Progress (1): 1.0/1.6 MB
2024-08-30T19:20:27.6923592Z Progress (1): 1.0/1.6 MB
2024-08-30T19:20:27.6924015Z Progress (1): 1.0/1.6 MB
2024-08-30T19:20:27.6924451Z Progress (2): 1.0/1.6 MB | 0/1.9 MB
2024-08-30T19:20:27.6924989Z Progress (2): 1.1/1.6 MB | 0/1.9 MB
2024-08-30T19:20:27.6925510Z Progress (2): 1.1/1.6 MB | 0/1.9 MB
2024-08-30T19:20:27.6926025Z Progress (2): 1.1/1.6 MB | 0/1.9 MB
2024-08-30T19:20:27.6926540Z Progress (2): 1.1/1.6 MB | 0/1.9 MB
2024-08-30T19:20:27.6927055Z Progress (2): 1.1/1.6 MB | 0/1.9 MB
2024-08-30T19:20:27.6927555Z Progress (2): 1.1/1.6 MB | 0/1.9 MB
2024-08-30T19:20:27.6928067Z Progress (2): 1.1/1.6 MB | 0/1.9 MB
2024-08-30T19:20:27.6928589Z Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
2024-08-30T19:20:27.6929115Z Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
2024-08-30T19:20:27.6929637Z Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
2024-08-30T19:20:27.6930169Z Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
2024-08-30T19:20:27.6930688Z Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
2024-08-30T19:20:27.6931839Z Progress (2): 1.2/1.6 MB | 0.1/1.9 MB
2024-08-30T19:20:27.6932411Z Progress (2): 1.2/1.6 MB | 0.1/1.9 MB
2024-08-30T19:20:27.6932953Z Progress (2): 1.2/1.6 MB | 0.1/1.9 MB
2024-08-30T19:20:27.6933481Z Progress (2): 1.2/1.6 MB | 0.1/1.9 MB
2024-08-30T19:20:27.6934114Z Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
2024-08-30T19:20:27.6934648Z Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
2024-08-30T19:20:27.6935464Z Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
2024-08-30T19:20:27.6936060Z Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
2024-08-30T19:20:27.6936617Z Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
2024-08-30T19:20:27.6937234Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6937929Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6938631Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6939328Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6940037Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6940703Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6941394Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6942054Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6942714Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6943396Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6944071Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6944749Z Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
2024-08-30T19:20:27.6995928Z Progress (4): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB | 16/25 kB
2024-08-30T19:20:27.7008222Z Progress (4): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB | 25 kB   
2024-08-30T19:20:27.7009427Z Progress (4): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB | 25 kB
2024-08-30T19:20:27.7010377Z Progress (4): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB
2024-08-30T19:20:27.7011558Z Progress (4): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB
2024-08-30T19:20:27.7025527Z Progress (4): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB
2024-08-30T19:20:27.7032531Z Progress (4): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB
2024-08-30T19:20:27.7033498Z Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 1.4/597 kB
2024-08-30T19:20:27.7034510Z Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 1.4/597 kB
2024-08-30T19:20:27.7035491Z Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 1.4/597 kB
2024-08-30T19:20:27.7036483Z Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 1.4/597 kB
2024-08-30T19:20:27.7037453Z Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 2.8/597 kB
2024-08-30T19:20:27.7038390Z Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 2.8/597 kB
2024-08-30T19:20:27.7039377Z Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 2.8/597 kB
2024-08-30T19:20:27.7044753Z Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 4.1/597 kB
2024-08-30T19:20:27.7045774Z Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 4.1/597 kB
2024-08-30T19:20:27.7060071Z Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 5.5/597 kB
2024-08-30T19:20:27.7077976Z Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 5.5/597 kB
2024-08-30T19:20:27.7078932Z Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 6.9/597 kB
2024-08-30T19:20:27.7079841Z Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 8.3/597 kB
2024-08-30T19:20:27.7080802Z Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 8.3/597 kB
2024-08-30T19:20:27.7081595Z                                                                      
2024-08-30T19:20:27.7083567Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.1.3/spring-jcl-6.1.3.jar (25 kB at 292 kB/s)
2024-08-30T19:20:27.7086261Z #24 6.976 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-test/3.3.1/spring-boot-starter-test-3.3.1.jar
2024-08-30T19:20:27.7088048Z #24 6.976 Progress (4): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 9.7/597 kB
2024-08-30T19:20:27.7088922Z Progress (4): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 9.7/597 kB
2024-08-30T19:20:27.7089760Z Progress (4): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 11/597 kB 
2024-08-30T19:20:27.7090577Z Progress (4): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 12/597 kB
2024-08-30T19:20:27.7091550Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 12/597 kB
2024-08-30T19:20:27.7107756Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 14/597 kB
2024-08-30T19:20:27.7109142Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 15/597 kB
2024-08-30T19:20:27.7110226Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 17/597 kB
2024-08-30T19:20:27.7111346Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 17/597 kB
2024-08-30T19:20:27.7112711Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 17/597 kB
2024-08-30T19:20:27.7113807Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 18/597 kB
2024-08-30T19:20:27.7115189Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 18/597 kB
2024-08-30T19:20:27.7115994Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 19/597 kB
2024-08-30T19:20:27.7135941Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 19/597 kB
2024-08-30T19:20:27.7136874Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 21/597 kB
2024-08-30T19:20:27.7137750Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 21/597 kB
2024-08-30T19:20:27.7139619Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 22/597 kB
2024-08-30T19:20:27.7140839Z Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 23/597 kB
2024-08-30T19:20:27.7141719Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 23/597 kB
2024-08-30T19:20:27.7142589Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 25/597 kB
2024-08-30T19:20:27.7143453Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 26/597 kB
2024-08-30T19:20:27.7144299Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 26/597 kB
2024-08-30T19:20:27.7145164Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 28/597 kB
2024-08-30T19:20:27.7146007Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 29/597 kB
2024-08-30T19:20:27.7147319Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 29/597 kB
2024-08-30T19:20:27.7148183Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 30/597 kB
2024-08-30T19:20:27.7149043Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 32/597 kB
2024-08-30T19:20:27.7149906Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 33/597 kB
2024-08-30T19:20:27.7150768Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 33/597 kB
2024-08-30T19:20:27.7151625Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 34/597 kB
2024-08-30T19:20:27.7152459Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 36/597 kB
2024-08-30T19:20:27.7153308Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 36/597 kB
2024-08-30T19:20:27.7154188Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 37/597 kB
2024-08-30T19:20:27.7155051Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7155895Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7156756Z Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7157609Z Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7158467Z Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7159321Z Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7160653Z Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7161567Z Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7162437Z Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7164187Z Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7165063Z Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7166684Z Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7167556Z Progress (4): 1.3/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7169508Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7170399Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7171421Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7172380Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7173798Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7175483Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7176969Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
2024-08-30T19:20:27.7178093Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 40/597 kB
2024-08-30T19:20:27.7178941Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 40/597 kB
2024-08-30T19:20:27.7179768Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 41/597 kB
2024-08-30T19:20:27.7180604Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 41/597 kB
2024-08-30T19:20:27.7181454Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 43/597 kB
2024-08-30T19:20:27.7182272Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 43/597 kB
2024-08-30T19:20:27.7183141Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 44/597 kB
2024-08-30T19:20:27.7184007Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 46/597 kB
2024-08-30T19:20:27.7184864Z Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 47/597 kB
2024-08-30T19:20:27.7772582Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 47/597 kB
2024-08-30T19:20:27.7773876Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 48/597 kB
2024-08-30T19:20:27.7774881Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 50/597 kB
2024-08-30T19:20:27.7775907Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 51/597 kB
2024-08-30T19:20:27.7776755Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 51/597 kB
2024-08-30T19:20:27.7777560Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 52/597 kB
2024-08-30T19:20:27.7778371Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
2024-08-30T19:20:27.7779180Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
2024-08-30T19:20:27.7780357Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
2024-08-30T19:20:27.7781307Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
2024-08-30T19:20:27.7782106Z Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
2024-08-30T19:20:27.7782968Z Progress (5): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
2024-08-30T19:20:27.7783915Z Progress (5): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
2024-08-30T19:20:27.7784809Z Progress (5): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
2024-08-30T19:20:27.7785722Z Progress (5): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
2024-08-30T19:20:27.7786633Z Progress (5): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
2024-08-30T19:20:27.7787421Z                                                                      
2024-08-30T19:20:27.7789658Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-test/3.3.1/spring-boot-starter-test-3.3.1.jar (4.8 kB at 42 kB/s)
2024-08-30T19:20:27.7791587Z #24 7.005 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 55/597 kB
2024-08-30T19:20:27.7792392Z                                                             
2024-08-30T19:20:27.7794075Z Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test/3.2.2/spring-boot-test-3.2.2.jar
2024-08-30T19:20:27.7795682Z #24 7.005 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 57/597 kB
2024-08-30T19:20:27.7796569Z Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 58/597 kB
2024-08-30T19:20:27.7797761Z Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 59/597 kB
2024-08-30T19:20:27.7798614Z Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 61/597 kB
2024-08-30T19:20:27.7799447Z Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 62/597 kB
2024-08-30T19:20:27.7800242Z Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 63/597 kB
2024-08-30T19:20:27.7801071Z Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7801891Z Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7802725Z Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7803542Z Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7804631Z Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7805469Z Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7806259Z Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7807044Z Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7807843Z Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7808614Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
2024-08-30T19:20:27.7809401Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
2024-08-30T19:20:27.7810177Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
2024-08-30T19:20:27.7811194Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
2024-08-30T19:20:27.7811984Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
2024-08-30T19:20:27.7812767Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
2024-08-30T19:20:27.7813610Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB | 15/245 kB
2024-08-30T19:20:27.7814578Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB | 31/245 kB
2024-08-30T19:20:27.7815523Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 31/245 kB
2024-08-30T19:20:27.7816470Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 48/245 kB
2024-08-30T19:20:27.7817403Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 64/245 kB
2024-08-30T19:20:27.7818323Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 78/245 kB
2024-08-30T19:20:27.7819238Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 94/245 kB
2024-08-30T19:20:27.7820155Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 111/245 kB
2024-08-30T19:20:27.7821409Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 127/245 kB
2024-08-30T19:20:27.7822380Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 127/245 kB
2024-08-30T19:20:27.7823340Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 144/245 kB
2024-08-30T19:20:27.7824288Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 160/245 kB
2024-08-30T19:20:27.7825254Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 176/245 kB
2024-08-30T19:20:27.7826197Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 193/245 kB
2024-08-30T19:20:27.7892083Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 209/245 kB
2024-08-30T19:20:27.7893369Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 225/245 kB
2024-08-30T19:20:27.7894450Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 242/245 kB
2024-08-30T19:20:27.7895536Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 129/597 kB | 242/245 kB
2024-08-30T19:20:27.7896528Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 129/597 kB | 245 kB    
2024-08-30T19:20:27.7897472Z Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 146/597 kB | 245 kB
2024-08-30T19:20:27.7898262Z                                                                       
2024-08-30T19:20:27.7900356Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test/3.2.2/spring-boot-test-3.2.2.jar (245 kB at 1.9 MB/s)
2024-08-30T19:20:27.7903474Z #24 7.023 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test-autoconfigure/3.2.2/spring-boot-test-autoconfigure-3.2.2.jar
2024-08-30T19:20:27.7905494Z #24 7.023 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 162/597 kB
2024-08-30T19:20:27.7906451Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 162/597 kB
2024-08-30T19:20:27.7907348Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 162/597 kB
2024-08-30T19:20:27.7908272Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 162/597 kB
2024-08-30T19:20:27.7909143Z Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 178/597 kB
2024-08-30T19:20:27.7910031Z Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 178/597 kB
2024-08-30T19:20:27.7911323Z Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
2024-08-30T19:20:27.7912206Z Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
2024-08-30T19:20:27.7913087Z Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
2024-08-30T19:20:27.7913955Z Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
2024-08-30T19:20:27.7914846Z Progress (4): 1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB    
2024-08-30T19:20:27.7915722Z Progress (4): 1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
2024-08-30T19:20:27.7916540Z Progress (4): 1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 211/597 kB
2024-08-30T19:20:27.7917261Z                                                            
2024-08-30T19:20:27.7919075Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.jar (1.6 MB at 12 MB/s)
2024-08-30T19:20:27.7921531Z #24 7.025 Downloading from central: https://repo.maven.apache.org/maven2/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar
2024-08-30T19:20:27.7922991Z #24 7.025 Progress (3): 1.0/1.9 MB | 0.1/1.9 MB | 211/597 kB
2024-08-30T19:20:27.7923757Z Progress (3): 1.0/1.9 MB | 0.1/1.9 MB | 211/597 kB
2024-08-30T19:20:27.7924452Z Progress (3): 1.1/1.9 MB | 0.1/1.9 MB | 211/597 kB
2024-08-30T19:20:27.7925149Z Progress (3): 1.1/1.9 MB | 0.1/1.9 MB | 211/597 kB
2024-08-30T19:20:27.7925839Z Progress (3): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB
2024-08-30T19:20:27.7926536Z Progress (3): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB
2024-08-30T19:20:27.7927313Z Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 16/219 kB
2024-08-30T19:20:27.7928121Z Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 16/219 kB
2024-08-30T19:20:27.7929307Z Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 33/219 kB
2024-08-30T19:20:27.7930180Z Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 33/219 kB
2024-08-30T19:20:27.7986042Z Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 33/219 kB
2024-08-30T19:20:27.7987189Z Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 49/219 kB
2024-08-30T19:20:27.7988143Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 228/597 kB | 49/219 kB
2024-08-30T19:20:27.7989055Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 49/219 kB
2024-08-30T19:20:27.7989927Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 49/219 kB
2024-08-30T19:20:27.7990811Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 49/219 kB
2024-08-30T19:20:27.7991697Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 49/219 kB
2024-08-30T19:20:27.7992530Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 62/219 kB
2024-08-30T19:20:27.7993375Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 62/219 kB
2024-08-30T19:20:27.7994300Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 62/219 kB
2024-08-30T19:20:27.7995176Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 260/597 kB | 62/219 kB
2024-08-30T19:20:27.7996065Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 260/597 kB | 62/219 kB
2024-08-30T19:20:27.7996934Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 277/597 kB | 62/219 kB
2024-08-30T19:20:27.7997824Z Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 277/597 kB | 62/219 kB
2024-08-30T19:20:27.7998708Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 277/597 kB | 62/219 kB
2024-08-30T19:20:27.7999588Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 62/219 kB
2024-08-30T19:20:27.8000481Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 78/219 kB
2024-08-30T19:20:27.8001352Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 78/219 kB
2024-08-30T19:20:27.8002260Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 95/219 kB
2024-08-30T19:20:27.8003139Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 95/219 kB
2024-08-30T19:20:27.8004349Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 95/219 kB
2024-08-30T19:20:27.8005268Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 111/219 kB
2024-08-30T19:20:27.8006442Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 111/219 kB
2024-08-30T19:20:27.8007350Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 127/219 kB
2024-08-30T19:20:27.8008698Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 127/219 kB
2024-08-30T19:20:27.8009656Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 144/219 kB
2024-08-30T19:20:27.8010664Z Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 144/219 kB
2024-08-30T19:20:27.8011819Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 293/597 kB | 144/219 kB
2024-08-30T19:20:27.8012726Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 293/597 kB | 160/219 kB
2024-08-30T19:20:27.8013651Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 160/219 kB
2024-08-30T19:20:27.8014527Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 160/219 kB
2024-08-30T19:20:27.8015441Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 177/219 kB
2024-08-30T19:20:27.8016885Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 177/219 kB
2024-08-30T19:20:27.8017835Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 177/219 kB
2024-08-30T19:20:27.8018751Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 193/219 kB
2024-08-30T19:20:27.8019670Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 193/219 kB
2024-08-30T19:20:27.8020657Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 326/597 kB | 193/219 kB
2024-08-30T19:20:27.8021914Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 326/597 kB | 209/219 kB
2024-08-30T19:20:27.8023256Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 326/597 kB | 209/219 kB
2024-08-30T19:20:27.8024589Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 342/597 kB | 209/219 kB
2024-08-30T19:20:27.8026234Z Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB    
2024-08-30T19:20:27.8027110Z Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
2024-08-30T19:20:27.8028277Z Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
2024-08-30T19:20:27.8029167Z Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
2024-08-30T19:20:27.8029975Z Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
2024-08-30T19:20:27.8030846Z Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
2024-08-30T19:20:27.8031656Z Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
2024-08-30T19:20:27.8033343Z Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
2024-08-30T19:20:27.8034611Z Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
2024-08-30T19:20:27.8035497Z Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 359/597 kB | 219 kB
2024-08-30T19:20:27.8037259Z Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 359/597 kB | 219 kB
2024-08-30T19:20:27.8038620Z Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 359/597 kB | 219 kB
2024-08-30T19:20:27.8039511Z Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 375/597 kB | 219 kB
2024-08-30T19:20:27.8041081Z Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 375/597 kB | 219 kB
2024-08-30T19:20:27.8041929Z Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 375/597 kB | 219 kB
2024-08-30T19:20:27.8042752Z Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 375/597 kB | 219 kB
2024-08-30T19:20:27.8044694Z Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 391/597 kB | 219 kB
2024-08-30T19:20:27.8046124Z Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 391/597 kB | 219 kB
2024-08-30T19:20:27.8047874Z Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 408/597 kB | 219 kB
2024-08-30T19:20:27.8048737Z Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 408/597 kB | 219 kB
2024-08-30T19:20:27.8049599Z Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
2024-08-30T19:20:27.8091661Z Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
2024-08-30T19:20:27.8092724Z Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
2024-08-30T19:20:27.8093572Z Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
2024-08-30T19:20:27.8094461Z Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
2024-08-30T19:20:27.8095436Z Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
2024-08-30T19:20:27.8096301Z Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 440/597 kB | 219 kB
2024-08-30T19:20:27.8097169Z Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 440/597 kB | 219 kB
2024-08-30T19:20:27.8098072Z Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 440/597 kB | 219 kB
2024-08-30T19:20:27.8099309Z Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 440/597 kB | 219 kB
2024-08-30T19:20:27.8100092Z                                                            
2024-08-30T19:20:27.8102747Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test-autoconfigure/3.2.2/spring-boot-test-autoconfigure-3.2.2.jar (219 kB at 1.5 MB/s)
2024-08-30T19:20:27.8104820Z #24 7.045 Progress (3): 1.7/1.9 MB | 0.2/1.9 MB | 457/597 kB
2024-08-30T19:20:27.8105640Z Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 457/597 kB
2024-08-30T19:20:27.8106280Z                                                   
2024-08-30T19:20:27.8108099Z Downloading from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar
2024-08-30T19:20:27.8109692Z #24 7.045 Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
2024-08-30T19:20:27.8110496Z Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
2024-08-30T19:20:27.8111211Z Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
2024-08-30T19:20:27.8112048Z Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
2024-08-30T19:20:27.8112731Z Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
2024-08-30T19:20:27.8113444Z Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 490/597 kB
2024-08-30T19:20:27.8114173Z Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 490/597 kB
2024-08-30T19:20:27.8114907Z Progress (3): 1.9/1.9 MB | 0.2/1.9 MB | 490/597 kB
2024-08-30T19:20:27.8115550Z Progress (3): 1.9/1.9 MB | 0.2/1.9 MB | 506/597 kB
2024-08-30T19:20:27.8116258Z Progress (3): 1.9/1.9 MB | 0.2/1.9 MB | 506/597 kB
2024-08-30T19:20:27.8116979Z Progress (3): 1.9/1.9 MB | 0.2/1.9 MB | 522/597 kB
2024-08-30T19:20:27.8118019Z Progress (3): 1.9 MB | 0.2/1.9 MB | 522/597 kB    
2024-08-30T19:20:27.8118728Z Progress (3): 1.9 MB | 0.2/1.9 MB | 539/597 kB
2024-08-30T19:20:27.8119418Z Progress (3): 1.9 MB | 0.2/1.9 MB | 555/597 kB
2024-08-30T19:20:27.8120041Z                                               
2024-08-30T19:20:27.8121772Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.1.3/spring-core-6.1.3.jar (1.9 MB at 12 MB/s)
2024-08-30T19:20:27.8123401Z #24 7.045 Progress (2): 0.2/1.9 MB | 572/597 kB
2024-08-30T19:20:27.8124031Z Progress (2): 0.2/1.9 MB | 588/597 kB
2024-08-30T19:20:27.8124610Z Progress (2): 0.2/1.9 MB | 597 kB    
2024-08-30T19:20:27.8125186Z Progress (2): 0.2/1.9 MB | 597 kB
2024-08-30T19:20:27.8125729Z                                  
2024-08-30T19:20:27.8127303Z Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.jar (597 kB at 3.9 MB/s)
2024-08-30T19:20:27.8130088Z #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar
2024-08-30T19:20:27.8141723Z #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar
2024-08-30T19:20:27.8151129Z #24 7.045 Progress (1): 0.2/1.9 MB
2024-08-30T19:20:27.8152022Z Progress (1): 0.2/1.9 MB
2024-08-30T19:20:27.8154347Z Progress (1): 0.3/1.9 MB
2024-08-30T19:20:27.8155059Z Progress (2): 0.3/1.9 MB | 16/278 kB
2024-08-30T19:20:27.8155846Z Progress (2): 0.3/1.9 MB | 16/278 kB
2024-08-30T19:20:27.8156560Z Progress (2): 0.3/1.9 MB | 33/278 kB
2024-08-30T19:20:27.8157303Z Progress (2): 0.3/1.9 MB | 33/278 kB
2024-08-30T19:20:27.8157983Z Progress (2): 0.3/1.9 MB | 33/278 kB
2024-08-30T19:20:27.8158705Z Progress (2): 0.3/1.9 MB | 49/278 kB
2024-08-30T19:20:27.8159293Z Progress (2): 0.3/1.9 MB | 49/278 kB
2024-08-30T19:20:27.8160170Z Progress (2): 0.3/1.9 MB | 64/278 kB
2024-08-30T19:20:27.8160922Z Progress (2): 0.3/1.9 MB | 64/278 kB
2024-08-30T19:20:27.8161611Z Progress (2): 0.3/1.9 MB | 81/278 kB
2024-08-30T19:20:27.8162335Z Progress (2): 0.4/1.9 MB | 81/278 kB
2024-08-30T19:20:27.8163191Z Progress (2): 0.4/1.9 MB | 97/278 kB
2024-08-30T19:20:27.8163783Z Progress (2): 0.4/1.9 MB | 113/278 kB
2024-08-30T19:20:27.8164694Z Progress (2): 0.4/1.9 MB | 113/278 kB
2024-08-30T19:20:27.8165930Z Progress (2): 0.4/1.9 MB | 130/278 kB
2024-08-30T19:20:27.8166693Z Progress (2): 0.4/1.9 MB | 130/278 kB
2024-08-30T19:20:27.8167475Z Progress (2): 0.4/1.9 MB | 146/278 kB
2024-08-30T19:20:27.8168294Z Progress (2): 0.4/1.9 MB | 146/278 kB
2024-08-30T19:20:27.8169029Z Progress (2): 0.4/1.9 MB | 163/278 kB
2024-08-30T19:20:27.8169791Z Progress (2): 0.4/1.9 MB | 163/278 kB
2024-08-30T19:20:27.8170504Z Progress (2): 0.4/1.9 MB | 179/278 kB
2024-08-30T19:20:27.8171291Z Progress (2): 0.4/1.9 MB | 179/278 kB
2024-08-30T19:20:27.8171895Z Progress (2): 0.4/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8172602Z Progress (2): 0.5/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8173317Z Progress (2): 0.5/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8175124Z Progress (3): 0.5/1.9 MB | 195/278 kB | 16/66 kB
2024-08-30T19:20:27.8180683Z Progress (3): 0.5/1.9 MB | 195/278 kB | 16/66 kB
2024-08-30T19:20:27.8181417Z Progress (3): 0.5/1.9 MB | 195/278 kB | 32/66 kB
2024-08-30T19:20:27.8182065Z Progress (3): 0.5/1.9 MB | 195/278 kB | 49/66 kB
2024-08-30T19:20:27.8182822Z Progress (3): 0.5/1.9 MB | 195/278 kB | 65/66 kB
2024-08-30T19:20:27.8183473Z Progress (3): 0.5/1.9 MB | 195/278 kB | 66 kB   
2024-08-30T19:20:27.8184113Z Progress (3): 0.5/1.9 MB | 195/278 kB | 66 kB
2024-08-30T19:20:27.8184702Z                                              
2024-08-30T19:20:27.8186598Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar (66 kB at 435 kB/s)
2024-08-30T19:20:27.8189145Z #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar
2024-08-30T19:20:27.8190807Z #24 7.045 Progress (2): 0.5/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8191467Z Progress (3): 0.5/1.9 MB | 195/278 kB | 16/120 kB
2024-08-30T19:20:27.8192111Z Progress (3): 0.5/1.9 MB | 195/278 kB | 16/120 kB
2024-08-30T19:20:27.8192766Z Progress (3): 0.5/1.9 MB | 195/278 kB | 33/120 kB
2024-08-30T19:20:27.8193419Z Progress (3): 0.5/1.9 MB | 195/278 kB | 49/120 kB
2024-08-30T19:20:27.8194064Z Progress (3): 0.5/1.9 MB | 195/278 kB | 66/120 kB
2024-08-30T19:20:27.8194685Z Progress (3): 0.6/1.9 MB | 195/278 kB | 66/120 kB
2024-08-30T19:20:27.8195462Z Progress (3): 0.6/1.9 MB | 195/278 kB | 82/120 kB
2024-08-30T19:20:27.8196167Z Progress (3): 0.6/1.9 MB | 195/278 kB | 98/120 kB
2024-08-30T19:20:27.8196863Z Progress (3): 0.6/1.9 MB | 195/278 kB | 98/120 kB
2024-08-30T19:20:27.8197534Z Progress (3): 0.6/1.9 MB | 195/278 kB | 115/120 kB
2024-08-30T19:20:27.8198190Z Progress (3): 0.6/1.9 MB | 195/278 kB | 120 kB    
2024-08-30T19:20:27.8198829Z Progress (3): 0.6/1.9 MB | 195/278 kB | 120 kB
2024-08-30T19:20:27.8199429Z                                               
2024-08-30T19:20:27.8201038Z Downloaded from central: https://repo.maven.apache.org/maven2/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar (120 kB at 791 kB/s)
2024-08-30T19:20:27.8203091Z #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.3/asm-9.3.jar
2024-08-30T19:20:27.8204205Z #24 7.045 Progress (2): 0.6/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8204824Z Progress (2): 0.6/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8205337Z Progress (2): 0.6/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8205916Z Progress (3): 0.6/1.9 MB | 195/278 kB | 16/30 kB
2024-08-30T19:20:27.8206566Z Progress (3): 0.6/1.9 MB | 195/278 kB | 30 kB   
2024-08-30T19:20:27.8207218Z Progress (3): 0.7/1.9 MB | 195/278 kB | 30 kB
2024-08-30T19:20:27.8207786Z                                              
2024-08-30T19:20:27.8209382Z Downloaded from central: https://repo.maven.apache.org/maven2/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar (30 kB at 197 kB/s)
2024-08-30T19:20:27.8255923Z #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar
2024-08-30T19:20:27.8259215Z #24 7.045 Progress (2): 0.7/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8260123Z Progress (2): 0.7/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8261409Z Progress (2): 0.7/1.9 MB | 195/278 kB
2024-08-30T19:20:27.8262969Z Progress (2): 0.7/1.9 MB | 212/278 kB
2024-08-30T19:20:27.8264596Z Progress (2): 0.7/1.9 MB | 212/278 kB
2024-08-30T19:20:27.8266586Z Progress (2): 0.7/1.9 MB | 228/278 kB
2024-08-30T19:20:27.8271395Z Progress (2): 0.7/1.9 MB | 228/278 kB
2024-08-30T19:20:27.8281790Z Progress (2): 0.7/1.9 MB | 245/278 kB
2024-08-30T19:20:27.8282608Z Progress (2): 0.7/1.9 MB | 261/278 kB
2024-08-30T19:20:27.8285077Z Progress (2): 0.7/1.9 MB | 261/278 kB
2024-08-30T19:20:27.8286032Z Progress (2): 0.7/1.9 MB | 277/278 kB
2024-08-30T19:20:27.8287962Z Progress (2): 0.8/1.9 MB | 277/278 kB
2024-08-30T19:20:27.8288631Z Progress (3): 0.8/1.9 MB | 277/278 kB | 16/122 kB
2024-08-30T19:20:27.8289383Z Progress (3): 0.8/1.9 MB | 278 kB | 16/122 kB    
2024-08-30T19:20:27.8291756Z Progress (3): 0.8/1.9 MB | 278 kB | 16/122 kB
2024-08-30T19:20:27.8292757Z Progress (3): 0.8/1.9 MB | 278 kB | 33/122 kB
2024-08-30T19:20:27.8293553Z Progress (3): 0.8/1.9 MB | 278 kB | 49/122 kB
2024-08-30T19:20:27.8295299Z Progress (3): 0.8/1.9 MB | 278 kB | 49/122 kB
2024-08-30T19:20:27.8296154Z Progress (3): 0.8/1.9 MB | 278 kB | 66/122 kB
2024-08-30T19:20:27.8296790Z Progress (3): 0.8/1.9 MB | 278 kB | 66/122 kB
2024-08-30T19:20:27.8297413Z Progress (3): 0.8/1.9 MB | 278 kB | 82/122 kB
2024-08-30T19:20:27.8297987Z                                              
2024-08-30T19:20:27.8299716Z Downloaded from central: https://repo.maven.apache.org/maven2/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar (278 kB at 1.8 MB/s)
2024-08-30T19:20:27.8302103Z #24 7.047 Downloading from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar
2024-08-30T19:20:27.8303726Z #24 7.047 Progress (2): 0.8/1.9 MB | 82/122 kB
2024-08-30T19:20:27.8304433Z Progress (2): 0.8/1.9 MB | 98/122 kB
2024-08-30T19:20:27.8304973Z Progress (2): 0.8/1.9 MB | 98/122 kB
2024-08-30T19:20:27.8305593Z Progress (2): 0.8/1.9 MB | 115/122 kB
2024-08-30T19:20:27.8306151Z Progress (2): 0.8/1.9 MB | 122 kB    
2024-08-30T19:20:27.8306670Z Progress (2): 0.9/1.9 MB | 122 kB
2024-08-30T19:20:27.8307156Z                                  
2024-08-30T19:20:27.8308457Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.3/asm-9.3.jar (122 kB at 788 kB/s)
2024-08-30T19:20:27.8310366Z #24 7.047 Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar
2024-08-30T19:20:27.8311548Z #24 7.047 Progress (2): 0.9/1.9 MB | 0/1.3 MB
2024-08-30T19:20:27.8312168Z Progress (3): 0.9/1.9 MB | 0/1.3 MB | 16/130 kB
2024-08-30T19:20:27.8312798Z Progress (3): 0.9/1.9 MB | 0/1.3 MB | 16/130 kB
2024-08-30T19:20:27.8313458Z Progress (3): 0.9/1.9 MB | 0/1.3 MB | 16/130 kB
2024-08-30T19:20:27.8314094Z Progress (3): 0.9/1.9 MB | 0/1.3 MB | 33/130 kB
2024-08-30T19:20:27.8314755Z Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
2024-08-30T19:20:27.8315494Z Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
2024-08-30T19:20:27.8316124Z Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
2024-08-30T19:20:27.8316783Z Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
2024-08-30T19:20:27.8317438Z Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
2024-08-30T19:20:27.8318065Z Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
2024-08-30T19:20:27.8318775Z Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 49/130 kB
2024-08-30T19:20:27.8319477Z Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 49/130 kB
2024-08-30T19:20:27.8320100Z Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 49/130 kB
2024-08-30T19:20:27.8320907Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 49/130 kB
2024-08-30T19:20:27.8321587Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 66/130 kB
2024-08-30T19:20:27.8322344Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 66/130 kB
2024-08-30T19:20:27.8322968Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 66/130 kB
2024-08-30T19:20:27.8323663Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 66/130 kB
2024-08-30T19:20:27.8324347Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8325207Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8325853Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8326496Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8327132Z Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8327768Z Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8328382Z Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8328997Z Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8329639Z Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8330607Z Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8331429Z Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
2024-08-30T19:20:27.8332171Z Progress (4): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB | 16/123 kB
2024-08-30T19:20:27.8333084Z Progress (4): 0.9/1.9 MB | 0.3/1.3 MB | 98/130 kB | 16/123 kB
2024-08-30T19:20:27.8333906Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 16/123 kB
2024-08-30T19:20:27.8334815Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 33/123 kB
2024-08-30T19:20:27.8335608Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 33/123 kB
2024-08-30T19:20:27.8336491Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 49/123 kB
2024-08-30T19:20:27.8337318Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 49/123 kB
2024-08-30T19:20:27.8338200Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 66/123 kB
2024-08-30T19:20:27.8339020Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 66/123 kB
2024-08-30T19:20:27.8339887Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 82/123 kB
2024-08-30T19:20:27.8340958Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 82/123 kB
2024-08-30T19:20:27.8341834Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 98/123 kB
2024-08-30T19:20:27.8342646Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 115/123 kB
2024-08-30T19:20:27.8344155Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 115/123 kB
2024-08-30T19:20:27.8345027Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 115/130 kB | 115/123 kB
2024-08-30T19:20:27.8346076Z Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 115/130 kB | 123 kB    
2024-08-30T19:20:27.8347522Z Progress (4): 0.9/1.9 MB | 0.5/1.3 MB | 115/130 kB | 123 kB
2024-08-30T19:20:27.8348298Z Progress (4): 0.9/1.9 MB | 0.5/1.3 MB | 115/130 kB | 123 kB
2024-08-30T19:20:27.8349060Z Progress (4): 0.9/1.9 MB | 0.5/1.3 MB | 115/130 kB | 123 kB
2024-08-30T19:20:27.8350966Z                                                            
2024-08-30T19:20:27.8353838Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar (123 kB at 766 kB/s)
2024-08-30T19:20:27.8357935Z #24 7.054 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar
2024-08-30T19:20:27.8359507Z #24 7.054 Progress (3): 0.9/1.9 MB | 0.5/1.3 MB | 130 kB
2024-08-30T19:20:27.8360218Z Progress (3): 0.9/1.9 MB | 0.5/1.3 MB | 130 kB
2024-08-30T19:20:27.8360885Z Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
2024-08-30T19:20:27.8361574Z Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
2024-08-30T19:20:27.8362232Z Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
2024-08-30T19:20:27.8362845Z Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
2024-08-30T19:20:27.8363482Z Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
2024-08-30T19:20:27.8364054Z                                               
2024-08-30T19:20:27.8365898Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar (130 kB at 798 kB/s)
2024-08-30T19:20:27.8367581Z #24 7.055 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8368204Z                                      
2024-08-30T19:20:27.8369872Z Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar
2024-08-30T19:20:27.8372538Z #24 7.055 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8373540Z Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8374132Z Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8374692Z Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8375227Z Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8375843Z Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8376386Z Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8376897Z Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8377483Z Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
2024-08-30T19:20:27.8378021Z Progress (2): 1.0/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8378527Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8379061Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8379595Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8380097Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8380617Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8381148Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8381660Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8382183Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8382710Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8383214Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8383730Z Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
2024-08-30T19:20:27.8384257Z Progress (2): 1.1/1.9 MB | 0.8/1.3 MB
2024-08-30T19:20:27.8384845Z Progress (2): 1.1/1.9 MB | 0.8/1.3 MB
2024-08-30T19:20:27.8385349Z Progress (2): 1.1/1.9 MB | 0.8/1.3 MB
2024-08-30T19:20:27.8385884Z Progress (2): 1.1/1.9 MB | 0.8/1.3 MB
2024-08-30T19:20:27.8386433Z Progress (3): 1.1/1.9 MB | 0.8/1.3 MB | 6.4 kB
2024-08-30T19:20:27.8387331Z Progress (3): 1.1/1.9 MB | 0.8/1.3 MB | 6.4 kB
2024-08-30T19:20:27.8387954Z Progress (3): 1.1/1.9 MB | 0.8/1.3 MB | 6.4 kB
2024-08-30T19:20:27.8388634Z Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
2024-08-30T19:20:27.8389256Z Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
2024-08-30T19:20:27.8389899Z Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
2024-08-30T19:20:27.8390497Z Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
2024-08-30T19:20:27.8391110Z Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
2024-08-30T19:20:27.8391679Z                                               
2024-08-30T19:20:27.8393432Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar (6.4 kB at 38 kB/s)
2024-08-30T19:20:27.8395845Z #24 7.060 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar
2024-08-30T19:20:27.8397211Z #24 7.060 Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8397838Z Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8398369Z Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8398897Z Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8399448Z Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8399956Z Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8400483Z Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8401015Z Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8401537Z Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8402142Z Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8402744Z Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8403351Z Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8403956Z Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8404502Z Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8405010Z Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8405617Z Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8406228Z Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8406781Z Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8407346Z Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8407878Z Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8408399Z Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8409035Z Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8409784Z Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8410320Z Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8410859Z Progress (2): 1.6/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8411583Z Progress (2): 1.6/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8412059Z Progress (2): 1.6/1.9 MB | 0.9/1.3 MB
2024-08-30T19:20:27.8412711Z Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 16/586 kB
2024-08-30T19:20:27.8413423Z Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 16/586 kB
2024-08-30T19:20:27.8414133Z Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 33/586 kB
2024-08-30T19:20:27.8414836Z Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 33/586 kB
2024-08-30T19:20:27.8415527Z Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 49/586 kB
2024-08-30T19:20:27.8416175Z Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 49/586 kB
2024-08-30T19:20:27.8416846Z Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 64/586 kB
2024-08-30T19:20:27.8417673Z Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 64/586 kB
2024-08-30T19:20:27.8418308Z Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 81/586 kB
2024-08-30T19:20:27.8418942Z Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 81/586 kB
2024-08-30T19:20:27.8419556Z Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 97/586 kB
2024-08-30T19:20:27.8420747Z Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 97/586 kB
2024-08-30T19:20:27.8422045Z Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 113/586 kB
2024-08-30T19:20:27.8427700Z Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 113/586 kB
2024-08-30T19:20:27.8428872Z Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 130/586 kB
2024-08-30T19:20:27.8430996Z Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 130/586 kB
2024-08-30T19:20:27.8431894Z Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 130/586 kB
2024-08-30T19:20:27.8434160Z Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 130/586 kB
2024-08-30T19:20:27.8435024Z Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
2024-08-30T19:20:27.8436900Z Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
2024-08-30T19:20:27.8439975Z Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
2024-08-30T19:20:27.8440884Z Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
2024-08-30T19:20:27.8443375Z Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
2024-08-30T19:20:27.8444271Z Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 146/586 kB
2024-08-30T19:20:27.8446543Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 146/586 kB | 16/96 kB
2024-08-30T19:20:27.8448807Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 163/586 kB | 16/96 kB
2024-08-30T19:20:27.8449872Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 163/586 kB | 33/96 kB
2024-08-30T19:20:27.8452760Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 179/586 kB | 33/96 kB
2024-08-30T19:20:27.8453899Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 179/586 kB | 49/96 kB
2024-08-30T19:20:27.8455113Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 49/96 kB
2024-08-30T19:20:27.8456618Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 66/96 kB
2024-08-30T19:20:27.8457797Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 82/96 kB
2024-08-30T19:20:27.8459020Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 96 kB   
2024-08-30T19:20:27.8460092Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 96 kB | 16/700 kB
2024-08-30T19:20:27.8461271Z                                                                       
2024-08-30T19:20:27.8463734Z Downloaded from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar (96 kB at 532 kB/s)
2024-08-30T19:20:27.8467041Z #24 7.073 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-agent/1.14.11/byte-buddy-agent-1.14.11.jar
2024-08-30T19:20:27.8469516Z #24 7.073 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 33/700 kB
2024-08-30T19:20:27.8470772Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 49/700 kB
2024-08-30T19:20:27.8472623Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 66/700 kB
2024-08-30T19:20:27.8473544Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 82/700 kB
2024-08-30T19:20:27.8475330Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 98/700 kB
2024-08-30T19:20:27.8476577Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 115/700 kB
2024-08-30T19:20:27.8477568Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 131/700 kB
2024-08-30T19:20:27.8480287Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 147/700 kB
2024-08-30T19:20:27.8481236Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 164/700 kB
2024-08-30T19:20:27.8482163Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 180/700 kB
2024-08-30T19:20:27.8483058Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 197/700 kB
2024-08-30T19:20:27.8483959Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 213/700 kB
2024-08-30T19:20:27.8484868Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 229/700 kB
2024-08-30T19:20:27.8485766Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 246/700 kB
2024-08-30T19:20:27.8486666Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 256/700 kB
2024-08-30T19:20:27.8487619Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 272/700 kB
2024-08-30T19:20:27.8488512Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 289/700 kB
2024-08-30T19:20:27.8489401Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 305/700 kB
2024-08-30T19:20:27.8490281Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 321/700 kB
2024-08-30T19:20:27.8491339Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 338/700 kB
2024-08-30T19:20:27.8492369Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 354/700 kB
2024-08-30T19:20:27.8493596Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 370/700 kB
2024-08-30T19:20:27.8494650Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 387/700 kB
2024-08-30T19:20:27.8496393Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 403/700 kB
2024-08-30T19:20:27.8497615Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 420/700 kB
2024-08-30T19:20:27.8498826Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 436/700 kB
2024-08-30T19:20:27.8500047Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 452/700 kB
2024-08-30T19:20:27.8501256Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 469/700 kB
2024-08-30T19:20:27.8502396Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 485/700 kB
2024-08-30T19:20:27.8503551Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 502/700 kB
2024-08-30T19:20:27.8504734Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 518/700 kB
2024-08-30T19:20:27.8505959Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 534/700 kB
2024-08-30T19:20:27.8507004Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 551/700 kB
2024-08-30T19:20:27.8508194Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 567/700 kB
2024-08-30T19:20:27.8509462Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 583/700 kB
2024-08-30T19:20:27.8510661Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 600/700 kB
2024-08-30T19:20:27.8511716Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 616/700 kB
2024-08-30T19:20:27.8513053Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 616/700 kB | 16/257 kB
2024-08-30T19:20:27.8514544Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 212/586 kB | 616/700 kB | 16/257 kB
2024-08-30T19:20:27.8515925Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 212/586 kB | 616/700 kB | 32/257 kB
2024-08-30T19:20:27.8517134Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 228/586 kB | 616/700 kB | 32/257 kB
2024-08-30T19:20:27.8518759Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 228/586 kB | 616/700 kB | 49/257 kB
2024-08-30T19:20:27.8520099Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 228/586 kB | 616/700 kB | 65/257 kB
2024-08-30T19:20:27.8521588Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 244/586 kB | 616/700 kB | 65/257 kB
2024-08-30T19:20:27.8522967Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 244/586 kB | 616/700 kB | 81/257 kB
2024-08-30T19:20:27.8524411Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 261/586 kB | 616/700 kB | 81/257 kB
2024-08-30T19:20:27.8525872Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 261/586 kB | 616/700 kB | 98/257 kB
2024-08-30T19:20:27.8527663Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 277/586 kB | 616/700 kB | 98/257 kB
2024-08-30T19:20:27.8529622Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 277/586 kB | 616/700 kB | 114/257 kB
2024-08-30T19:20:27.8531559Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 294/586 kB | 616/700 kB | 114/257 kB
2024-08-30T19:20:27.8533171Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 294/586 kB | 616/700 kB | 130/257 kB
2024-08-30T19:20:27.8540691Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 310/586 kB | 616/700 kB | 130/257 kB
2024-08-30T19:20:27.8541806Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 310/586 kB | 616/700 kB | 147/257 kB
2024-08-30T19:20:27.8542854Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 326/586 kB | 616/700 kB | 147/257 kB
2024-08-30T19:20:27.8544541Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 326/586 kB | 616/700 kB | 163/257 kB
2024-08-30T19:20:27.8545617Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 343/586 kB | 616/700 kB | 163/257 kB
2024-08-30T19:20:27.8546710Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 343/586 kB | 616/700 kB | 180/257 kB
2024-08-30T19:20:27.8548118Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 359/586 kB | 616/700 kB | 180/257 kB
2024-08-30T19:20:27.8550012Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 359/586 kB | 616/700 kB | 196/257 kB
2024-08-30T19:20:27.8551070Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 376/586 kB | 616/700 kB | 196/257 kB
2024-08-30T19:20:27.8552116Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 376/586 kB | 616/700 kB | 212/257 kB
2024-08-30T19:20:27.8553175Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 392/586 kB | 616/700 kB | 212/257 kB
2024-08-30T19:20:27.8554199Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 392/586 kB | 616/700 kB | 229/257 kB
2024-08-30T19:20:27.8555242Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 408/586 kB | 616/700 kB | 229/257 kB
2024-08-30T19:20:27.8556713Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 408/586 kB | 616/700 kB | 245/257 kB
2024-08-30T19:20:27.8557768Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 425/586 kB | 616/700 kB | 245/257 kB
2024-08-30T19:20:27.8558809Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 425/586 kB | 616/700 kB | 257 kB    
2024-08-30T19:20:27.8559863Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 441/586 kB | 616/700 kB | 257 kB
2024-08-30T19:20:27.8560851Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 457/586 kB | 616/700 kB | 257 kB
2024-08-30T19:20:27.8561831Z Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 474/586 kB | 616/700 kB | 257 kB
2024-08-30T19:20:27.8562674Z                                                                         
2024-08-30T19:20:27.8564744Z Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-agent/1.14.11/byte-buddy-agent-1.14.11.jar (257 kB at 1.3 MB/s)
2024-08-30T19:20:27.8566575Z #24 7.087 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 490/586 kB | 616/700 kB
2024-08-30T19:20:27.8567466Z                                                                
2024-08-30T19:20:27.8568900Z Downloading from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/3.3/objenesis-3.3.jar
2024-08-30T19:20:27.8570309Z #24 7.087 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 507/586 kB | 616/700 kB
2024-08-30T19:20:27.8571473Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 523/586 kB | 616/700 kB
2024-08-30T19:20:27.8572483Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 539/586 kB | 616/700 kB
2024-08-30T19:20:27.8579584Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 556/586 kB | 616/700 kB
2024-08-30T19:20:27.8581907Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 556/586 kB | 616/700 kB
2024-08-30T19:20:27.8584771Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 572/586 kB | 616/700 kB
2024-08-30T19:20:27.8587554Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 572/586 kB | 616/700 kB
2024-08-30T19:20:27.8589685Z Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 586 kB | 616/700 kB    
2024-08-30T19:20:27.8591715Z Progress (4): 1.8/1.9 MB | 1.0/1.3 MB | 586 kB | 616/700 kB
2024-08-30T19:20:27.8594443Z Progress (4): 1.8/1.9 MB | 1.0/1.3 MB | 586 kB | 616/700 kB
2024-08-30T19:20:27.8596473Z Progress (4): 1.8/1.9 MB | 1.0/1.3 MB | 586 kB | 616/700 kB
2024-08-30T19:20:27.8598408Z                                                            
2024-08-30T19:20:27.8604255Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar (586 kB at 3.0 MB/s)
2024-08-30T19:20:27.8609689Z #24 7.089 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar
2024-08-30T19:20:27.8611507Z #24 7.089 Progress (3): 1.8/1.9 MB | 1.0/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8613879Z Progress (3): 1.8/1.9 MB | 1.0/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8614798Z Progress (3): 1.8/1.9 MB | 1.0/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8616830Z Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8618605Z Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8619882Z Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8620608Z Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8622707Z Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8683186Z Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8684271Z Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8684963Z Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8685669Z Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8686330Z Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8686994Z Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8687736Z Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8688397Z Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8689065Z Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8690103Z Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8690843Z Progress (4): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB | 16/49 kB
2024-08-30T19:20:27.8691997Z Progress (4): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB | 33/49 kB
2024-08-30T19:20:27.8692818Z Progress (4): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB | 49/49 kB
2024-08-30T19:20:27.8693773Z Progress (4): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB | 49 kB   
2024-08-30T19:20:27.8694509Z                                                           
2024-08-30T19:20:27.8696222Z Downloaded from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/3.3/objenesis-3.3.jar (49 kB at 245 kB/s)
2024-08-30T19:20:27.8697640Z #24 7.094 Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8698345Z Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
2024-08-30T19:20:27.8699022Z Progress (3): 1.8/1.9 MB | 1.3 MB | 616/700 kB    
2024-08-30T19:20:27.8699632Z                                               
2024-08-30T19:20:27.8701189Z Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar (1.3 MB at 6.6 MB/s)
2024-08-30T19:20:27.8703633Z #24 7.095 Downloading from central: https://repo.maven.apache.org/maven2/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar
2024-08-30T19:20:27.8706239Z #24 7.095 Downloading from central: https://repo.maven.apache.org/maven2/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar
2024-08-30T19:20:27.8707946Z #24 7.095 Progress (2): 1.8/1.9 MB | 633/700 kB
2024-08-30T19:20:27.8708554Z Progress (2): 1.8/1.9 MB | 649/700 kB
2024-08-30T19:20:27.8709070Z Progress (2): 1.8/1.9 MB | 665/700 kB
2024-08-30T19:20:27.8709597Z Progress (2): 1.8/1.9 MB | 682/700 kB
2024-08-30T19:20:27.8710143Z Progress (2): 1.8/1.9 MB | 682/700 kB
2024-08-30T19:20:27.8710648Z Progress (2): 1.9/1.9 MB | 682/700 kB
2024-08-30T19:20:27.8711172Z Progress (2): 1.9/1.9 MB | 682/700 kB
2024-08-30T19:20:27.8711712Z Progress (2): 1.9/1.9 MB | 682/700 kB
2024-08-30T19:20:27.8712245Z Progress (2): 1.9/1.9 MB | 682/700 kB
2024-08-30T19:20:27.8712760Z Progress (2): 1.9/1.9 MB | 682/700 kB
2024-08-30T19:20:27.8713273Z Progress (2): 1.9 MB | 682/700 kB    
2024-08-30T19:20:27.8713806Z Progress (2): 1.9 MB | 698/700 kB
2024-08-30T19:20:27.8714299Z Progress (2): 1.9 MB | 700 kB    
2024-08-30T19:20:27.8715032Z                              
2024-08-30T19:20:27.8716938Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-autoconfigure/3.2.2/spring-boot-autoconfigure-3.2.2.jar (1.9 MB at 9.1 MB/s)
2024-08-30T19:20:27.8719480Z #24 7.097 Downloading from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar
2024-08-30T19:20:27.8720741Z #24 7.098 Progress (2): 700 kB | 16/31 kB
2024-08-30T19:20:27.8721320Z Progress (3): 700 kB | 16/31 kB | 8.8 kB
2024-08-30T19:20:27.8721885Z Progress (3): 700 kB | 31 kB | 8.8 kB   
2024-08-30T19:20:27.8722429Z                                      
2024-08-30T19:20:27.8724002Z Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar (8.8 kB at 43 kB/s)
2024-08-30T19:20:27.8726472Z #24 7.098 Downloading from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.7.1/postgresql-42.7.1.jar
2024-08-30T19:20:27.8727795Z #24 7.099 Progress (3): 700 kB | 31 kB | 16/18 kB
2024-08-30T19:20:27.8728395Z Progress (3): 700 kB | 31 kB | 18 kB   
2024-08-30T19:20:27.8728902Z                                     
2024-08-30T19:20:27.8730330Z Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar (700 kB at 3.4 MB/s)
2024-08-30T19:20:27.8733028Z #24 7.099 Downloading from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.41.0/checker-qual-3.41.0.jar
2024-08-30T19:20:27.8737502Z #24 7.099 Downloaded from central: https://repo.maven.apache.org/maven2/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar (18 kB at 88 kB/s)
2024-08-30T19:20:27.8743999Z #24 7.099 Downloaded from central: https://repo.maven.apache.org/maven2/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar (31 kB at 148 kB/s)
2024-08-30T19:20:27.8749588Z #24 7.099 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar
2024-08-30T19:20:27.8753929Z #24 7.099 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar
2024-08-30T19:20:27.8756834Z #24 7.104 Progress (1): 16/175 kB
2024-08-30T19:20:27.8757373Z Progress (1): 32/175 kB
2024-08-30T19:20:27.8757844Z Progress (1): 49/175 kB
2024-08-30T19:20:27.8758301Z Progress (1): 65/175 kB
2024-08-30T19:20:27.8758768Z Progress (1): 80/175 kB
2024-08-30T19:20:27.8759224Z Progress (1): 96/175 kB
2024-08-30T19:20:27.8759698Z Progress (1): 112/175 kB
2024-08-30T19:20:27.8760236Z Progress (1): 129/175 kB
2024-08-30T19:20:27.8760705Z Progress (1): 145/175 kB
2024-08-30T19:20:27.8761160Z Progress (1): 162/175 kB
2024-08-30T19:20:27.8761671Z Progress (1): 175 kB    
2024-08-30T19:20:27.8762117Z Progress (2): 175 kB | 16/229 kB
2024-08-30T19:20:27.8762630Z                                 
2024-08-30T19:20:27.8764210Z Downloaded from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar (175 kB at 842 kB/s)
2024-08-30T19:20:27.8766535Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar
2024-08-30T19:20:27.8767857Z #24 7.104 Progress (1): 33/229 kB
2024-08-30T19:20:27.8768371Z Progress (1): 49/229 kB
2024-08-30T19:20:27.8768802Z Progress (1): 63/229 kB
2024-08-30T19:20:27.8769217Z Progress (1): 79/229 kB
2024-08-30T19:20:27.8769657Z Progress (1): 96/229 kB
2024-08-30T19:20:27.8770079Z Progress (1): 112/229 kB
2024-08-30T19:20:27.8770630Z Progress (1): 128/229 kB
2024-08-30T19:20:27.8771225Z Progress (2): 128/229 kB | 16/247 kB
2024-08-30T19:20:27.8771784Z Progress (2): 145/229 kB | 16/247 kB
2024-08-30T19:20:27.8772339Z Progress (2): 145/229 kB | 33/247 kB
2024-08-30T19:20:27.8772877Z Progress (2): 161/229 kB | 33/247 kB
2024-08-30T19:20:27.8773418Z Progress (2): 161/229 kB | 49/247 kB
2024-08-30T19:20:27.8774296Z Progress (2): 161/229 kB | 63/247 kB
2024-08-30T19:20:27.8774928Z Progress (2): 161/229 kB | 79/247 kB
2024-08-30T19:20:27.8775441Z Progress (2): 161/229 kB | 95/247 kB
2024-08-30T19:20:27.8775955Z Progress (2): 161/229 kB | 112/247 kB
2024-08-30T19:20:27.8776506Z Progress (2): 161/229 kB | 128/247 kB
2024-08-30T19:20:27.8777062Z Progress (2): 161/229 kB | 145/247 kB
2024-08-30T19:20:27.8777702Z Progress (3): 161/229 kB | 145/247 kB | 16/205 kB
2024-08-30T19:20:27.8778354Z Progress (3): 161/229 kB | 161/247 kB | 16/205 kB
2024-08-30T19:20:27.8779086Z Progress (3): 177/229 kB | 161/247 kB | 16/205 kB
2024-08-30T19:20:27.8779722Z Progress (3): 177/229 kB | 161/247 kB | 32/205 kB
2024-08-30T19:20:27.8780482Z Progress (3): 177/229 kB | 177/247 kB | 32/205 kB
2024-08-30T19:20:27.8781197Z Progress (3): 194/229 kB | 177/247 kB | 32/205 kB
2024-08-30T19:20:27.8781846Z Progress (3): 194/229 kB | 177/247 kB | 49/205 kB
2024-08-30T19:20:27.8782514Z Progress (3): 194/229 kB | 177/247 kB | 65/205 kB
2024-08-30T19:20:27.8783195Z Progress (3): 210/229 kB | 177/247 kB | 65/205 kB
2024-08-30T19:20:27.8783880Z Progress (4): 210/229 kB | 177/247 kB | 65/205 kB | 14 kB
2024-08-30T19:20:27.8784716Z Progress (4): 210/229 kB | 177/247 kB | 81/205 kB | 14 kB
2024-08-30T19:20:27.8785461Z Progress (4): 227/229 kB | 177/247 kB | 81/205 kB | 14 kB
2024-08-30T19:20:27.8786218Z Progress (4): 229 kB | 177/247 kB | 81/205 kB | 14 kB    
2024-08-30T19:20:27.8787018Z Progress (4): 229 kB | 177/247 kB | 98/205 kB | 14 kB
2024-08-30T19:20:27.8787733Z Progress (4): 229 kB | 177/247 kB | 114/205 kB | 14 kB
2024-08-30T19:20:27.8788401Z                                                       
2024-08-30T19:20:27.8790495Z Downloaded from central: https://repo.maven.apache.org/maven2/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar (14 kB at 68 kB/s)
2024-08-30T19:20:27.8793144Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar
2024-08-30T19:20:27.8795969Z #24 7.104 Downloaded from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.41.0/checker-qual-3.41.0.jar (229 kB at 1.1 MB/s)
2024-08-30T19:20:27.8797626Z #24 7.104 Progress (2): 177/247 kB | 130/205 kB
2024-08-30T19:20:27.8798219Z Progress (2): 177/247 kB | 147/205 kB
2024-08-30T19:20:27.8798773Z Progress (2): 177/247 kB | 163/205 kB
2024-08-30T19:20:27.8799394Z Progress (2): 177/247 kB | 180/205 kB
2024-08-30T19:20:27.8799900Z Progress (2): 177/247 kB | 196/205 kB
2024-08-30T19:20:27.8800426Z Progress (2): 177/247 kB | 205 kB    
2024-08-30T19:20:27.8801227Z                                  
2024-08-30T19:20:27.8803046Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar (205 kB at 980 kB/s)
2024-08-30T19:20:27.8805712Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar
2024-08-30T19:20:27.8808094Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar
2024-08-30T19:20:27.8809507Z #24 7.104 Progress (1): 194/247 kB
2024-08-30T19:20:27.8810015Z Progress (1): 210/247 kB
2024-08-30T19:20:27.8810474Z Progress (1): 226/247 kB
2024-08-30T19:20:27.8810881Z Progress (2): 226/247 kB | 16/211 kB
2024-08-30T19:20:27.8811664Z Progress (2): 243/247 kB | 16/211 kB
2024-08-30T19:20:27.8812215Z Progress (2): 247 kB | 16/211 kB    
2024-08-30T19:20:27.8812716Z Progress (2): 247 kB | 33/211 kB
2024-08-30T19:20:27.8813237Z Progress (2): 247 kB | 49/211 kB
2024-08-30T19:20:27.8813743Z Progress (2): 247 kB | 63/211 kB
2024-08-30T19:20:27.8814177Z                                 
2024-08-30T19:20:27.8816608Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar (247 kB at 1.2 MB/s)
2024-08-30T19:20:27.8821313Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-data-jpa/3.2.2/spring-boot-starter-data-jpa-3.2.2.jar
2024-08-30T19:20:27.8823033Z #24 7.104 Progress (1): 80/211 kB
2024-08-30T19:20:27.8823535Z Progress (2): 80/211 kB | 6.8 kB
2024-08-30T19:20:27.8824047Z Progress (2): 96/211 kB | 6.8 kB
2024-08-30T19:20:27.8826164Z                                 
2024-08-30T19:20:27.8827810Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar (6.8 kB at 33 kB/s)
2024-08-30T19:20:27.8832249Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-aop/3.2.2/spring-boot-starter-aop-3.2.2.jar
2024-08-30T19:20:27.8833858Z #24 7.104 Progress (1): 112/211 kB
2024-08-30T19:20:27.8834361Z Progress (1): 129/211 kB
2024-08-30T19:20:27.8834794Z Progress (1): 145/211 kB
2024-08-30T19:20:27.8835239Z Progress (1): 162/211 kB
2024-08-30T19:20:27.8837467Z Progress (1): 178/211 kB
2024-08-30T19:20:27.8837920Z Progress (1): 194/211 kB
2024-08-30T19:20:27.8838366Z Progress (1): 211/211 kB
2024-08-30T19:20:27.8840205Z Progress (1): 211 kB    
2024-08-30T19:20:27.8840714Z Progress (2): 211 kB | 0/1.1 MB
2024-08-30T19:20:27.8841229Z Progress (2): 211 kB | 0/1.1 MB
2024-08-30T19:20:27.8841941Z Progress (2): 211 kB | 0/1.1 MB
2024-08-30T19:20:27.8843071Z Progress (2): 211 kB | 0.1/1.1 MB
2024-08-30T19:20:27.8843614Z Progress (2): 211 kB | 0.1/1.1 MB
2024-08-30T19:20:27.8844569Z Progress (2): 211 kB | 0.1/1.1 MB
2024-08-30T19:20:27.8845102Z Progress (2): 211 kB | 0.1/1.1 MB
2024-08-30T19:20:27.8846748Z Progress (2): 211 kB | 0.1/1.1 MB
2024-08-30T19:20:27.8847285Z Progress (3): 211 kB | 0.1/1.1 MB | 4.8 kB
2024-08-30T19:20:27.8847877Z Progress (3): 211 kB | 0.1/1.1 MB | 4.8 kB
2024-08-30T19:20:27.8849121Z                                           
2024-08-30T19:20:27.8852885Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-data-jpa/3.2.2/spring-boot-starter-data-jpa-3.2.2.jar (4.8 kB at 23 kB/s)
2024-08-30T19:20:27.8857311Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/aspectj/aspectjweaver/1.9.21/aspectjweaver-1.9.21.jar
2024-08-30T19:20:27.8858655Z #24 7.104 Progress (2): 211 kB | 0.2/1.1 MB
2024-08-30T19:20:27.8860522Z Progress (2): 211 kB | 0.2/1.1 MB
2024-08-30T19:20:27.8861832Z Progress (2): 211 kB | 0.2/1.1 MB
2024-08-30T19:20:27.8862397Z Progress (2): 211 kB | 0.2/1.1 MB
2024-08-30T19:20:27.8862924Z Progress (2): 211 kB | 0.2/1.1 MB
2024-08-30T19:20:27.8863486Z Progress (2): 211 kB | 0.2/1.1 MB
2024-08-30T19:20:27.8864014Z Progress (2): 211 kB | 0.3/1.1 MB
2024-08-30T19:20:27.8864551Z Progress (3): 211 kB | 0.3/1.1 MB | 4.8 kB
2024-08-30T19:20:27.8866364Z Progress (3): 211 kB | 0.3/1.1 MB | 4.8 kB
2024-08-30T19:20:27.8867082Z Progress (3): 211 kB | 0.3/1.1 MB | 4.8 kB
2024-08-30T19:20:27.8867666Z                                           
2024-08-30T19:20:27.8871341Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-aop/3.2.2/spring-boot-starter-aop-3.2.2.jar (4.8 kB at 23 kB/s)
2024-08-30T19:20:27.8875782Z #24 7.104 Progress (2): 211 kB | 0.3/1.1 MB
2024-08-30T19:20:27.8876355Z                                  
2024-08-30T19:20:27.8878247Z Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-jdbc/3.2.2/spring-boot-starter-jdbc-3.2.2.jar
2024-08-30T19:20:27.8879868Z #24 7.104 Progress (2): 211 kB | 0.3/1.1 MB
2024-08-30T19:20:27.8882547Z Progress (2): 211 kB | 0.3/1.1 MB
2024-08-30T19:20:27.8883263Z Progress (2): 211 kB | 0.4/1.1 MB
2024-08-30T19:20:27.8883763Z Progress (2): 211 kB | 0.4/1.1 MB
2024-08-30T19:20:27.8884216Z Progress (2): 211 kB | 0.4/1.1 MB
2024-08-30T19:20:27.8889106Z Progress (2): 211 kB | 0.4/1.1 MB
2024-08-30T19:20:27.8889884Z Progress (3): 211 kB | 0.4/1.1 MB | 16/106 kB
2024-08-30T19:20:27.8890568Z Progress (3): 211 kB | 0.4/1.1 MB | 32/106 kB
2024-08-30T19:20:27.8891906Z Progress (3): 211 kB | 0.4/1.1 MB | 49/106 kB
2024-08-30T19:20:27.8892591Z Progress (3): 211 kB | 0.4/1.1 MB | 65/106 kB
2024-08-30T19:20:27.8893214Z Progress (3): 211 kB | 0.4/1.1 MB | 81/106 kB
2024-08-30T19:20:27.8893829Z Progress (3): 211 kB | 0.4/1.1 MB | 98/106 kB
2024-08-30T19:20:27.8894480Z Progress (3): 211 kB | 0.4/1.1 MB | 106 kB   
2024-08-30T19:20:27.8895242Z                                           
2024-08-30T19:20:27.8897549Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar (106 kB at 504 kB/s)
2024-08-30T19:20:27.8903580Z #24 7.104 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar (211 kB at 1000 kB/s)
2024-08-30T19:20:27.8907870Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar
2024-08-30T19:20:27.8910720Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jdbc/6.1.3/spring-jdbc-6.1.3.jar
2024-08-30T19:20:27.8912404Z #24 7.104 Progress (1): 0.4/1.1 MB
2024-08-30T19:20:27.8912970Z Progress (1): 0.4/1.1 MB
2024-08-30T19:20:27.8913657Z Progress (2): 0.4/1.1 MB | 4.8 kB
2024-08-30T19:20:27.8914442Z Progress (2): 0.5/1.1 MB | 4.8 kB
2024-08-30T19:20:27.8915160Z Progress (2): 0.5/1.1 MB | 4.8 kB
2024-08-30T19:20:27.8915910Z Progress (2): 0.5/1.1 MB | 4.8 kB
2024-08-30T19:20:27.8916572Z                                  
2024-08-30T19:20:27.8918981Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-jdbc/3.2.2/spring-boot-starter-jdbc-3.2.2.jar (4.8 kB at 23 kB/s)
2024-08-30T19:20:27.8922962Z #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa/3.2.2/spring-data-jpa-3.2.2.jar
2024-08-30T19:20:27.8924749Z #24 7.104 Progress (1): 0.5/1.1 MB
2024-08-30T19:20:27.8925464Z Progress (1): 0.5/1.1 MB
2024-08-30T19:20:27.8926146Z Progress (2): 0.5/1.1 MB | 0/2.1 MB
2024-08-30T19:20:27.8926862Z Progress (2): 0.5/1.1 MB | 0/2.1 MB
2024-08-30T19:20:27.8927607Z Progress (2): 0.5/1.1 MB | 0/2.1 MB
2024-08-30T19:20:27.8928169Z Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
2024-08-30T19:20:27.8928748Z Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
2024-08-30T19:20:27.8929325Z Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
2024-08-30T19:20:27.8929905Z Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
2024-08-30T19:20:27.8930613Z Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
2024-08-30T19:20:27.8931343Z Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
2024-08-30T19:20:27.8932080Z Progress (2): 0.5/1.1 MB | 0.2/2.1 MB
2024-08-30T19:20:27.8932945Z Progress (2): 0.5/1.1 MB | 0.2/2.1 MB
2024-08-30T19:20:27.8933758Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 16/162 kB
2024-08-30T19:20:27.8934611Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 33/162 kB
2024-08-30T19:20:27.8935452Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 33/162 kB
2024-08-30T19:20:27.8936347Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 49/162 kB
2024-08-30T19:20:27.8937216Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 49/162 kB
2024-08-30T19:20:27.8938111Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 63/162 kB
2024-08-30T19:20:27.8938943Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 63/162 kB
2024-08-30T19:20:27.8939793Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 79/162 kB
2024-08-30T19:20:27.8940797Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 96/162 kB
2024-08-30T19:20:27.8941678Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 96/162 kB
2024-08-30T19:20:27.8942536Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 112/162 kB
2024-08-30T19:20:27.8943440Z Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 128/162 kB
2024-08-30T19:20:27.8944459Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 128/162 kB
2024-08-30T19:20:27.8945715Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 128/162 kB
2024-08-30T19:20:27.8946577Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 145/162 kB
2024-08-30T19:20:27.8947453Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 145/162 kB
2024-08-30T19:20:27.8948816Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 161/162 kB
2024-08-30T19:20:27.8949895Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 162 kB    
2024-08-30T19:20:27.8950632Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 162 kB
2024-08-30T19:20:27.8951463Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 162 kB
2024-08-30T19:20:27.8952395Z                                               
2024-08-30T19:20:27.8954299Z Downloaded from central: https://repo.maven.apache.org/maven2/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar (162 kB at 760 kB/s)
2024-08-30T19:20:27.8956095Z #24 7.106 Progress (2): 0.5/1.1 MB | 0.3/2.1 MB
2024-08-30T19:20:27.8956995Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
2024-08-30T19:20:27.8957862Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
2024-08-30T19:20:27.8958702Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
2024-08-30T19:20:27.8959592Z Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
2024-08-30T19:20:27.8960427Z Progress (3): 0.6/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
2024-08-30T19:20:27.8961531Z Progress (4): 0.6/1.1 MB | 0.3/2.1 MB | 0/1.5 MB | 15/461 kB
2024-08-30T19:20:27.8962568Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 15/461 kB
2024-08-30T19:20:27.8963614Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 31/461 kB
2024-08-30T19:20:27.8964785Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 31/461 kB
2024-08-30T19:20:27.8965775Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 31/461 kB
2024-08-30T19:20:27.8966781Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 31/461 kB
2024-08-30T19:20:27.8967927Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 48/461 kB
2024-08-30T19:20:27.8968951Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 48/461 kB
2024-08-30T19:20:27.8970439Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 48/461 kB
2024-08-30T19:20:27.8971795Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 64/461 kB
2024-08-30T19:20:27.8972875Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 64/461 kB
2024-08-30T19:20:27.8973912Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 64/461 kB
2024-08-30T19:20:27.8975105Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 81/461 kB
2024-08-30T19:20:27.8976106Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 81/461 kB
2024-08-30T19:20:27.8977286Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 81/461 kB
2024-08-30T19:20:27.8978366Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 97/461 kB
2024-08-30T19:20:27.8979642Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 97/461 kB
2024-08-30T19:20:27.8980715Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 97/461 kB
2024-08-30T19:20:27.8981744Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 112/461 kB
2024-08-30T19:20:27.8982962Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 112/461 kB
2024-08-30T19:20:27.8984164Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 112/461 kB
2024-08-30T19:20:27.8985201Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 128/461 kB
2024-08-30T19:20:27.8986259Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 128/461 kB
2024-08-30T19:20:27.8987421Z Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 128/461 kB
2024-08-30T19:20:27.8988603Z Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 128/461 kB
2024-08-30T19:20:27.8989629Z Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 145/461 kB
2024-08-30T19:20:27.8990706Z Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 145/461 kB
2024-08-30T19:20:27.8991890Z Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 161/461 kB
2024-08-30T19:20:27.8992908Z Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 161/461 kB
2024-08-30T19:20:27.8993941Z Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 161/461 kB
2024-08-30T19:20:27.8995135Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 161/461 kB
2024-08-30T19:20:27.8996318Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 178/461 kB
2024-08-30T19:20:27.8997331Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 178/461 kB
2024-08-30T19:20:27.8998874Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 194/461 kB
2024-08-30T19:20:27.9000151Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 194/461 kB
2024-08-30T19:20:27.9001245Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 194/461 kB
2024-08-30T19:20:27.9002440Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 194/461 kB
2024-08-30T19:20:27.9003536Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 210/461 kB
2024-08-30T19:20:27.9004557Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 210/461 kB
2024-08-30T19:20:27.9005581Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 210/461 kB
2024-08-30T19:20:27.9006771Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 227/461 kB
2024-08-30T19:20:27.9007970Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.2/1.5 MB | 227/461 kB
2024-08-30T19:20:27.9008991Z Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.2/1.5 MB | 227/461 kB
2024-08-30T19:20:27.9010166Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 227/461 kB
2024-08-30T19:20:27.9011336Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 227/461 kB
2024-08-30T19:20:27.9012333Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 227/461 kB
2024-08-30T19:20:27.9013373Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 243/461 kB
2024-08-30T19:20:27.9014551Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 243/461 kB
2024-08-30T19:20:27.9015627Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 243/461 kB
2024-08-30T19:20:27.9016633Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 259/461 kB
2024-08-30T19:20:27.9017831Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 259/461 kB
2024-08-30T19:20:27.9019015Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 259/461 kB
2024-08-30T19:20:27.9020381Z Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 276/461 kB
2024-08-30T19:20:27.9021412Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 276/461 kB
2024-08-30T19:20:27.9022594Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 276/461 kB
2024-08-30T19:20:27.9023803Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 292/461 kB
2024-08-30T19:20:27.9024832Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 292/461 kB
2024-08-30T19:20:27.9025885Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 309/461 kB
2024-08-30T19:20:27.9027124Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 309/461 kB
2024-08-30T19:20:27.9028134Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 309/461 kB
2024-08-30T19:20:27.9029168Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 325/461 kB
2024-08-30T19:20:27.9030332Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 325/461 kB
2024-08-30T19:20:27.9031537Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 325/461 kB
2024-08-30T19:20:27.9032562Z Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 341/461 kB
2024-08-30T19:20:27.9033742Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 341/461 kB
2024-08-30T19:20:27.9034774Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 358/461 kB
2024-08-30T19:20:27.9035988Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 358/461 kB
2024-08-30T19:20:27.9037031Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 374/461 kB
2024-08-30T19:20:27.9038182Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 374/461 kB
2024-08-30T19:20:27.9039254Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 391/461 kB
2024-08-30T19:20:27.9040267Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 391/461 kB
2024-08-30T19:20:27.9041305Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 407/461 kB
2024-08-30T19:20:27.9042494Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 407/461 kB
2024-08-30T19:20:27.9043705Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 423/461 kB
2024-08-30T19:20:27.9044753Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 423/461 kB
2024-08-30T19:20:27.9045799Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 440/461 kB
2024-08-30T19:20:27.9046987Z Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 440/461 kB
2024-08-30T19:20:27.9048349Z Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 440/461 kB
2024-08-30T19:20:27.9049444Z Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 456/461 kB
2024-08-30T19:20:27.9050597Z Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB    
2024-08-30T19:20:27.9051808Z Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
2024-08-30T19:20:27.9052774Z Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
2024-08-30T19:20:27.9053776Z Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
2024-08-30T19:20:27.9054896Z Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
2024-08-30T19:20:27.9055916Z Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
2024-08-30T19:20:27.9056806Z                                                            
2024-08-30T19:20:27.9059157Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jdbc/6.1.3/spring-jdbc-6.1.3.jar (461 kB at 2.0 MB/s)
2024-08-30T19:20:27.9062568Z #24 7.122 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-commons/3.2.2/spring-data-commons-3.2.2.jar
2024-08-30T19:20:27.9064571Z #24 7.122 Progress (3): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9065521Z Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9066536Z Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9067449Z Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9068301Z Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9069180Z Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9070871Z Progress (3): 0.9/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9072248Z Progress (3): 0.9/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9073919Z Progress (3): 0.9/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9074966Z Progress (3): 0.9/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9075851Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9076738Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9078832Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9080095Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9080982Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9081879Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9082729Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9083642Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9085153Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9086225Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9087152Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
2024-08-30T19:20:27.9087992Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9088719Z Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9089751Z Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9090591Z Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9091528Z Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9092233Z Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9092953Z Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9093659Z Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9094513Z Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9095240Z Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9096339Z Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9097175Z Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9098085Z Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
2024-08-30T19:20:27.9098918Z Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB
2024-08-30T19:20:27.9099705Z                                                   
2024-08-30T19:20:27.9102142Z Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-orm/6.1.3/spring-orm-6.1.3.jar
2024-08-30T19:20:27.9103877Z #24 7.125 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB
2024-08-30T19:20:27.9104958Z Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB
2024-08-30T19:20:27.9105987Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0/1.4 MB
2024-08-30T19:20:27.9106984Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0/1.4 MB
2024-08-30T19:20:27.9108030Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0/1.4 MB
2024-08-30T19:20:27.9109187Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0/1.4 MB
2024-08-30T19:20:27.9110255Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9111431Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9112501Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9113697Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9114753Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9115788Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9116956Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9118147Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9119180Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9120220Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9121455Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9122464Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9123979Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.1/1.4 MB
2024-08-30T19:20:27.9125018Z Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9126252Z Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9127278Z Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9128349Z Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9129655Z Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9130675Z Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9132156Z Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9133333Z Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB    
2024-08-30T19:20:27.9134594Z Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9135589Z Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9136840Z Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9137874Z Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9138913Z Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
2024-08-30T19:20:27.9139871Z                                                            
2024-08-30T19:20:27.9142287Z Downloaded from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.7.1/postgresql-42.7.1.jar (1.1 MB at 4.6 MB/s)
2024-08-30T19:20:27.9144224Z #24 7.141 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
2024-08-30T19:20:27.9145167Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
2024-08-30T19:20:27.9146093Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
2024-08-30T19:20:27.9147037Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
2024-08-30T19:20:27.9147989Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
2024-08-30T19:20:27.9148857Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
2024-08-30T19:20:27.9149982Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
2024-08-30T19:20:27.9150779Z                                                   
2024-08-30T19:20:27.9152463Z Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-tx/6.1.3/spring-tx-6.1.3.jar
2024-08-30T19:20:27.9154733Z #24 7.141 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
2024-08-30T19:20:27.9155582Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
2024-08-30T19:20:27.9156442Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
2024-08-30T19:20:27.9157436Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
2024-08-30T19:20:27.9158366Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
2024-08-30T19:20:27.9159220Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
2024-08-30T19:20:27.9160097Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
2024-08-30T19:20:27.9160954Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
2024-08-30T19:20:27.9161791Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
2024-08-30T19:20:27.9162838Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
2024-08-30T19:20:27.9163559Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
2024-08-30T19:20:27.9164419Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
2024-08-30T19:20:27.9165406Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
2024-08-30T19:20:27.9166337Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
2024-08-30T19:20:27.9167270Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
2024-08-30T19:20:27.9168143Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
2024-08-30T19:20:27.9169006Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
2024-08-30T19:20:27.9169854Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9170902Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9171857Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9172697Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9173587Z Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9174650Z Progress (3): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9175614Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 16/284 kB
2024-08-30T19:20:27.9176676Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 16/284 kB
2024-08-30T19:20:27.9177754Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 33/284 kB
2024-08-30T19:20:27.9178993Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 33/284 kB
2024-08-30T19:20:27.9179884Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 49/284 kB
2024-08-30T19:20:27.9180750Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 49/284 kB
2024-08-30T19:20:27.9181607Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 63/284 kB
2024-08-30T19:20:27.9182498Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 63/284 kB
2024-08-30T19:20:27.9183368Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 80/284 kB
2024-08-30T19:20:27.9184225Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 80/284 kB
2024-08-30T19:20:27.9185104Z Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 96/284 kB
2024-08-30T19:20:27.9185962Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 96/284 kB
2024-08-30T19:20:27.9186835Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 113/284 kB
2024-08-30T19:20:27.9187710Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 113/284 kB
2024-08-30T19:20:27.9188605Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 113/284 kB
2024-08-30T19:20:27.9189468Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 129/284 kB
2024-08-30T19:20:27.9190332Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 145/284 kB
2024-08-30T19:20:27.9191221Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 145/284 kB
2024-08-30T19:20:27.9192115Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 162/284 kB
2024-08-30T19:20:27.9192969Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 162/284 kB
2024-08-30T19:20:27.9193854Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 178/284 kB
2024-08-30T19:20:27.9194705Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 178/284 kB
2024-08-30T19:20:27.9195556Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 195/284 kB
2024-08-30T19:20:27.9196447Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 195/284 kB
2024-08-30T19:20:27.9197333Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 195/284 kB
2024-08-30T19:20:27.9198537Z Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 211/284 kB
2024-08-30T19:20:27.9199476Z Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 211/284 kB
2024-08-30T19:20:27.9200369Z Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 211/284 kB
2024-08-30T19:20:27.9201257Z Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 211/284 kB
2024-08-30T19:20:27.9202136Z Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 227/284 kB
2024-08-30T19:20:27.9203005Z Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 227/284 kB
2024-08-30T19:20:27.9203974Z Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 227/284 kB
2024-08-30T19:20:27.9204872Z Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 244/284 kB
2024-08-30T19:20:27.9205762Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 244/284 kB
2024-08-30T19:20:27.9206641Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 260/284 kB
2024-08-30T19:20:27.9207529Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 260/284 kB
2024-08-30T19:20:27.9208430Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 260/284 kB
2024-08-30T19:20:27.9209300Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 276/284 kB
2024-08-30T19:20:27.9210169Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 276/284 kB
2024-08-30T19:20:27.9211382Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 284 kB    
2024-08-30T19:20:27.9212371Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 284 kB
2024-08-30T19:20:27.9213177Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 284 kB
2024-08-30T19:20:27.9214133Z Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 284 kB
2024-08-30T19:20:27.9215827Z Progress (4): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB | 284 kB
2024-08-30T19:20:27.9216955Z Progress (4): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB | 284 kB
2024-08-30T19:20:27.9217950Z Progress (4): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB | 284 kB
2024-08-30T19:20:27.9218951Z Progress (4): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB | 284 kB
2024-08-30T19:20:27.9219831Z                                                            
2024-08-30T19:20:27.9222334Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-tx/6.1.3/spring-tx-6.1.3.jar (284 kB at 1.1 MB/s)
2024-08-30T19:20:27.9224409Z #24 7.144 Progress (3): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9225349Z Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9226307Z Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9227163Z Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9228213Z Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9228970Z Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9229994Z Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9230906Z Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9231874Z Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9232748Z Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9233625Z Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9234467Z Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9235378Z                                                   
2024-08-30T19:20:27.9237776Z Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aspects/6.1.3/spring-aspects-6.1.3.jar
2024-08-30T19:20:27.9240211Z #24 7.153 Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9241577Z Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9242602Z Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9245038Z Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9245930Z Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9247272Z Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9248583Z Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9250661Z Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9251967Z Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9252906Z Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9253748Z Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9254917Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
2024-08-30T19:20:27.9256491Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9257408Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9259444Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9260317Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9262308Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9263175Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9263902Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9265894Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9266642Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9267460Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9268164Z Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9268856Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
2024-08-30T19:20:27.9269655Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9270299Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9270970Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9271612Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9272595Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9273289Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9273985Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9274690Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9275383Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9276105Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9276801Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9277549Z Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9278270Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9278947Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
2024-08-30T19:20:27.9279618Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9280418Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9281150Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9282091Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9282808Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9285026Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9285884Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9287928Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9288716Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9289556Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9291839Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
2024-08-30T19:20:27.9293597Z Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB
2024-08-30T19:20:27.9294849Z Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 15/233 kB
2024-08-30T19:20:27.9296907Z Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 31/233 kB
2024-08-30T19:20:27.9298028Z Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 48/233 kB
2024-08-30T19:20:27.9299034Z Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 48/233 kB
2024-08-30T19:20:27.9301166Z Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 64/233 kB
2024-08-30T19:20:27.9303516Z Progress (5): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 64/233 kB | 16/50 kB
2024-08-30T19:20:27.9304706Z Progress (5): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 78/233 kB | 16/50 kB
2024-08-30T19:20:27.9307384Z Progress (5): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 78/233 kB | 33/50 kB
2024-08-30T19:20:27.9309751Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 78/233 kB | 33/50 kB
2024-08-30T19:20:27.9310926Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 94/233 kB | 33/50 kB
2024-08-30T19:20:27.9313221Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 94/233 kB | 49/50 kB
2024-08-30T19:20:27.9315636Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 94/233 kB | 50 kB   
2024-08-30T19:20:27.9316827Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 111/233 kB | 50 kB
2024-08-30T19:20:27.9319104Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 111/233 kB | 50 kB
2024-08-30T19:20:27.9320129Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 127/233 kB | 50 kB
2024-08-30T19:20:27.9321128Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 143/233 kB | 50 kB
2024-08-30T19:20:27.9322108Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 143/233 kB | 50 kB
2024-08-30T19:20:27.9323070Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 160/233 kB | 50 kB
2024-08-30T19:20:27.9324052Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 176/233 kB | 50 kB
2024-08-30T19:20:27.9325018Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 193/233 kB | 50 kB
2024-08-30T19:20:27.9325948Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 193/233 kB | 50 kB
2024-08-30T19:20:27.9326874Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 209/233 kB | 50 kB
2024-08-30T19:20:27.9327827Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 225/233 kB | 50 kB
2024-08-30T19:20:27.9328929Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 233 kB | 50 kB    
2024-08-30T19:20:27.9330129Z Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 233 kB | 50 kB
2024-08-30T19:20:27.9330905Z                                                                    
2024-08-30T19:20:27.9333093Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aspects/6.1.3/spring-aspects-6.1.3.jar (50 kB at 177 kB/s)
2024-08-30T19:20:27.9336496Z #24 7.177 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5-jakarta/2.13.5/jackson-datatype-hibernate5-jakarta-2.13.5.jar
2024-08-30T19:20:27.9338633Z #24 7.177 Progress (4): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 233 kB
2024-08-30T19:20:27.9339594Z Progress (4): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 233 kB
2024-08-30T19:20:27.9340372Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
2024-08-30T19:20:27.9341146Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
2024-08-30T19:20:27.9341910Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
2024-08-30T19:20:27.9342700Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
2024-08-30T19:20:27.9343472Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
2024-08-30T19:20:27.9344238Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
2024-08-30T19:20:27.9345131Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
2024-08-30T19:20:27.9345919Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
2024-08-30T19:20:27.9346679Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
2024-08-30T19:20:27.9347453Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
2024-08-30T19:20:27.9348241Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
2024-08-30T19:20:27.9349000Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
2024-08-30T19:20:27.9349810Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
2024-08-30T19:20:27.9350633Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
2024-08-30T19:20:27.9351440Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
2024-08-30T19:20:27.9352256Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
2024-08-30T19:20:27.9353104Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
2024-08-30T19:20:27.9353982Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
2024-08-30T19:20:27.9355132Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
2024-08-30T19:20:27.9355997Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
2024-08-30T19:20:27.9356827Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
2024-08-30T19:20:27.9357606Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
2024-08-30T19:20:27.9358368Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
2024-08-30T19:20:27.9359199Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
2024-08-30T19:20:27.9359978Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
2024-08-30T19:20:27.9360746Z Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
2024-08-30T19:20:27.9361654Z Progress (5): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB | 16/28 kB
2024-08-30T19:20:27.9362656Z Progress (5): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB | 28 kB   
2024-08-30T19:20:27.9363413Z                                                                    
2024-08-30T19:20:27.9365331Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-orm/6.1.3/spring-orm-6.1.3.jar (233 kB at 825 kB/s)
2024-08-30T19:20:27.9370361Z #24 7.177 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar
2024-08-30T19:20:27.9376885Z #24 7.177 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5-jakarta/2.13.5/jackson-datatype-hibernate5-jakarta-2.13.5.jar (28 kB at 98 kB/s)
2024-08-30T19:20:27.9382927Z #24 7.177 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar
2024-08-30T19:20:27.9386307Z #24 7.177 Progress (3): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9388479Z Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9389243Z Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9390991Z Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9392198Z Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9393075Z Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9395078Z Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9395953Z Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9397596Z Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9398752Z Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9399598Z Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9401602Z Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9402476Z Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9404400Z Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9405263Z Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9407277Z Progress (3): 2.1/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9408134Z Progress (3): 2.1/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9410073Z Progress (3): 2.1/2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9410928Z Progress (3): 2.1/2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9413077Z Progress (3): 2.1/2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9414034Z Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB    
2024-08-30T19:20:27.9415703Z Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9416857Z Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9417669Z Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9419719Z Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9420560Z Progress (3): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9422551Z Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 16/29 kB
2024-08-30T19:20:27.9423539Z Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 16/29 kB
2024-08-30T19:20:27.9425695Z Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 29 kB   
2024-08-30T19:20:27.9426975Z Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 29 kB
2024-08-30T19:20:27.9429229Z Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 29 kB
2024-08-30T19:20:27.9430166Z Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 29 kB
2024-08-30T19:20:27.9432195Z                                                       
2024-08-30T19:20:27.9435704Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar (29 kB at 100 kB/s)
2024-08-30T19:20:27.9440143Z #24 7.180 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar
2024-08-30T19:20:27.9443233Z #24 7.181 Progress (3): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9444915Z Progress (3): 2.1 MB | 1.4/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9446162Z                                               
2024-08-30T19:20:27.9449559Z Downloaded from central: https://repo.maven.apache.org/maven2/org/aspectj/aspectjweaver/1.9.21/aspectjweaver-1.9.21.jar (2.1 MB at 7.3 MB/s)
2024-08-30T19:20:27.9452805Z #24 7.185 Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9453616Z                                      
2024-08-30T19:20:27.9455932Z Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar
2024-08-30T19:20:27.9458399Z #24 7.185 Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9459018Z Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9459563Z Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9460395Z Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9460921Z Progress (2): 1.5/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9461466Z Progress (2): 1.5/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9461963Z Progress (2): 1.5/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9462473Z Progress (2): 1.5/1.5 MB | 1.4/1.4 MB
2024-08-30T19:20:27.9463013Z Progress (2): 1.5 MB | 1.4/1.4 MB    
2024-08-30T19:20:27.9463487Z                                  
2024-08-30T19:20:27.9465224Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa/3.2.2/spring-data-jpa-3.2.2.jar (1.5 MB at 5.2 MB/s)
2024-08-30T19:20:27.9468125Z #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-web/3.2.2/spring-boot-starter-web-3.2.2.jar
2024-08-30T19:20:27.9469770Z #24 7.185 Progress (2): 1.4/1.4 MB | 16/549 kB
2024-08-30T19:20:27.9470369Z Progress (2): 1.4/1.4 MB | 33/549 kB
2024-08-30T19:20:27.9470879Z Progress (2): 1.4/1.4 MB | 49/549 kB
2024-08-30T19:20:27.9471415Z Progress (2): 1.4/1.4 MB | 62/549 kB
2024-08-30T19:20:27.9471948Z Progress (2): 1.4/1.4 MB | 79/549 kB
2024-08-30T19:20:27.9472448Z Progress (2): 1.4/1.4 MB | 95/549 kB
2024-08-30T19:20:27.9472970Z Progress (2): 1.4/1.4 MB | 112/549 kB
2024-08-30T19:20:27.9473512Z Progress (2): 1.4/1.4 MB | 128/549 kB
2024-08-30T19:20:27.9474037Z Progress (2): 1.4/1.4 MB | 144/549 kB
2024-08-30T19:20:27.9474547Z Progress (2): 1.4/1.4 MB | 161/549 kB
2024-08-30T19:20:27.9475071Z Progress (2): 1.4/1.4 MB | 177/549 kB
2024-08-30T19:20:27.9475575Z Progress (2): 1.4/1.4 MB | 194/549 kB
2024-08-30T19:20:27.9476079Z Progress (2): 1.4/1.4 MB | 210/549 kB
2024-08-30T19:20:27.9476607Z Progress (2): 1.4/1.4 MB | 226/549 kB
2024-08-30T19:20:27.9477103Z Progress (2): 1.4/1.4 MB | 243/549 kB
2024-08-30T19:20:27.9477670Z Progress (2): 1.4/1.4 MB | 259/549 kB
2024-08-30T19:20:27.9477838Z Progress (2): 1.4/1.4 MB | 275/549 kB
2024-08-30T19:20:27.9478006Z Progress (2): 1.4/1.4 MB | 292/549 kB
2024-08-30T19:20:27.9478194Z Progress (2): 1.4/1.4 MB | 308/549 kB
2024-08-30T19:20:27.9478371Z Progress (2): 1.4/1.4 MB | 312/549 kB
2024-08-30T19:20:27.9478572Z Progress (3): 1.4/1.4 MB | 312/549 kB | 4.8 kB
2024-08-30T19:20:27.9478770Z Progress (3): 1.4/1.4 MB | 325/549 kB | 4.8 kB
2024-08-30T19:20:27.9478971Z Progress (3): 1.4/1.4 MB | 341/549 kB | 4.8 kB
2024-08-30T19:20:27.9479434Z Progress (3): 1.4/1.4 MB | 357/549 kB | 4.8 kB
2024-08-30T19:20:27.9479662Z Progress (3): 1.4/1.4 MB | 374/549 kB | 4.8 kB
2024-08-30T19:20:27.9479876Z Progress (3): 1.4/1.4 MB | 390/549 kB | 4.8 kB
2024-08-30T19:20:27.9480062Z Progress (3): 1.4/1.4 MB | 407/549 kB | 4.8 kB
2024-08-30T19:20:27.9480253Z Progress (3): 1.4/1.4 MB | 423/549 kB | 4.8 kB
2024-08-30T19:20:27.9480415Z                                               
2024-08-30T19:20:27.9481974Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-web/3.2.2/spring-boot-starter-web-3.2.2.jar (4.8 kB at 17 kB/s)
2024-08-30T19:20:27.9483439Z #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-json/3.2.2/spring-boot-starter-json-3.2.2.jar
2024-08-30T19:20:27.9483667Z #24 7.185 Progress (2): 1.4/1.4 MB | 439/549 kB
2024-08-30T19:20:27.9483837Z Progress (2): 1.4/1.4 MB | 456/549 kB
2024-08-30T19:20:27.9484052Z Progress (3): 1.4/1.4 MB | 456/549 kB | 0/1.6 MB
2024-08-30T19:20:27.9484272Z Progress (3): 1.4/1.4 MB | 456/549 kB | 0/1.6 MB
2024-08-30T19:20:27.9484502Z Progress (3): 1.4/1.4 MB | 472/549 kB | 0/1.6 MB
2024-08-30T19:20:27.9484694Z Progress (3): 1.4/1.4 MB | 472/549 kB | 0/1.6 MB
2024-08-30T19:20:27.9484892Z Progress (3): 1.4/1.4 MB | 488/549 kB | 0/1.6 MB
2024-08-30T19:20:27.9485127Z Progress (3): 1.4/1.4 MB | 488/549 kB | 0.1/1.6 MB
2024-08-30T19:20:27.9485345Z Progress (3): 1.4/1.4 MB | 505/549 kB | 0.1/1.6 MB
2024-08-30T19:20:27.9485551Z Progress (3): 1.4/1.4 MB | 521/549 kB | 0.1/1.6 MB
2024-08-30T19:20:27.9485779Z Progress (3): 1.4/1.4 MB | 521/549 kB | 0.1/1.6 MB
2024-08-30T19:20:27.9486168Z Progress (3): 1.4/1.4 MB | 521/549 kB | 0.1/1.6 MB
2024-08-30T19:20:27.9486373Z Progress (3): 1.4/1.4 MB | 538/549 kB | 0.1/1.6 MB
2024-08-30T19:20:27.9486595Z Progress (3): 1.4/1.4 MB | 549 kB | 0.1/1.6 MB    
2024-08-30T19:20:27.9486802Z Progress (3): 1.4/1.4 MB | 549 kB | 0.1/1.6 MB
2024-08-30T19:20:27.9487002Z Progress (3): 1.4/1.4 MB | 549 kB | 0.1/1.6 MB
2024-08-30T19:20:27.9487203Z Progress (3): 1.4/1.4 MB | 549 kB | 0.1/1.6 MB
2024-08-30T19:20:27.9487372Z                                               
2024-08-30T19:20:27.9488756Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar (549 kB at 1.9 MB/s)
2024-08-30T19:20:27.9488967Z #24 7.185 Progress (2): 1.4 MB | 0.1/1.6 MB
2024-08-30T19:20:27.9489143Z Progress (2): 1.4 MB | 0.2/1.6 MB
2024-08-30T19:20:27.9489295Z Progress (2): 1.4 MB | 0.2/1.6 MB
2024-08-30T19:20:27.9489442Z Progress (2): 1.4 MB | 0.2/1.6 MB
2024-08-30T19:20:27.9489577Z                                  
2024-08-30T19:20:27.9491225Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-commons/3.2.2/spring-data-commons-3.2.2.jar (1.4 MB at 4.9 MB/s)
2024-08-30T19:20:27.9492686Z #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar
2024-08-30T19:20:27.9492903Z #24 7.185 Progress (1): 0.2/1.6 MB
2024-08-30T19:20:27.9493076Z Progress (1): 0.2/1.6 MB
2024-08-30T19:20:27.9493235Z Progress (1): 0.2/1.6 MB
2024-08-30T19:20:27.9493459Z Progress (1): 0.3/1.6 MB
2024-08-30T19:20:27.9493702Z Progress (1): 0.3/1.6 MB
2024-08-30T19:20:27.9493914Z Progress (1): 0.3/1.6 MB
2024-08-30T19:20:27.9494097Z Progress (1): 0.3/1.6 MB
2024-08-30T19:20:27.9494259Z Progress (1): 0.3/1.6 MB
2024-08-30T19:20:27.9494429Z Progress (1): 0.3/1.6 MB
2024-08-30T19:20:27.9494597Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.9494753Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.9494912Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.9495240Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.9495400Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.9495546Z Progress (1): 0.4/1.6 MB
2024-08-30T19:20:27.9495706Z Progress (1): 0.5/1.6 MB
2024-08-30T19:20:27.9495867Z Progress (1): 0.5/1.6 MB
2024-08-30T19:20:27.9496025Z Progress (1): 0.5/1.6 MB
2024-08-30T19:20:27.9497799Z Progress (1): 0.5/1.6 MB
2024-08-30T19:20:27.9498507Z Progress (1): 0.5/1.6 MB
2024-08-30T19:20:27.9498705Z Progress (1): 0.5/1.6 MB
2024-08-30T19:20:27.9498893Z Progress (1): 0.6/1.6 MB
2024-08-30T19:20:27.9499059Z Progress (1): 0.6/1.6 MB
2024-08-30T19:20:27.9499334Z Progress (1): 0.6/1.6 MB
2024-08-30T19:20:27.9499508Z Progress (1): 0.6/1.6 MB
2024-08-30T19:20:27.9499674Z Progress (1): 0.6/1.6 MB
2024-08-30T19:20:27.9499845Z Progress (1): 0.6/1.6 MB
2024-08-30T19:20:27.9501012Z Progress (2): 0.6/1.6 MB | 4.7 kB
2024-08-30T19:20:27.9501544Z                                  
2024-08-30T19:20:27.9503340Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-json/3.2.2/spring-boot-starter-json-3.2.2.jar (4.7 kB at 16 kB/s)
2024-08-30T19:20:27.9506380Z #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar
2024-08-30T19:20:27.9506654Z #24 7.185 Progress (2): 0.6/1.6 MB | 16/76 kB
2024-08-30T19:20:27.9506859Z Progress (2): 0.6/1.6 MB | 32/76 kB
2024-08-30T19:20:27.9507984Z Progress (2): 0.6/1.6 MB | 49/76 kB
2024-08-30T19:20:27.9508577Z Progress (2): 0.6/1.6 MB | 65/76 kB
2024-08-30T19:20:27.9508789Z Progress (2): 0.6/1.6 MB | 76 kB   
2024-08-30T19:20:27.9509025Z Progress (3): 0.6/1.6 MB | 76 kB | 16/123 kB
2024-08-30T19:20:27.9509208Z                                             
2024-08-30T19:20:27.9512424Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar (76 kB at 260 kB/s)
2024-08-30T19:20:27.9515973Z #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar
2024-08-30T19:20:27.9516247Z #24 7.185 Progress (2): 0.6/1.6 MB | 32/123 kB
2024-08-30T19:20:27.9517386Z Progress (2): 0.6/1.6 MB | 49/123 kB
2024-08-30T19:20:27.9518001Z Progress (2): 0.6/1.6 MB | 49/123 kB
2024-08-30T19:20:27.9518235Z Progress (2): 0.7/1.6 MB | 49/123 kB
2024-08-30T19:20:27.9518422Z Progress (2): 0.7/1.6 MB | 65/123 kB
2024-08-30T19:20:27.9518601Z Progress (2): 0.7/1.6 MB | 65/123 kB
2024-08-30T19:20:27.9518889Z Progress (2): 0.7/1.6 MB | 65/123 kB
2024-08-30T19:20:27.9519067Z Progress (2): 0.7/1.6 MB | 65/123 kB
2024-08-30T19:20:27.9519238Z Progress (2): 0.7/1.6 MB | 81/123 kB
2024-08-30T19:20:27.9519431Z Progress (2): 0.7/1.6 MB | 81/123 kB
2024-08-30T19:20:27.9520471Z Progress (2): 0.7/1.6 MB | 81/123 kB
2024-08-30T19:20:27.9520890Z Progress (2): 0.7/1.6 MB | 98/123 kB
2024-08-30T19:20:27.9521289Z Progress (2): 0.8/1.6 MB | 98/123 kB
2024-08-30T19:20:27.9521470Z Progress (2): 0.8/1.6 MB | 98/123 kB
2024-08-30T19:20:27.9521657Z Progress (2): 0.8/1.6 MB | 98/123 kB
2024-08-30T19:20:27.9521950Z Progress (2): 0.8/1.6 MB | 98/123 kB
2024-08-30T19:20:27.9522156Z Progress (2): 0.8/1.6 MB | 114/123 kB
2024-08-30T19:20:27.9522417Z Progress (3): 0.8/1.6 MB | 114/123 kB | 16/36 kB
2024-08-30T19:20:27.9522653Z Progress (3): 0.8/1.6 MB | 114/123 kB | 16/36 kB
2024-08-30T19:20:27.9524007Z Progress (3): 0.8/1.6 MB | 123 kB | 16/36 kB    
2024-08-30T19:20:27.9524454Z Progress (3): 0.8/1.6 MB | 123 kB | 33/36 kB
2024-08-30T19:20:27.9524690Z Progress (3): 0.8/1.6 MB | 123 kB | 33/36 kB
2024-08-30T19:20:27.9525023Z Progress (3): 0.8/1.6 MB | 123 kB | 36 kB   
2024-08-30T19:20:27.9525235Z Progress (3): 0.9/1.6 MB | 123 kB | 36 kB
2024-08-30T19:20:27.9525429Z Progress (3): 0.9/1.6 MB | 123 kB | 36 kB
2024-08-30T19:20:27.9526443Z                                          
2024-08-30T19:20:27.9528694Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar (36 kB at 124 kB/s)
2024-08-30T19:20:27.9531812Z #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-tomcat/3.2.2/spring-boot-starter-tomcat-3.2.2.jar
2024-08-30T19:20:27.9536392Z #24 7.185 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar (123 kB at 422 kB/s)
2024-08-30T19:20:27.9539184Z #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-core/10.1.18/tomcat-embed-core-10.1.18.jar
2024-08-30T19:20:27.9539716Z #24 7.186 Progress (2): 0.9/1.6 MB | 10 kB
2024-08-30T19:20:27.9539899Z                                 
2024-08-30T19:20:27.9542746Z Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.18/tomcat-embed-websocket-10.1.18.jar
2024-08-30T19:20:27.9546028Z #24 7.186 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar (10 kB at 35 kB/s)
2024-08-30T19:20:27.9548566Z #24 7.187 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-web/6.1.3/spring-web-6.1.3.jar
2024-08-30T19:20:27.9548931Z #24 7.187 Progress (2): 0.9/1.6 MB | 4.8 kB
2024-08-30T19:20:27.9549100Z                                  
2024-08-30T19:20:27.9552838Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-tomcat/3.2.2/spring-boot-starter-tomcat-3.2.2.jar (4.8 kB at 16 kB/s)
2024-08-30T19:20:27.9556114Z #24 7.188 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-webmvc/6.1.3/spring-webmvc-6.1.3.jar
2024-08-30T19:20:27.9556579Z #24 7.188 Progress (2): 0.9/1.6 MB | 0/3.5 MB
2024-08-30T19:20:27.9557123Z Progress (2): 0.9/1.6 MB | 0/3.5 MB
2024-08-30T19:20:27.9557484Z Progress (3): 0.9/1.6 MB | 0/3.5 MB | 0/1.9 MB
2024-08-30T19:20:27.9557713Z Progress (3): 0.9/1.6 MB | 0/3.5 MB | 0/1.9 MB
2024-08-30T19:20:27.9558951Z Progress (3): 0.9/1.6 MB | 0/3.5 MB | 0/1.9 MB
2024-08-30T19:20:27.9559433Z Progress (3): 0.9/1.6 MB | 0/3.5 MB | 0/1.9 MB
2024-08-30T19:20:27.9559718Z Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0/1.9 MB
2024-08-30T19:20:27.9560078Z Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
2024-08-30T19:20:27.9560322Z Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
2024-08-30T19:20:27.9560558Z Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
2024-08-30T19:20:27.9562037Z Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
2024-08-30T19:20:27.9562782Z Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
2024-08-30T19:20:27.9563073Z Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
2024-08-30T19:20:27.9563417Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 15/281 kB
2024-08-30T19:20:27.9563882Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 15/281 kB
2024-08-30T19:20:27.9565204Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 15/281 kB
2024-08-30T19:20:27.9566298Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 31/281 kB
2024-08-30T19:20:27.9566996Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 31/281 kB
2024-08-30T19:20:27.9567342Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 31/281 kB
2024-08-30T19:20:27.9568546Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 48/281 kB
2024-08-30T19:20:27.9570236Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 48/281 kB
2024-08-30T19:20:27.9572840Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 64/281 kB
2024-08-30T19:20:27.9573217Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 81/281 kB
2024-08-30T19:20:27.9574392Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.2/1.9 MB | 81/281 kB
2024-08-30T19:20:27.9574764Z Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.2/1.9 MB | 97/281 kB
2024-08-30T19:20:27.9575116Z Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 97/281 kB
2024-08-30T19:20:27.9575434Z Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 97/281 kB
2024-08-30T19:20:27.9576378Z Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 113/281 kB
2024-08-30T19:20:27.9577141Z Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB
2024-08-30T19:20:27.9578351Z Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB
2024-08-30T19:20:27.9579384Z Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB
2024-08-30T19:20:27.9959485Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
2024-08-30T19:20:27.9960444Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
2024-08-30T19:20:27.9961363Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
2024-08-30T19:20:27.9961960Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
2024-08-30T19:20:27.9962545Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
2024-08-30T19:20:27.9963140Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
2024-08-30T19:20:27.9963637Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9964425Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9964953Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9965490Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9965963Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9966354Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9966723Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9967312Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9968087Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9968590Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9968983Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9969367Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
2024-08-30T19:20:27.9969730Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9970109Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9970498Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9970892Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9971515Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9971900Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9972399Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9972790Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9973174Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9973583Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9973952Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9974394Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
2024-08-30T19:20:27.9974775Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9975195Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9975551Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9975924Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9976303Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9976666Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9977024Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9977786Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9978185Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9978554Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9979003Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9979374Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9979735Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9980106Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9980466Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
2024-08-30T19:20:27.9980824Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
2024-08-30T19:20:27.9981207Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
2024-08-30T19:20:27.9981569Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
2024-08-30T19:20:27.9981921Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
2024-08-30T19:20:27.9982289Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
2024-08-30T19:20:27.9982647Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
2024-08-30T19:20:27.9983018Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
2024-08-30T19:20:27.9983376Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
2024-08-30T19:20:27.9983997Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
2024-08-30T19:20:27.9984367Z Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
2024-08-30T19:20:27.9984823Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
2024-08-30T19:20:27.9985196Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
2024-08-30T19:20:27.9985564Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
2024-08-30T19:20:27.9985928Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
2024-08-30T19:20:27.9986291Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
2024-08-30T19:20:27.9986651Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
2024-08-30T19:20:27.9987013Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
2024-08-30T19:20:27.9987443Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
2024-08-30T19:20:27.9987832Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
2024-08-30T19:20:27.9988254Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
2024-08-30T19:20:27.9988624Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
2024-08-30T19:20:27.9988980Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
2024-08-30T19:20:27.9989336Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
2024-08-30T19:20:27.9989693Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
2024-08-30T19:20:27.9990059Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
2024-08-30T19:20:27.9990414Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
2024-08-30T19:20:27.9990790Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
2024-08-30T19:20:27.9991151Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
2024-08-30T19:20:27.9991513Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
2024-08-30T19:20:27.9991886Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
2024-08-30T19:20:27.9992446Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
2024-08-30T19:20:27.9992820Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
2024-08-30T19:20:27.9993188Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
2024-08-30T19:20:27.9993528Z Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
2024-08-30T19:20:27.9993887Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
2024-08-30T19:20:27.9994235Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
2024-08-30T19:20:27.9994598Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
2024-08-30T19:20:27.9994951Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
2024-08-30T19:20:27.9995311Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
2024-08-30T19:20:27.9995662Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
2024-08-30T19:20:27.9996043Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
2024-08-30T19:20:27.9996394Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
2024-08-30T19:20:27.9996770Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
2024-08-30T19:20:27.9997123Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
2024-08-30T19:20:27.9997473Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
2024-08-30T19:20:27.9997840Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
2024-08-30T19:20:27.9998198Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
2024-08-30T19:20:27.9998793Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
2024-08-30T19:20:27.9999167Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
2024-08-30T19:20:27.9999513Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
2024-08-30T19:20:27.9999895Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
2024-08-30T19:20:28.0000255Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
2024-08-30T19:20:28.0000615Z Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0 MB    
2024-08-30T19:20:28.0000847Z                                                                         
2024-08-30T19:20:28.0002361Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-webmvc/6.1.3/spring-webmvc-6.1.3.jar (1.0 MB at 2.9 MB/s)
2024-08-30T19:20:28.0002722Z #24 7.249 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 145/281 kB
2024-08-30T19:20:28.0003047Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 145/281 kB
2024-08-30T19:20:28.0003337Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 162/281 kB
2024-08-30T19:20:28.0003635Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 178/281 kB
2024-08-30T19:20:28.0003939Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 195/281 kB
2024-08-30T19:20:28.0004215Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 195/281 kB
2024-08-30T19:20:28.0004510Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 211/281 kB
2024-08-30T19:20:28.0004805Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 211/281 kB
2024-08-30T19:20:28.0005092Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 227/281 kB
2024-08-30T19:20:28.0005403Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 227/281 kB
2024-08-30T19:20:28.0005671Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 244/281 kB
2024-08-30T19:20:28.0005957Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 244/281 kB
2024-08-30T19:20:28.0006262Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 260/281 kB
2024-08-30T19:20:28.0006542Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 260/281 kB
2024-08-30T19:20:28.0006839Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 277/281 kB
2024-08-30T19:20:28.0007288Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 277/281 kB
2024-08-30T19:20:28.0007593Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 277/281 kB
2024-08-30T19:20:28.0007884Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 281 kB    
2024-08-30T19:20:28.0008159Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 281 kB
2024-08-30T19:20:28.0008444Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 281 kB
2024-08-30T19:20:28.0008700Z Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 281 kB
2024-08-30T19:20:28.0008970Z Progress (4): 0.9/1.6 MB | 0.5/3.5 MB | 0.6/1.9 MB | 281 kB
2024-08-30T19:20:28.0009241Z Progress (4): 0.9/1.6 MB | 0.5/3.5 MB | 0.6/1.9 MB | 281 kB
2024-08-30T19:20:28.0009439Z                                                            
2024-08-30T19:20:28.0051659Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.18/tomcat-embed-websocket-10.1.18.jar (281 kB at 793 kB/s)
2024-08-30T19:20:28.0052123Z #24 7.249 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.6/1.9 MB
2024-08-30T19:20:28.0052303Z                                                   
2024-08-30T19:20:28.0053714Z Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.3.1/spring-security-core-6.3.1.jar
2024-08-30T19:20:28.0054814Z #24 7.249 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0055067Z Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0055305Z Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0055553Z Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0056143Z Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0056386Z Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0056625Z Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0056804Z                                                   
2024-08-30T19:20:28.0058178Z Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-crypto/6.2.1/spring-security-crypto-6.2.1.jar
2024-08-30T19:20:28.0058473Z #24 7.252 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0058690Z Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0058912Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0059120Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0059351Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.7/1.9 MB
2024-08-30T19:20:28.0059580Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0059805Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0060035Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0060255Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0060474Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0060696Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0060936Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0061152Z Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0061388Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0061604Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0061824Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0062054Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0062278Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0062498Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0062735Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
2024-08-30T19:20:28.0062971Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0063194Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0063424Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0063645Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0064128Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0064386Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0064614Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0064846Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0065073Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0065297Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0065534Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0065759Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
2024-08-30T19:20:28.0065991Z Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
2024-08-30T19:20:28.0066213Z Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
2024-08-30T19:20:28.0066426Z Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
2024-08-30T19:20:28.0066639Z Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
2024-08-30T19:20:28.0066860Z Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
2024-08-30T19:20:28.0067086Z Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
2024-08-30T19:20:28.0067387Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 16/559 kB
2024-08-30T19:20:28.0067705Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 16/559 kB
2024-08-30T19:20:28.0068020Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 16/559 kB
2024-08-30T19:20:28.0068334Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 16/559 kB
2024-08-30T19:20:28.0068629Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 33/559 kB
2024-08-30T19:20:28.0068916Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 37/559 kB
2024-08-30T19:20:28.0069461Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 37/559 kB
2024-08-30T19:20:28.0069761Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 37/559 kB
2024-08-30T19:20:28.0070065Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 37/559 kB
2024-08-30T19:20:28.0070377Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 37/559 kB
2024-08-30T19:20:28.0070685Z Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 53/559 kB
2024-08-30T19:20:28.0070977Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 53/559 kB
2024-08-30T19:20:28.0071270Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 53/559 kB
2024-08-30T19:20:28.0071557Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 53/559 kB
2024-08-30T19:20:28.0071854Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 70/559 kB
2024-08-30T19:20:28.0072141Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 70/559 kB
2024-08-30T19:20:28.0072431Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 70/559 kB
2024-08-30T19:20:28.0072743Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 86/559 kB
2024-08-30T19:20:28.0073026Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 86/559 kB
2024-08-30T19:20:28.0073321Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 86/559 kB
2024-08-30T19:20:28.0073645Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 103/559 kB
2024-08-30T19:20:28.0073950Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 103/559 kB
2024-08-30T19:20:28.0074245Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 103/559 kB
2024-08-30T19:20:28.0074552Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 103/559 kB
2024-08-30T19:20:28.0074845Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 119/559 kB
2024-08-30T19:20:28.0075150Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 127/559 kB
2024-08-30T19:20:28.0075449Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 127/559 kB
2024-08-30T19:20:28.0075745Z Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 127/559 kB
2024-08-30T19:20:28.0076055Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 127/559 kB
2024-08-30T19:20:28.0076357Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 127/559 kB
2024-08-30T19:20:28.0076658Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 144/559 kB
2024-08-30T19:20:28.0076966Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 144/559 kB
2024-08-30T19:20:28.0077462Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 144/559 kB
2024-08-30T19:20:28.0077862Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
2024-08-30T19:20:28.0078201Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
2024-08-30T19:20:28.0078517Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
2024-08-30T19:20:28.0078830Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
2024-08-30T19:20:28.0079134Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
2024-08-30T19:20:28.0079434Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 176/559 kB
2024-08-30T19:20:28.0079751Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 176/559 kB
2024-08-30T19:20:28.0080048Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 176/559 kB
2024-08-30T19:20:28.0080360Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 176/559 kB
2024-08-30T19:20:28.0080667Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 193/559 kB
2024-08-30T19:20:28.0080971Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 193/559 kB
2024-08-30T19:20:28.0081262Z Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 193/559 kB
2024-08-30T19:20:28.0081566Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 193/559 kB
2024-08-30T19:20:28.0081864Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 209/559 kB
2024-08-30T19:20:28.0082159Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 209/559 kB
2024-08-30T19:20:28.0082464Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 225/559 kB
2024-08-30T19:20:28.0082760Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 225/559 kB
2024-08-30T19:20:28.0083289Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 242/559 kB
2024-08-30T19:20:28.0083590Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 242/559 kB
2024-08-30T19:20:28.0083889Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 258/559 kB
2024-08-30T19:20:28.0084194Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 258/559 kB
2024-08-30T19:20:28.0084509Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 275/559 kB
2024-08-30T19:20:28.0084830Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 275/559 kB
2024-08-30T19:20:28.0085142Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 291/559 kB
2024-08-30T19:20:28.0085438Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 291/559 kB
2024-08-30T19:20:28.0085740Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 307/559 kB
2024-08-30T19:20:28.0086046Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 307/559 kB
2024-08-30T19:20:28.0086343Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 307/559 kB
2024-08-30T19:20:28.0086653Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 324/559 kB
2024-08-30T19:20:28.0086948Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 324/559 kB
2024-08-30T19:20:28.0087246Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 324/559 kB
2024-08-30T19:20:28.0087567Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 340/559 kB
2024-08-30T19:20:28.0087879Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 340/559 kB
2024-08-30T19:20:28.0088189Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 357/559 kB
2024-08-30T19:20:28.0088498Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 373/559 kB
2024-08-30T19:20:28.0088808Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 373/559 kB
2024-08-30T19:20:28.0089105Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 373/559 kB
2024-08-30T19:20:28.0089429Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 389/559 kB
2024-08-30T19:20:28.0089725Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 406/559 kB
2024-08-30T19:20:28.0090029Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 406/559 kB
2024-08-30T19:20:28.0090324Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 422/559 kB
2024-08-30T19:20:28.0090621Z Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 422/559 kB
2024-08-30T19:20:28.0090929Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 422/559 kB
2024-08-30T19:20:28.0091840Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 438/559 kB
2024-08-30T19:20:28.0092444Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 438/559 kB
2024-08-30T19:20:28.0092794Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 438/559 kB
2024-08-30T19:20:28.0093311Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 455/559 kB
2024-08-30T19:20:28.0093625Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 471/559 kB
2024-08-30T19:20:28.0094194Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 471/559 kB
2024-08-30T19:20:28.0094486Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 471/559 kB
2024-08-30T19:20:28.0095121Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 471/559 kB
2024-08-30T19:20:28.0095461Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 488/559 kB
2024-08-30T19:20:28.0095969Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 504/559 kB
2024-08-30T19:20:28.0096269Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 504/559 kB
2024-08-30T19:20:28.0096812Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 504/559 kB
2024-08-30T19:20:28.0097119Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 520/559 kB
2024-08-30T19:20:28.0097409Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 537/559 kB
2024-08-30T19:20:28.0097685Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 537/559 kB
2024-08-30T19:20:28.0098061Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 553/559 kB
2024-08-30T19:20:28.0098356Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 553/559 kB
2024-08-30T19:20:28.0098644Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 559 kB    
2024-08-30T19:20:28.0099232Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
2024-08-30T19:20:28.0099503Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
2024-08-30T19:20:28.0099778Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
2024-08-30T19:20:28.0100051Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
2024-08-30T19:20:28.0100351Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
2024-08-30T19:20:28.0100640Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
2024-08-30T19:20:28.0100908Z Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
2024-08-30T19:20:28.0101260Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 16/84 kB
2024-08-30T19:20:28.0101606Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 16/84 kB
2024-08-30T19:20:28.0101945Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 33/84 kB
2024-08-30T19:20:28.0102279Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 33/84 kB
2024-08-30T19:20:28.0102604Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 33/84 kB
2024-08-30T19:20:28.0102946Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 33/84 kB
2024-08-30T19:20:28.0103264Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 49/84 kB
2024-08-30T19:20:28.0103606Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 49/84 kB
2024-08-30T19:20:28.0103938Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 63/84 kB
2024-08-30T19:20:28.0104259Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 63/84 kB
2024-08-30T19:20:28.0104604Z Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 79/84 kB
2024-08-30T19:20:28.0104915Z Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 79/84 kB
2024-08-30T19:20:28.0105454Z Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB   
2024-08-30T19:20:28.0105819Z Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
2024-08-30T19:20:28.0106489Z Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
2024-08-30T19:20:28.0107108Z Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
2024-08-30T19:20:28.0107460Z Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
2024-08-30T19:20:28.0107777Z Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
2024-08-30T19:20:28.0108406Z Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
2024-08-30T19:20:28.0108631Z                                                                    
2024-08-30T19:20:28.0110458Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-crypto/6.2.1/spring-security-crypto-6.2.1.jar (84 kB at 214 kB/s)
2024-08-30T19:20:28.0111556Z #24 7.289 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aop/6.1.3/spring-aop-6.1.3.jar
2024-08-30T19:20:28.0111912Z #24 7.289 Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB
2024-08-30T19:20:28.0112203Z Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB
2024-08-30T19:20:28.0112480Z Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.9/1.9 MB | 559 kB
2024-08-30T19:20:28.0112769Z Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.9/1.9 MB | 559 kB
2024-08-30T19:20:28.0113031Z Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.9 MB | 559 kB    
2024-08-30T19:20:28.0113295Z Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.9 MB | 559 kB
2024-08-30T19:20:28.0113480Z                                                        
2024-08-30T19:20:28.0114988Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.3.1/spring-security-core-6.3.1.jar (559 kB at 1.4 MB/s)
2024-08-30T19:20:28.0115257Z #24 7.290 Progress (3): 1.3/1.6 MB | 1.0/3.5 MB | 1.9 MB
2024-08-30T19:20:28.0115422Z                                               
2024-08-30T19:20:28.0116486Z Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-beans/6.1.3/spring-beans-6.1.3.jar
2024-08-30T19:20:28.0117935Z #24 7.291 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-web/6.1.3/spring-web-6.1.3.jar (1.9 MB at 4.7 MB/s)
2024-08-30T19:20:28.0119128Z #24 7.291 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-context/6.1.3/spring-context-6.1.3.jar
2024-08-30T19:20:28.0119356Z #24 7.292 Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
2024-08-30T19:20:28.0119521Z Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
2024-08-30T19:20:28.0119703Z Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
2024-08-30T19:20:28.0119870Z Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
2024-08-30T19:20:28.0120029Z Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
2024-08-30T19:20:28.0120193Z Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
2024-08-30T19:20:28.0120358Z Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
2024-08-30T19:20:28.0120535Z Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0120722Z Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0120871Z Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0121041Z Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0121206Z Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0121372Z Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0121536Z Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0121692Z Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0122124Z Progress (2): 1.4/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0122334Z Progress (2): 1.4/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0122488Z Progress (2): 1.4/1.6 MB | 1.1/3.5 MB
2024-08-30T19:20:28.0122643Z Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
2024-08-30T19:20:28.0123026Z Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
2024-08-30T19:20:28.0123197Z Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
2024-08-30T19:20:28.0123355Z Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
2024-08-30T19:20:28.0123522Z Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
2024-08-30T19:20:28.0123904Z Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
2024-08-30T19:20:28.0124068Z Progress (2): 1.4/1.6 MB | 1.3/3.5 MB
2024-08-30T19:20:28.0124228Z Progress (2): 1.4/1.6 MB | 1.3/3.5 MB
2024-08-30T19:20:28.0124598Z Progress (2): 1.4/1.6 MB | 1.3/3.5 MB
2024-08-30T19:20:28.0124786Z Progress (2): 1.4/1.6 MB | 1.3/3.5 MB
2024-08-30T19:20:28.0125020Z Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 16/415 kB
2024-08-30T19:20:28.0125242Z Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 16/415 kB
2024-08-30T19:20:28.0125820Z Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 32/415 kB
2024-08-30T19:20:28.0126044Z Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 32/415 kB
2024-08-30T19:20:28.0126448Z Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 49/415 kB
2024-08-30T19:20:28.0126664Z Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 49/415 kB
2024-08-30T19:20:28.0126878Z Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 65/415 kB
2024-08-30T19:20:28.0127276Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 65/415 kB
2024-08-30T19:20:28.0127488Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 81/415 kB
2024-08-30T19:20:28.0127698Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 98/415 kB
2024-08-30T19:20:28.0128113Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 98/415 kB
2024-08-30T19:20:28.0128352Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 114/415 kB
2024-08-30T19:20:28.0128565Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 128/415 kB
2024-08-30T19:20:28.0128982Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 128/415 kB
2024-08-30T19:20:28.0129193Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 144/415 kB
2024-08-30T19:20:28.0129413Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 144/415 kB
2024-08-30T19:20:28.0129646Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 160/415 kB
2024-08-30T19:20:28.0129858Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 177/415 kB
2024-08-30T19:20:28.0130061Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 177/415 kB
2024-08-30T19:20:28.0130273Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 193/415 kB
2024-08-30T19:20:28.0130501Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 193/415 kB
2024-08-30T19:20:28.0130706Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 210/415 kB
2024-08-30T19:20:28.0130915Z Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 226/415 kB
2024-08-30T19:20:28.0131272Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 226/415 kB
2024-08-30T19:20:28.0131762Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 242/415 kB
2024-08-30T19:20:28.0132005Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 242/415 kB
2024-08-30T19:20:28.0132229Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 259/415 kB
2024-08-30T19:20:28.0132451Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 259/415 kB
2024-08-30T19:20:28.0132694Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 275/415 kB
2024-08-30T19:20:28.0132916Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 275/415 kB
2024-08-30T19:20:28.0133141Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 275/415 kB
2024-08-30T19:20:28.0133366Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 291/415 kB
2024-08-30T19:20:28.0133590Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 291/415 kB
2024-08-30T19:20:28.0133826Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 291/415 kB
2024-08-30T19:20:28.0134052Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 308/415 kB
2024-08-30T19:20:28.0134282Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 308/415 kB
2024-08-30T19:20:28.0134527Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 308/415 kB
2024-08-30T19:20:28.0134776Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 324/415 kB
2024-08-30T19:20:28.0134998Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 324/415 kB
2024-08-30T19:20:28.0135331Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 324/415 kB
2024-08-30T19:20:28.0135573Z Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 341/415 kB
2024-08-30T19:20:28.0135806Z Progress (3): 1.5/1.6 MB | 1.5/3.5 MB | 341/415 kB
2024-08-30T19:20:28.0136047Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 341/415 kB
2024-08-30T19:20:28.0136273Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 357/415 kB
2024-08-30T19:20:28.0136573Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 357/415 kB
2024-08-30T19:20:28.0136798Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 357/415 kB
2024-08-30T19:20:28.0137016Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 373/415 kB
2024-08-30T19:20:28.0137249Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 373/415 kB
2024-08-30T19:20:28.0137468Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 373/415 kB
2024-08-30T19:20:28.0137690Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 390/415 kB
2024-08-30T19:20:28.0137912Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 390/415 kB
2024-08-30T19:20:28.0138129Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 390/415 kB
2024-08-30T19:20:28.0138342Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
2024-08-30T19:20:28.0138563Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
2024-08-30T19:20:28.0139178Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
2024-08-30T19:20:28.0139456Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
2024-08-30T19:20:28.0139713Z Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
2024-08-30T19:20:28.0139952Z Progress (3): 1.5/1.6 MB | 1.7/3.5 MB | 406/415 kB
2024-08-30T19:20:28.0140264Z Progress (3): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB
2024-08-30T19:20:28.0140467Z Progress (3): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB
2024-08-30T19:20:28.0140765Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 16/857 kB
2024-08-30T19:20:28.0141071Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 16/857 kB
2024-08-30T19:20:28.0141362Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 16/857 kB
2024-08-30T19:20:28.0141650Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 33/857 kB
2024-08-30T19:20:28.0141965Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 33/857 kB
2024-08-30T19:20:28.0142228Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 33/857 kB
2024-08-30T19:20:28.0142611Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 49/857 kB
2024-08-30T19:20:28.0142915Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 49/857 kB
2024-08-30T19:20:28.0143189Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 66/857 kB
2024-08-30T19:20:28.0143473Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 66/857 kB
2024-08-30T19:20:28.0143761Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 66/857 kB
2024-08-30T19:20:28.0144036Z Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 79/857 kB
2024-08-30T19:20:28.0144320Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 79/857 kB
2024-08-30T19:20:28.0144789Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 95/857 kB
2024-08-30T19:20:28.0145083Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 95/857 kB
2024-08-30T19:20:28.0145381Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 112/857 kB
2024-08-30T19:20:28.0145751Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 112/857 kB | 0/1.3 MB
2024-08-30T19:20:28.0146120Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 112/857 kB | 0/1.3 MB
2024-08-30T19:20:28.0146614Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 128/857 kB | 0/1.3 MB
2024-08-30T19:20:28.0146953Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 128/857 kB | 0/1.3 MB
2024-08-30T19:20:28.0147324Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 128/857 kB | 0/1.3 MB
2024-08-30T19:20:28.0147685Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 128/857 kB | 0/1.3 MB
2024-08-30T19:20:28.0148057Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 145/857 kB | 0/1.3 MB
2024-08-30T19:20:28.0148431Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 145/857 kB | 0.1/1.3 MB
2024-08-30T19:20:28.0148811Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 145/857 kB | 0.1/1.3 MB
2024-08-30T19:20:28.0149194Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 145/857 kB | 0.1/1.3 MB
2024-08-30T19:20:28.0149567Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 415 kB | 145/857 kB | 0.1/1.3 MB    
2024-08-30T19:20:28.0149931Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 415 kB | 145/857 kB | 0.1/1.3 MB
2024-08-30T19:20:28.0150398Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 415 kB | 145/857 kB | 0.1/1.3 MB
2024-08-30T19:20:28.0150756Z Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 415 kB | 145/857 kB | 0.1/1.3 MB
2024-08-30T19:20:28.0150972Z                                                                         
2024-08-30T19:20:28.0152310Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aop/6.1.3/spring-aop-6.1.3.jar (415 kB at 1.0 MB/s)
2024-08-30T19:20:28.0153620Z #24 7.303 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-expression/6.1.3/spring-expression-6.1.3.jar
2024-08-30T19:20:28.0154054Z #24 7.303 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 145/857 kB | 0.1/1.3 MB
2024-08-30T19:20:28.0154409Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 145/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0155050Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 145/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0155416Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 145/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0155732Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 161/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0156040Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 161/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0156353Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 161/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0156653Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 177/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0156966Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 177/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0157283Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 194/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0157586Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 210/857 kB | 0.2/1.3 MB
2024-08-30T19:20:28.0157955Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 210/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0158222Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 210/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0158489Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 226/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0158773Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 226/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0159044Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 243/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0159323Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 243/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0159594Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 259/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0159876Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 259/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0160155Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 276/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0160428Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 276/857 kB | 0.3/1.3 MB
2024-08-30T19:20:28.0160983Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 276/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0161287Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 292/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0161580Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 292/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0161882Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 308/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0162187Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 308/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0162482Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 308/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0162775Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 325/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0163075Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 325/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0163359Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0163652Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0163929Z Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB
2024-08-30T19:20:28.0164229Z Progress (4): 1.6 MB | 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB    
2024-08-30T19:20:28.0164432Z                                                            
2024-08-30T19:20:28.0165934Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar (1.6 MB at 3.9 MB/s)
2024-08-30T19:20:28.0166330Z #24 7.307 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 16/301 kB
2024-08-30T19:20:28.0166660Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 33/301 kB
2024-08-30T19:20:28.0166972Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 49/301 kB
2024-08-30T19:20:28.0167275Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 66/301 kB
2024-08-30T19:20:28.0167593Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 82/301 kB
2024-08-30T19:20:28.0167901Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 98/301 kB
2024-08-30T19:20:28.0168228Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 115/301 kB
2024-08-30T19:20:28.0168559Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 131/301 kB
2024-08-30T19:20:28.0168867Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 147/301 kB
2024-08-30T19:20:28.0169176Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 164/301 kB
2024-08-30T19:20:28.0169698Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 180/301 kB
2024-08-30T19:20:28.0169905Z                                                                
2024-08-30T19:20:28.0171338Z Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-observation/1.12.2/micrometer-observation-1.12.2.jar
2024-08-30T19:20:28.0171759Z #24 7.307 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 197/301 kB
2024-08-30T19:20:28.0172098Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 213/301 kB
2024-08-30T19:20:28.0172401Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 229/301 kB
2024-08-30T19:20:28.0172692Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 246/301 kB
2024-08-30T19:20:28.0173006Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 256/301 kB
2024-08-30T19:20:28.0173563Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 256/301 kB
2024-08-30T19:20:28.0173879Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 272/301 kB
2024-08-30T19:20:28.0174199Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 272/301 kB
2024-08-30T19:20:28.0174497Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 289/301 kB
2024-08-30T19:20:28.0174795Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 289/301 kB
2024-08-30T19:20:28.0175096Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 301 kB    
2024-08-30T19:20:28.0175380Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 301 kB
2024-08-30T19:20:28.0175659Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 301 kB
2024-08-30T19:20:28.0175945Z Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 301 kB
2024-08-30T19:20:28.0176136Z                                                            
2024-08-30T19:20:28.0177847Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-expression/6.1.3/spring-expression-6.1.3.jar (301 kB at 729 kB/s)
2024-08-30T19:20:28.0179071Z #24 7.308 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-commons/1.12.2/micrometer-commons-1.12.2.jar
2024-08-30T19:20:28.0179381Z #24 7.308 Progress (3): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB
2024-08-30T19:20:28.0179626Z Progress (3): 1.8/3.5 MB | 341/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0179854Z Progress (3): 1.8/3.5 MB | 341/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0180080Z Progress (3): 1.8/3.5 MB | 358/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0180313Z Progress (3): 1.8/3.5 MB | 358/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0180540Z Progress (3): 1.8/3.5 MB | 374/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0180779Z Progress (3): 1.8/3.5 MB | 374/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0181003Z Progress (3): 1.8/3.5 MB | 390/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0181231Z Progress (3): 1.8/3.5 MB | 390/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0181466Z Progress (3): 1.8/3.5 MB | 407/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0182176Z Progress (3): 1.8/3.5 MB | 407/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0182410Z Progress (3): 1.8/3.5 MB | 423/857 kB | 0.6/1.3 MB
2024-08-30T19:20:28.0182643Z Progress (3): 1.8/3.5 MB | 423/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0182877Z Progress (3): 1.8/3.5 MB | 439/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0183095Z Progress (3): 1.8/3.5 MB | 439/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0183323Z Progress (3): 1.8/3.5 MB | 456/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0183539Z Progress (3): 1.8/3.5 MB | 456/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0183757Z Progress (3): 1.8/3.5 MB | 472/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0183974Z Progress (3): 1.8/3.5 MB | 472/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0184190Z Progress (3): 1.8/3.5 MB | 489/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0184410Z Progress (3): 1.8/3.5 MB | 489/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0184642Z Progress (3): 1.8/3.5 MB | 505/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0184855Z Progress (3): 1.8/3.5 MB | 505/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0185085Z Progress (3): 1.8/3.5 MB | 521/857 kB | 0.7/1.3 MB
2024-08-30T19:20:28.0185298Z Progress (3): 1.8/3.5 MB | 521/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0186420Z Progress (3): 1.8/3.5 MB | 538/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0186704Z Progress (3): 1.8/3.5 MB | 538/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0186938Z Progress (3): 1.8/3.5 MB | 554/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0187163Z Progress (3): 1.8/3.5 MB | 554/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0187394Z Progress (3): 1.8/3.5 MB | 571/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0187615Z Progress (3): 1.8/3.5 MB | 587/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0187833Z Progress (3): 1.8/3.5 MB | 603/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0188069Z Progress (3): 1.8/3.5 MB | 620/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0188293Z Progress (3): 1.8/3.5 MB | 636/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0188522Z Progress (3): 1.8/3.5 MB | 652/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0189329Z Progress (3): 1.8/3.5 MB | 669/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0189567Z Progress (3): 1.8/3.5 MB | 685/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0189797Z Progress (3): 1.8/3.5 MB | 702/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0190032Z Progress (3): 1.8/3.5 MB | 718/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0190248Z Progress (3): 1.8/3.5 MB | 734/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0190473Z Progress (3): 1.8/3.5 MB | 751/857 kB | 0.8/1.3 MB
2024-08-30T19:20:28.0190767Z Progress (4): 1.8/3.5 MB | 751/857 kB | 0.8/1.3 MB | 16/72 kB
2024-08-30T19:20:28.0191069Z Progress (4): 1.8/3.5 MB | 767/857 kB | 0.8/1.3 MB | 16/72 kB
2024-08-30T19:20:28.0191381Z Progress (4): 1.8/3.5 MB | 767/857 kB | 0.8/1.3 MB | 32/72 kB
2024-08-30T19:20:28.0191681Z Progress (4): 1.8/3.5 MB | 784/857 kB | 0.8/1.3 MB | 32/72 kB
2024-08-30T19:20:28.0191976Z Progress (4): 1.8/3.5 MB | 784/857 kB | 0.8/1.3 MB | 49/72 kB
2024-08-30T19:20:28.0193143Z Progress (4): 1.8/3.5 MB | 800/857 kB | 0.8/1.3 MB | 49/72 kB
2024-08-30T19:20:28.1023743Z Progress (4): 1.8/3.5 MB | 800/857 kB | 0.8/1.3 MB | 65/72 kB
2024-08-30T19:20:28.1024122Z Progress (4): 1.8/3.5 MB | 800/857 kB | 0.8/1.3 MB | 72 kB   
2024-08-30T19:20:28.1024467Z Progress (4): 1.8/3.5 MB | 816/857 kB | 0.8/1.3 MB | 72 kB
2024-08-30T19:20:28.1024775Z Progress (4): 1.8/3.5 MB | 833/857 kB | 0.8/1.3 MB | 72 kB
2024-08-30T19:20:28.1025085Z Progress (4): 1.8/3.5 MB | 849/857 kB | 0.8/1.3 MB | 72 kB
2024-08-30T19:20:28.1025389Z Progress (4): 1.8/3.5 MB | 857 kB | 0.8/1.3 MB | 72 kB    
2024-08-30T19:20:28.1025601Z                                                       
2024-08-30T19:20:28.1027888Z Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-observation/1.12.2/micrometer-observation-1.12.2.jar (72 kB at 165 kB/s)
2024-08-30T19:20:28.1030455Z #24 7.337 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java/3.3.4/docker-java-3.3.4.jar
2024-08-30T19:20:28.1032860Z #24 7.337 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-beans/6.1.3/spring-beans-6.1.3.jar (857 kB at 2.0 MB/s)
2024-08-30T19:20:28.1035622Z #24 7.337 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-core/3.3.4/docker-java-core-3.3.4.jar
2024-08-30T19:20:28.1035904Z #24 7.337 Progress (2): 1.8/3.5 MB | 0.8/1.3 MB
2024-08-30T19:20:28.1036650Z Progress (2): 1.8/3.5 MB | 0.8/1.3 MB
2024-08-30T19:20:28.1036872Z Progress (2): 1.8/3.5 MB | 0.8/1.3 MB
2024-08-30T19:20:28.1037075Z Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
2024-08-30T19:20:28.1037627Z Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
2024-08-30T19:20:28.1037841Z Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
2024-08-30T19:20:28.1038034Z Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
2024-08-30T19:20:28.1038217Z Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
2024-08-30T19:20:28.1038399Z Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
2024-08-30T19:20:28.1038608Z Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
2024-08-30T19:20:28.1039716Z Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
2024-08-30T19:20:28.1039933Z Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
2024-08-30T19:20:28.1040122Z Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
2024-08-30T19:20:28.1040888Z Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
2024-08-30T19:20:28.1043629Z Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
2024-08-30T19:20:28.1045012Z Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
2024-08-30T19:20:28.1045271Z Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
2024-08-30T19:20:28.1045477Z Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
2024-08-30T19:20:28.1046430Z Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
2024-08-30T19:20:28.1047066Z Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
2024-08-30T19:20:28.1047725Z Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
2024-08-30T19:20:28.1047938Z Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
2024-08-30T19:20:28.1048520Z Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
2024-08-30T19:20:28.1048768Z Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
2024-08-30T19:20:28.1048967Z Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
2024-08-30T19:20:28.1050606Z Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
2024-08-30T19:20:28.1051537Z Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
2024-08-30T19:20:28.1053262Z Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
2024-08-30T19:20:28.1053506Z Progress (2): 1.8/3.5 MB | 1.3/1.3 MB
2024-08-30T19:20:28.1053775Z Progress (3): 1.8/3.5 MB | 1.3/1.3 MB | 4.5 kB
2024-08-30T19:20:28.1054037Z                                               
2024-08-30T19:20:28.1055389Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java/3.3.4/docker-java-3.3.4.jar (4.5 kB at 10 kB/s)
2024-08-30T19:20:28.1056662Z #24 7.337 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar
2024-08-30T19:20:28.1056909Z #24 7.337 Progress (2): 1.8/3.5 MB | 1.3/1.3 MB
2024-08-30T19:20:28.1057101Z Progress (2): 1.8/3.5 MB | 1.3/1.3 MB
2024-08-30T19:20:28.1057274Z Progress (2): 1.8/3.5 MB | 1.3 MB    
2024-08-30T19:20:28.1057754Z                                  
2024-08-30T19:20:28.1059071Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-context/6.1.3/spring-context-6.1.3.jar (1.3 MB at 3.0 MB/s)
2024-08-30T19:20:28.1060107Z #24 7.337 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.jar
2024-08-30T19:20:28.1060304Z #24 7.337 Progress (1): 1.8/3.5 MB
2024-08-30T19:20:28.1060478Z Progress (1): 1.9/3.5 MB
2024-08-30T19:20:28.1060638Z Progress (1): 1.9/3.5 MB
2024-08-30T19:20:28.1060783Z Progress (1): 1.9/3.5 MB
2024-08-30T19:20:28.1060932Z Progress (1): 1.9/3.5 MB
2024-08-30T19:20:28.1061073Z Progress (1): 1.9/3.5 MB
2024-08-30T19:20:28.1061217Z Progress (1): 1.9/3.5 MB
2024-08-30T19:20:28.1061386Z Progress (1): 1.9/3.5 MB
2024-08-30T19:20:28.1061645Z Progress (1): 2.0/3.5 MB
2024-08-30T19:20:28.1061850Z Progress (1): 2.0/3.5 MB
2024-08-30T19:20:28.1061996Z Progress (1): 2.0/3.5 MB
2024-08-30T19:20:28.1062182Z Progress (2): 2.0/3.5 MB | 16/471 kB
2024-08-30T19:20:28.1062356Z Progress (2): 2.0/3.5 MB | 16/471 kB
2024-08-30T19:20:28.1062528Z Progress (2): 2.0/3.5 MB | 33/471 kB
2024-08-30T19:20:28.1062683Z Progress (2): 2.0/3.5 MB | 33/471 kB
2024-08-30T19:20:28.1062849Z Progress (2): 2.0/3.5 MB | 49/471 kB
2024-08-30T19:20:28.1063097Z Progress (3): 2.0/3.5 MB | 49/471 kB | 16/484 kB
2024-08-30T19:20:28.1063321Z Progress (3): 2.0/3.5 MB | 49/471 kB | 33/484 kB
2024-08-30T19:20:28.1063519Z Progress (3): 2.0/3.5 MB | 49/471 kB | 49/484 kB
2024-08-30T19:20:28.1063725Z Progress (3): 2.0/3.5 MB | 62/471 kB | 49/484 kB
2024-08-30T19:20:28.1063937Z Progress (3): 2.0/3.5 MB | 62/471 kB | 62/484 kB
2024-08-30T19:20:28.1064149Z Progress (3): 2.0/3.5 MB | 78/471 kB | 62/484 kB
2024-08-30T19:20:28.1064350Z Progress (3): 2.0/3.5 MB | 78/471 kB | 79/484 kB
2024-08-30T19:20:28.1064558Z Progress (3): 2.0/3.5 MB | 78/471 kB | 95/484 kB
2024-08-30T19:20:28.1064787Z Progress (3): 2.0/3.5 MB | 94/471 kB | 95/484 kB
2024-08-30T19:20:28.1064997Z Progress (3): 2.0/3.5 MB | 94/471 kB | 112/484 kB
2024-08-30T19:20:28.1065211Z Progress (3): 2.0/3.5 MB | 111/471 kB | 112/484 kB
2024-08-30T19:20:28.1065438Z Progress (3): 2.0/3.5 MB | 111/471 kB | 128/484 kB
2024-08-30T19:20:28.1065651Z Progress (3): 2.0/3.5 MB | 127/471 kB | 128/484 kB
2024-08-30T19:20:28.1066113Z Progress (3): 2.0/3.5 MB | 127/471 kB | 144/484 kB
2024-08-30T19:20:28.1066348Z Progress (3): 2.0/3.5 MB | 143/471 kB | 144/484 kB
2024-08-30T19:20:28.1066546Z Progress (3): 2.0/3.5 MB | 160/471 kB | 144/484 kB
2024-08-30T19:20:28.1066851Z Progress (3): 2.0/3.5 MB | 176/471 kB | 144/484 kB
2024-08-30T19:20:28.1067072Z Progress (3): 2.0/3.5 MB | 193/471 kB | 144/484 kB
2024-08-30T19:20:28.1067278Z Progress (3): 2.0/3.5 MB | 209/471 kB | 144/484 kB
2024-08-30T19:20:28.1067496Z Progress (3): 2.0/3.5 MB | 225/471 kB | 144/484 kB
2024-08-30T19:20:28.1067717Z Progress (3): 2.0/3.5 MB | 242/471 kB | 144/484 kB
2024-08-30T19:20:28.1067926Z Progress (3): 2.0/3.5 MB | 258/471 kB | 144/484 kB
2024-08-30T19:20:28.1068147Z Progress (3): 2.0/3.5 MB | 275/471 kB | 144/484 kB
2024-08-30T19:20:28.1068364Z Progress (3): 2.0/3.5 MB | 275/471 kB | 161/484 kB
2024-08-30T19:20:28.1068574Z Progress (3): 2.0/3.5 MB | 291/471 kB | 161/484 kB
2024-08-30T19:20:28.1068787Z Progress (3): 2.0/3.5 MB | 291/471 kB | 177/484 kB
2024-08-30T19:20:28.1069007Z Progress (3): 2.0/3.5 MB | 307/471 kB | 177/484 kB
2024-08-30T19:20:28.1069228Z Progress (3): 2.0/3.5 MB | 307/471 kB | 194/484 kB
2024-08-30T19:20:28.1069432Z Progress (3): 2.0/3.5 MB | 324/471 kB | 194/484 kB
2024-08-30T19:20:28.1069634Z Progress (3): 2.0/3.5 MB | 324/471 kB | 210/484 kB
2024-08-30T19:20:28.1070208Z Progress (3): 2.0/3.5 MB | 340/471 kB | 210/484 kB
2024-08-30T19:20:28.1070443Z Progress (3): 2.0/3.5 MB | 340/471 kB | 226/484 kB
2024-08-30T19:20:28.1070675Z Progress (3): 2.0/3.5 MB | 356/471 kB | 226/484 kB
2024-08-30T19:20:28.1070877Z Progress (3): 2.0/3.5 MB | 356/471 kB | 243/484 kB
2024-08-30T19:20:28.1071075Z Progress (3): 2.0/3.5 MB | 373/471 kB | 243/484 kB
2024-08-30T19:20:28.1072192Z Progress (3): 2.0/3.5 MB | 373/471 kB | 259/484 kB
2024-08-30T19:20:28.1072403Z Progress (3): 2.0/3.5 MB | 389/471 kB | 259/484 kB
2024-08-30T19:20:28.1073299Z Progress (3): 2.0/3.5 MB | 389/471 kB | 275/484 kB
2024-08-30T19:20:28.1073553Z Progress (3): 2.0/3.5 MB | 406/471 kB | 275/484 kB
2024-08-30T19:20:28.1073847Z Progress (3): 2.0/3.5 MB | 406/471 kB | 292/484 kB
2024-08-30T19:20:28.1074048Z Progress (3): 2.0/3.5 MB | 422/471 kB | 292/484 kB
2024-08-30T19:20:28.1074259Z Progress (3): 2.0/3.5 MB | 422/471 kB | 308/484 kB
2024-08-30T19:20:28.1074975Z Progress (3): 2.0/3.5 MB | 438/471 kB | 308/484 kB
2024-08-30T19:20:28.1075666Z Progress (3): 2.0/3.5 MB | 438/471 kB | 325/484 kB
2024-08-30T19:20:28.1075923Z Progress (3): 2.0/3.5 MB | 455/471 kB | 325/484 kB
2024-08-30T19:20:28.1076150Z Progress (3): 2.0/3.5 MB | 455/471 kB | 341/484 kB
2024-08-30T19:20:28.1076361Z Progress (3): 2.0/3.5 MB | 471 kB | 341/484 kB    
2024-08-30T19:20:28.1076832Z Progress (3): 2.0/3.5 MB | 471 kB | 357/484 kB
2024-08-30T19:20:28.1077609Z Progress (3): 2.0/3.5 MB | 471 kB | 374/484 kB
2024-08-30T19:20:28.1077829Z Progress (3): 2.0/3.5 MB | 471 kB | 390/484 kB
2024-08-30T19:20:28.1077995Z                                               
2024-08-30T19:20:28.1079707Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar (471 kB at 1.1 MB/s)
2024-08-30T19:20:28.1080514Z #24 7.337 Progress (2): 2.0/3.5 MB | 407/484 kB
2024-08-30T19:20:28.1080691Z                                      
2024-08-30T19:20:28.1081784Z Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar
2024-08-30T19:20:28.1082020Z #24 7.337 Progress (2): 2.0/3.5 MB | 423/484 kB
2024-08-30T19:20:28.1082197Z Progress (2): 2.0/3.5 MB | 439/484 kB
2024-08-30T19:20:28.1082426Z Progress (3): 2.0/3.5 MB | 439/484 kB | 16/372 kB
2024-08-30T19:20:28.1082655Z Progress (3): 2.0/3.5 MB | 439/484 kB | 33/372 kB
2024-08-30T19:20:28.1083341Z Progress (3): 2.0/3.5 MB | 439/484 kB | 48/372 kB
2024-08-30T19:20:28.1083594Z Progress (3): 2.0/3.5 MB | 439/484 kB | 64/372 kB
2024-08-30T19:20:28.1083833Z Progress (3): 2.0/3.5 MB | 439/484 kB | 81/372 kB
2024-08-30T19:20:28.1084049Z Progress (3): 2.0/3.5 MB | 439/484 kB | 97/372 kB
2024-08-30T19:20:28.1084515Z Progress (3): 2.0/3.5 MB | 439/484 kB | 113/372 kB
2024-08-30T19:20:28.1084832Z Progress (3): 2.0/3.5 MB | 439/484 kB | 130/372 kB
2024-08-30T19:20:28.1085156Z Progress (3): 2.0/3.5 MB | 439/484 kB | 146/372 kB
2024-08-30T19:20:28.1085476Z Progress (3): 2.0/3.5 MB | 439/484 kB | 162/372 kB
2024-08-30T19:20:28.1085758Z Progress (3): 2.0/3.5 MB | 439/484 kB | 179/372 kB
2024-08-30T19:20:28.1086035Z Progress (3): 2.0/3.5 MB | 439/484 kB | 195/372 kB
2024-08-30T19:20:28.1086349Z Progress (3): 2.0/3.5 MB | 439/484 kB | 212/372 kB
2024-08-30T19:20:28.1086639Z Progress (3): 2.0/3.5 MB | 439/484 kB | 228/372 kB
2024-08-30T19:20:28.1086934Z Progress (3): 2.0/3.5 MB | 439/484 kB | 244/372 kB
2024-08-30T19:20:28.1087153Z Progress (3): 2.0/3.5 MB | 439/484 kB | 261/372 kB
2024-08-30T19:20:28.1087352Z Progress (3): 2.0/3.5 MB | 439/484 kB | 277/372 kB
2024-08-30T19:20:28.1087552Z Progress (3): 2.0/3.5 MB | 439/484 kB | 294/372 kB
2024-08-30T19:20:28.1087836Z Progress (4): 2.0/3.5 MB | 439/484 kB | 294/372 kB | 0/1.0 MB
2024-08-30T19:20:28.1088129Z Progress (4): 2.0/3.5 MB | 439/484 kB | 310/372 kB | 0/1.0 MB
2024-08-30T19:20:28.1088418Z Progress (4): 2.0/3.5 MB | 439/484 kB | 326/372 kB | 0/1.0 MB
2024-08-30T19:20:28.1088707Z Progress (4): 2.0/3.5 MB | 439/484 kB | 326/372 kB | 0/1.0 MB
2024-08-30T19:20:28.1088989Z Progress (4): 2.0/3.5 MB | 439/484 kB | 343/372 kB | 0/1.0 MB
2024-08-30T19:20:28.1089278Z Progress (4): 2.0/3.5 MB | 439/484 kB | 359/372 kB | 0/1.0 MB
2024-08-30T19:20:28.1089574Z Progress (4): 2.0/3.5 MB | 439/484 kB | 359/372 kB | 0/1.0 MB
2024-08-30T19:20:28.1089862Z Progress (4): 2.0/3.5 MB | 439/484 kB | 372 kB | 0/1.0 MB    
2024-08-30T19:20:28.1090346Z Progress (4): 2.0/3.5 MB | 439/484 kB | 372 kB | 0.1/1.0 MB
2024-08-30T19:20:28.1090632Z Progress (4): 2.0/3.5 MB | 456/484 kB | 372 kB | 0.1/1.0 MB
2024-08-30T19:20:28.1090906Z Progress (4): 2.0/3.5 MB | 456/484 kB | 372 kB | 0.1/1.0 MB
2024-08-30T19:20:28.1091788Z Progress (5): 2.0/3.5 MB | 456/484 kB | 372 kB | 0.1/1.0 MB | 16/47 kB
2024-08-30T19:20:28.1092142Z Progress (5): 2.0/3.5 MB | 472/484 kB | 372 kB | 0.1/1.0 MB | 16/47 kB
2024-08-30T19:20:28.1092460Z Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 16/47 kB    
2024-08-30T19:20:28.1092757Z Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 33/47 kB
2024-08-30T19:20:28.1093047Z Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 33/47 kB
2024-08-30T19:20:28.1093324Z Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 47 kB   
2024-08-30T19:20:28.1093602Z Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 47 kB
2024-08-30T19:20:28.1093775Z                                                                
2024-08-30T19:20:28.1094868Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.jar (484 kB at 1.1 MB/s)
2024-08-30T19:20:28.1096004Z #24 7.353 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar
2024-08-30T19:20:28.1097401Z #24 7.353 Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-commons/1.12.2/micrometer-commons-1.12.2.jar (47 kB at 104 kB/s)
2024-08-30T19:20:28.1098323Z #24 7.353 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/19.0/guava-19.0.jar
2024-08-30T19:20:28.1098592Z #24 7.353 Progress (3): 2.0/3.5 MB | 372 kB | 0.1/1.0 MB
2024-08-30T19:20:28.1098809Z Progress (3): 2.0/3.5 MB | 372 kB | 0.1/1.0 MB
2024-08-30T19:20:28.1099013Z Progress (3): 2.0/3.5 MB | 372 kB | 0.1/1.0 MB
2024-08-30T19:20:28.1099212Z Progress (3): 2.0/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1099431Z Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1099626Z Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1099826Z Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1100036Z Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1100244Z Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1100686Z Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1100908Z Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1101109Z Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1101306Z Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1101511Z Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1101704Z Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1101900Z Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1102109Z Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1102307Z Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
2024-08-30T19:20:28.1102523Z Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1102722Z Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1102919Z Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1103118Z Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1103298Z Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1103502Z Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1103707Z Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1103905Z Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1104104Z Progress (3): 2.3/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1104324Z Progress (3): 2.3/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1104522Z Progress (3): 2.3/3.5 MB | 372 kB | 0.3/1.0 MB
2024-08-30T19:20:28.1104719Z Progress (3): 2.3/3.5 MB | 372 kB | 0.4/1.0 MB
2024-08-30T19:20:28.1104923Z Progress (3): 2.3/3.5 MB | 372 kB | 0.4/1.0 MB
2024-08-30T19:20:28.1105331Z Progress (3): 2.3/3.5 MB | 372 kB | 0.4/1.0 MB
2024-08-30T19:20:28.1105502Z                                               
2024-08-30T19:20:28.1106857Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-core/3.3.4/docker-java-core-3.3.4.jar (372 kB at 818 kB/s)
2024-08-30T19:20:28.1107075Z #24 7.353 Progress (2): 2.3/3.5 MB | 0.4/1.0 MB
2024-08-30T19:20:28.1107235Z                                      
2024-08-30T19:20:28.1108273Z Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk18on/1.76/bcpkix-jdk18on-1.76.jar
2024-08-30T19:20:28.1108534Z #24 7.353 Progress (2): 2.3/3.5 MB | 0.4/1.0 MB
2024-08-30T19:20:28.1108755Z Progress (2): 2.3/3.5 MB | 0.4/1.0 MB
2024-08-30T19:20:28.1109019Z Progress (2): 2.3/3.5 MB | 0.4/1.0 MB
2024-08-30T19:20:28.1109315Z Progress (2): 2.3/3.5 MB | 0.5/1.0 MB
2024-08-30T19:20:28.1109604Z Progress (3): 2.3/3.5 MB | 0.5/1.0 MB | 16/632 kB
2024-08-30T19:20:28.1109835Z Progress (3): 2.3/3.5 MB | 0.5/1.0 MB | 16/632 kB
2024-08-30T19:20:28.1110136Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 16/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1110424Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 33/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1110704Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 33/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1110995Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 49/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1111272Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 49/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1111549Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 49/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1111832Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 62/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1112100Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 62/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1112374Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 62/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1112654Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 78/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1112938Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 78/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1113228Z Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 95/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1113516Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 95/632 kB | 0/2.3 MB
2024-08-30T19:20:28.1113820Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 95/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1114156Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 111/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1114652Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 111/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1114965Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 111/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1115272Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 128/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1115560Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 128/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1115841Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 128/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1116149Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 144/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1116551Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 144/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1116886Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 144/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1117234Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 160/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1117579Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 160/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1117893Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 160/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1118191Z Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 177/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1118479Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 177/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1118779Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 193/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1119068Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 193/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1119357Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 193/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1119654Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 210/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1119944Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 210/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1120413Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 210/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1120705Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 226/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1120996Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 226/632 kB | 0.1/2.3 MB
2024-08-30T19:20:28.1121303Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 226/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1121612Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 242/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1121914Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 242/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1122216Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 259/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1122503Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 259/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1122795Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 259/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1123094Z Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 275/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1123388Z Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 275/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1123684Z Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1123981Z Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1124272Z Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1124567Z Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1124844Z Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1125114Z Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
2024-08-30T19:20:28.1125474Z Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
2024-08-30T19:20:28.1125809Z Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
2024-08-30T19:20:28.1126159Z Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
2024-08-30T19:20:28.1126511Z Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
2024-08-30T19:20:28.1126859Z Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
2024-08-30T19:20:28.1127203Z Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
2024-08-30T19:20:28.1127549Z Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
2024-08-30T19:20:28.1127899Z Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
2024-08-30T19:20:28.1128466Z Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1128835Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1129203Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1129573Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1129933Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1130287Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1130654Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1131220Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1131581Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1131936Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1132274Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1132625Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1132982Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1133347Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1133692Z Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1134027Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1134635Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
2024-08-30T19:20:28.1135025Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1135397Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1135803Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1136153Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1136504Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1136891Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1137224Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1137560Z Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1137906Z Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB    
2024-08-30T19:20:28.1138259Z Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1138605Z Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1138930Z Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.4/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1139242Z Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.4/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1139436Z                                                                         
2024-08-30T19:20:28.1140754Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar (1.0 MB at 2.2 MB/s)
2024-08-30T19:20:28.1141124Z #24 7.353 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.2/1.1 MB
2024-08-30T19:20:28.1141432Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1141721Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1142019Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1142313Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1142623Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1142945Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1143498Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1143841Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1144176Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1144462Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
2024-08-30T19:20:28.1144735Z Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1145011Z Progress (4): 2.3/3.5 MB | 308/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1145286Z Progress (4): 2.3/3.5 MB | 324/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1145574Z Progress (4): 2.3/3.5 MB | 341/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1145856Z Progress (4): 2.3/3.5 MB | 357/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1146128Z Progress (4): 2.3/3.5 MB | 373/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1146410Z Progress (4): 2.3/3.5 MB | 390/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1146696Z Progress (4): 2.3/3.5 MB | 406/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1146977Z Progress (4): 2.3/3.5 MB | 423/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1147263Z Progress (4): 2.3/3.5 MB | 439/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1147532Z Progress (4): 2.3/3.5 MB | 455/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1147714Z                                                                
2024-08-30T19:20:28.1148751Z Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk18on/1.76/bcprov-jdk18on-1.76.jar
2024-08-30T19:20:28.1149129Z #24 7.357 Progress (4): 2.3/3.5 MB | 472/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1149693Z Progress (4): 2.3/3.5 MB | 488/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1150014Z Progress (4): 2.3/3.5 MB | 504/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1150284Z Progress (4): 2.3/3.5 MB | 521/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1150582Z Progress (4): 2.3/3.5 MB | 537/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1150881Z Progress (4): 2.3/3.5 MB | 554/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1151203Z Progress (4): 2.3/3.5 MB | 570/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1151528Z Progress (4): 2.3/3.5 MB | 586/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1151982Z Progress (4): 2.3/3.5 MB | 603/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1152305Z Progress (4): 2.3/3.5 MB | 619/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1152629Z Progress (4): 2.3/3.5 MB | 632 kB | 0.4/2.3 MB | 0.4/1.1 MB    
2024-08-30T19:20:28.1152851Z                                                            
2024-08-30T19:20:28.1154261Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar (632 kB at 1.4 MB/s)
2024-08-30T19:20:28.1154605Z #24 7.357 Progress (3): 2.3/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1154861Z Progress (3): 2.3/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1155131Z Progress (3): 2.3/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1155376Z Progress (3): 2.3/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1155623Z Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1155870Z Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1156105Z Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1156345Z Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1156590Z Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1156826Z Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1157076Z Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1157317Z Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1157552Z Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1157775Z Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1158244Z Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1158523Z Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1158778Z Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1159021Z Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1159262Z Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1159512Z Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1159747Z Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1159985Z Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1160233Z Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1160477Z Progress (3): 2.7/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1160714Z Progress (3): 2.7/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1160959Z Progress (3): 2.7/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1161187Z Progress (3): 2.7/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1161428Z Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1161678Z Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1161914Z Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1162155Z Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1162388Z Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1162622Z Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1162859Z Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1163095Z Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1163330Z Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1163804Z Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1164044Z Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1164280Z Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1164520Z Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1164766Z Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1165006Z Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1165249Z Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1165478Z Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1165723Z Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1165960Z Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1166187Z Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1166436Z Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1166681Z Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1166912Z Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1167153Z Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1167387Z Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1167617Z Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1167865Z Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1168097Z Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1168329Z Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1168572Z Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1168811Z Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1169054Z Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1169286Z Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1169520Z Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1169775Z Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1170003Z Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1170236Z Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1170474Z Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1170705Z Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1171853Z Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1172172Z Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1172419Z Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1172635Z Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1173235Z Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1173486Z Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1173717Z Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1173934Z Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1174165Z Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1174410Z Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1174639Z Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1174864Z Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1175108Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1175334Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1175557Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1175787Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1176013Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1176260Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
2024-08-30T19:20:28.1176492Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
2024-08-30T19:20:28.1176718Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
2024-08-30T19:20:28.1176948Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
2024-08-30T19:20:28.1177452Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
2024-08-30T19:20:28.1177661Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
2024-08-30T19:20:28.1177888Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
2024-08-30T19:20:28.1178111Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
2024-08-30T19:20:28.1178310Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
2024-08-30T19:20:28.1178572Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
2024-08-30T19:20:28.1178801Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
2024-08-30T19:20:28.1179012Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
2024-08-30T19:20:28.1179220Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
2024-08-30T19:20:28.1179427Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
2024-08-30T19:20:28.1179648Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
2024-08-30T19:20:28.1179859Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
2024-08-30T19:20:28.1180059Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
2024-08-30T19:20:28.1180277Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
2024-08-30T19:20:28.1180505Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
2024-08-30T19:20:28.1180710Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
2024-08-30T19:20:28.1180925Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
2024-08-30T19:20:28.1181149Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
2024-08-30T19:20:28.1181365Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
2024-08-30T19:20:28.1181569Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
2024-08-30T19:20:28.1181780Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
2024-08-30T19:20:28.1181990Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
2024-08-30T19:20:28.1182201Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
2024-08-30T19:20:28.1182406Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
2024-08-30T19:20:28.1182628Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
2024-08-30T19:20:28.1182878Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
2024-08-30T19:20:28.1183082Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
2024-08-30T19:20:28.1183281Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
2024-08-30T19:20:28.1183509Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
2024-08-30T19:20:28.1183720Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
2024-08-30T19:20:28.1184136Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
2024-08-30T19:20:28.1184371Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
2024-08-30T19:20:28.1184571Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
2024-08-30T19:20:28.1184776Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
2024-08-30T19:20:28.1184988Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
2024-08-30T19:20:28.1185198Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.1/1.1 MB
2024-08-30T19:20:28.1185409Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.1/1.1 MB
2024-08-30T19:20:28.1185617Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.1/1.1 MB
2024-08-30T19:20:28.1185849Z Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.1 MB    
2024-08-30T19:20:28.1186022Z                                               
2024-08-30T19:20:28.1187347Z Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk18on/1.76/bcpkix-jdk18on-1.76.jar (1.1 MB at 2.4 MB/s)
2024-08-30T19:20:28.1188538Z #24 7.369 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcutil-jdk18on/1.76/bcutil-jdk18on-1.76.jar
2024-08-30T19:20:28.1188782Z #24 7.369 Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
2024-08-30T19:20:28.1188968Z Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
2024-08-30T19:20:28.1189154Z Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
2024-08-30T19:20:28.1189332Z Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
2024-08-30T19:20:28.1189512Z Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
2024-08-30T19:20:28.1189702Z Progress (2): 3.2/3.5 MB | 0.9/2.3 MB
2024-08-30T19:20:28.1189881Z Progress (2): 3.2/3.5 MB | 0.9/2.3 MB
2024-08-30T19:20:28.1190061Z Progress (2): 3.2/3.5 MB | 0.9/2.3 MB
2024-08-30T19:20:28.1190532Z Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1190709Z Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1190881Z Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1191069Z Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1191249Z Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1191448Z Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1191646Z Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1191814Z Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1191991Z Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1192150Z Progress (2): 3.3/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1192310Z Progress (2): 3.3/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1192481Z Progress (2): 3.3/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1192753Z Progress (2): 3.3/3.5 MB | 1.0/2.3 MB
2024-08-30T19:20:28.1192914Z Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1193087Z Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1193261Z Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1193438Z Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1193630Z Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1193793Z Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1194026Z Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1194214Z Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1194372Z Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1194527Z Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1194714Z Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1194898Z Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
2024-08-30T19:20:28.1195067Z Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
2024-08-30T19:20:28.1195236Z Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
2024-08-30T19:20:28.1195394Z Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
2024-08-30T19:20:28.1195569Z Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
2024-08-30T19:20:28.1195731Z Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
2024-08-30T19:20:28.1195892Z Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
2024-08-30T19:20:28.1196153Z Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
2024-08-30T19:20:28.1196306Z                                      
2024-08-30T19:20:28.1197795Z Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-jersey/3.3.4/docker-java-transport-jersey-3.3.4.jar
2024-08-30T19:20:28.1198364Z #24 7.369 Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
2024-08-30T19:20:28.1198583Z Progress (2): 3.4/3.5 MB | 1.3/2.3 MB
2024-08-30T19:20:28.1198812Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 16/677 kB
2024-08-30T19:20:28.1199050Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 33/677 kB
2024-08-30T19:20:28.1199254Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 33/677 kB
2024-08-30T19:20:28.1199463Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 49/677 kB
2024-08-30T19:20:28.1199680Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 49/677 kB
2024-08-30T19:20:28.1199884Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 64/677 kB
2024-08-30T19:20:28.1200106Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 80/677 kB
2024-08-30T19:20:28.1200324Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 97/677 kB
2024-08-30T19:20:28.1200545Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 97/677 kB
2024-08-30T19:20:28.1200786Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 113/677 kB
2024-08-30T19:20:28.1201015Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 113/677 kB
2024-08-30T19:20:28.1201237Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 129/677 kB
2024-08-30T19:20:28.1201456Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 146/677 kB
2024-08-30T19:20:28.1201670Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 146/677 kB
2024-08-30T19:20:28.1201901Z Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 162/677 kB
2024-08-30T19:20:28.1202196Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 162/677 kB
2024-08-30T19:20:28.1202412Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 179/677 kB
2024-08-30T19:20:28.1202617Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 195/677 kB
2024-08-30T19:20:28.1202826Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 195/677 kB
2024-08-30T19:20:28.1203051Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 195/677 kB
2024-08-30T19:20:28.1203506Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 211/677 kB
2024-08-30T19:20:28.1203714Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 228/677 kB
2024-08-30T19:20:28.1203935Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 228/677 kB
2024-08-30T19:20:28.1204159Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 244/677 kB
2024-08-30T19:20:28.1204377Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 244/677 kB
2024-08-30T19:20:28.1204589Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 244/677 kB
2024-08-30T19:20:28.1204808Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 260/677 kB
2024-08-30T19:20:28.1205013Z Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 277/677 kB
2024-08-30T19:20:28.1205217Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 277/677 kB
2024-08-30T19:20:28.1205450Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 277/677 kB
2024-08-30T19:20:28.1205745Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 293/677 kB
2024-08-30T19:20:28.1205962Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 293/677 kB
2024-08-30T19:20:28.1206208Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 310/677 kB
2024-08-30T19:20:28.1206433Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 310/677 kB
2024-08-30T19:20:28.1206642Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 326/677 kB
2024-08-30T19:20:28.1206850Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 326/677 kB
2024-08-30T19:20:28.1207152Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 342/677 kB
2024-08-30T19:20:28.1207386Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 342/677 kB
2024-08-30T19:20:28.1207604Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 359/677 kB
2024-08-30T19:20:28.1207818Z Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 375/677 kB
2024-08-30T19:20:28.1208032Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 375/677 kB
2024-08-30T19:20:28.1208246Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 375/677 kB
2024-08-30T19:20:28.1208455Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 392/677 kB
2024-08-30T19:20:28.1208699Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 392/677 kB
2024-08-30T19:20:28.1208914Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 408/677 kB
2024-08-30T19:20:28.1209123Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 408/677 kB
2024-08-30T19:20:28.1209346Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 424/677 kB
2024-08-30T19:20:28.1209553Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 441/677 kB
2024-08-30T19:20:28.1209776Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 457/677 kB
2024-08-30T19:20:28.1210006Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 473/677 kB
2024-08-30T19:20:28.1210461Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 486/677 kB
2024-08-30T19:20:28.1210697Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 502/677 kB
2024-08-30T19:20:28.1210910Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 519/677 kB
2024-08-30T19:20:28.1211462Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 523/677 kB
2024-08-30T19:20:28.1211758Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 539/677 kB
2024-08-30T19:20:28.1211968Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 555/677 kB
2024-08-30T19:20:28.1212170Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 572/677 kB
2024-08-30T19:20:28.1212396Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 588/677 kB
2024-08-30T19:20:28.1212612Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 605/677 kB
2024-08-30T19:20:28.1212824Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 621/677 kB
2024-08-30T19:20:28.1213051Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 637/677 kB
2024-08-30T19:20:28.1213279Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 654/677 kB
2024-08-30T19:20:28.1213513Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 670/677 kB
2024-08-30T19:20:28.1213721Z Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 677 kB    
2024-08-30T19:20:28.1213887Z                                               
2024-08-30T19:20:28.1215250Z Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcutil-jdk18on/1.76/bcutil-jdk18on-1.76.jar (677 kB at 1.4 MB/s)
2024-08-30T19:20:28.1215474Z #24 7.371 Progress (2): 3.4/3.5 MB | 1.6/2.3 MB
2024-08-30T19:20:28.1215658Z Progress (2): 3.4/3.5 MB | 1.6/2.3 MB
2024-08-30T19:20:28.1215843Z Progress (2): 3.5/3.5 MB | 1.6/2.3 MB
2024-08-30T19:20:28.1216087Z Progress (2): 3.5/3.5 MB | 1.6/2.3 MB
2024-08-30T19:20:28.1216587Z Progress (2): 3.5/3.5 MB | 1.6/2.3 MB
2024-08-30T19:20:28.1216767Z Progress (2): 3.5/3.5 MB | 1.6/2.3 MB
2024-08-30T19:20:28.1216928Z Progress (2): 3.5 MB | 1.6/2.3 MB    
2024-08-30T19:20:28.1217068Z                                  
2024-08-30T19:20:28.1218540Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-core/10.1.18/tomcat-embed-core-10.1.18.jar (3.5 MB at 7.4 MB/s)
2024-08-30T19:20:28.1220215Z #24 7.372 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.15.3/jackson-jaxrs-json-provider-2.15.3.jar
2024-08-30T19:20:28.1221631Z #24 7.372 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.15.3/jackson-jaxrs-base-2.15.3.jar
2024-08-30T19:20:28.1221854Z #24 7.372 Progress (2): 1.6/2.3 MB | 16/32 kB
2024-08-30T19:20:28.1222032Z Progress (2): 1.6/2.3 MB | 32 kB   
2024-08-30T19:20:28.1222169Z                                 
2024-08-30T19:20:28.1223761Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-jersey/3.3.4/docker-java-transport-jersey-3.3.4.jar (32 kB at 67 kB/s)
2024-08-30T19:20:28.1225442Z #24 7.372 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.15.3/jackson-module-jaxb-annotations-2.15.3.jar
2024-08-30T19:20:28.1225659Z #24 7.372 Progress (2): 1.6/2.3 MB | 0/8.4 MB
2024-08-30T19:20:28.1225834Z Progress (2): 1.6/2.3 MB | 0/8.4 MB
2024-08-30T19:20:28.1225999Z Progress (2): 1.6/2.3 MB | 0/8.4 MB
2024-08-30T19:20:28.1226163Z Progress (2): 1.6/2.3 MB | 0.1/8.4 MB
2024-08-30T19:20:28.1226326Z Progress (2): 1.6/2.3 MB | 0.1/8.4 MB
2024-08-30T19:20:28.1226562Z Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 16/17 kB
2024-08-30T19:20:28.1226785Z Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 17 kB   
2024-08-30T19:20:28.1226967Z Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 17 kB
2024-08-30T19:20:28.1227192Z Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 17 kB
2024-08-30T19:20:28.1227389Z Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 17 kB
2024-08-30T19:20:28.1239911Z                                              
2024-08-30T19:20:28.1242316Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.15.3/jackson-jaxrs-json-provider-2.15.3.jar (17 kB at 35 kB/s)
2024-08-30T19:20:28.1245516Z #24 7.375 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/jersey-apache-connector/3.1.5/jersey-apache-connector-3.1.5.jar
2024-08-30T19:20:28.1247302Z #24 7.375 Progress (2): 1.6/2.3 MB | 0.1/8.4 MB
2024-08-30T19:20:28.1247934Z Progress (2): 1.6/2.3 MB | 0.2/8.4 MB
2024-08-30T19:20:28.1248542Z Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 16/32 kB
2024-08-30T19:20:28.1249189Z Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 16/32 kB
2024-08-30T19:20:28.1249846Z Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 32 kB   
2024-08-30T19:20:28.1250502Z Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 32 kB
2024-08-30T19:20:28.1251434Z                                              
2024-08-30T19:20:28.1253209Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.15.3/jackson-jaxrs-base-2.15.3.jar (32 kB at 67 kB/s)
2024-08-30T19:20:28.1256006Z #24 7.375 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-common/3.1.5/jersey-common-3.1.5.jar
2024-08-30T19:20:28.1257528Z #24 7.375 Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 16/37 kB
2024-08-30T19:20:28.1258279Z Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 33/37 kB
2024-08-30T19:20:28.1258938Z Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 37 kB   
2024-08-30T19:20:28.1259594Z Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 37 kB
2024-08-30T19:20:28.1260203Z                                              
2024-08-30T19:20:28.1262444Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.15.3/jackson-module-jaxb-annotations-2.15.3.jar (37 kB at 76 kB/s)
2024-08-30T19:20:28.1265755Z #24 7.375 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar
2024-08-30T19:20:28.1267284Z #24 7.375 Progress (2): 1.6/2.3 MB | 0.2/8.4 MB
2024-08-30T19:20:28.1267912Z Progress (2): 1.6/2.3 MB | 0.2/8.4 MB
2024-08-30T19:20:28.1268440Z Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
2024-08-30T19:20:28.1268965Z Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
2024-08-30T19:20:28.1269519Z Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
2024-08-30T19:20:28.1270041Z Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
2024-08-30T19:20:28.1270578Z Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
2024-08-30T19:20:28.1271123Z Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
2024-08-30T19:20:28.1271640Z Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
2024-08-30T19:20:28.1272169Z Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
2024-08-30T19:20:28.1272696Z Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
2024-08-30T19:20:28.1273224Z Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
2024-08-30T19:20:28.1273739Z Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
2024-08-30T19:20:28.1274257Z Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
2024-08-30T19:20:28.1274771Z Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
2024-08-30T19:20:28.1275301Z Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
2024-08-30T19:20:28.1275824Z Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
2024-08-30T19:20:28.1276352Z Progress (2): 1.6/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1276985Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1277512Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1278021Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1278620Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1279226Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1279749Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1280274Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1280797Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1281301Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1281827Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1282361Z Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1282857Z Progress (2): 1.8/2.3 MB | 0.5/8.4 MB
2024-08-30T19:20:28.1283515Z Progress (3): 1.8/2.3 MB | 0.5/8.4 MB | 0/1.2 MB
2024-08-30T19:20:28.1284201Z Progress (3): 1.8/2.3 MB | 0.5/8.4 MB | 0/1.2 MB
2024-08-30T19:20:28.1285055Z Progress (3): 1.8/2.3 MB | 0.5/8.4 MB | 0/1.2 MB
2024-08-30T19:20:28.1285751Z Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
2024-08-30T19:20:28.1286373Z Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
2024-08-30T19:20:28.1287027Z Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
2024-08-30T19:20:28.1287674Z Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
2024-08-30T19:20:28.1288322Z Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
2024-08-30T19:20:28.1288984Z Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1289645Z Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1290323Z Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1291140Z Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1291898Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1292583Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1293213Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1293879Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1294531Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1295163Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1295927Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1296594Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1297329Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1297955Z Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1298683Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1299673Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
2024-08-30T19:20:28.1300349Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1301005Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1301672Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1302333Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1302988Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1303644Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1304384Z Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 16/19 kB
2024-08-30T19:20:28.1305217Z Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 19 kB   
2024-08-30T19:20:28.1306022Z Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 19 kB
2024-08-30T19:20:28.1306787Z Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 19 kB
2024-08-30T19:20:28.1307529Z                                                           
2024-08-30T19:20:28.1309548Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar (19 kB at 40 kB/s)
2024-08-30T19:20:28.1312105Z #24 7.381 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.jar
2024-08-30T19:20:28.1313505Z #24 7.381 Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 16/48 kB
2024-08-30T19:20:28.1314328Z Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 33/48 kB
2024-08-30T19:20:28.1315201Z Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 48 kB   
2024-08-30T19:20:28.1315899Z                                                           
2024-08-30T19:20:28.1320038Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/jersey-apache-connector/3.1.5/jersey-apache-connector-3.1.5.jar (48 kB at 100 kB/s)
2024-08-30T19:20:28.1322956Z #24 7.381 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar
2024-08-30T19:20:28.1324472Z #24 7.381 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1325210Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1325984Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1326721Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1327635Z Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1328366Z Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1329023Z Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1329655Z Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1330375Z Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1331189Z Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1331833Z Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1332499Z Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1333156Z Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1333809Z Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1334447Z Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1335098Z Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1335769Z Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
2024-08-30T19:20:28.1336517Z Progress (4): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB | 16/328 kB
2024-08-30T19:20:28.1337321Z Progress (4): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB | 16/328 kB
2024-08-30T19:20:28.1338149Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 16/328 kB
2024-08-30T19:20:28.1338960Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 33/328 kB
2024-08-30T19:20:28.1339768Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 33/328 kB
2024-08-30T19:20:28.1340570Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 49/328 kB
2024-08-30T19:20:28.1341360Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 65/328 kB
2024-08-30T19:20:28.1342416Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 65/328 kB
2024-08-30T19:20:28.1343232Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 82/328 kB
2024-08-30T19:20:28.1344008Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 82/328 kB
2024-08-30T19:20:28.1344835Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 82/328 kB
2024-08-30T19:20:28.1345623Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 98/328 kB
2024-08-30T19:20:28.1346418Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 98/328 kB
2024-08-30T19:20:28.1347240Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 114/328 kB
2024-08-30T19:20:28.1348076Z Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 131/328 kB
2024-08-30T19:20:28.1348901Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 131/328 kB
2024-08-30T19:20:28.1349715Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 147/328 kB
2024-08-30T19:20:28.1350534Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 147/328 kB
2024-08-30T19:20:28.1351356Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 164/328 kB
2024-08-30T19:20:28.1352179Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 164/328 kB
2024-08-30T19:20:28.1352992Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 180/328 kB
2024-08-30T19:20:28.1353822Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 180/328 kB
2024-08-30T19:20:28.1354619Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 196/328 kB
2024-08-30T19:20:28.1355449Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 196/328 kB
2024-08-30T19:20:28.1356251Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 213/328 kB
2024-08-30T19:20:28.1357076Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 229/328 kB
2024-08-30T19:20:28.1357889Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 229/328 kB
2024-08-30T19:20:28.1358688Z Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 246/328 kB
2024-08-30T19:20:28.1359489Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 246/328 kB
2024-08-30T19:20:28.1360304Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 262/328 kB
2024-08-30T19:20:28.1361108Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 262/328 kB
2024-08-30T19:20:28.1361900Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 278/328 kB
2024-08-30T19:20:28.1362706Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 278/328 kB
2024-08-30T19:20:28.1363790Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 295/328 kB
2024-08-30T19:20:28.1364671Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 295/328 kB
2024-08-30T19:20:28.1365532Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 311/328 kB
2024-08-30T19:20:28.1366375Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 327/328 kB
2024-08-30T19:20:28.1367211Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 327/328 kB
2024-08-30T19:20:28.1368026Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 328 kB    
2024-08-30T19:20:28.1368846Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 328 kB
2024-08-30T19:20:28.1369545Z                                                            
2024-08-30T19:20:28.1371546Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar (328 kB at 671 kB/s)
2024-08-30T19:20:28.1373955Z #24 7.384 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.jar
2024-08-30T19:20:28.1375583Z #24 7.385 Progress (3): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB
2024-08-30T19:20:28.1376449Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 16/155 kB
2024-08-30T19:20:28.1377342Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 16/155 kB
2024-08-30T19:20:28.1378190Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 16/155 kB
2024-08-30T19:20:28.1379055Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 33/155 kB
2024-08-30T19:20:28.1379911Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 33/155 kB
2024-08-30T19:20:28.1381060Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 49/155 kB
2024-08-30T19:20:28.1381959Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 49/155 kB
2024-08-30T19:20:28.1382839Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 49/155 kB
2024-08-30T19:20:28.1383712Z Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 63/155 kB
2024-08-30T19:20:28.1384610Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 63/155 kB
2024-08-30T19:20:28.1385559Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 63/155 kB
2024-08-30T19:20:28.1386433Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 63/155 kB
2024-08-30T19:20:28.1387311Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 80/155 kB
2024-08-30T19:20:28.1388172Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 80/155 kB
2024-08-30T19:20:28.1389040Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 80/155 kB
2024-08-30T19:20:28.1389894Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 96/155 kB
2024-08-30T19:20:28.1390826Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 96/155 kB
2024-08-30T19:20:28.1391699Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 96/155 kB
2024-08-30T19:20:28.1392657Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 113/155 kB
2024-08-30T19:20:28.1393568Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 113/155 kB
2024-08-30T19:20:28.1394552Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 113/155 kB
2024-08-30T19:20:28.1395452Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 129/155 kB
2024-08-30T19:20:28.1396349Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 129/155 kB
2024-08-30T19:20:28.1397219Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 129/155 kB
2024-08-30T19:20:28.1398106Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 145/155 kB
2024-08-30T19:20:28.1398992Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 145/155 kB
2024-08-30T19:20:28.1399937Z Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB    
2024-08-30T19:20:28.1400819Z Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
2024-08-30T19:20:28.1401682Z Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
2024-08-30T19:20:28.1402599Z Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
2024-08-30T19:20:28.1403442Z Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
2024-08-30T19:20:28.1404691Z Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
2024-08-30T19:20:28.1405553Z                                                            
2024-08-30T19:20:28.1407425Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.jar (155 kB at 315 kB/s)
2024-08-30T19:20:28.1409185Z #24 7.389 Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1410060Z Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1410796Z Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1443642Z Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1444462Z Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1445205Z Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1445943Z Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1446668Z Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1447390Z Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1448106Z Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1448818Z Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1449508Z Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
2024-08-30T19:20:28.1450191Z Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
2024-08-30T19:20:28.1450864Z Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
2024-08-30T19:20:28.1451884Z Progress (3): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB    
2024-08-30T19:20:28.1452591Z Progress (3): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
2024-08-30T19:20:28.1453303Z Progress (3): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
2024-08-30T19:20:28.1454378Z Progress (3): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
2024-08-30T19:20:28.1455022Z                                               
2024-08-30T19:20:28.1456658Z Downloading from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.jar
2024-08-30T19:20:28.1458153Z #24 7.389 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 16/778 kB
2024-08-30T19:20:28.1459276Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 33/778 kB
2024-08-30T19:20:28.1460102Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 49/778 kB
2024-08-30T19:20:28.1460931Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 66/778 kB
2024-08-30T19:20:28.1461746Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 82/778 kB
2024-08-30T19:20:28.1462575Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 98/778 kB
2024-08-30T19:20:28.1463373Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 115/778 kB
2024-08-30T19:20:28.1464206Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 131/778 kB
2024-08-30T19:20:28.1465046Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 147/778 kB
2024-08-30T19:20:28.1465878Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 164/778 kB
2024-08-30T19:20:28.1466666Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 180/778 kB
2024-08-30T19:20:28.1467492Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 197/778 kB
2024-08-30T19:20:28.1468345Z Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 213/778 kB
2024-08-30T19:20:28.1469158Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 213/778 kB
2024-08-30T19:20:28.1469939Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 229/778 kB
2024-08-30T19:20:28.1470765Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 229/778 kB
2024-08-30T19:20:28.1471585Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 246/778 kB
2024-08-30T19:20:28.1472495Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 246/778 kB
2024-08-30T19:20:28.1473340Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 262/778 kB
2024-08-30T19:20:28.1474198Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 279/778 kB
2024-08-30T19:20:28.1475037Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 295/778 kB
2024-08-30T19:20:28.1475883Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 311/778 kB
2024-08-30T19:20:28.1476683Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 311/778 kB
2024-08-30T19:20:28.1477497Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 328/778 kB
2024-08-30T19:20:28.1478684Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 328/778 kB
2024-08-30T19:20:28.1479550Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 344/778 kB
2024-08-30T19:20:28.1480339Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 348/778 kB
2024-08-30T19:20:28.1481165Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 348/778 kB
2024-08-30T19:20:28.1482017Z Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB
2024-08-30T19:20:28.1482881Z Progress (5): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 16/361 kB
2024-08-30T19:20:28.1483873Z Progress (5): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 33/361 kB
2024-08-30T19:20:28.1484726Z                                                                        
2024-08-30T19:20:28.1486340Z Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/19.0/guava-19.0.jar (2.3 MB at 4.6 MB/s)
2024-08-30T19:20:28.1487841Z #24 7.395 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 49/361 kB
2024-08-30T19:20:28.1488644Z                                                               
2024-08-30T19:20:28.1490246Z Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-client/3.1.5/jersey-client-3.1.5.jar
2024-08-30T19:20:28.1491972Z #24 7.395 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 63/361 kB
2024-08-30T19:20:28.1492861Z Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 79/361 kB
2024-08-30T19:20:28.1493697Z Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 79/361 kB
2024-08-30T19:20:28.1494487Z Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 381/778 kB | 79/361 kB
2024-08-30T19:20:28.1495577Z Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 381/778 kB | 96/361 kB
2024-08-30T19:20:28.1496392Z Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 381/778 kB | 96/361 kB
2024-08-30T19:20:28.1497198Z Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 393/778 kB | 96/361 kB
2024-08-30T19:20:28.1498005Z Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 393/778 kB | 112/361 kB
2024-08-30T19:20:28.1498836Z Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 410/778 kB | 112/361 kB
2024-08-30T19:20:28.1499663Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 410/778 kB | 112/361 kB
2024-08-30T19:20:28.1500460Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 410/778 kB | 128/361 kB
2024-08-30T19:20:28.1501288Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 426/778 kB | 128/361 kB
2024-08-30T19:20:28.1502099Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 426/778 kB | 128/361 kB
2024-08-30T19:20:28.1502943Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 426/778 kB | 145/361 kB
2024-08-30T19:20:28.1503752Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 442/778 kB | 145/361 kB
2024-08-30T19:20:28.1504574Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 442/778 kB | 145/361 kB
2024-08-30T19:20:28.1505391Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 442/778 kB | 161/361 kB
2024-08-30T19:20:28.1506207Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 459/778 kB | 161/361 kB
2024-08-30T19:20:28.1507020Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 459/778 kB | 161/361 kB
2024-08-30T19:20:28.1507822Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 459/778 kB | 178/361 kB
2024-08-30T19:20:28.1508632Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 475/778 kB | 178/361 kB
2024-08-30T19:20:28.1509447Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 475/778 kB | 178/361 kB
2024-08-30T19:20:28.1510261Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 492/778 kB | 178/361 kB
2024-08-30T19:20:28.1511060Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 492/778 kB | 194/361 kB
2024-08-30T19:20:28.1512002Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 492/778 kB | 194/361 kB
2024-08-30T19:20:28.1512797Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 508/778 kB | 194/361 kB
2024-08-30T19:20:28.1513577Z Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 508/778 kB | 210/361 kB
2024-08-30T19:20:28.1514354Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 508/778 kB | 210/361 kB
2024-08-30T19:20:28.1515101Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 508/778 kB | 227/361 kB
2024-08-30T19:20:28.1515847Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 524/778 kB | 227/361 kB
2024-08-30T19:20:28.1516908Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 524/778 kB | 227/361 kB
2024-08-30T19:20:28.1517742Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 524/778 kB | 243/361 kB
2024-08-30T19:20:28.1518590Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 541/778 kB | 243/361 kB
2024-08-30T19:20:28.1519455Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 541/778 kB | 243/361 kB
2024-08-30T19:20:28.1520278Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 557/778 kB | 243/361 kB
2024-08-30T19:20:28.1521043Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 557/778 kB | 260/361 kB
2024-08-30T19:20:28.1521813Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 557/778 kB | 260/361 kB
2024-08-30T19:20:28.1522600Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 573/778 kB | 260/361 kB
2024-08-30T19:20:28.1523392Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 573/778 kB | 276/361 kB
2024-08-30T19:20:28.1524181Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 573/778 kB | 276/361 kB
2024-08-30T19:20:28.1525020Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 590/778 kB | 276/361 kB
2024-08-30T19:20:28.1525854Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 590/778 kB | 292/361 kB
2024-08-30T19:20:28.1526680Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 590/778 kB | 292/361 kB
2024-08-30T19:20:28.1527550Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 606/778 kB | 292/361 kB
2024-08-30T19:20:28.1528397Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 606/778 kB | 309/361 kB
2024-08-30T19:20:28.1529304Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 606/778 kB | 309/361 kB
2024-08-30T19:20:28.1530223Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 623/778 kB | 309/361 kB
2024-08-30T19:20:28.1534847Z Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 623/778 kB | 325/361 kB
2024-08-30T19:20:28.1535826Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 623/778 kB | 325/361 kB
2024-08-30T19:20:28.1537119Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 639/778 kB | 325/361 kB
2024-08-30T19:20:28.1538051Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 639/778 kB | 341/361 kB
2024-08-30T19:20:28.1538980Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 655/778 kB | 341/361 kB
2024-08-30T19:20:28.1540254Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 655/778 kB | 341/361 kB
2024-08-30T19:20:28.1541165Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 655/778 kB | 358/361 kB
2024-08-30T19:20:28.1542064Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 655/778 kB | 361 kB    
2024-08-30T19:20:28.1542947Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 672/778 kB | 361 kB
2024-08-30T19:20:28.1543797Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 672/778 kB | 361 kB
2024-08-30T19:20:28.1544643Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 688/778 kB | 361 kB
2024-08-30T19:20:28.1545475Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 688/778 kB | 361 kB
2024-08-30T19:20:28.1546312Z Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 704/778 kB | 361 kB
2024-08-30T19:20:28.1547074Z                                                            
2024-08-30T19:20:28.1548954Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.jar (361 kB at 700 kB/s)
2024-08-30T19:20:28.1551527Z #24 7.410 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/jersey-hk2/3.1.5/jersey-hk2-3.1.5.jar
2024-08-30T19:20:28.1553141Z #24 7.410 Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 721/778 kB
2024-08-30T19:20:28.1553963Z Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 721/778 kB
2024-08-30T19:20:28.1554697Z Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 737/778 kB
2024-08-30T19:20:28.1555433Z Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 741/778 kB
2024-08-30T19:20:28.1556166Z Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 741/778 kB
2024-08-30T19:20:28.1556894Z Progress (3): 1.3/8.4 MB | 0.9/1.2 MB | 741/778 kB
2024-08-30T19:20:28.1557627Z Progress (3): 1.3/8.4 MB | 0.9/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1558373Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1559089Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1559811Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1560531Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1562346Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1565515Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1567191Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1568792Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1569566Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1571632Z Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1572609Z Progress (3): 1.4/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1574011Z Progress (3): 1.4/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1574762Z Progress (3): 1.4/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1575783Z Progress (3): 1.4/8.4 MB | 1.0/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1577148Z Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1578240Z Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1579088Z Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1579855Z Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1581469Z Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1583168Z Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1584141Z Progress (3): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1585138Z Progress (3): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1585887Z Progress (3): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB
2024-08-30T19:20:28.1587377Z Progress (4): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 16/307 kB
2024-08-30T19:20:28.1588530Z Progress (4): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 16/307 kB
2024-08-30T19:20:28.1589766Z Progress (4): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 33/307 kB
2024-08-30T19:20:28.1591576Z Progress (5): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 33/307 kB | 16/78 kB
2024-08-30T19:20:28.1593924Z Progress (5): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 33/307 kB | 16/78 kB
2024-08-30T19:20:28.1595290Z Progress (5): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 33/307 kB | 33/78 kB
2024-08-30T19:20:28.1597192Z Progress (5): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 49/307 kB | 33/78 kB
2024-08-30T19:20:28.1598703Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 49/307 kB | 33/78 kB
2024-08-30T19:20:28.1599752Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 63/307 kB | 33/78 kB
2024-08-30T19:20:28.1600743Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 63/307 kB | 49/78 kB
2024-08-30T19:20:28.1601780Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 80/307 kB | 49/78 kB
2024-08-30T19:20:28.1602754Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 80/307 kB | 49/78 kB
2024-08-30T19:20:28.1603797Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 96/307 kB | 49/78 kB
2024-08-30T19:20:28.1604790Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 96/307 kB | 65/78 kB
2024-08-30T19:20:28.1605769Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 96/307 kB | 65/78 kB
2024-08-30T19:20:28.1606797Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 96/307 kB | 78 kB   
2024-08-30T19:20:28.1607829Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 113/307 kB | 78 kB
2024-08-30T19:20:28.1608824Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 113/307 kB | 78 kB
2024-08-30T19:20:28.1609856Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 129/307 kB | 78 kB
2024-08-30T19:20:28.1610835Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 129/307 kB | 78 kB
2024-08-30T19:20:28.1611986Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 145/307 kB | 78 kB
2024-08-30T19:20:28.1612985Z Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 145/307 kB | 78 kB
2024-08-30T19:20:28.1614005Z Progress (5): 1.5/8.4 MB | 1.2 MB | 758/778 kB | 145/307 kB | 78 kB    
2024-08-30T19:20:28.1614964Z Progress (5): 1.5/8.4 MB | 1.2 MB | 758/778 kB | 162/307 kB | 78 kB
2024-08-30T19:20:28.1615952Z Progress (5): 1.5/8.4 MB | 1.2 MB | 758/778 kB | 178/307 kB | 78 kB
2024-08-30T19:20:28.1616873Z                                                                    
2024-08-30T19:20:28.1619241Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/jersey-hk2/3.1.5/jersey-hk2-3.1.5.jar (78 kB at 151 kB/s)
2024-08-30T19:20:28.1621842Z #24 7.416 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-locator/3.0.5/hk2-locator-3.0.5.jar
2024-08-30T19:20:28.1623411Z #24 7.416 Progress (4): 1.5/8.4 MB | 1.2 MB | 758/778 kB | 195/307 kB
2024-08-30T19:20:28.1624266Z                                                            
2024-08-30T19:20:28.1626163Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-common/3.1.5/jersey-common-3.1.5.jar (1.2 MB at 2.4 MB/s)
2024-08-30T19:20:28.1627931Z #24 7.416 Progress (3): 1.5/8.4 MB | 758/778 kB | 211/307 kB
2024-08-30T19:20:28.1628682Z                                                   
2024-08-30T19:20:28.1630556Z Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/3.0.5/aopalliance-repackaged-3.0.5.jar
2024-08-30T19:20:28.1632339Z #24 7.416 Progress (3): 1.5/8.4 MB | 758/778 kB | 227/307 kB
2024-08-30T19:20:28.1633152Z Progress (3): 1.5/8.4 MB | 758/778 kB | 244/307 kB
2024-08-30T19:20:28.1633877Z Progress (3): 1.5/8.4 MB | 758/778 kB | 260/307 kB
2024-08-30T19:20:28.1634617Z Progress (3): 1.5/8.4 MB | 758/778 kB | 260/307 kB
2024-08-30T19:20:28.1635322Z Progress (3): 1.5/8.4 MB | 758/778 kB | 276/307 kB
2024-08-30T19:20:28.1636016Z Progress (3): 1.5/8.4 MB | 758/778 kB | 276/307 kB
2024-08-30T19:20:28.1636711Z Progress (3): 1.5/8.4 MB | 758/778 kB | 293/307 kB
2024-08-30T19:20:28.1637387Z Progress (3): 1.5/8.4 MB | 758/778 kB | 293/307 kB
2024-08-30T19:20:28.1638392Z Progress (3): 1.5/8.4 MB | 774/778 kB | 293/307 kB
2024-08-30T19:20:28.1639080Z Progress (3): 1.5/8.4 MB | 774/778 kB | 307 kB    
2024-08-30T19:20:28.1639748Z Progress (3): 1.5/8.4 MB | 774/778 kB | 307 kB
2024-08-30T19:20:28.1640375Z Progress (3): 1.6/8.4 MB | 774/778 kB | 307 kB
2024-08-30T19:20:28.1640997Z Progress (3): 1.6/8.4 MB | 774/778 kB | 307 kB
2024-08-30T19:20:28.1641649Z Progress (3): 1.6/8.4 MB | 778 kB | 307 kB    
2024-08-30T19:20:28.1642246Z                                           
2024-08-30T19:20:28.1644004Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-client/3.1.5/jersey-client-3.1.5.jar (307 kB at 587 kB/s)
2024-08-30T19:20:28.1646301Z #24 7.421 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-api/3.0.5/hk2-api-3.0.5.jar
2024-08-30T19:20:28.1647591Z #24 7.421 Progress (2): 1.6/8.4 MB | 778 kB
2024-08-30T19:20:28.1648144Z Progress (2): 1.6/8.4 MB | 778 kB
2024-08-30T19:20:28.1648667Z Progress (2): 1.6/8.4 MB | 778 kB
2024-08-30T19:20:28.1649177Z Progress (2): 1.6/8.4 MB | 778 kB
2024-08-30T19:20:28.1649638Z Progress (2): 1.7/8.4 MB | 778 kB
2024-08-30T19:20:28.1650143Z Progress (2): 1.7/8.4 MB | 778 kB
2024-08-30T19:20:28.1650624Z                                  
2024-08-30T19:20:28.1693771Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.jar (778 kB at 1.5 MB/s)
2024-08-30T19:20:28.1696221Z #24 7.422 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-utils/3.0.5/hk2-utils-3.0.5.jar
2024-08-30T19:20:28.1697470Z #24 7.422 Progress (1): 1.7/8.4 MB
2024-08-30T19:20:28.1697998Z Progress (1): 1.7/8.4 MB
2024-08-30T19:20:28.1698455Z Progress (1): 1.7/8.4 MB
2024-08-30T19:20:28.1698872Z Progress (1): 1.7/8.4 MB
2024-08-30T19:20:28.1699300Z Progress (1): 1.8/8.4 MB
2024-08-30T19:20:28.1699707Z Progress (1): 1.8/8.4 MB
2024-08-30T19:20:28.1700157Z Progress (1): 1.8/8.4 MB
2024-08-30T19:20:28.1700586Z Progress (1): 1.8/8.4 MB
2024-08-30T19:20:28.1701004Z Progress (1): 1.8/8.4 MB
2024-08-30T19:20:28.1701454Z Progress (2): 1.8/8.4 MB | 16/27 kB
2024-08-30T19:20:28.1701961Z Progress (2): 1.8/8.4 MB | 16/27 kB
2024-08-30T19:20:28.1702474Z Progress (2): 1.8/8.4 MB | 16/27 kB
2024-08-30T19:20:28.1703001Z Progress (2): 1.8/8.4 MB | 27 kB   
2024-08-30T19:20:28.1703834Z Progress (2): 1.9/8.4 MB | 27 kB
2024-08-30T19:20:28.1704340Z                                 
2024-08-30T19:20:28.1706262Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/3.0.5/aopalliance-repackaged-3.0.5.jar (27 kB at 52 kB/s)
2024-08-30T19:20:28.1708915Z #24 7.429 Downloading from central: https://repo.maven.apache.org/maven2/org/javassist/javassist/3.29.2-GA/javassist-3.29.2-GA.jar
2024-08-30T19:20:28.1710237Z #24 7.429 Progress (2): 1.9/8.4 MB | 16/205 kB
2024-08-30T19:20:28.1710918Z Progress (3): 1.9/8.4 MB | 16/205 kB | 0.7/207 kB
2024-08-30T19:20:28.1711587Z Progress (3): 1.9/8.4 MB | 33/205 kB | 0.7/207 kB
2024-08-30T19:20:28.1712232Z Progress (3): 1.9/8.4 MB | 49/205 kB | 0.7/207 kB
2024-08-30T19:20:28.1712887Z Progress (3): 1.9/8.4 MB | 49/205 kB | 17/207 kB 
2024-08-30T19:20:28.1713522Z Progress (3): 1.9/8.4 MB | 64/205 kB | 17/207 kB
2024-08-30T19:20:28.1714194Z Progress (3): 1.9/8.4 MB | 81/205 kB | 17/207 kB
2024-08-30T19:20:28.1714845Z Progress (3): 1.9/8.4 MB | 81/205 kB | 33/207 kB
2024-08-30T19:20:28.1715495Z Progress (3): 1.9/8.4 MB | 97/205 kB | 33/207 kB
2024-08-30T19:20:28.1716111Z Progress (3): 1.9/8.4 MB | 97/205 kB | 50/207 kB
2024-08-30T19:20:28.1716759Z Progress (3): 1.9/8.4 MB | 97/205 kB | 66/207 kB
2024-08-30T19:20:28.1717405Z Progress (3): 1.9/8.4 MB | 113/205 kB | 66/207 kB
2024-08-30T19:20:28.1718056Z Progress (3): 1.9/8.4 MB | 113/205 kB | 83/207 kB
2024-08-30T19:20:28.1718806Z Progress (4): 1.9/8.4 MB | 113/205 kB | 83/207 kB | 16/132 kB
2024-08-30T19:20:28.1719643Z Progress (4): 1.9/8.4 MB | 113/205 kB | 99/207 kB | 16/132 kB
2024-08-30T19:20:28.1720704Z Progress (4): 1.9/8.4 MB | 130/205 kB | 99/207 kB | 16/132 kB
2024-08-30T19:20:28.1721542Z Progress (4): 1.9/8.4 MB | 130/205 kB | 99/207 kB | 33/132 kB
2024-08-30T19:20:28.1722390Z Progress (4): 1.9/8.4 MB | 130/205 kB | 115/207 kB | 33/132 kB
2024-08-30T19:20:28.1723262Z Progress (4): 1.9/8.4 MB | 146/205 kB | 115/207 kB | 33/132 kB
2024-08-30T19:20:28.1724063Z Progress (4): 1.9/8.4 MB | 146/205 kB | 132/207 kB | 33/132 kB
2024-08-30T19:20:28.1725009Z Progress (4): 1.9/8.4 MB | 146/205 kB | 132/207 kB | 49/132 kB
2024-08-30T19:20:28.1725830Z Progress (4): 1.9/8.4 MB | 163/205 kB | 132/207 kB | 49/132 kB
2024-08-30T19:20:28.1726642Z Progress (4): 1.9/8.4 MB | 163/205 kB | 148/207 kB | 49/132 kB
2024-08-30T19:20:28.1727444Z Progress (4): 1.9/8.4 MB | 163/205 kB | 148/207 kB | 64/132 kB
2024-08-30T19:20:28.1728244Z Progress (4): 1.9/8.4 MB | 163/205 kB | 164/207 kB | 64/132 kB
2024-08-30T19:20:28.1729037Z Progress (4): 1.9/8.4 MB | 163/205 kB | 181/207 kB | 64/132 kB
2024-08-30T19:20:28.1729848Z Progress (4): 1.9/8.4 MB | 163/205 kB | 181/207 kB | 81/132 kB
2024-08-30T19:20:28.1730647Z Progress (4): 1.9/8.4 MB | 163/205 kB | 197/207 kB | 81/132 kB
2024-08-30T19:20:28.1731672Z Progress (4): 1.9/8.4 MB | 179/205 kB | 197/207 kB | 81/132 kB
2024-08-30T19:20:28.1732541Z Progress (4): 1.9/8.4 MB | 179/205 kB | 207 kB | 81/132 kB    
2024-08-30T19:20:28.2057660Z Progress (4): 1.9/8.4 MB | 179/205 kB | 207 kB | 97/132 kB
2024-08-30T19:20:28.2058489Z Progress (4): 1.9/8.4 MB | 195/205 kB | 207 kB | 97/132 kB
2024-08-30T19:20:28.2059256Z Progress (4): 1.9/8.4 MB | 205 kB | 207 kB | 97/132 kB    
2024-08-30T19:20:28.2061076Z Progress (4): 1.9/8.4 MB | 205 kB | 207 kB | 113/132 kB
2024-08-30T19:20:28.2061848Z Progress (4): 1.9/8.4 MB | 205 kB | 207 kB | 130/132 kB
2024-08-30T19:20:28.2062552Z                                                        
2024-08-30T19:20:28.2064374Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-api/3.0.5/hk2-api-3.0.5.jar (207 kB at 387 kB/s)
2024-08-30T19:20:28.2065812Z #24 7.430 Progress (3): 1.9/8.4 MB | 205 kB | 132 kB
2024-08-30T19:20:28.2066444Z                                           
2024-08-30T19:20:28.2068151Z Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-common/2.6.1/junixsocket-common-2.6.1.jar
2024-08-30T19:20:28.2071161Z #24 7.430 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-locator/3.0.5/hk2-locator-3.0.5.jar (205 kB at 384 kB/s)
2024-08-30T19:20:28.2072820Z #24 7.430 Progress (3): 1.9/8.4 MB | 132 kB | 16/794 kB
2024-08-30T19:20:28.2073557Z                                              
2024-08-30T19:20:28.2075448Z Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-native-common/2.6.1/junixsocket-native-common-2.6.1.jar
2024-08-30T19:20:28.2078145Z #24 7.430 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-utils/3.0.5/hk2-utils-3.0.5.jar (132 kB at 247 kB/s)
2024-08-30T19:20:28.2079656Z #24 7.430 Progress (2): 1.9/8.4 MB | 33/794 kB
2024-08-30T19:20:28.2080226Z                                     
2024-08-30T19:20:28.2082195Z Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-netty/3.3.4/docker-java-transport-netty-3.3.4.jar
2024-08-30T19:20:28.2084025Z #24 7.431 Progress (2): 1.9/8.4 MB | 33/794 kB
2024-08-30T19:20:28.2084704Z Progress (2): 1.9/8.4 MB | 49/794 kB
2024-08-30T19:20:28.2085278Z Progress (2): 1.9/8.4 MB | 49/794 kB
2024-08-30T19:20:28.2085866Z Progress (2): 1.9/8.4 MB | 49/794 kB
2024-08-30T19:20:28.2086440Z Progress (2): 1.9/8.4 MB | 65/794 kB
2024-08-30T19:20:28.2087147Z Progress (2): 1.9/8.4 MB | 65/794 kB
2024-08-30T19:20:28.2087729Z Progress (2): 1.9/8.4 MB | 65/794 kB
2024-08-30T19:20:28.2088290Z Progress (2): 1.9/8.4 MB | 82/794 kB
2024-08-30T19:20:28.2088850Z Progress (2): 2.0/8.4 MB | 82/794 kB
2024-08-30T19:20:28.2089475Z Progress (2): 2.0/8.4 MB | 98/794 kB
2024-08-30T19:20:28.2090420Z Progress (2): 2.0/8.4 MB | 98/794 kB
2024-08-30T19:20:28.2091375Z Progress (2): 2.0/8.4 MB | 98/794 kB
2024-08-30T19:20:28.2091993Z Progress (2): 2.0/8.4 MB | 114/794 kB
2024-08-30T19:20:28.2092593Z Progress (2): 2.0/8.4 MB | 114/794 kB
2024-08-30T19:20:28.2093167Z Progress (2): 2.0/8.4 MB | 114/794 kB
2024-08-30T19:20:28.2093764Z Progress (2): 2.0/8.4 MB | 131/794 kB
2024-08-30T19:20:28.2094433Z Progress (2): 2.0/8.4 MB | 147/794 kB
2024-08-30T19:20:28.2095004Z Progress (2): 2.0/8.4 MB | 147/794 kB
2024-08-30T19:20:28.2095589Z Progress (2): 2.1/8.4 MB | 147/794 kB
2024-08-30T19:20:28.2096187Z Progress (2): 2.1/8.4 MB | 163/794 kB
2024-08-30T19:20:28.2096768Z Progress (2): 2.1/8.4 MB | 163/794 kB
2024-08-30T19:20:28.2097273Z Progress (2): 2.1/8.4 MB | 180/794 kB
2024-08-30T19:20:28.2097762Z Progress (2): 2.1/8.4 MB | 180/794 kB
2024-08-30T19:20:28.2098262Z Progress (2): 2.1/8.4 MB | 196/794 kB
2024-08-30T19:20:28.2098790Z Progress (2): 2.1/8.4 MB | 196/794 kB
2024-08-30T19:20:28.2099381Z Progress (2): 2.1/8.4 MB | 213/794 kB
2024-08-30T19:20:28.2100107Z Progress (2): 2.1/8.4 MB | 213/794 kB
2024-08-30T19:20:28.2100661Z Progress (2): 2.1/8.4 MB | 229/794 kB
2024-08-30T19:20:28.2101215Z Progress (2): 2.1/8.4 MB | 245/794 kB
2024-08-30T19:20:28.2101746Z Progress (2): 2.1/8.4 MB | 262/794 kB
2024-08-30T19:20:28.2102314Z Progress (2): 2.1/8.4 MB | 278/794 kB
2024-08-30T19:20:28.2102873Z Progress (2): 2.1/8.4 MB | 295/794 kB
2024-08-30T19:20:28.2103409Z Progress (2): 2.1/8.4 MB | 311/794 kB
2024-08-30T19:20:28.2103931Z Progress (2): 2.1/8.4 MB | 327/794 kB
2024-08-30T19:20:28.2104474Z Progress (2): 2.1/8.4 MB | 344/794 kB
2024-08-30T19:20:28.2105051Z Progress (3): 2.1/8.4 MB | 344/794 kB | 15/433 kB
2024-08-30T19:20:28.2105732Z Progress (3): 2.1/8.4 MB | 360/794 kB | 15/433 kB
2024-08-30T19:20:28.2106411Z Progress (3): 2.1/8.4 MB | 360/794 kB | 31/433 kB
2024-08-30T19:20:28.2107093Z Progress (3): 2.1/8.4 MB | 376/794 kB | 31/433 kB
2024-08-30T19:20:28.2107784Z Progress (3): 2.1/8.4 MB | 393/794 kB | 31/433 kB
2024-08-30T19:20:28.2108501Z Progress (3): 2.1/8.4 MB | 393/794 kB | 48/433 kB
2024-08-30T19:20:28.2108732Z Progress (3): 2.1/8.4 MB | 409/794 kB | 48/433 kB
2024-08-30T19:20:28.2109053Z Progress (4): 2.1/8.4 MB | 409/794 kB | 48/433 kB | 16/44 kB
2024-08-30T19:20:28.2109346Z Progress (4): 2.1/8.4 MB | 409/794 kB | 64/433 kB | 16/44 kB
2024-08-30T19:20:28.2109931Z Progress (4): 2.1/8.4 MB | 426/794 kB | 64/433 kB | 16/44 kB
2024-08-30T19:20:28.2110247Z Progress (4): 2.1/8.4 MB | 426/794 kB | 81/433 kB | 16/44 kB
2024-08-30T19:20:28.2110550Z Progress (4): 2.1/8.4 MB | 442/794 kB | 81/433 kB | 16/44 kB
2024-08-30T19:20:28.2110865Z Progress (4): 2.1/8.4 MB | 442/794 kB | 81/433 kB | 33/44 kB
2024-08-30T19:20:28.2111166Z Progress (4): 2.1/8.4 MB | 442/794 kB | 97/433 kB | 33/44 kB
2024-08-30T19:20:28.2111451Z Progress (4): 2.1/8.4 MB | 458/794 kB | 97/433 kB | 33/44 kB
2024-08-30T19:20:28.2111742Z Progress (4): 2.1/8.4 MB | 458/794 kB | 97/433 kB | 44 kB   
2024-08-30T19:20:28.2112040Z Progress (4): 2.1/8.4 MB | 458/794 kB | 113/433 kB | 44 kB
2024-08-30T19:20:28.2112339Z Progress (4): 2.1/8.4 MB | 475/794 kB | 113/433 kB | 44 kB
2024-08-30T19:20:28.2112644Z Progress (4): 2.1/8.4 MB | 491/794 kB | 113/433 kB | 44 kB
2024-08-30T19:20:28.2112941Z Progress (4): 2.1/8.4 MB | 491/794 kB | 130/433 kB | 44 kB
2024-08-30T19:20:28.2113369Z Progress (4): 2.1/8.4 MB | 508/794 kB | 130/433 kB | 44 kB
2024-08-30T19:20:28.2113670Z Progress (4): 2.1/8.4 MB | 508/794 kB | 146/433 kB | 44 kB
2024-08-30T19:20:28.2113950Z Progress (4): 2.1/8.4 MB | 524/794 kB | 146/433 kB | 44 kB
2024-08-30T19:20:28.2114247Z Progress (4): 2.1/8.4 MB | 524/794 kB | 162/433 kB | 44 kB
2024-08-30T19:20:28.2114543Z Progress (4): 2.1/8.4 MB | 540/794 kB | 162/433 kB | 44 kB
2024-08-30T19:20:28.2114826Z Progress (4): 2.1/8.4 MB | 540/794 kB | 179/433 kB | 44 kB
2024-08-30T19:20:28.2115121Z Progress (4): 2.1/8.4 MB | 557/794 kB | 179/433 kB | 44 kB
2024-08-30T19:20:28.2115431Z Progress (4): 2.1/8.4 MB | 557/794 kB | 195/433 kB | 44 kB
2024-08-30T19:20:28.2115996Z                                                           
2024-08-30T19:20:28.2117784Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-netty/3.3.4/docker-java-transport-netty-3.3.4.jar (44 kB at 80 kB/s)
2024-08-30T19:20:28.2119147Z #24 7.445 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-http/4.1.105.Final/netty-codec-http-4.1.105.Final.jar
2024-08-30T19:20:28.2119474Z #24 7.445 Progress (3): 2.1/8.4 MB | 573/794 kB | 195/433 kB
2024-08-30T19:20:28.2119750Z Progress (3): 2.1/8.4 MB | 573/794 kB | 212/433 kB
2024-08-30T19:20:28.2119999Z Progress (3): 2.1/8.4 MB | 589/794 kB | 212/433 kB
2024-08-30T19:20:28.2120240Z Progress (3): 2.1/8.4 MB | 589/794 kB | 228/433 kB
2024-08-30T19:20:28.2120498Z Progress (3): 2.1/8.4 MB | 606/794 kB | 228/433 kB
2024-08-30T19:20:28.2120737Z Progress (3): 2.1/8.4 MB | 606/794 kB | 244/433 kB
2024-08-30T19:20:28.2120980Z Progress (3): 2.1/8.4 MB | 622/794 kB | 244/433 kB
2024-08-30T19:20:28.2121250Z Progress (3): 2.1/8.4 MB | 622/794 kB | 261/433 kB
2024-08-30T19:20:28.2121500Z Progress (3): 2.1/8.4 MB | 639/794 kB | 261/433 kB
2024-08-30T19:20:28.2121745Z Progress (3): 2.1/8.4 MB | 639/794 kB | 277/433 kB
2024-08-30T19:20:28.2121978Z Progress (3): 2.1/8.4 MB | 655/794 kB | 277/433 kB
2024-08-30T19:20:28.2122226Z Progress (3): 2.1/8.4 MB | 655/794 kB | 293/433 kB
2024-08-30T19:20:28.2122474Z Progress (3): 2.1/8.4 MB | 671/794 kB | 293/433 kB
2024-08-30T19:20:28.2122710Z Progress (3): 2.1/8.4 MB | 671/794 kB | 310/433 kB
2024-08-30T19:20:28.2122942Z Progress (3): 2.1/8.4 MB | 688/794 kB | 310/433 kB
2024-08-30T19:20:28.2123195Z Progress (3): 2.1/8.4 MB | 688/794 kB | 326/433 kB
2024-08-30T19:20:28.2123430Z Progress (3): 2.1/8.4 MB | 688/794 kB | 343/433 kB
2024-08-30T19:20:28.2123763Z Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 16/684 kB
2024-08-30T19:20:28.2124101Z Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 33/684 kB
2024-08-30T19:20:28.2124422Z Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 49/684 kB
2024-08-30T19:20:28.2124720Z Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 66/684 kB
2024-08-30T19:20:28.2125022Z Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 82/684 kB
2024-08-30T19:20:28.2125321Z Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 98/684 kB
2024-08-30T19:20:28.2125906Z Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 115/684 kB
2024-08-30T19:20:28.2126269Z Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 131/684 kB
2024-08-30T19:20:28.2126600Z Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 147/684 kB
2024-08-30T19:20:28.2127003Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 147/684 kB | 16/665 kB
2024-08-30T19:20:28.2127405Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 164/684 kB | 16/665 kB
2024-08-30T19:20:28.2127810Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 164/684 kB | 33/665 kB
2024-08-30T19:20:28.2128226Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 180/684 kB | 33/665 kB
2024-08-30T19:20:28.2128641Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 180/684 kB | 49/665 kB
2024-08-30T19:20:28.2129042Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 197/684 kB | 49/665 kB
2024-08-30T19:20:28.2129449Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 197/684 kB | 62/665 kB
2024-08-30T19:20:28.2129851Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 213/684 kB | 62/665 kB
2024-08-30T19:20:28.2130252Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 213/684 kB | 79/665 kB
2024-08-30T19:20:28.2130636Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 229/684 kB | 79/665 kB
2024-08-30T19:20:28.2131266Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 229/684 kB | 95/665 kB
2024-08-30T19:20:28.2131674Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 246/684 kB | 95/665 kB
2024-08-30T19:20:28.2132093Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 246/684 kB | 111/665 kB
2024-08-30T19:20:28.2132499Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 262/684 kB | 111/665 kB
2024-08-30T19:20:28.2133269Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 262/684 kB | 128/665 kB
2024-08-30T19:20:28.2133688Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 279/684 kB | 128/665 kB
2024-08-30T19:20:28.2134107Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 279/684 kB | 144/665 kB
2024-08-30T19:20:28.2134521Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 295/684 kB | 144/665 kB
2024-08-30T19:20:28.2134991Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 295/684 kB | 161/665 kB
2024-08-30T19:20:28.2135480Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 311/684 kB | 161/665 kB
2024-08-30T19:20:28.2135874Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 311/684 kB | 177/665 kB
2024-08-30T19:20:28.2136285Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 328/684 kB | 177/665 kB
2024-08-30T19:20:28.2136695Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 328/684 kB | 193/665 kB
2024-08-30T19:20:28.2137108Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 344/684 kB | 193/665 kB
2024-08-30T19:20:28.2137503Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 344/684 kB | 210/665 kB
2024-08-30T19:20:28.2137911Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 360/684 kB | 210/665 kB
2024-08-30T19:20:28.2138317Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 360/684 kB | 226/665 kB
2024-08-30T19:20:28.2138718Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 377/684 kB | 226/665 kB
2024-08-30T19:20:28.2139110Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 377/684 kB | 243/665 kB
2024-08-30T19:20:28.2139503Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 393/684 kB | 243/665 kB
2024-08-30T19:20:28.2139908Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 393/684 kB | 259/665 kB
2024-08-30T19:20:28.2140609Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 410/684 kB | 259/665 kB
2024-08-30T19:20:28.2141128Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 410/684 kB | 275/665 kB
2024-08-30T19:20:28.2141598Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 426/684 kB | 275/665 kB
2024-08-30T19:20:28.2142083Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 426/684 kB | 292/665 kB
2024-08-30T19:20:28.2142638Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 442/684 kB | 292/665 kB
2024-08-30T19:20:28.2143379Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 442/684 kB | 308/665 kB
2024-08-30T19:20:28.2143943Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 459/684 kB | 308/665 kB
2024-08-30T19:20:28.2144464Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 459/684 kB | 324/665 kB
2024-08-30T19:20:28.2144941Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 475/684 kB | 324/665 kB
2024-08-30T19:20:28.2145457Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 475/684 kB | 341/665 kB
2024-08-30T19:20:28.2145915Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 492/684 kB | 341/665 kB
2024-08-30T19:20:28.2146360Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 492/684 kB | 357/665 kB
2024-08-30T19:20:28.2146946Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 508/684 kB | 357/665 kB
2024-08-30T19:20:28.2147406Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 508/684 kB | 374/665 kB
2024-08-30T19:20:28.2147886Z Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 508/684 kB | 390/665 kB
2024-08-30T19:20:28.2148405Z Progress (5): 2.1/8.4 MB | 688/794 kB | 359/433 kB | 508/684 kB | 390/665 kB
2024-08-30T19:20:28.2148846Z Progress (5): 2.1/8.4 MB | 688/794 kB | 375/433 kB | 508/684 kB | 390/665 kB
2024-08-30T19:20:28.2149303Z Progress (5): 2.1/8.4 MB | 688/794 kB | 375/433 kB | 508/684 kB | 406/665 kB
2024-08-30T19:20:28.2149881Z Progress (5): 2.1/8.4 MB | 688/794 kB | 392/433 kB | 508/684 kB | 406/665 kB
2024-08-30T19:20:28.2150372Z Progress (5): 2.1/8.4 MB | 688/794 kB | 392/433 kB | 508/684 kB | 423/665 kB
2024-08-30T19:20:28.2150876Z Progress (5): 2.1/8.4 MB | 688/794 kB | 408/433 kB | 508/684 kB | 423/665 kB
2024-08-30T19:20:28.2151555Z Progress (5): 2.1/8.4 MB | 688/794 kB | 408/433 kB | 508/684 kB | 439/665 kB
2024-08-30T19:20:28.2152002Z Progress (5): 2.1/8.4 MB | 688/794 kB | 425/433 kB | 508/684 kB | 439/665 kB
2024-08-30T19:20:28.2152570Z Progress (5): 2.1/8.4 MB | 688/794 kB | 425/433 kB | 508/684 kB | 455/665 kB
2024-08-30T19:20:28.2153067Z Progress (5): 2.1/8.4 MB | 688/794 kB | 433 kB | 508/684 kB | 455/665 kB    
2024-08-30T19:20:28.2153513Z Progress (5): 2.1/8.4 MB | 688/794 kB | 433 kB | 508/684 kB | 472/665 kB
2024-08-30T19:20:28.2153994Z Progress (5): 2.1/8.4 MB | 688/794 kB | 433 kB | 508/684 kB | 488/665 kB
2024-08-30T19:20:28.2154401Z Progress (5): 2.1/8.4 MB | 688/794 kB | 433 kB | 508/684 kB | 505/665 kB
2024-08-30T19:20:28.2154666Z                                                                         
2024-08-30T19:20:28.2156476Z Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-common/2.6.1/junixsocket-common-2.6.1.jar (433 kB at 754 kB/s)
2024-08-30T19:20:28.2157830Z #24 7.471 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-common/4.1.105.Final/netty-common-4.1.105.Final.jar
2024-08-30T19:20:28.2158336Z #24 7.471 Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 521/665 kB
2024-08-30T19:20:28.2158731Z Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 537/665 kB
2024-08-30T19:20:28.2159132Z Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 554/665 kB
2024-08-30T19:20:28.2159569Z Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 570/665 kB
2024-08-30T19:20:28.2160054Z Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 570/665 kB
2024-08-30T19:20:28.2160419Z Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 587/665 kB
2024-08-30T19:20:28.2160837Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 587/665 kB
2024-08-30T19:20:28.2161213Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 603/665 kB
2024-08-30T19:20:28.2161650Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 603/665 kB
2024-08-30T19:20:28.2162070Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 619/665 kB
2024-08-30T19:20:28.2162508Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 619/665 kB
2024-08-30T19:20:28.2162915Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 636/665 kB
2024-08-30T19:20:28.2163253Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 636/665 kB
2024-08-30T19:20:28.2163841Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 652/665 kB
2024-08-30T19:20:28.2164328Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 652/665 kB
2024-08-30T19:20:28.2164708Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 665 kB    
2024-08-30T19:20:28.2165166Z Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 665 kB
2024-08-30T19:20:28.2165608Z Progress (4): 2.3/8.4 MB | 688/794 kB | 508/684 kB | 665 kB
2024-08-30T19:20:28.2165974Z Progress (4): 2.3/8.4 MB | 688/794 kB | 508/684 kB | 665 kB
2024-08-30T19:20:28.2166307Z                                                            
2024-08-30T19:20:28.2167849Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-http/4.1.105.Final/netty-codec-http-4.1.105.Final.jar (665 kB at 1.2 MB/s)
2024-08-30T19:20:28.2169138Z #24 7.473 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-buffer/4.1.105.Final/netty-buffer-4.1.105.Final.jar
2024-08-30T19:20:28.2169635Z #24 7.473 Progress (3): 2.3/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2169938Z Progress (3): 2.3/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2170226Z Progress (3): 2.3/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2170609Z Progress (3): 2.3/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2170902Z Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2171801Z Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2172119Z Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2172412Z Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2172778Z Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2173339Z Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2173626Z Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2174044Z Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2174363Z Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2174674Z Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2175040Z Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2175338Z Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2175635Z Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2176053Z Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2176355Z Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2176672Z Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2177019Z Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2177330Z Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2177667Z Progress (3): 2.7/8.4 MB | 688/794 kB | 508/684 kB
2024-08-30T19:20:28.2178095Z Progress (4): 2.7/8.4 MB | 688/794 kB | 508/684 kB | 16/308 kB
2024-08-30T19:20:28.2178467Z Progress (4): 2.7/8.4 MB | 688/794 kB | 508/684 kB | 33/308 kB
2024-08-30T19:20:28.2178917Z Progress (4): 2.7/8.4 MB | 688/794 kB | 508/684 kB | 49/308 kB
2024-08-30T19:20:28.2179336Z Progress (4): 2.7/8.4 MB | 688/794 kB | 508/684 kB | 62/308 kB
2024-08-30T19:20:28.2179715Z Progress (4): 2.7/8.4 MB | 688/794 kB | 524/684 kB | 62/308 kB
2024-08-30T19:20:28.2180130Z Progress (4): 2.7/8.4 MB | 688/794 kB | 524/684 kB | 78/308 kB
2024-08-30T19:20:28.2180561Z Progress (4): 2.7/8.4 MB | 688/794 kB | 541/684 kB | 78/308 kB
2024-08-30T19:20:28.2180965Z Progress (4): 2.7/8.4 MB | 688/794 kB | 541/684 kB | 95/308 kB
2024-08-30T19:20:28.2181383Z Progress (4): 2.7/8.4 MB | 688/794 kB | 557/684 kB | 95/308 kB
2024-08-30T19:20:28.2181766Z Progress (4): 2.7/8.4 MB | 688/794 kB | 557/684 kB | 111/308 kB
2024-08-30T19:20:28.2182211Z Progress (4): 2.7/8.4 MB | 688/794 kB | 573/684 kB | 111/308 kB
2024-08-30T19:20:28.2182601Z Progress (4): 2.7/8.4 MB | 688/794 kB | 573/684 kB | 128/308 kB
2024-08-30T19:20:28.2183055Z Progress (4): 2.7/8.4 MB | 688/794 kB | 590/684 kB | 128/308 kB
2024-08-30T19:20:28.2183787Z Progress (4): 2.7/8.4 MB | 688/794 kB | 590/684 kB | 144/308 kB
2024-08-30T19:20:28.2184186Z Progress (4): 2.7/8.4 MB | 688/794 kB | 606/684 kB | 144/308 kB
2024-08-30T19:20:28.2184563Z Progress (4): 2.7/8.4 MB | 688/794 kB | 606/684 kB | 160/308 kB
2024-08-30T19:20:28.2185012Z Progress (4): 2.7/8.4 MB | 688/794 kB | 623/684 kB | 160/308 kB
2024-08-30T19:20:28.2185403Z Progress (4): 2.7/8.4 MB | 688/794 kB | 623/684 kB | 177/308 kB
2024-08-30T19:20:28.2185844Z Progress (4): 2.7/8.4 MB | 688/794 kB | 639/684 kB | 177/308 kB
2024-08-30T19:20:28.2186291Z Progress (4): 2.7/8.4 MB | 688/794 kB | 639/684 kB | 193/308 kB
2024-08-30T19:20:28.2186666Z Progress (4): 2.7/8.4 MB | 688/794 kB | 655/684 kB | 193/308 kB
2024-08-30T19:20:28.2187100Z Progress (4): 2.7/8.4 MB | 688/794 kB | 655/684 kB | 209/308 kB
2024-08-30T19:20:28.2187472Z Progress (4): 2.7/8.4 MB | 688/794 kB | 672/684 kB | 209/308 kB
2024-08-30T19:20:28.2187865Z Progress (4): 2.7/8.4 MB | 688/794 kB | 672/684 kB | 226/308 kB
2024-08-30T19:20:28.2188356Z Progress (4): 2.7/8.4 MB | 688/794 kB | 684 kB | 226/308 kB    
2024-08-30T19:20:28.2188723Z Progress (4): 2.7/8.4 MB | 688/794 kB | 684 kB | 242/308 kB
2024-08-30T19:20:28.2189101Z Progress (4): 2.7/8.4 MB | 688/794 kB | 684 kB | 259/308 kB
2024-08-30T19:20:28.2189523Z Progress (4): 2.7/8.4 MB | 688/794 kB | 684 kB | 275/308 kB
2024-08-30T19:20:28.2189807Z                                                            
2024-08-30T19:20:28.2191619Z Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-native-common/2.6.1/junixsocket-native-common-2.6.1.jar (684 kB at 1.2 MB/s)
2024-08-30T19:20:28.2193095Z #24 7.483 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport/4.1.105.Final/netty-transport-4.1.105.Final.jar
2024-08-30T19:20:28.2193705Z #24 7.483 Progress (3): 2.7/8.4 MB | 688/794 kB | 291/308 kB
2024-08-30T19:20:28.2194069Z Progress (3): 2.7/8.4 MB | 688/794 kB | 308 kB    
2024-08-30T19:20:28.2194378Z Progress (3): 2.7/8.4 MB | 688/794 kB | 308 kB
2024-08-30T19:20:28.2194619Z                                               
2024-08-30T19:20:28.2196128Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-buffer/4.1.105.Final/netty-buffer-4.1.105.Final.jar (308 kB at 524 kB/s)
2024-08-30T19:20:28.2197365Z #24 7.483 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec/4.1.105.Final/netty-codec-4.1.105.Final.jar
2024-08-30T19:20:28.2197675Z #24 7.483 Progress (2): 2.7/8.4 MB | 704/794 kB
2024-08-30T19:20:28.2198032Z Progress (2): 2.7/8.4 MB | 720/794 kB
2024-08-30T19:20:28.2198272Z Progress (2): 2.7/8.4 MB | 737/794 kB
2024-08-30T19:20:28.2198575Z Progress (2): 2.7/8.4 MB | 753/794 kB
2024-08-30T19:20:28.2198864Z Progress (2): 2.7/8.4 MB | 770/794 kB
2024-08-30T19:20:28.2199101Z Progress (2): 2.7/8.4 MB | 786/794 kB
2024-08-30T19:20:28.2199450Z Progress (3): 2.7/8.4 MB | 786/794 kB | 16/661 kB
2024-08-30T19:20:28.2199765Z Progress (3): 2.7/8.4 MB | 794 kB | 16/661 kB    
2024-08-30T19:20:28.2199998Z                                              
2024-08-30T19:20:28.2201407Z Downloaded from central: https://repo.maven.apache.org/maven2/org/javassist/javassist/3.29.2-GA/javassist-3.29.2-GA.jar (794 kB at 1.4 MB/s)
2024-08-30T19:20:28.2201840Z #24 7.485 Progress (2): 2.7/8.4 MB | 32/661 kB
2024-08-30T19:20:28.2202077Z                                     
2024-08-30T19:20:28.2203547Z Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler/4.1.105.Final/netty-handler-4.1.105.Final.jar
2024-08-30T19:20:28.2203863Z #24 7.485 Progress (2): 2.7/8.4 MB | 49/661 kB
2024-08-30T19:20:28.2204149Z Progress (2): 2.7/8.4 MB | 65/661 kB
2024-08-30T19:20:28.2204394Z Progress (2): 2.7/8.4 MB | 80/661 kB
2024-08-30T19:20:28.2204652Z Progress (2): 2.7/8.4 MB | 96/661 kB
2024-08-30T19:20:28.2204920Z Progress (2): 2.7/8.4 MB | 112/661 kB
2024-08-30T19:20:28.2205171Z Progress (2): 2.7/8.4 MB | 129/661 kB
2024-08-30T19:20:28.2205371Z Progress (2): 2.7/8.4 MB | 145/661 kB
2024-08-30T19:20:28.2205810Z Progress (2): 2.7/8.4 MB | 162/661 kB
2024-08-30T19:20:28.2206037Z Progress (2): 2.7/8.4 MB | 178/661 kB
2024-08-30T19:20:28.2206292Z Progress (2): 2.7/8.4 MB | 194/661 kB
2024-08-30T19:20:28.2206595Z Progress (2): 2.7/8.4 MB | 211/661 kB
2024-08-30T19:20:28.2206814Z Progress (2): 2.7/8.4 MB | 227/661 kB
2024-08-30T19:20:28.2207010Z Progress (2): 2.7/8.4 MB | 244/661 kB
2024-08-30T19:20:28.2207258Z Progress (2): 2.7/8.4 MB | 260/661 kB
2024-08-30T19:20:28.2207475Z Progress (2): 2.7/8.4 MB | 276/661 kB
2024-08-30T19:20:28.2207732Z Progress (2): 2.7/8.4 MB | 293/661 kB
2024-08-30T19:20:28.2208009Z Progress (2): 2.7/8.4 MB | 309/661 kB
2024-08-30T19:20:28.2208233Z Progress (2): 2.7/8.4 MB | 325/661 kB
2024-08-30T19:20:28.2208433Z Progress (2): 2.7/8.4 MB | 342/661 kB
2024-08-30T19:20:28.2208677Z Progress (2): 2.7/8.4 MB | 358/661 kB
2024-08-30T19:20:28.2208887Z Progress (2): 2.7/8.4 MB | 375/661 kB
2024-08-30T19:20:28.2209212Z Progress (2): 2.7/8.4 MB | 391/661 kB
2024-08-30T19:20:28.2209411Z Progress (2): 2.7/8.4 MB | 407/661 kB
2024-08-30T19:20:28.2209627Z Progress (2): 2.7/8.4 MB | 424/661 kB
2024-08-30T19:20:28.2209882Z Progress (2): 2.7/8.4 MB | 440/661 kB
2024-08-30T19:20:28.2210080Z Progress (2): 2.7/8.4 MB | 457/661 kB
2024-08-30T19:20:28.2210277Z Progress (2): 2.7/8.4 MB | 473/661 kB
2024-08-30T19:20:28.2210675Z Progress (3): 2.7/8.4 MB | 473/661 kB | 16/497 kB
2024-08-30T19:20:28.2210929Z Progress (3): 2.7/8.4 MB | 473/661 kB | 33/497 kB
2024-08-30T19:20:28.2250828Z Progress (3): 2.7/8.4 MB | 473/661 kB | 49/497 kB
2024-08-30T19:20:28.2251439Z Progress (3): 2.7/8.4 MB | 473/661 kB | 64/497 kB
2024-08-30T19:20:28.2251753Z Progress (3): 2.7/8.4 MB | 473/661 kB | 64/497 kB
2024-08-30T19:20:28.2252439Z Progress (3): 2.7/8.4 MB | 473/661 kB | 80/497 kB
2024-08-30T19:20:28.2252907Z Progress (3): 2.7/8.4 MB | 473/661 kB | 80/497 kB
2024-08-30T19:20:28.2253246Z Progress (3): 2.7/8.4 MB | 473/661 kB | 97/497 kB
2024-08-30T19:20:28.2253823Z Progress (3): 2.7/8.4 MB | 473/661 kB | 97/497 kB
2024-08-30T19:20:28.2254224Z Progress (3): 2.7/8.4 MB | 473/661 kB | 113/497 kB
2024-08-30T19:20:28.2254528Z Progress (3): 2.7/8.4 MB | 473/661 kB | 129/497 kB
2024-08-30T19:20:28.2254953Z Progress (3): 2.7/8.4 MB | 473/661 kB | 129/497 kB
2024-08-30T19:20:28.2255262Z Progress (3): 2.7/8.4 MB | 473/661 kB | 146/497 kB
2024-08-30T19:20:28.2255587Z Progress (3): 2.8/8.4 MB | 473/661 kB | 146/497 kB
2024-08-30T19:20:28.2255924Z Progress (3): 2.8/8.4 MB | 473/661 kB | 162/497 kB
2024-08-30T19:20:28.2256220Z Progress (3): 2.8/8.4 MB | 473/661 kB | 162/497 kB
2024-08-30T19:20:28.2256506Z Progress (3): 2.8/8.4 MB | 473/661 kB | 179/497 kB
2024-08-30T19:20:28.2256935Z Progress (3): 2.8/8.4 MB | 473/661 kB | 179/497 kB
2024-08-30T19:20:28.2257277Z Progress (3): 2.8/8.4 MB | 473/661 kB | 195/497 kB
2024-08-30T19:20:28.2257569Z Progress (3): 2.8/8.4 MB | 473/661 kB | 195/497 kB
2024-08-30T19:20:28.2257923Z Progress (3): 2.8/8.4 MB | 473/661 kB | 211/497 kB
2024-08-30T19:20:28.2258228Z Progress (3): 2.8/8.4 MB | 473/661 kB | 211/497 kB
2024-08-30T19:20:28.2258534Z Progress (3): 2.8/8.4 MB | 473/661 kB | 211/497 kB
2024-08-30T19:20:28.2258945Z Progress (3): 2.8/8.4 MB | 473/661 kB | 228/497 kB
2024-08-30T19:20:28.2259285Z Progress (3): 2.8/8.4 MB | 473/661 kB | 228/497 kB
2024-08-30T19:20:28.2259633Z Progress (3): 2.8/8.4 MB | 473/661 kB | 244/497 kB
2024-08-30T19:20:28.2259936Z Progress (3): 2.9/8.4 MB | 473/661 kB | 244/497 kB
2024-08-30T19:20:28.2260219Z Progress (3): 2.9/8.4 MB | 473/661 kB | 261/497 kB
2024-08-30T19:20:28.2260569Z Progress (3): 2.9/8.4 MB | 473/661 kB | 261/497 kB
2024-08-30T19:20:28.2260962Z Progress (3): 2.9/8.4 MB | 473/661 kB | 277/497 kB
2024-08-30T19:20:28.2261253Z Progress (3): 2.9/8.4 MB | 473/661 kB | 277/497 kB
2024-08-30T19:20:28.2261615Z Progress (3): 2.9/8.4 MB | 473/661 kB | 293/497 kB
2024-08-30T19:20:28.2261914Z Progress (3): 2.9/8.4 MB | 473/661 kB | 293/497 kB
2024-08-30T19:20:28.2262213Z Progress (3): 2.9/8.4 MB | 473/661 kB | 310/497 kB
2024-08-30T19:20:28.2262562Z Progress (3): 2.9/8.4 MB | 473/661 kB | 310/497 kB
2024-08-30T19:20:28.2263278Z Progress (3): 2.9/8.4 MB | 473/661 kB | 326/497 kB
2024-08-30T19:20:28.2263623Z Progress (3): 2.9/8.4 MB | 473/661 kB | 326/497 kB
2024-08-30T19:20:28.2263996Z Progress (3): 2.9/8.4 MB | 473/661 kB | 342/497 kB
2024-08-30T19:20:28.2264283Z Progress (3): 3.0/8.4 MB | 473/661 kB | 342/497 kB
2024-08-30T19:20:28.2264965Z Progress (3): 3.0/8.4 MB | 473/661 kB | 359/497 kB
2024-08-30T19:20:28.2265314Z Progress (3): 3.0/8.4 MB | 473/661 kB | 359/497 kB
2024-08-30T19:20:28.2265715Z Progress (3): 3.0/8.4 MB | 473/661 kB | 359/497 kB
2024-08-30T19:20:28.2266077Z Progress (3): 3.0/8.4 MB | 473/661 kB | 375/497 kB
2024-08-30T19:20:28.2266391Z Progress (3): 3.0/8.4 MB | 473/661 kB | 375/497 kB
2024-08-30T19:20:28.2266689Z Progress (3): 3.0/8.4 MB | 473/661 kB | 392/497 kB
2024-08-30T19:20:28.2267050Z Progress (3): 3.0/8.4 MB | 473/661 kB | 392/497 kB
2024-08-30T19:20:28.2267338Z Progress (3): 3.0/8.4 MB | 473/661 kB | 392/497 kB
2024-08-30T19:20:28.2267693Z Progress (3): 3.0/8.4 MB | 473/661 kB | 408/497 kB
2024-08-30T19:20:28.2268059Z Progress (3): 3.1/8.4 MB | 473/661 kB | 408/497 kB
2024-08-30T19:20:28.2268339Z Progress (3): 3.1/8.4 MB | 473/661 kB | 424/497 kB
2024-08-30T19:20:28.2268630Z Progress (3): 3.1/8.4 MB | 473/661 kB | 424/497 kB
2024-08-30T19:20:28.2269672Z Progress (3): 3.1/8.4 MB | 473/661 kB | 441/497 kB
2024-08-30T19:20:28.2269997Z Progress (3): 3.1/8.4 MB | 473/661 kB | 441/497 kB
2024-08-30T19:20:28.2270394Z Progress (3): 3.1/8.4 MB | 473/661 kB | 457/497 kB
2024-08-30T19:20:28.2270700Z Progress (3): 3.1/8.4 MB | 473/661 kB | 457/497 kB
2024-08-30T19:20:28.2271815Z Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 16/345 kB
2024-08-30T19:20:28.2272555Z Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 33/345 kB
2024-08-30T19:20:28.2272934Z Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 49/345 kB
2024-08-30T19:20:28.2273324Z Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 66/345 kB
2024-08-30T19:20:28.2274193Z Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 82/345 kB
2024-08-30T19:20:28.2274586Z Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 98/345 kB
2024-08-30T19:20:28.2274983Z Progress (4): 3.1/8.4 MB | 489/661 kB | 457/497 kB | 98/345 kB
2024-08-30T19:20:28.2276034Z Progress (4): 3.1/8.4 MB | 489/661 kB | 457/497 kB | 115/345 kB
2024-08-30T19:20:28.2276427Z Progress (4): 3.1/8.4 MB | 506/661 kB | 457/497 kB | 115/345 kB
2024-08-30T19:20:28.2276822Z Progress (4): 3.1/8.4 MB | 506/661 kB | 457/497 kB | 131/345 kB
2024-08-30T19:20:28.2278121Z Progress (4): 3.1/8.4 MB | 522/661 kB | 457/497 kB | 131/345 kB
2024-08-30T19:20:28.2278520Z Progress (4): 3.1/8.4 MB | 522/661 kB | 457/497 kB | 147/345 kB
2024-08-30T19:20:28.2280064Z Progress (4): 3.1/8.4 MB | 538/661 kB | 457/497 kB | 147/345 kB
2024-08-30T19:20:28.2280485Z Progress (4): 3.1/8.4 MB | 538/661 kB | 457/497 kB | 164/345 kB
2024-08-30T19:20:28.2280884Z Progress (4): 3.1/8.4 MB | 555/661 kB | 457/497 kB | 164/345 kB
2024-08-30T19:20:28.2282102Z Progress (4): 3.1/8.4 MB | 555/661 kB | 457/497 kB | 180/345 kB
2024-08-30T19:20:28.2282506Z Progress (4): 3.1/8.4 MB | 571/661 kB | 457/497 kB | 180/345 kB
2024-08-30T19:20:28.2282909Z Progress (4): 3.1/8.4 MB | 571/661 kB | 457/497 kB | 197/345 kB
2024-08-30T19:20:28.2283357Z Progress (4): 3.1/8.4 MB | 588/661 kB | 457/497 kB | 197/345 kB
2024-08-30T19:20:28.2283722Z Progress (4): 3.1/8.4 MB | 588/661 kB | 457/497 kB | 213/345 kB
2024-08-30T19:20:28.2284093Z Progress (4): 3.1/8.4 MB | 604/661 kB | 457/497 kB | 213/345 kB
2024-08-30T19:20:28.2284564Z Progress (4): 3.1/8.4 MB | 604/661 kB | 457/497 kB | 229/345 kB
2024-08-30T19:20:28.2284917Z Progress (4): 3.1/8.4 MB | 620/661 kB | 457/497 kB | 229/345 kB
2024-08-30T19:20:28.2285353Z Progress (4): 3.1/8.4 MB | 620/661 kB | 457/497 kB | 246/345 kB
2024-08-30T19:20:28.2285688Z Progress (4): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 246/345 kB
2024-08-30T19:20:28.2286043Z Progress (4): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 262/345 kB
2024-08-30T19:20:28.2286853Z Progress (4): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB
2024-08-30T19:20:28.2287666Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 16/562 kB
2024-08-30T19:20:28.2288152Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 33/562 kB
2024-08-30T19:20:28.2290059Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 49/562 kB
2024-08-30T19:20:28.2290548Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 64/562 kB
2024-08-30T19:20:28.2291927Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 80/562 kB
2024-08-30T19:20:28.2292980Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 97/562 kB
2024-08-30T19:20:28.2293543Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 113/562 kB
2024-08-30T19:20:28.2294019Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 129/562 kB
2024-08-30T19:20:28.2295327Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 146/562 kB
2024-08-30T19:20:28.2295790Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 162/562 kB
2024-08-30T19:20:28.2296854Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 178/562 kB
2024-08-30T19:20:28.2297334Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 195/562 kB
2024-08-30T19:20:28.2297857Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 211/562 kB
2024-08-30T19:20:28.2299249Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 228/562 kB
2024-08-30T19:20:28.2299713Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 295/345 kB | 228/562 kB
2024-08-30T19:20:28.2300196Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 295/345 kB | 228/562 kB
2024-08-30T19:20:28.2300968Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 311/345 kB | 228/562 kB
2024-08-30T19:20:28.2301399Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 311/345 kB | 228/562 kB
2024-08-30T19:20:28.2301942Z Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 328/345 kB | 228/562 kB
2024-08-30T19:20:28.2302409Z Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 328/345 kB | 228/562 kB
2024-08-30T19:20:28.2302830Z Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 328/345 kB | 228/562 kB
2024-08-30T19:20:28.2303340Z Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 344/345 kB | 228/562 kB
2024-08-30T19:20:28.2303760Z Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB    
2024-08-30T19:20:28.2304166Z Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB
2024-08-30T19:20:28.2304683Z Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB
2024-08-30T19:20:28.2305152Z Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB
2024-08-30T19:20:28.2305596Z Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB
2024-08-30T19:20:28.2306013Z Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 244/562 kB
2024-08-30T19:20:28.2306392Z Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 244/562 kB
2024-08-30T19:20:28.2306895Z Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 244/562 kB
2024-08-30T19:20:28.2307286Z Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 244/562 kB
2024-08-30T19:20:28.2307673Z Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 260/562 kB
2024-08-30T19:20:28.2308127Z Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 260/562 kB
2024-08-30T19:20:28.2308375Z                                                                         
2024-08-30T19:20:28.2309965Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec/4.1.105.Final/netty-codec-4.1.105.Final.jar (345 kB at 568 kB/s)
2024-08-30T19:20:28.2311742Z #24 7.504 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-resolver/4.1.105.Final/netty-resolver-4.1.105.Final.jar
2024-08-30T19:20:28.2312211Z #24 7.504 Progress (4): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 260/562 kB
2024-08-30T19:20:28.2313315Z Progress (4): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 260/562 kB
2024-08-30T19:20:28.2314357Z Progress (4): 3.3/8.4 MB | 653/661 kB | 457/497 kB | 260/562 kB
2024-08-30T19:20:28.2314746Z Progress (4): 3.3/8.4 MB | 661 kB | 457/497 kB | 260/562 kB    
2024-08-30T19:20:28.2315135Z Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 260/562 kB
2024-08-30T19:20:28.2315530Z Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 277/562 kB
2024-08-30T19:20:28.2315867Z Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 277/562 kB
2024-08-30T19:20:28.2316279Z Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 293/562 kB
2024-08-30T19:20:28.2316598Z Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 293/562 kB
2024-08-30T19:20:28.2316901Z                                                            
2024-08-30T19:20:28.2318274Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-common/4.1.105.Final/netty-common-4.1.105.Final.jar (661 kB at 1.1 MB/s)
2024-08-30T19:20:28.2320068Z #24 7.504 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-unix-common/4.1.105.Final/netty-transport-native-unix-common-4.1.105.Final.jar
2024-08-30T19:20:28.2320482Z #24 7.504 Progress (3): 3.4/8.4 MB | 457/497 kB | 293/562 kB
2024-08-30T19:20:28.2320765Z Progress (3): 3.4/8.4 MB | 457/497 kB | 293/562 kB
2024-08-30T19:20:28.2321035Z Progress (3): 3.4/8.4 MB | 457/497 kB | 310/562 kB
2024-08-30T19:20:28.2321330Z Progress (3): 3.4/8.4 MB | 457/497 kB | 310/562 kB
2024-08-30T19:20:28.2321595Z Progress (3): 3.4/8.4 MB | 457/497 kB | 326/562 kB
2024-08-30T19:20:28.2321959Z Progress (3): 3.5/8.4 MB | 457/497 kB | 326/562 kB
2024-08-30T19:20:28.2322224Z Progress (3): 3.5/8.4 MB | 457/497 kB | 342/562 kB
2024-08-30T19:20:28.2322699Z Progress (3): 3.5/8.4 MB | 457/497 kB | 342/562 kB
2024-08-30T19:20:28.2322992Z Progress (3): 3.5/8.4 MB | 457/497 kB | 359/562 kB
2024-08-30T19:20:28.2323280Z Progress (3): 3.5/8.4 MB | 457/497 kB | 359/562 kB
2024-08-30T19:20:28.2323525Z Progress (3): 3.5/8.4 MB | 457/497 kB | 359/562 kB
2024-08-30T19:20:28.2323915Z Progress (3): 3.5/8.4 MB | 457/497 kB | 375/562 kB
2024-08-30T19:20:28.2324179Z Progress (3): 3.5/8.4 MB | 457/497 kB | 375/562 kB
2024-08-30T19:20:28.2324426Z Progress (3): 3.5/8.4 MB | 457/497 kB | 391/562 kB
2024-08-30T19:20:28.2324727Z Progress (3): 3.5/8.4 MB | 457/497 kB | 391/562 kB
2024-08-30T19:20:28.2324982Z Progress (3): 3.5/8.4 MB | 457/497 kB | 408/562 kB
2024-08-30T19:20:28.2325247Z Progress (3): 3.6/8.4 MB | 457/497 kB | 408/562 kB
2024-08-30T19:20:28.2325626Z Progress (3): 3.6/8.4 MB | 457/497 kB | 424/562 kB
2024-08-30T19:20:28.2325882Z Progress (3): 3.6/8.4 MB | 457/497 kB | 424/562 kB
2024-08-30T19:20:28.2326179Z Progress (3): 3.6/8.4 MB | 457/497 kB | 441/562 kB
2024-08-30T19:20:28.2326458Z Progress (3): 3.6/8.4 MB | 457/497 kB | 441/562 kB
2024-08-30T19:20:28.2326695Z Progress (3): 3.6/8.4 MB | 457/497 kB | 457/562 kB
2024-08-30T19:20:28.2327078Z Progress (3): 3.6/8.4 MB | 457/497 kB | 457/562 kB
2024-08-30T19:20:28.2327333Z Progress (3): 3.6/8.4 MB | 457/497 kB | 473/562 kB
2024-08-30T19:20:28.2327590Z Progress (3): 3.6/8.4 MB | 457/497 kB | 473/562 kB
2024-08-30T19:20:28.2327902Z Progress (3): 3.6/8.4 MB | 457/497 kB | 473/562 kB
2024-08-30T19:20:28.2328155Z Progress (3): 3.6/8.4 MB | 457/497 kB | 490/562 kB
2024-08-30T19:20:28.2328423Z Progress (3): 3.7/8.4 MB | 457/497 kB | 490/562 kB
2024-08-30T19:20:28.2328774Z Progress (3): 3.7/8.4 MB | 457/497 kB | 506/562 kB
2024-08-30T19:20:28.2329022Z Progress (3): 3.7/8.4 MB | 457/497 kB | 506/562 kB
2024-08-30T19:20:28.2329275Z Progress (3): 3.7/8.4 MB | 457/497 kB | 523/562 kB
2024-08-30T19:20:28.2329588Z Progress (3): 3.7/8.4 MB | 457/497 kB | 523/562 kB
2024-08-30T19:20:28.2329847Z Progress (3): 3.7/8.4 MB | 457/497 kB | 539/562 kB
2024-08-30T19:20:28.2330188Z Progress (3): 3.7/8.4 MB | 457/497 kB | 539/562 kB
2024-08-30T19:20:28.2330572Z Progress (3): 3.7/8.4 MB | 457/497 kB | 555/562 kB
2024-08-30T19:20:28.2330838Z Progress (3): 3.7/8.4 MB | 457/497 kB | 555/562 kB
2024-08-30T19:20:28.2331323Z Progress (3): 3.7/8.4 MB | 457/497 kB | 562 kB    
2024-08-30T19:20:28.2331824Z Progress (3): 3.7/8.4 MB | 457/497 kB | 562 kB
2024-08-30T19:20:28.2332097Z Progress (3): 3.7/8.4 MB | 457/497 kB | 562 kB
2024-08-30T19:20:28.2332380Z Progress (3): 3.8/8.4 MB | 457/497 kB | 562 kB
2024-08-30T19:20:28.2332656Z                                               
2024-08-30T19:20:28.2334061Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler/4.1.105.Final/netty-handler-4.1.105.Final.jar (562 kB at 916 kB/s)
2024-08-30T19:20:28.2335479Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler-proxy/4.1.105.Final/netty-handler-proxy-4.1.105.Final.jar
2024-08-30T19:20:28.2335849Z #24 7.512 Progress (3): 3.8/8.4 MB | 457/497 kB | 16/38 kB
2024-08-30T19:20:28.2336145Z Progress (3): 3.8/8.4 MB | 457/497 kB | 33/38 kB
2024-08-30T19:20:28.2336398Z Progress (3): 3.8/8.4 MB | 457/497 kB | 38 kB   
2024-08-30T19:20:28.2336660Z                                              
2024-08-30T19:20:28.2338079Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-resolver/4.1.105.Final/netty-resolver-4.1.105.Final.jar (38 kB at 62 kB/s)
2024-08-30T19:20:28.2339381Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-socks/4.1.105.Final/netty-codec-socks-4.1.105.Final.jar
2024-08-30T19:20:28.2339726Z #24 7.512 Progress (3): 3.8/8.4 MB | 457/497 kB | 16/44 kB
2024-08-30T19:20:28.2340025Z Progress (3): 3.8/8.4 MB | 457/497 kB | 33/44 kB
2024-08-30T19:20:28.2340276Z Progress (3): 3.8/8.4 MB | 457/497 kB | 44 kB   
2024-08-30T19:20:28.2340552Z                                              
2024-08-30T19:20:28.2342714Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-unix-common/4.1.105.Final/netty-transport-native-unix-common-4.1.105.Final.jar (44 kB at 72 kB/s)
2024-08-30T19:20:28.2344410Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-epoll/4.1.105.Final/netty-transport-native-epoll-4.1.105.Final-linux-x86_64.jar
2024-08-30T19:20:28.2344721Z #24 7.512 Progress (2): 3.8/8.4 MB | 457/497 kB
2024-08-30T19:20:28.2344946Z Progress (2): 3.8/8.4 MB | 457/497 kB
2024-08-30T19:20:28.2345168Z Progress (2): 3.8/8.4 MB | 457/497 kB
2024-08-30T19:20:28.2345491Z Progress (2): 3.8/8.4 MB | 474/497 kB
2024-08-30T19:20:28.2345703Z Progress (2): 3.8/8.4 MB | 490/497 kB
2024-08-30T19:20:28.2345917Z Progress (2): 3.8/8.4 MB | 490/497 kB
2024-08-30T19:20:28.2346157Z Progress (2): 3.8/8.4 MB | 497 kB    
2024-08-30T19:20:28.2346354Z Progress (2): 3.8/8.4 MB | 497 kB
2024-08-30T19:20:28.2346567Z Progress (2): 3.9/8.4 MB | 497 kB
2024-08-30T19:20:28.2346930Z Progress (3): 3.9/8.4 MB | 497 kB | 16/26 kB
2024-08-30T19:20:28.2347169Z Progress (3): 3.9/8.4 MB | 497 kB | 16/26 kB
2024-08-30T19:20:28.2347454Z Progress (3): 3.9/8.4 MB | 497 kB | 26 kB   
2024-08-30T19:20:28.2347646Z                                          
2024-08-30T19:20:28.2349021Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport/4.1.105.Final/netty-transport-4.1.105.Final.jar (497 kB at 809 kB/s)
2024-08-30T19:20:28.2350679Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-epoll/4.1.105.Final/netty-transport-classes-epoll-4.1.105.Final.jar
2024-08-30T19:20:28.2350923Z #24 7.512 Progress (2): 3.9/8.4 MB | 26 kB
2024-08-30T19:20:28.2351143Z Progress (2): 3.9/8.4 MB | 26 kB
2024-08-30T19:20:28.2351359Z                                 
2024-08-30T19:20:28.2352815Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler-proxy/4.1.105.Final/netty-handler-proxy-4.1.105.Final.jar (26 kB at 42 kB/s)
2024-08-30T19:20:28.2354517Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-kqueue/4.1.105.Final/netty-transport-native-kqueue-4.1.105.Final-osx-x86_64.jar
2024-08-30T19:20:28.2354798Z #24 7.512 Progress (1): 3.9/8.4 MB
2024-08-30T19:20:28.2355006Z Progress (1): 3.9/8.4 MB
2024-08-30T19:20:28.2355436Z Progress (1): 4.0/8.4 MB
2024-08-30T19:20:28.2355639Z Progress (1): 4.0/8.4 MB
2024-08-30T19:20:28.2355844Z Progress (1): 4.0/8.4 MB
2024-08-30T19:20:28.2356092Z Progress (1): 4.0/8.4 MB
2024-08-30T19:20:28.2356318Z Progress (1): 4.0/8.4 MB
2024-08-30T19:20:28.2356514Z Progress (1): 4.0/8.4 MB
2024-08-30T19:20:28.2356767Z Progress (1): 4.1/8.4 MB
2024-08-30T19:20:28.2356951Z Progress (1): 4.1/8.4 MB
2024-08-30T19:20:28.2357132Z Progress (1): 4.1/8.4 MB
2024-08-30T19:20:28.2357392Z Progress (1): 4.1/8.4 MB
2024-08-30T19:20:28.2357635Z Progress (1): 4.1/8.4 MB
2024-08-30T19:20:28.2357832Z Progress (2): 4.1/8.4 MB | 16/121 kB
2024-08-30T19:20:28.2358086Z Progress (2): 4.1/8.4 MB | 16/121 kB
2024-08-30T19:20:28.2358297Z Progress (2): 4.2/8.4 MB | 16/121 kB
2024-08-30T19:20:28.2358513Z Progress (2): 4.2/8.4 MB | 16/121 kB
2024-08-30T19:20:28.2358757Z Progress (2): 4.2/8.4 MB | 16/121 kB
2024-08-30T19:20:28.2359104Z Progress (3): 4.2/8.4 MB | 16/121 kB | 16/40 kB
2024-08-30T19:20:28.2359399Z Progress (3): 4.2/8.4 MB | 16/121 kB | 16/40 kB
2024-08-30T19:20:28.2359651Z Progress (3): 4.2/8.4 MB | 16/121 kB | 33/40 kB
2024-08-30T19:20:28.2359900Z Progress (3): 4.2/8.4 MB | 16/121 kB | 40 kB   
2024-08-30T19:20:28.2360195Z Progress (3): 4.2/8.4 MB | 16/121 kB | 40 kB
2024-08-30T19:20:28.2360438Z Progress (3): 4.2/8.4 MB | 16/121 kB | 40 kB
2024-08-30T19:20:28.2360707Z                                             
2024-08-30T19:20:28.2362520Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-epoll/4.1.105.Final/netty-transport-native-epoll-4.1.105.Final-linux-x86_64.jar (40 kB at 65 kB/s)
2024-08-30T19:20:28.2364311Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-kqueue/4.1.105.Final/netty-transport-classes-kqueue-4.1.105.Final.jar
2024-08-30T19:20:28.2364637Z #24 7.512 Progress (3): 4.2/8.4 MB | 16/121 kB | 16/25 kB
2024-08-30T19:20:28.2364932Z Progress (3): 4.2/8.4 MB | 16/121 kB | 25 kB   
2024-08-30T19:20:28.2365361Z Progress (4): 4.2/8.4 MB | 16/121 kB | 25 kB | 15/147 kB
2024-08-30T19:20:28.2365684Z                                                         
2024-08-30T19:20:28.2367461Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-kqueue/4.1.105.Final/netty-transport-native-kqueue-4.1.105.Final-osx-x86_64.jar (25 kB at 41 kB/s)
2024-08-30T19:20:28.2368613Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/2.0.11/jcl-over-slf4j-2.0.11.jar
2024-08-30T19:20:28.2368965Z #24 7.512 Progress (3): 4.2/8.4 MB | 16/121 kB | 31/147 kB
2024-08-30T19:20:28.2369254Z Progress (3): 4.2/8.4 MB | 16/121 kB | 48/147 kB
2024-08-30T19:20:28.2369504Z Progress (3): 4.2/8.4 MB | 16/121 kB | 64/147 kB
2024-08-30T19:20:28.2369860Z Progress (3): 4.2/8.4 MB | 16/121 kB | 80/147 kB
2024-08-30T19:20:28.2370149Z Progress (3): 4.2/8.4 MB | 16/121 kB | 97/147 kB
2024-08-30T19:20:28.2370437Z Progress (3): 4.2/8.4 MB | 16/121 kB | 113/147 kB
2024-08-30T19:20:28.2370710Z Progress (3): 4.2/8.4 MB | 16/121 kB | 130/147 kB
2024-08-30T19:20:28.2371149Z Progress (3): 4.2/8.4 MB | 16/121 kB | 146/147 kB
2024-08-30T19:20:28.2371504Z Progress (3): 4.2/8.4 MB | 16/121 kB | 147 kB    
2024-08-30T19:20:28.2371784Z Progress (3): 4.2/8.4 MB | 32/121 kB | 147 kB
2024-08-30T19:20:28.2372011Z                                              
2024-08-30T19:20:28.2373728Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-epoll/4.1.105.Final/netty-transport-classes-epoll-4.1.105.Final.jar (147 kB at 239 kB/s)
2024-08-30T19:20:28.2375462Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-httpclient5/3.3.4/docker-java-transport-httpclient5-3.3.4.jar
2024-08-30T19:20:28.2375750Z #24 7.512 Progress (2): 4.3/8.4 MB | 32/121 kB
2024-08-30T19:20:28.2376071Z Progress (2): 4.3/8.4 MB | 32/121 kB
2024-08-30T19:20:28.2376304Z Progress (2): 4.3/8.4 MB | 32/121 kB
2024-08-30T19:20:28.2376763Z Progress (2): 4.3/8.4 MB | 32/121 kB
2024-08-30T19:20:28.2376969Z Progress (2): 4.3/8.4 MB | 32/121 kB
2024-08-30T19:20:28.2377185Z Progress (2): 4.3/8.4 MB | 32/121 kB
2024-08-30T19:20:28.2377504Z Progress (3): 4.3/8.4 MB | 32/121 kB | 16/18 kB
2024-08-30T19:20:28.2377841Z Progress (3): 4.3/8.4 MB | 32/121 kB | 18 kB   
2024-08-30T19:20:28.2378067Z                                             
2024-08-30T19:20:28.2379506Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/2.0.11/jcl-over-slf4j-2.0.11.jar (18 kB at 30 kB/s)
2024-08-30T19:20:28.2381000Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar
2024-08-30T19:20:28.2381315Z #24 7.512 Progress (2): 4.3/8.4 MB | 49/121 kB
2024-08-30T19:20:28.2381614Z Progress (2): 4.3/8.4 MB | 65/121 kB
2024-08-30T19:20:28.2381973Z Progress (2): 4.4/8.4 MB | 65/121 kB
2024-08-30T19:20:28.2382273Z Progress (2): 4.4/8.4 MB | 81/121 kB
2024-08-30T19:20:28.2382513Z Progress (2): 4.4/8.4 MB | 81/121 kB
2024-08-30T19:20:28.2382748Z Progress (2): 4.4/8.4 MB | 98/121 kB
2024-08-30T19:20:28.2383035Z Progress (2): 4.4/8.4 MB | 98/121 kB
2024-08-30T19:20:28.2383300Z Progress (2): 4.4/8.4 MB | 114/121 kB
2024-08-30T19:20:28.2383617Z Progress (2): 4.4/8.4 MB | 114/121 kB
2024-08-30T19:20:28.2383909Z Progress (2): 4.4/8.4 MB | 121 kB    
2024-08-30T19:20:28.2384149Z Progress (2): 4.4/8.4 MB | 121 kB
2024-08-30T19:20:28.2384384Z Progress (2): 4.4/8.4 MB | 121 kB
2024-08-30T19:20:28.2384704Z Progress (2): 4.5/8.4 MB | 121 kB
2024-08-30T19:20:28.2384902Z                                  
2024-08-30T19:20:28.2386955Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-socks/4.1.105.Final/netty-codec-socks-4.1.105.Final.jar (121 kB at 197 kB/s)
2024-08-30T19:20:28.2388154Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar
2024-08-30T19:20:28.2388449Z #24 7.512 Progress (2): 4.5/8.4 MB | 16/109 kB
2024-08-30T19:20:28.2388687Z Progress (2): 4.5/8.4 MB | 33/109 kB
2024-08-30T19:20:28.2388994Z Progress (2): 4.5/8.4 MB | 49/109 kB
2024-08-30T19:20:28.2389188Z Progress (2): 4.5/8.4 MB | 66/109 kB
2024-08-30T19:20:28.2389501Z Progress (2): 4.5/8.4 MB | 82/109 kB
2024-08-30T19:20:28.2389720Z Progress (2): 4.5/8.4 MB | 98/109 kB
2024-08-30T19:20:28.2389921Z Progress (2): 4.5/8.4 MB | 109 kB   
2024-08-30T19:20:28.2390225Z Progress (3): 4.5/8.4 MB | 109 kB | 16/38 kB
2024-08-30T19:20:28.2390483Z Progress (3): 4.5/8.4 MB | 109 kB | 33/38 kB
2024-08-30T19:20:28.2390722Z Progress (3): 4.5/8.4 MB | 109 kB | 38 kB   
2024-08-30T19:20:28.2546774Z                                          
2024-08-30T19:20:28.2548963Z Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-kqueue/4.1.105.Final/netty-transport-classes-kqueue-4.1.105.Final.jar (109 kB at 176 kB/s)
2024-08-30T19:20:28.2550773Z #24 7.512 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar (38 kB at 61 kB/s)
2024-08-30T19:20:28.2552079Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.jar
2024-08-30T19:20:28.2553372Z #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.jar
2024-08-30T19:20:28.2553607Z #24 7.512 Progress (2): 4.5/8.4 MB | 16/18 kB
2024-08-30T19:20:28.2553801Z Progress (2): 4.5/8.4 MB | 18 kB   
2024-08-30T19:20:28.2553992Z Progress (2): 4.5/8.4 MB | 18 kB
2024-08-30T19:20:28.2554153Z Progress (2): 4.5/8.4 MB | 18 kB
2024-08-30T19:20:28.2554300Z Progress (2): 4.5/8.4 MB | 18 kB
2024-08-30T19:20:28.2554447Z                                 
2024-08-30T19:20:28.2556606Z Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-httpclient5/3.3.4/docker-java-transport-httpclient5-3.3.4.jar (18 kB at 28 kB/s)
2024-08-30T19:20:28.2556808Z #24 7.512 Progress (1): 4.5/8.4 MB
2024-08-30T19:20:28.2556966Z                         
2024-08-30T19:20:28.2558227Z Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.jar
2024-08-30T19:20:28.2558411Z #24 7.512 Progress (1): 4.5/8.4 MB
2024-08-30T19:20:28.2558592Z Progress (1): 4.6/8.4 MB
2024-08-30T19:20:28.2558742Z Progress (1): 4.6/8.4 MB
2024-08-30T19:20:28.2558880Z Progress (1): 4.6/8.4 MB
2024-08-30T19:20:28.2559023Z Progress (1): 4.6/8.4 MB
2024-08-30T19:20:28.2559179Z Progress (1): 4.6/8.4 MB
2024-08-30T19:20:28.2559337Z Progress (1): 4.6/8.4 MB
2024-08-30T19:20:28.2559490Z Progress (1): 4.7/8.4 MB
2024-08-30T19:20:28.2559631Z Progress (1): 4.7/8.4 MB
2024-08-30T19:20:28.2559797Z Progress (2): 4.7/8.4 MB | 16/862 kB
2024-08-30T19:20:28.2559975Z Progress (2): 4.7/8.4 MB | 33/862 kB
2024-08-30T19:20:28.2560163Z Progress (2): 4.7/8.4 MB | 49/862 kB
2024-08-30T19:20:28.2560376Z Progress (3): 4.7/8.4 MB | 49/862 kB | 16/855 kB
2024-08-30T19:20:28.2560598Z Progress (3): 4.7/8.4 MB | 49/862 kB | 33/855 kB
2024-08-30T19:20:28.3102641Z Progress (4): 4.7/8.4 MB | 49/862 kB | 33/855 kB | 0/1.9 MB
2024-08-30T19:20:28.3103334Z Progress (4): 4.7/8.4 MB | 49/862 kB | 49/855 kB | 0/1.9 MB
2024-08-30T19:20:28.3103635Z Progress (4): 4.7/8.4 MB | 49/862 kB | 49/855 kB | 0/1.9 MB
2024-08-30T19:20:28.3103926Z Progress (4): 4.7/8.4 MB | 49/862 kB | 49/855 kB | 0/1.9 MB
2024-08-30T19:20:28.3104766Z Progress (4): 4.7/8.4 MB | 49/862 kB | 64/855 kB | 0/1.9 MB
2024-08-30T19:20:28.3105731Z Progress (4): 4.7/8.4 MB | 49/862 kB | 64/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3106051Z Progress (4): 4.7/8.4 MB | 49/862 kB | 64/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3106348Z Progress (4): 4.7/8.4 MB | 49/862 kB | 81/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3109758Z Progress (4): 4.7/8.4 MB | 49/862 kB | 81/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3110123Z Progress (4): 4.7/8.4 MB | 49/862 kB | 97/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3110421Z Progress (4): 4.7/8.4 MB | 49/862 kB | 97/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3110727Z Progress (4): 4.7/8.4 MB | 49/862 kB | 114/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3111018Z Progress (4): 4.7/8.4 MB | 49/862 kB | 114/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3111303Z Progress (4): 4.7/8.4 MB | 49/862 kB | 130/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3111595Z Progress (4): 4.7/8.4 MB | 49/862 kB | 146/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3111902Z Progress (4): 4.7/8.4 MB | 49/862 kB | 146/855 kB | 0.1/1.9 MB
2024-08-30T19:20:28.3112200Z Progress (4): 4.7/8.4 MB | 49/862 kB | 146/855 kB | 0.2/1.9 MB
2024-08-30T19:20:28.3112499Z Progress (4): 4.7/8.4 MB | 49/862 kB | 163/855 kB | 0.2/1.9 MB
2024-08-30T19:20:28.3112788Z Progress (4): 4.7/8.4 MB | 49/862 kB | 179/855 kB | 0.2/1.9 MB
2024-08-30T19:20:28.3113070Z Progress (4): 4.7/8.4 MB | 49/862 kB | 179/855 kB | 0.2/1.9 MB
2024-08-30T19:20:28.3113374Z Progress (4): 4.7/8.4 MB | 49/862 kB | 179/855 kB | 0.2/1.9 MB
2024-08-30T19:20:28.3113659Z Progress (4): 4.7/8.4 MB | 49/862 kB | 179/855 kB | 0.2/1.9 MB
2024-08-30T19:20:28.3113944Z Progress (4): 4.7/8.4 MB | 49/862 kB | 195/855 kB | 0.2/1.9 MB
2024-08-30T19:20:28.3114320Z Progress (5): 4.7/8.4 MB | 49/862 kB | 195/855 kB | 0.2/1.9 MB | 16/237 kB
2024-08-30T19:20:28.3114675Z Progress (5): 4.7/8.4 MB | 49/862 kB | 195/855 kB | 0.2/1.9 MB | 16/237 kB
2024-08-30T19:20:28.3115052Z Progress (5): 4.7/8.4 MB | 49/862 kB | 212/855 kB | 0.2/1.9 MB | 16/237 kB
2024-08-30T19:20:28.3115428Z Progress (5): 4.7/8.4 MB | 49/862 kB | 212/855 kB | 0.2/1.9 MB | 33/237 kB
2024-08-30T19:20:28.3115796Z Progress (5): 4.7/8.4 MB | 49/862 kB | 228/855 kB | 0.2/1.9 MB | 33/237 kB
2024-08-30T19:20:28.3116163Z Progress (5): 4.7/8.4 MB | 49/862 kB | 228/855 kB | 0.2/1.9 MB | 33/237 kB
2024-08-30T19:20:28.3116513Z Progress (5): 4.7/8.4 MB | 49/862 kB | 228/855 kB | 0.2/1.9 MB | 49/237 kB
2024-08-30T19:20:28.3117133Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.2/1.9 MB | 49/237 kB
2024-08-30T19:20:28.3117502Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 49/237 kB
2024-08-30T19:20:28.3117851Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 64/237 kB
2024-08-30T19:20:28.3118198Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 64/237 kB
2024-08-30T19:20:28.3118559Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 80/237 kB
2024-08-30T19:20:28.3118909Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 80/237 kB
2024-08-30T19:20:28.3119255Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 97/237 kB
2024-08-30T19:20:28.3119638Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 113/237 kB
2024-08-30T19:20:28.3120003Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 130/237 kB
2024-08-30T19:20:28.3120375Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 146/237 kB
2024-08-30T19:20:28.3120747Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 162/237 kB
2024-08-30T19:20:28.3121100Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 179/237 kB
2024-08-30T19:20:28.3121464Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 195/237 kB
2024-08-30T19:20:28.3121827Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 211/237 kB
2024-08-30T19:20:28.3122200Z Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 228/237 kB
2024-08-30T19:20:28.3122602Z Progress (5): 4.7/8.4 MB | 49/862 kB | 261/855 kB | 0.3/1.9 MB | 228/237 kB
2024-08-30T19:20:28.3123003Z Progress (5): 4.7/8.4 MB | 49/862 kB | 261/855 kB | 0.3/1.9 MB | 237 kB    
2024-08-30T19:20:28.3123670Z Progress (5): 4.7/8.4 MB | 49/862 kB | 277/855 kB | 0.3/1.9 MB | 237 kB
2024-08-30T19:20:28.3124059Z Progress (5): 4.7/8.4 MB | 49/862 kB | 294/855 kB | 0.3/1.9 MB | 237 kB
2024-08-30T19:20:28.3124288Z                                                                        
2024-08-30T19:20:28.3126046Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.jar (237 kB at 373 kB/s)
2024-08-30T19:20:28.3127124Z #24 7.533 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/2.0.11/slf4j-api-2.0.11.jar
2024-08-30T19:20:28.3127541Z #24 7.533 Progress (4): 4.7/8.4 MB | 64/862 kB | 294/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3127893Z Progress (4): 4.7/8.4 MB | 81/862 kB | 294/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3128226Z Progress (4): 4.7/8.4 MB | 97/862 kB | 294/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3128543Z Progress (4): 4.7/8.4 MB | 97/862 kB | 310/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3128906Z Progress (4): 4.7/8.4 MB | 113/862 kB | 310/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3129244Z Progress (4): 4.7/8.4 MB | 130/862 kB | 310/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3129590Z Progress (4): 4.7/8.4 MB | 146/862 kB | 310/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3129939Z Progress (4): 4.7/8.4 MB | 162/862 kB | 310/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3130272Z Progress (4): 4.7/8.4 MB | 179/862 kB | 310/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3130618Z Progress (4): 4.7/8.4 MB | 179/862 kB | 327/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3130954Z Progress (4): 4.7/8.4 MB | 195/862 kB | 327/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3133392Z Progress (4): 4.7/8.4 MB | 212/862 kB | 327/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3133732Z Progress (4): 4.7/8.4 MB | 228/862 kB | 327/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3134054Z Progress (4): 4.7/8.4 MB | 228/862 kB | 343/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3134374Z Progress (4): 4.7/8.4 MB | 244/862 kB | 343/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3134708Z Progress (4): 4.7/8.4 MB | 261/862 kB | 343/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3135018Z Progress (4): 4.7/8.4 MB | 277/862 kB | 343/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3135347Z Progress (4): 4.7/8.4 MB | 294/862 kB | 343/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3135976Z Progress (4): 4.7/8.4 MB | 294/862 kB | 359/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3136341Z Progress (4): 4.7/8.4 MB | 310/862 kB | 359/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3136685Z Progress (4): 4.7/8.4 MB | 326/862 kB | 359/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3137011Z Progress (4): 4.7/8.4 MB | 343/862 kB | 359/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3137340Z Progress (4): 4.7/8.4 MB | 343/862 kB | 376/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3137683Z Progress (4): 4.7/8.4 MB | 359/862 kB | 376/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3138001Z Progress (4): 4.7/8.4 MB | 375/862 kB | 376/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3138379Z Progress (5): 4.7/8.4 MB | 375/862 kB | 376/855 kB | 0.3/1.9 MB | 16/68 kB
2024-08-30T19:20:28.3138772Z Progress (5): 4.7/8.4 MB | 392/862 kB | 376/855 kB | 0.3/1.9 MB | 16/68 kB
2024-08-30T19:20:28.3139145Z Progress (5): 4.7/8.4 MB | 392/862 kB | 376/855 kB | 0.3/1.9 MB | 33/68 kB
2024-08-30T19:20:28.3139522Z Progress (5): 4.7/8.4 MB | 408/862 kB | 376/855 kB | 0.3/1.9 MB | 33/68 kB
2024-08-30T19:20:28.3139901Z Progress (5): 4.7/8.4 MB | 408/862 kB | 392/855 kB | 0.3/1.9 MB | 33/68 kB
2024-08-30T19:20:28.3140265Z Progress (5): 4.7/8.4 MB | 408/862 kB | 392/855 kB | 0.3/1.9 MB | 49/68 kB
2024-08-30T19:20:28.3140635Z Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 49/68 kB
2024-08-30T19:20:28.3141003Z Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 66/68 kB
2024-08-30T19:20:28.3141368Z Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 68 kB   
2024-08-30T19:20:28.3141726Z Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 68 kB
2024-08-30T19:20:28.3142086Z Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 68 kB
2024-08-30T19:20:28.3142736Z Progress (5): 4.7/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB | 68 kB
2024-08-30T19:20:28.3143101Z Progress (5): 4.7/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB | 68 kB
2024-08-30T19:20:28.3143450Z Progress (5): 4.7/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB | 68 kB
2024-08-30T19:20:28.3143677Z                                                                        
2024-08-30T19:20:28.3144880Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/2.0.11/slf4j-api-2.0.11.jar (68 kB at 107 kB/s)
2024-08-30T19:20:28.3145281Z #24 7.533 Progress (4): 4.7/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3145505Z                                                                
2024-08-30T19:20:28.3146736Z Downloading from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar
2024-08-30T19:20:28.3147140Z #24 7.533 Progress (4): 4.8/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3147959Z Progress (4): 4.8/8.4 MB | 425/862 kB | 425/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3148277Z Progress (4): 4.8/8.4 MB | 425/862 kB | 425/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3148582Z Progress (4): 4.8/8.4 MB | 425/862 kB | 441/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3149246Z Progress (4): 4.8/8.4 MB | 425/862 kB | 441/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3149588Z Progress (4): 4.8/8.4 MB | 425/862 kB | 458/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3149914Z Progress (4): 4.8/8.4 MB | 425/862 kB | 458/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3150221Z Progress (4): 4.8/8.4 MB | 425/862 kB | 458/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3150525Z Progress (4): 4.8/8.4 MB | 425/862 kB | 474/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3150844Z Progress (4): 4.8/8.4 MB | 425/862 kB | 474/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3151149Z Progress (4): 4.8/8.4 MB | 441/862 kB | 474/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3151449Z Progress (4): 4.8/8.4 MB | 441/862 kB | 490/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3151772Z Progress (4): 4.8/8.4 MB | 441/862 kB | 490/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3152077Z Progress (4): 4.8/8.4 MB | 441/862 kB | 507/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3152399Z Progress (4): 4.8/8.4 MB | 457/862 kB | 507/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3152943Z Progress (4): 4.8/8.4 MB | 474/862 kB | 507/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3153269Z Progress (4): 4.8/8.4 MB | 474/862 kB | 523/855 kB | 0.3/1.9 MB
2024-08-30T19:20:28.3153591Z Progress (4): 4.8/8.4 MB | 474/862 kB | 523/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3153896Z Progress (4): 4.8/8.4 MB | 474/862 kB | 540/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3154203Z Progress (4): 4.8/8.4 MB | 474/862 kB | 540/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3154517Z Progress (4): 4.8/8.4 MB | 474/862 kB | 556/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3154824Z Progress (4): 4.8/8.4 MB | 474/862 kB | 556/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3155130Z Progress (4): 4.8/8.4 MB | 474/862 kB | 556/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3155460Z Progress (4): 4.8/8.4 MB | 474/862 kB | 556/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3155762Z Progress (4): 4.8/8.4 MB | 474/862 kB | 572/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3156074Z Progress (4): 4.9/8.4 MB | 474/862 kB | 572/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3156388Z Progress (4): 4.9/8.4 MB | 474/862 kB | 572/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3156682Z Progress (4): 4.9/8.4 MB | 474/862 kB | 572/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3156989Z Progress (4): 4.9/8.4 MB | 474/862 kB | 589/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3157288Z Progress (4): 4.9/8.4 MB | 474/862 kB | 589/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3157582Z Progress (4): 4.9/8.4 MB | 474/862 kB | 589/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3157904Z Progress (4): 4.9/8.4 MB | 474/862 kB | 605/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3158209Z Progress (4): 4.9/8.4 MB | 474/862 kB | 605/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3158508Z Progress (4): 4.9/8.4 MB | 474/862 kB | 605/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3159082Z Progress (4): 4.9/8.4 MB | 474/862 kB | 621/855 kB | 0.4/1.9 MB
2024-08-30T19:20:28.3159411Z Progress (4): 4.9/8.4 MB | 474/862 kB | 621/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3159724Z Progress (4): 4.9/8.4 MB | 474/862 kB | 621/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3160031Z Progress (4): 4.9/8.4 MB | 474/862 kB | 638/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3160329Z Progress (4): 4.9/8.4 MB | 474/862 kB | 638/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3160636Z Progress (4): 4.9/8.4 MB | 474/862 kB | 638/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3160927Z Progress (4): 4.9/8.4 MB | 474/862 kB | 654/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3161227Z Progress (4): 5.0/8.4 MB | 474/862 kB | 654/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3161547Z Progress (4): 5.0/8.4 MB | 474/862 kB | 671/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3161854Z Progress (4): 5.0/8.4 MB | 474/862 kB | 671/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3162165Z Progress (4): 5.0/8.4 MB | 474/862 kB | 671/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3162484Z Progress (4): 5.0/8.4 MB | 474/862 kB | 687/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3162782Z Progress (4): 5.0/8.4 MB | 474/862 kB | 687/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3163105Z Progress (4): 5.0/8.4 MB | 474/862 kB | 687/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3163427Z Progress (4): 5.0/8.4 MB | 474/862 kB | 703/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3163730Z Progress (4): 5.0/8.4 MB | 474/862 kB | 703/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3164033Z Progress (4): 5.0/8.4 MB | 474/862 kB | 703/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3164330Z Progress (4): 5.0/8.4 MB | 474/862 kB | 720/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3164623Z Progress (4): 5.0/8.4 MB | 474/862 kB | 720/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3164927Z Progress (4): 5.0/8.4 MB | 474/862 kB | 720/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3165212Z Progress (4): 5.0/8.4 MB | 474/862 kB | 736/855 kB | 0.5/1.9 MB
2024-08-30T19:20:28.3165490Z Progress (4): 5.0/8.4 MB | 474/862 kB | 736/855 kB | 0.6/1.9 MB
2024-08-30T19:20:28.3165779Z Progress (4): 5.0/8.4 MB | 474/862 kB | 736/855 kB | 0.6/1.9 MB
2024-08-30T19:20:28.3166068Z Progress (4): 5.0/8.4 MB | 474/862 kB | 753/855 kB | 0.6/1.9 MB
2024-08-30T19:20:28.3166358Z Progress (4): 5.0/8.4 MB | 474/862 kB | 753/855 kB | 0.6/1.9 MB
2024-08-30T19:20:28.3166909Z Progress (4): 5.1/8.4 MB | 474/862 kB | 753/855 kB | 0.6/1.9 MB
2024-08-30T19:20:28.3167240Z Progress (4): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB
2024-08-30T19:20:28.3167641Z Progress (5): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB | 16/126 kB
2024-08-30T19:20:28.3168025Z Progress (5): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB | 16/126 kB
2024-08-30T19:20:28.3168408Z Progress (5): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB | 16/126 kB
2024-08-30T19:20:28.3168789Z Progress (5): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB | 33/126 kB
2024-08-30T19:20:28.3169156Z Progress (5): 5.1/8.4 MB | 474/862 kB | 785/855 kB | 0.6/1.9 MB | 33/126 kB
2024-08-30T19:20:28.3169511Z Progress (5): 5.1/8.4 MB | 474/862 kB | 785/855 kB | 0.6/1.9 MB | 33/126 kB
2024-08-30T19:20:28.3169879Z Progress (5): 5.1/8.4 MB | 474/862 kB | 785/855 kB | 0.6/1.9 MB | 33/126 kB
2024-08-30T19:20:28.3170241Z Progress (5): 5.1/8.4 MB | 474/862 kB | 785/855 kB | 0.6/1.9 MB | 49/126 kB
2024-08-30T19:20:28.3170637Z Progress (5): 5.1/8.4 MB | 474/862 kB | 802/855 kB | 0.6/1.9 MB | 49/126 kB
2024-08-30T19:20:28.3171217Z Progress (5): 5.1/8.4 MB | 474/862 kB | 802/855 kB | 0.6/1.9 MB | 49/126 kB
2024-08-30T19:20:28.3171596Z Progress (5): 5.1/8.4 MB | 474/862 kB | 802/855 kB | 0.6/1.9 MB | 66/126 kB
2024-08-30T19:20:28.3171987Z Progress (5): 5.1/8.4 MB | 474/862 kB | 818/855 kB | 0.6/1.9 MB | 66/126 kB
2024-08-30T19:20:28.3172369Z Progress (5): 5.1/8.4 MB | 474/862 kB | 818/855 kB | 0.6/1.9 MB | 66/126 kB
2024-08-30T19:20:28.3172742Z Progress (5): 5.1/8.4 MB | 474/862 kB | 818/855 kB | 0.6/1.9 MB | 66/126 kB
2024-08-30T19:20:28.3173139Z Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 66/126 kB
2024-08-30T19:20:28.3173828Z Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 82/126 kB
2024-08-30T19:20:28.3174231Z Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 82/126 kB
2024-08-30T19:20:28.3174605Z Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 82/126 kB
2024-08-30T19:20:28.3174985Z Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 98/126 kB
2024-08-30T19:20:28.3175368Z Progress (5): 5.1/8.4 MB | 474/862 kB | 851/855 kB | 0.6/1.9 MB | 98/126 kB
2024-08-30T19:20:28.3175758Z Progress (5): 5.1/8.4 MB | 474/862 kB | 855 kB | 0.6/1.9 MB | 98/126 kB    
2024-08-30T19:20:28.3176108Z Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.6/1.9 MB | 98/126 kB
2024-08-30T19:20:28.3176492Z Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.6/1.9 MB | 115/126 kB
2024-08-30T19:20:28.3176850Z Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 115/126 kB
2024-08-30T19:20:28.3177200Z Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB    
2024-08-30T19:20:28.3177558Z Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
2024-08-30T19:20:28.3177899Z Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
2024-08-30T19:20:28.3178250Z Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
2024-08-30T19:20:28.3178593Z Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
2024-08-30T19:20:28.3178930Z Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
2024-08-30T19:20:28.3179155Z                                                                     
2024-08-30T19:20:28.3180676Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.jar (855 kB at 1.3 MB/s)
2024-08-30T19:20:28.3181864Z #24 7.545 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client/6.10.0/kubernetes-client-6.10.0.jar
2024-08-30T19:20:28.3182242Z #24 7.545 Progress (4): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB | 126 kB
2024-08-30T19:20:28.3182456Z                                                            
2024-08-30T19:20:28.3183606Z Downloaded from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar (126 kB at 194 kB/s)
2024-08-30T19:20:28.3185109Z #24 7.545 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-api/6.10.0/kubernetes-client-api-6.10.0.jar
2024-08-30T19:20:28.3185436Z #24 7.545 Progress (3): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB
2024-08-30T19:20:28.3185688Z Progress (3): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB
2024-08-30T19:20:28.3185919Z Progress (3): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB
2024-08-30T19:20:28.3186138Z Progress (3): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB
2024-08-30T19:20:28.3186366Z Progress (3): 5.3/8.4 MB | 474/862 kB | 0.7/1.9 MB
2024-08-30T19:20:28.3186584Z Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3186805Z Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3187039Z Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3187256Z Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3187487Z Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3187711Z Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3187941Z Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3188166Z Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3188388Z Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3188614Z Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3188846Z Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3189070Z Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3189288Z Progress (3): 5.4/8.4 MB | 490/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3189518Z Progress (3): 5.4/8.4 MB | 507/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3189738Z Progress (3): 5.4/8.4 MB | 523/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3190186Z Progress (3): 5.4/8.4 MB | 539/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3190421Z Progress (3): 5.4/8.4 MB | 556/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3190649Z Progress (3): 5.4/8.4 MB | 572/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3190888Z Progress (3): 5.4/8.4 MB | 588/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3191119Z Progress (3): 5.4/8.4 MB | 605/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3191345Z Progress (3): 5.4/8.4 MB | 621/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3191572Z Progress (3): 5.4/8.4 MB | 638/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3191783Z Progress (3): 5.4/8.4 MB | 654/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3192003Z Progress (3): 5.4/8.4 MB | 670/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3192223Z Progress (3): 5.4/8.4 MB | 687/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3192443Z Progress (3): 5.4/8.4 MB | 703/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3192660Z Progress (3): 5.4/8.4 MB | 720/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3192881Z Progress (3): 5.4/8.4 MB | 736/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3193101Z Progress (3): 5.4/8.4 MB | 752/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3193326Z Progress (3): 5.4/8.4 MB | 769/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3193550Z Progress (3): 5.4/8.4 MB | 785/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3193761Z Progress (3): 5.4/8.4 MB | 801/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3193984Z Progress (3): 5.4/8.4 MB | 818/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3194197Z Progress (3): 5.4/8.4 MB | 834/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3194408Z Progress (3): 5.4/8.4 MB | 851/862 kB | 0.8/1.9 MB
2024-08-30T19:20:28.3194634Z Progress (3): 5.4/8.4 MB | 862 kB | 0.8/1.9 MB    
2024-08-30T19:20:28.3194913Z Progress (4): 5.4/8.4 MB | 862 kB | 0.8/1.9 MB | 16/479 kB
2024-08-30T19:20:28.3195185Z Progress (4): 5.4/8.4 MB | 862 kB | 0.8/1.9 MB | 33/479 kB
2024-08-30T19:20:28.3195382Z                                                           
2024-08-30T19:20:28.3196818Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.jar (862 kB at 1.3 MB/s)
2024-08-30T19:20:28.3197126Z #24 7.548 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 49/479 kB
2024-08-30T19:20:28.3197358Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 66/479 kB
2024-08-30T19:20:28.3197570Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 82/479 kB
2024-08-30T19:20:28.3197960Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 98/479 kB
2024-08-30T19:20:28.3198185Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 115/479 kB
2024-08-30T19:20:28.3198399Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 131/479 kB
2024-08-30T19:20:28.3198625Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 147/479 kB
2024-08-30T19:20:28.3198846Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 164/479 kB
2024-08-30T19:20:28.3199065Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 180/479 kB
2024-08-30T19:20:28.3199281Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 197/479 kB
2024-08-30T19:20:28.3199494Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 213/479 kB
2024-08-30T19:20:28.3199728Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 229/479 kB
2024-08-30T19:20:28.3199959Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 246/479 kB
2024-08-30T19:20:28.3200178Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 262/479 kB
2024-08-30T19:20:28.3200397Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 279/479 kB
2024-08-30T19:20:28.3200621Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 295/479 kB
2024-08-30T19:20:28.3200852Z Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB
2024-08-30T19:20:28.3201168Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 16/402 kB
2024-08-30T19:20:28.3201478Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 33/402 kB
2024-08-30T19:20:28.3201773Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 33/402 kB
2024-08-30T19:20:28.3202089Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 49/402 kB
2024-08-30T19:20:28.3202389Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 49/402 kB
2024-08-30T19:20:28.3202671Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 65/402 kB
2024-08-30T19:20:28.3203167Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 65/402 kB
2024-08-30T19:20:28.3203423Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 82/402 kB
2024-08-30T19:20:28.3203671Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 82/402 kB
2024-08-30T19:20:28.3203942Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 82/402 kB
2024-08-30T19:20:28.3204230Z Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 98/402 kB
2024-08-30T19:20:28.3204510Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 98/402 kB
2024-08-30T19:20:28.3204809Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 115/402 kB
2024-08-30T19:20:28.3205099Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 115/402 kB
2024-08-30T19:20:28.3205414Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 131/402 kB
2024-08-30T19:20:28.3205709Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 147/402 kB
2024-08-30T19:20:28.3206009Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 147/402 kB
2024-08-30T19:20:28.3206327Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 164/402 kB
2024-08-30T19:20:28.3206620Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 164/402 kB
2024-08-30T19:20:28.3206917Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 180/402 kB
2024-08-30T19:20:28.3207219Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 180/402 kB
2024-08-30T19:20:28.3207531Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 197/402 kB
2024-08-30T19:20:28.3207827Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 197/402 kB
2024-08-30T19:20:28.3208148Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 213/402 kB
2024-08-30T19:20:28.3208470Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 213/402 kB
2024-08-30T19:20:28.3208804Z Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 229/402 kB
2024-08-30T19:20:28.3209132Z Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 311/479 kB | 229/402 kB
2024-08-30T19:20:28.3209460Z Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 311/479 kB | 246/402 kB
2024-08-30T19:20:28.3209802Z Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 311/479 kB | 246/402 kB
2024-08-30T19:20:28.3210130Z Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 311/479 kB | 262/402 kB
2024-08-30T19:20:28.3210450Z Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 328/479 kB | 262/402 kB
2024-08-30T19:20:28.3210668Z                                                                
2024-08-30T19:20:28.3254553Z Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-core/6.10.0/kubernetes-model-core-6.10.0.jar
2024-08-30T19:20:28.3255033Z #24 7.557 Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 344/479 kB | 262/402 kB
2024-08-30T19:20:28.3255376Z Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 360/479 kB | 262/402 kB
2024-08-30T19:20:28.3255678Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 360/479 kB | 262/402 kB
2024-08-30T19:20:28.3255979Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 377/479 kB | 262/402 kB
2024-08-30T19:20:28.3256272Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 393/479 kB | 262/402 kB
2024-08-30T19:20:28.3256568Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 393/479 kB | 262/402 kB
2024-08-30T19:20:28.3256877Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 393/479 kB | 262/402 kB
2024-08-30T19:20:28.3257183Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 410/479 kB | 262/402 kB
2024-08-30T19:20:28.3257487Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 410/479 kB | 262/402 kB
2024-08-30T19:20:28.3257805Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 426/479 kB | 262/402 kB
2024-08-30T19:20:28.3258124Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 442/479 kB | 262/402 kB
2024-08-30T19:20:28.3258440Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 442/479 kB | 262/402 kB
2024-08-30T19:20:28.3258770Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 459/479 kB | 262/402 kB
2024-08-30T19:20:28.3259089Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 459/479 kB | 262/402 kB
2024-08-30T19:20:28.3259412Z Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 459/479 kB | 262/402 kB
2024-08-30T19:20:28.3259731Z Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 459/479 kB | 262/402 kB
2024-08-30T19:20:28.3260051Z Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 475/479 kB | 262/402 kB
2024-08-30T19:20:28.3260762Z Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB    
2024-08-30T19:20:28.3261081Z Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
2024-08-30T19:20:28.3261395Z Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
2024-08-30T19:20:28.3261721Z Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
2024-08-30T19:20:28.3262027Z Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
2024-08-30T19:20:28.3262331Z Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
2024-08-30T19:20:28.3262647Z Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
2024-08-30T19:20:28.3262953Z Progress (4): 5.6/8.4 MB | 1.1/1.9 MB | 479 kB | 262/402 kB
2024-08-30T19:20:28.3263233Z Progress (4): 5.6/8.4 MB | 1.1/1.9 MB | 479 kB | 262/402 kB
2024-08-30T19:20:28.3263417Z                                                            
2024-08-30T19:20:28.3264846Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-api/6.10.0/kubernetes-client-api-6.10.0.jar (479 kB at 726 kB/s)
2024-08-30T19:20:28.3266122Z #24 7.557 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-common/6.10.0/kubernetes-model-common-6.10.0.jar
2024-08-30T19:20:28.3266411Z #24 7.557 Progress (3): 5.6/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3266640Z Progress (3): 5.6/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3266875Z Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3267096Z Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3267319Z Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3267538Z Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3267755Z Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3267978Z Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3268195Z Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3268423Z Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3268655Z Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3268876Z Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 262/402 kB
2024-08-30T19:20:28.3269093Z Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 278/402 kB
2024-08-30T19:20:28.3269320Z Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 278/402 kB
2024-08-30T19:20:28.3269777Z Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 278/402 kB
2024-08-30T19:20:28.3270031Z Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 295/402 kB
2024-08-30T19:20:28.3270270Z Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 295/402 kB
2024-08-30T19:20:28.3270510Z Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 295/402 kB
2024-08-30T19:20:28.3270747Z Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 311/402 kB
2024-08-30T19:20:28.3270995Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 311/402 kB
2024-08-30T19:20:28.3271229Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 311/402 kB
2024-08-30T19:20:28.3271472Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 328/402 kB
2024-08-30T19:20:28.3271712Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 328/402 kB
2024-08-30T19:20:28.3271942Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 344/402 kB
2024-08-30T19:20:28.3272186Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 344/402 kB
2024-08-30T19:20:28.3272421Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 344/402 kB
2024-08-30T19:20:28.3272668Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 360/402 kB
2024-08-30T19:20:28.3272909Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 360/402 kB
2024-08-30T19:20:28.3273134Z Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 360/402 kB
2024-08-30T19:20:28.3273364Z Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 360/402 kB
2024-08-30T19:20:28.3273607Z Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 377/402 kB
2024-08-30T19:20:28.3273836Z Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 377/402 kB
2024-08-30T19:20:28.3274069Z Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 393/402 kB
2024-08-30T19:20:28.3274315Z Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB    
2024-08-30T19:20:28.3274543Z Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB
2024-08-30T19:20:28.3275003Z Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB
2024-08-30T19:20:28.3275303Z Progress (4): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB | 0/3.6 MB
2024-08-30T19:20:28.3275589Z Progress (4): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB | 0/3.6 MB
2024-08-30T19:20:28.3275795Z                                                          
2024-08-30T19:20:28.3277143Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client/6.10.0/kubernetes-client-6.10.0.jar (402 kB at 593 kB/s)
2024-08-30T19:20:28.3278588Z #24 7.577 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-gatewayapi/6.10.0/kubernetes-model-gatewayapi-6.10.0.jar
2024-08-30T19:20:28.3278913Z #24 7.577 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 0/3.6 MB
2024-08-30T19:20:28.3279160Z Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 0/3.6 MB
2024-08-30T19:20:28.3279469Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0/3.6 MB
2024-08-30T19:20:28.3279707Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0/3.6 MB
2024-08-30T19:20:28.3279950Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0/3.6 MB
2024-08-30T19:20:28.3280199Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
2024-08-30T19:20:28.3280438Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
2024-08-30T19:20:28.3280673Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
2024-08-30T19:20:28.3280927Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
2024-08-30T19:20:28.3281166Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
2024-08-30T19:20:28.3281399Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
2024-08-30T19:20:28.3281646Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
2024-08-30T19:20:28.3281883Z Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
2024-08-30T19:20:28.3282213Z Progress (4): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB | 9.6/56 kB
2024-08-30T19:20:28.3282540Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 9.6/56 kB
2024-08-30T19:20:28.3282854Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 15/56 kB 
2024-08-30T19:20:28.3283192Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 15/56 kB
2024-08-30T19:20:28.3283516Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 31/56 kB
2024-08-30T19:20:28.3283839Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 31/56 kB
2024-08-30T19:20:28.3284145Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 31/56 kB
2024-08-30T19:20:28.3284683Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 48/56 kB
2024-08-30T19:20:28.3285012Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 48/56 kB
2024-08-30T19:20:28.3285334Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 56 kB   
2024-08-30T19:20:28.3285619Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 56 kB
2024-08-30T19:20:28.3285897Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 56 kB
2024-08-30T19:20:28.3286188Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 56 kB
2024-08-30T19:20:28.3286484Z Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.2/3.6 MB | 56 kB
2024-08-30T19:20:28.3286771Z Progress (4): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB | 56 kB
2024-08-30T19:20:28.3286970Z                                                           
2024-08-30T19:20:28.3288459Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-common/6.10.0/kubernetes-model-common-6.10.0.jar (56 kB at 83 kB/s)
2024-08-30T19:20:28.3289853Z #24 7.577 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-resource/6.10.0/kubernetes-model-resource-6.10.0.jar
2024-08-30T19:20:28.3290186Z #24 7.577 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
2024-08-30T19:20:28.3290438Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
2024-08-30T19:20:28.3290693Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
2024-08-30T19:20:28.3290924Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
2024-08-30T19:20:28.3291423Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
2024-08-30T19:20:28.3292374Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
2024-08-30T19:20:28.3292622Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
2024-08-30T19:20:28.3293192Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
2024-08-30T19:20:28.3293424Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
2024-08-30T19:20:28.3294194Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
2024-08-30T19:20:28.3294470Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
2024-08-30T19:20:28.3295460Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
2024-08-30T19:20:28.3295955Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3296187Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3296888Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3297133Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3297367Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3297588Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3297804Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3298061Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3298288Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3298518Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3298740Z Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3298960Z Progress (3): 5.9/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3299186Z Progress (3): 5.9/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3299399Z Progress (3): 5.9/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3299613Z Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3299834Z Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3300051Z Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3300262Z Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3300484Z Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
2024-08-30T19:20:28.3300796Z Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 16/193 kB
2024-08-30T19:20:28.3301099Z Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 16/193 kB
2024-08-30T19:20:28.3301397Z Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 16/193 kB
2024-08-30T19:20:28.3301686Z Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 33/193 kB
2024-08-30T19:20:28.3301989Z Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 33/193 kB
2024-08-30T19:20:28.3302552Z Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 33/193 kB
2024-08-30T19:20:28.3302866Z Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 49/193 kB
2024-08-30T19:20:28.3303165Z Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 49/193 kB
2024-08-30T19:20:28.3303462Z Progress (4): 6.0/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 49/193 kB
2024-08-30T19:20:28.3303760Z Progress (4): 6.0/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 66/193 kB
2024-08-30T19:20:28.3304073Z Progress (4): 6.0/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 66/193 kB
2024-08-30T19:20:28.3304377Z Progress (4): 6.0/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 82/193 kB
2024-08-30T19:20:28.3304680Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 82/193 kB
2024-08-30T19:20:28.3304975Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 96/193 kB
2024-08-30T19:20:28.3305283Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 96/193 kB
2024-08-30T19:20:28.3305588Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 96/193 kB
2024-08-30T19:20:28.3305903Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 113/193 kB
2024-08-30T19:20:28.3306210Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 113/193 kB
2024-08-30T19:20:28.3306514Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 113/193 kB
2024-08-30T19:20:28.3306813Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 129/193 kB
2024-08-30T19:20:28.3307111Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 129/193 kB
2024-08-30T19:20:28.3307416Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 129/193 kB
2024-08-30T19:20:28.3307708Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 146/193 kB
2024-08-30T19:20:28.3308826Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 146/193 kB
2024-08-30T19:20:28.3309155Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 146/193 kB
2024-08-30T19:20:28.3309455Z Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 162/193 kB
2024-08-30T19:20:28.3309992Z Progress (4): 6.1/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 162/193 kB
2024-08-30T19:20:28.3310313Z Progress (4): 6.1/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 162/193 kB
2024-08-30T19:20:28.3310613Z Progress (4): 6.1/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 178/193 kB
2024-08-30T19:20:28.3310921Z Progress (4): 6.1/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 178/193 kB
2024-08-30T19:20:28.3311214Z Progress (4): 6.1/8.4 MB | 1.9/1.9 MB | 0.4/3.6 MB | 178/193 kB
2024-08-30T19:20:28.3311515Z Progress (4): 6.1/8.4 MB | 1.9/1.9 MB | 0.4/3.6 MB | 193 kB    
2024-08-30T19:20:28.3311807Z Progress (4): 6.1/8.4 MB | 1.9/1.9 MB | 0.4/3.6 MB | 193 kB
2024-08-30T19:20:28.3313267Z Progress (4): 6.1/8.4 MB | 1.9 MB | 0.4/3.6 MB | 193 kB    
2024-08-30T19:20:28.3313477Z                                                        
2024-08-30T19:20:28.3315040Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-resource/6.10.0/kubernetes-model-resource-6.10.0.jar (193 kB at 280 kB/s)
2024-08-30T19:20:28.3316306Z #24 7.588 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-rbac/6.10.0/kubernetes-model-rbac-6.10.0.jar
2024-08-30T19:20:28.3317434Z #24 7.588 Downloaded from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar (1.9 MB at 2.7 MB/s)
2024-08-30T19:20:28.3319031Z #24 7.588 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-admissionregistration/6.10.0/kubernetes-model-admissionregistration-6.10.0.jar
2024-08-30T19:20:28.3319265Z #24 7.588 Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
2024-08-30T19:20:28.3319453Z Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
2024-08-30T19:20:28.3319623Z Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
2024-08-30T19:20:28.3319800Z Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
2024-08-30T19:20:28.3319992Z Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
2024-08-30T19:20:28.3320172Z Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
2024-08-30T19:20:28.3320349Z Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
2024-08-30T19:20:28.3320515Z Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
2024-08-30T19:20:28.3320932Z Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
2024-08-30T19:20:28.3321116Z Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
2024-08-30T19:20:28.3321281Z Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
2024-08-30T19:20:28.3321457Z Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
2024-08-30T19:20:28.3321667Z Progress (2): 6.1/8.4 MB | 0.7/3.6 MB
2024-08-30T19:20:28.3321847Z Progress (2): 6.1/8.4 MB | 0.7/3.6 MB
2024-08-30T19:20:28.3322014Z Progress (2): 6.1/8.4 MB | 0.7/3.6 MB
2024-08-30T19:20:28.3322251Z Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 16/973 kB
2024-08-30T19:20:28.3322471Z Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 16/973 kB
2024-08-30T19:20:28.3322684Z Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 33/973 kB
2024-08-30T19:20:28.3322914Z Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 33/973 kB
2024-08-30T19:20:28.3323128Z Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 49/973 kB
2024-08-30T19:20:28.3323340Z Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 49/973 kB
2024-08-30T19:20:28.3323559Z Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 66/973 kB
2024-08-30T19:20:28.3323779Z Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 82/973 kB
2024-08-30T19:20:28.3324001Z Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 82/973 kB
2024-08-30T19:20:28.3324216Z Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3324431Z Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3324645Z Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3324855Z Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3325067Z Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3325288Z Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3325585Z Progress (4): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB | 0/1.0 MB
2024-08-30T19:20:28.3326112Z Progress (4): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB | 0/1.0 MB
2024-08-30T19:20:28.3326421Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
2024-08-30T19:20:28.3326710Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
2024-08-30T19:20:28.3326995Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
2024-08-30T19:20:28.3327298Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
2024-08-30T19:20:28.3327577Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
2024-08-30T19:20:28.3327874Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
2024-08-30T19:20:28.3328178Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3328471Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3328772Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3329062Z Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3329363Z Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3329668Z Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3329955Z Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3330259Z Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3330570Z Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3330861Z Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3331577Z Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3331927Z Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3332258Z Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3332577Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3332880Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3333187Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3333493Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3333793Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
2024-08-30T19:20:28.3334087Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3334631Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3334970Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3335289Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3335585Z Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3335887Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3336187Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3336480Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3336786Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3337093Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3337387Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3337683Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
2024-08-30T19:20:28.3338014Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3338351Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3338650Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3338945Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3339222Z Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3339520Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3339827Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3340133Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3340765Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3341071Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3341387Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3341695Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
2024-08-30T19:20:28.3341991Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3342304Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3342588Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3342885Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3343208Z Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3343498Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3343777Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3344103Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3344391Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3344663Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3344983Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3345277Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
2024-08-30T19:20:28.3345555Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3345855Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3346160Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3346428Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3346713Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3347002Z Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3347298Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3347579Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3347873Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3348327Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3348636Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3348938Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3349228Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3349519Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3349804Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3350088Z Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3350376Z Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3350696Z Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
2024-08-30T19:20:28.3350977Z Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3351269Z Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3351556Z Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3351840Z Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3352135Z Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3352439Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3352734Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3353039Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3353315Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3353601Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3354127Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3354424Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3354717Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3355011Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3355292Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3355582Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3355883Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
2024-08-30T19:20:28.3356164Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3356465Z Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3356749Z Progress (4): 6.3/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3357027Z Progress (4): 6.3/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3357330Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3357613Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3357891Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3358196Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3358462Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3358748Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3359043Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3359320Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3359629Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3359894Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3360177Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3360481Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
2024-08-30T19:20:28.3360761Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3361050Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3361341Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3361793Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3362093Z Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3362382Z Progress (4): 6.4/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3362670Z Progress (4): 6.4/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3362943Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3363230Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3363530Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3363833Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3364116Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3364409Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3364675Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3364963Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3365251Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3365533Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3365818Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3366093Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
2024-08-30T19:20:28.3366379Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3366660Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3366942Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3369032Z Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3369369Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3369683Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3369991Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3370872Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3371343Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3371627Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3371917Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
2024-08-30T19:20:28.3372206Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3372481Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3372785Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3373073Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3373348Z Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3373635Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3373922Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3374202Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3374503Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3374762Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3375044Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
2024-08-30T19:20:28.3375337Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB    
2024-08-30T19:20:28.3375606Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB
2024-08-30T19:20:28.3375900Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB
2024-08-30T19:20:28.3376162Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB
2024-08-30T19:20:28.3376426Z Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB
2024-08-30T19:20:28.3376623Z                                                           
2024-08-30T19:20:28.3378733Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-admissionregistration/6.10.0/kubernetes-model-admissionregistration-6.10.0.jar (1.0 MB at 1.5 MB/s)
2024-08-30T19:20:28.3380078Z #24 7.597 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apps/6.10.0/kubernetes-model-apps-6.10.0.jar
2024-08-30T19:20:28.3380405Z #24 7.597 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3380638Z Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3380862Z Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3381101Z Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 98/973 kB
2024-08-30T19:20:28.3381349Z Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 115/973 kB
2024-08-30T19:20:28.3381590Z Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 115/973 kB
2024-08-30T19:20:28.3381821Z Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 131/973 kB
2024-08-30T19:20:28.3382057Z Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 131/973 kB
2024-08-30T19:20:28.3382308Z Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 147/973 kB
2024-08-30T19:20:28.3382549Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 147/973 kB
2024-08-30T19:20:28.3383450Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 164/973 kB
2024-08-30T19:20:28.3383732Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 164/973 kB
2024-08-30T19:20:28.3383976Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 180/973 kB
2024-08-30T19:20:28.3384211Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 180/973 kB
2024-08-30T19:20:28.3385247Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 197/973 kB
2024-08-30T19:20:28.3385810Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 213/973 kB
2024-08-30T19:20:28.3386076Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 229/973 kB
2024-08-30T19:20:28.3386638Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 246/973 kB
2024-08-30T19:20:28.3387373Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 262/973 kB
2024-08-30T19:20:28.3387621Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 279/973 kB
2024-08-30T19:20:28.3388382Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 295/973 kB
2024-08-30T19:20:28.3388628Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 311/973 kB
2024-08-30T19:20:28.3388863Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 328/973 kB
2024-08-30T19:20:28.3389966Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 344/973 kB
2024-08-30T19:20:28.3390589Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 360/973 kB
2024-08-30T19:20:28.3390876Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 377/973 kB
2024-08-30T19:20:28.3391500Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 393/973 kB
2024-08-30T19:20:28.3391900Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 410/973 kB
2024-08-30T19:20:28.3392505Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 426/973 kB
2024-08-30T19:20:28.3392773Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 442/973 kB
2024-08-30T19:20:28.3393397Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 459/973 kB
2024-08-30T19:20:28.3393680Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 475/973 kB
2024-08-30T19:20:28.3394224Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 492/973 kB
2024-08-30T19:20:28.3394489Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 508/973 kB
2024-08-30T19:20:28.3395180Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 524/973 kB
2024-08-30T19:20:28.3395928Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 541/973 kB
2024-08-30T19:20:28.3396343Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 557/973 kB
2024-08-30T19:20:28.3400072Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 573/973 kB
2024-08-30T19:20:28.3400398Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3401013Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3401265Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3401672Z Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3401930Z Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3402661Z Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3402922Z Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3403414Z Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3404239Z Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3404998Z Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3405278Z Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3405523Z Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3406168Z Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3406390Z Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3406754Z Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3407004Z Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3407668Z Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3407899Z Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3408326Z Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3408565Z Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3408792Z Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3409485Z Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3409714Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3410670Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB
2024-08-30T19:20:28.3412277Z Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 16/140 kB
2024-08-30T19:20:28.3412598Z Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 33/140 kB
2024-08-30T19:20:28.3414619Z Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 49/140 kB
2024-08-30T19:20:28.3414949Z Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 66/140 kB
2024-08-30T19:20:28.3415447Z Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 82/140 kB
2024-08-30T19:20:28.3415750Z Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 98/140 kB
2024-08-30T19:20:28.3417062Z Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 114/140 kB
2024-08-30T19:20:28.3417392Z Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 130/140 kB
2024-08-30T19:20:28.3417868Z Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 140 kB    
2024-08-30T19:20:28.3418072Z                                                            
2024-08-30T19:20:28.3420003Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-rbac/6.10.0/kubernetes-model-rbac-6.10.0.jar (140 kB at 200 kB/s)
2024-08-30T19:20:28.3421997Z #24 7.597 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-autoscaling/6.10.0/kubernetes-model-autoscaling-6.10.0.jar
2024-08-30T19:20:28.3422313Z #24 7.597 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 606/973 kB
2024-08-30T19:20:28.3422779Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 623/973 kB
2024-08-30T19:20:28.3423019Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 639/973 kB
2024-08-30T19:20:28.3423259Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 655/973 kB
2024-08-30T19:20:28.3423666Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 672/973 kB
2024-08-30T19:20:28.3423895Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 688/973 kB
2024-08-30T19:20:28.3424112Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 705/973 kB
2024-08-30T19:20:28.3424536Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 721/973 kB
2024-08-30T19:20:28.3424775Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 737/973 kB
2024-08-30T19:20:28.3425229Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 737/973 kB
2024-08-30T19:20:28.3425467Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 754/973 kB
2024-08-30T19:20:28.3425688Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 754/973 kB
2024-08-30T19:20:28.3426399Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 770/973 kB
2024-08-30T19:20:28.3426661Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 770/973 kB
2024-08-30T19:20:28.3427454Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 786/973 kB
2024-08-30T19:20:28.3427703Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 786/973 kB
2024-08-30T19:20:28.3428146Z Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 803/973 kB
2024-08-30T19:20:28.3428665Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 803/973 kB
2024-08-30T19:20:28.3429139Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 819/973 kB
2024-08-30T19:20:28.3430118Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 819/973 kB
2024-08-30T19:20:28.3430666Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 836/973 kB
2024-08-30T19:20:28.3431095Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 836/973 kB
2024-08-30T19:20:28.3431320Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 852/973 kB
2024-08-30T19:20:28.3432007Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 852/973 kB
2024-08-30T19:20:28.3432254Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 868/973 kB
2024-08-30T19:20:28.3432477Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 868/973 kB
2024-08-30T19:20:28.3433391Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 885/973 kB
2024-08-30T19:20:28.3433823Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 885/973 kB
2024-08-30T19:20:28.3434062Z Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 901/973 kB
2024-08-30T19:20:28.3434287Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 901/973 kB
2024-08-30T19:20:28.3434706Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 918/973 kB
2024-08-30T19:20:28.3434922Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 918/973 kB
2024-08-30T19:20:28.3435327Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 934/973 kB
2024-08-30T19:20:28.3435568Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 934/973 kB
2024-08-30T19:20:28.3435847Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 950/973 kB
2024-08-30T19:20:28.3436246Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 950/973 kB
2024-08-30T19:20:28.3436476Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 967/973 kB
2024-08-30T19:20:28.3436704Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 973 kB    
2024-08-30T19:20:28.3437156Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 973 kB
2024-08-30T19:20:28.3437372Z Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 973 kB
2024-08-30T19:20:28.3437747Z Progress (3): 7.5/8.4 MB | 1.8/3.6 MB | 973 kB
2024-08-30T19:20:28.3438181Z Progress (3): 7.5/8.4 MB | 1.8/3.6 MB | 973 kB
2024-08-30T19:20:28.3438351Z                                               
2024-08-30T19:20:28.3440429Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-gatewayapi/6.10.0/kubernetes-model-gatewayapi-6.10.0.jar (973 kB at 1.4 MB/s)
2024-08-30T19:20:28.3442239Z #24 7.601 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apiextensions/6.10.0/kubernetes-model-apiextensions-6.10.0.jar
2024-08-30T19:20:28.3442483Z #24 7.601 Progress (2): 7.5/8.4 MB | 1.8/3.6 MB
2024-08-30T19:20:28.3442854Z Progress (2): 7.5/8.4 MB | 1.8/3.6 MB
2024-08-30T19:20:28.3443034Z Progress (2): 7.5/8.4 MB | 1.8/3.6 MB
2024-08-30T19:20:28.3443219Z Progress (2): 7.5/8.4 MB | 1.8/3.6 MB
2024-08-30T19:20:28.3443566Z Progress (2): 7.6/8.4 MB | 1.8/3.6 MB
2024-08-30T19:20:28.3443750Z Progress (2): 7.6/8.4 MB | 1.8/3.6 MB
2024-08-30T19:20:28.3443934Z Progress (2): 7.6/8.4 MB | 1.8/3.6 MB
2024-08-30T19:20:28.3444346Z Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 16/408 kB
2024-08-30T19:20:28.3444586Z Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 16/408 kB
2024-08-30T19:20:28.3444826Z Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 33/408 kB
2024-08-30T19:20:28.3445219Z Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 33/408 kB
2024-08-30T19:20:28.3445447Z Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 49/408 kB
2024-08-30T19:20:28.3445687Z Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 49/408 kB
2024-08-30T19:20:28.3446078Z Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 63/408 kB
2024-08-30T19:20:28.3446308Z Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 63/408 kB
2024-08-30T19:20:28.3446542Z Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 79/408 kB
2024-08-30T19:20:28.3446934Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 79/408 kB
2024-08-30T19:20:28.3447174Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 95/408 kB
2024-08-30T19:20:28.3447565Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 95/408 kB
2024-08-30T19:20:28.3447814Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 112/408 kB
2024-08-30T19:20:28.3448069Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 112/408 kB
2024-08-30T19:20:28.3448466Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 128/408 kB
2024-08-30T19:20:28.3448703Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 128/408 kB
2024-08-30T19:20:28.3448943Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 145/408 kB
2024-08-30T19:20:28.3449344Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 145/408 kB
2024-08-30T19:20:28.3449783Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 145/408 kB
2024-08-30T19:20:28.3450220Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 161/408 kB
2024-08-30T19:20:28.3450456Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 161/408 kB
2024-08-30T19:20:28.3450834Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 161/408 kB
2024-08-30T19:20:28.3451308Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 177/408 kB
2024-08-30T19:20:28.3451539Z Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 177/408 kB
2024-08-30T19:20:28.3451768Z Progress (3): 7.8/8.4 MB | 1.8/3.6 MB | 177/408 kB
2024-08-30T19:20:28.3452510Z Progress (3): 7.8/8.4 MB | 1.8/3.6 MB | 194/408 kB
2024-08-30T19:20:28.3452778Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 194/408 kB
2024-08-30T19:20:28.3453433Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 194/408 kB
2024-08-30T19:20:28.3454052Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 210/408 kB
2024-08-30T19:20:28.3454461Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 210/408 kB
2024-08-30T19:20:28.3455018Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 210/408 kB
2024-08-30T19:20:28.3455290Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 210/408 kB
2024-08-30T19:20:28.3455881Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 226/408 kB
2024-08-30T19:20:28.3456355Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 226/408 kB
2024-08-30T19:20:28.3456969Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 243/408 kB
2024-08-30T19:20:28.3457517Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 243/408 kB
2024-08-30T19:20:28.3457968Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 243/408 kB
2024-08-30T19:20:28.3458559Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 243/408 kB
2024-08-30T19:20:28.3458814Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 259/408 kB
2024-08-30T19:20:28.3459725Z Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 259/408 kB
2024-08-30T19:20:28.3460486Z Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 259/408 kB
2024-08-30T19:20:28.3460753Z Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 276/408 kB
2024-08-30T19:20:28.3461558Z Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 276/408 kB
2024-08-30T19:20:28.3462283Z Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 276/408 kB
2024-08-30T19:20:28.3463026Z Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 292/408 kB
2024-08-30T19:20:28.3463287Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 292/408 kB
2024-08-30T19:20:28.3463894Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 292/408 kB
2024-08-30T19:20:28.3464370Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 292/408 kB
2024-08-30T19:20:28.3465006Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 308/408 kB
2024-08-30T19:20:28.3465688Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 308/408 kB
2024-08-30T19:20:28.3465970Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 325/408 kB
2024-08-30T19:20:28.3466564Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 325/408 kB
2024-08-30T19:20:28.3466845Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 325/408 kB
2024-08-30T19:20:28.3467471Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 341/408 kB
2024-08-30T19:20:28.3467875Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 341/408 kB
2024-08-30T19:20:28.3468496Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 341/408 kB
2024-08-30T19:20:28.3468889Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 358/408 kB
2024-08-30T19:20:28.3469501Z Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 358/408 kB
2024-08-30T19:20:28.3470081Z Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 358/408 kB
2024-08-30T19:20:28.3470519Z Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 374/408 kB
2024-08-30T19:20:28.3471018Z Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 374/408 kB
2024-08-30T19:20:28.3471428Z Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 374/408 kB
2024-08-30T19:20:28.3471953Z Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 390/408 kB
2024-08-30T19:20:28.3472354Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 390/408 kB
2024-08-30T19:20:28.3472976Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 390/408 kB
2024-08-30T19:20:28.3473430Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 407/408 kB
2024-08-30T19:20:28.3473811Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 407/408 kB
2024-08-30T19:20:28.3474281Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB    
2024-08-30T19:20:28.3474525Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
2024-08-30T19:20:28.3475362Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
2024-08-30T19:20:28.3476027Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
2024-08-30T19:20:28.3476279Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
2024-08-30T19:20:28.3476893Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
2024-08-30T19:20:28.3477140Z Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
2024-08-30T19:20:28.3477894Z Progress (3): 8.1/8.4 MB | 2.1/3.6 MB | 408 kB
2024-08-30T19:20:28.3478143Z Progress (3): 8.1/8.4 MB | 2.1/3.6 MB | 408 kB
2024-08-30T19:20:28.3478671Z                                               
2024-08-30T19:20:28.3482140Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apps/6.10.0/kubernetes-model-apps-6.10.0.jar (408 kB at 574 kB/s)
2024-08-30T19:20:28.3482431Z #24 7.613 Progress (2): 8.1/8.4 MB | 2.1/3.6 MB
2024-08-30T19:20:28.3482998Z Progress (2): 8.1/8.4 MB | 2.2/3.6 MB
2024-08-30T19:20:28.3483214Z Progress (2): 8.1/8.4 MB | 2.2/3.6 MB
2024-08-30T19:20:28.3483959Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 16/716 kB
2024-08-30T19:20:28.3484220Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 16/716 kB
2024-08-30T19:20:28.3484754Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 16/716 kB
2024-08-30T19:20:28.3484999Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 16/716 kB
2024-08-30T19:20:28.3485689Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 33/716 kB
2024-08-30T19:20:28.3485951Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 33/716 kB
2024-08-30T19:20:28.3486561Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 49/716 kB
2024-08-30T19:20:28.3486946Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 49/716 kB
2024-08-30T19:20:28.3487512Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 49/716 kB
2024-08-30T19:20:28.3488703Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 66/716 kB
2024-08-30T19:20:28.3489310Z Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 66/716 kB
2024-08-30T19:20:28.3490152Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 66/716 kB
2024-08-30T19:20:28.3490878Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 80/716 kB
2024-08-30T19:20:28.3491683Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 80/716 kB
2024-08-30T19:20:28.3492452Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 97/716 kB
2024-08-30T19:20:28.3492712Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 97/716 kB
2024-08-30T19:20:28.3493347Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 113/716 kB
2024-08-30T19:20:28.3493953Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 113/716 kB
2024-08-30T19:20:28.3494225Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 130/716 kB
2024-08-30T19:20:28.3494947Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 130/716 kB
2024-08-30T19:20:28.3495650Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 146/716 kB
2024-08-30T19:20:28.3496064Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 146/716 kB
2024-08-30T19:20:28.3496773Z Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 162/716 kB
2024-08-30T19:20:28.3497385Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 162/716 kB
2024-08-30T19:20:28.3497905Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 179/716 kB
2024-08-30T19:20:28.3498683Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 179/716 kB
2024-08-30T19:20:28.3499271Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 195/716 kB
2024-08-30T19:20:28.3500022Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 195/716 kB
2024-08-30T19:20:28.3500425Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 211/716 kB
2024-08-30T19:20:28.3500984Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 211/716 kB
2024-08-30T19:20:28.3501223Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 228/716 kB
2024-08-30T19:20:28.3501444Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 228/716 kB
2024-08-30T19:20:28.3501870Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 244/716 kB
2024-08-30T19:20:28.3502432Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 244/716 kB
2024-08-30T19:20:28.3502700Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 261/716 kB
2024-08-30T19:20:28.3502925Z Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 277/716 kB
2024-08-30T19:20:28.3503937Z Progress (3): 8.4/8.4 MB | 2.2/3.6 MB | 277/716 kB
2024-08-30T19:20:28.3504217Z Progress (3): 8.4 MB | 2.2/3.6 MB | 277/716 kB    
2024-08-30T19:20:28.3504453Z Progress (3): 8.4 MB | 2.2/3.6 MB | 293/716 kB
2024-08-30T19:20:28.3505142Z Progress (3): 8.4 MB | 2.2/3.6 MB | 310/716 kB
2024-08-30T19:20:28.3505399Z Progress (3): 8.4 MB | 2.2/3.6 MB | 326/716 kB
2024-08-30T19:20:28.3505984Z Progress (3): 8.4 MB | 2.2/3.6 MB | 343/716 kB
2024-08-30T19:20:28.3506182Z                                               
2024-08-30T19:20:28.3508349Z Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk18on/1.76/bcprov-jdk18on-1.76.jar (8.4 MB at 12 MB/s)
2024-08-30T19:20:28.3510118Z #24 7.613 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-batch/6.10.0/kubernetes-model-batch-6.10.0.jar
2024-08-30T19:20:28.3510376Z #24 7.613 Progress (2): 2.2/3.6 MB | 359/716 kB
2024-08-30T19:20:28.3510704Z Progress (2): 2.2/3.6 MB | 375/716 kB
2024-08-30T19:20:28.3510890Z Progress (2): 2.2/3.6 MB | 392/716 kB
2024-08-30T19:20:28.3511071Z Progress (2): 2.2/3.6 MB | 408/716 kB
2024-08-30T19:20:28.3511523Z Progress (2): 2.2/3.6 MB | 424/716 kB
2024-08-30T19:20:28.3511885Z Progress (2): 2.2/3.6 MB | 441/716 kB
2024-08-30T19:20:28.3512262Z Progress (2): 2.2/3.6 MB | 457/716 kB
2024-08-30T19:20:28.3512441Z Progress (2): 2.2/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3512608Z                                      
2024-08-30T19:20:28.3515057Z Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-certificates/6.10.0/kubernetes-model-certificates-6.10.0.jar
2024-08-30T19:20:28.3515332Z #24 7.613 Progress (2): 2.2/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3515512Z Progress (2): 2.3/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3515839Z Progress (2): 2.3/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3516707Z Progress (2): 2.3/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3516916Z Progress (2): 2.3/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3517095Z Progress (2): 2.3/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3517443Z Progress (2): 2.3/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3517625Z Progress (2): 2.3/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3518100Z Progress (2): 2.4/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3518337Z Progress (2): 2.4/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3518518Z Progress (2): 2.4/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3518683Z Progress (2): 2.4/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3519020Z Progress (2): 2.4/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3519203Z Progress (2): 2.4/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3519392Z Progress (2): 2.5/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3520083Z Progress (3): 2.5/3.6 MB | 474/716 kB | 5.4/243 kB
2024-08-30T19:20:28.3520340Z Progress (3): 2.5/3.6 MB | 474/716 kB | 22/243 kB 
2024-08-30T19:20:28.3520834Z Progress (3): 2.5/3.6 MB | 474/716 kB | 22/243 kB
2024-08-30T19:20:28.3521098Z Progress (3): 2.5/3.6 MB | 474/716 kB | 38/243 kB
2024-08-30T19:20:28.3521474Z Progress (3): 2.5/3.6 MB | 474/716 kB | 38/243 kB
2024-08-30T19:20:28.3521717Z Progress (3): 2.5/3.6 MB | 474/716 kB | 55/243 kB
2024-08-30T19:20:28.3521950Z Progress (3): 2.5/3.6 MB | 474/716 kB | 55/243 kB
2024-08-30T19:20:28.3522182Z Progress (3): 2.5/3.6 MB | 474/716 kB | 71/243 kB
2024-08-30T19:20:28.3522805Z Progress (3): 2.5/3.6 MB | 474/716 kB | 71/243 kB
2024-08-30T19:20:28.3523056Z Progress (3): 2.5/3.6 MB | 474/716 kB | 87/243 kB
2024-08-30T19:20:28.3523443Z Progress (3): 2.5/3.6 MB | 474/716 kB | 87/243 kB
2024-08-30T19:20:28.3523717Z Progress (3): 2.5/3.6 MB | 474/716 kB | 104/243 kB
2024-08-30T19:20:28.3523960Z Progress (3): 2.6/3.6 MB | 474/716 kB | 104/243 kB
2024-08-30T19:20:28.3524507Z Progress (3): 2.6/3.6 MB | 474/716 kB | 120/243 kB
2024-08-30T19:20:28.3524775Z Progress (3): 2.6/3.6 MB | 474/716 kB | 120/243 kB
2024-08-30T19:20:28.3525172Z Progress (3): 2.6/3.6 MB | 474/716 kB | 137/243 kB
2024-08-30T19:20:28.3525443Z Progress (3): 2.6/3.6 MB | 474/716 kB | 153/243 kB
2024-08-30T19:20:28.3525683Z Progress (3): 2.6/3.6 MB | 474/716 kB | 153/243 kB
2024-08-30T19:20:28.3526308Z Progress (3): 2.6/3.6 MB | 474/716 kB | 169/243 kB
2024-08-30T19:20:28.3526582Z Progress (3): 2.6/3.6 MB | 474/716 kB | 169/243 kB
2024-08-30T19:20:28.3527210Z Progress (3): 2.6/3.6 MB | 474/716 kB | 186/243 kB
2024-08-30T19:20:28.3527916Z Progress (4): 2.6/3.6 MB | 474/716 kB | 186/243 kB | 16/147 kB
2024-08-30T19:20:28.3528270Z Progress (4): 2.6/3.6 MB | 474/716 kB | 186/243 kB | 16/147 kB
2024-08-30T19:20:28.3528725Z Progress (4): 2.6/3.6 MB | 474/716 kB | 202/243 kB | 16/147 kB
2024-08-30T19:20:28.3529042Z Progress (4): 2.6/3.6 MB | 474/716 kB | 202/243 kB | 33/147 kB
2024-08-30T19:20:28.3529360Z Progress (4): 2.6/3.6 MB | 474/716 kB | 202/243 kB | 33/147 kB
2024-08-30T19:20:28.3530063Z Progress (4): 2.6/3.6 MB | 474/716 kB | 218/243 kB | 33/147 kB
2024-08-30T19:20:28.3530557Z Progress (4): 2.7/3.6 MB | 474/716 kB | 218/243 kB | 33/147 kB
2024-08-30T19:20:28.3530892Z Progress (4): 2.7/3.6 MB | 474/716 kB | 218/243 kB | 49/147 kB
2024-08-30T19:20:28.3531305Z Progress (4): 2.7/3.6 MB | 474/716 kB | 235/243 kB | 49/147 kB
2024-08-30T19:20:28.3532000Z Progress (4): 2.7/3.6 MB | 474/716 kB | 235/243 kB | 65/147 kB
2024-08-30T19:20:28.3532320Z Progress (4): 2.7/3.6 MB | 474/716 kB | 235/243 kB | 65/147 kB
2024-08-30T19:20:28.3532778Z Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 65/147 kB    
2024-08-30T19:20:28.3533098Z Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 65/147 kB
2024-08-30T19:20:28.3533697Z Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 82/147 kB
2024-08-30T19:20:28.3534024Z Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 98/147 kB
2024-08-30T19:20:28.3534458Z Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 98/147 kB
2024-08-30T19:20:28.3534765Z Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 114/147 kB
2024-08-30T19:20:28.3535368Z Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 114/147 kB
2024-08-30T19:20:28.3536119Z                                                            
2024-08-30T19:20:28.3539891Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-batch/6.10.0/kubernetes-model-batch-6.10.0.jar (243 kB at 340 kB/s)
2024-08-30T19:20:28.3540240Z #24 7.614 Progress (3): 2.7/3.6 MB | 474/716 kB | 114/147 kB
2024-08-30T19:20:28.3540849Z Progress (3): 2.7/3.6 MB | 474/716 kB | 131/147 kB
2024-08-30T19:20:28.3541096Z Progress (3): 2.8/3.6 MB | 474/716 kB | 131/147 kB
2024-08-30T19:20:28.3541481Z Progress (3): 2.8/3.6 MB | 474/716 kB | 147 kB    
2024-08-30T19:20:28.3541703Z Progress (3): 2.8/3.6 MB | 474/716 kB | 147 kB
2024-08-30T19:20:28.3541909Z Progress (3): 2.8/3.6 MB | 474/716 kB | 147 kB
2024-08-30T19:20:28.3542086Z                                               
2024-08-30T19:20:28.3543648Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-certificates/6.10.0/kubernetes-model-certificates-6.10.0.jar (147 kB at 205 kB/s)
2024-08-30T19:20:28.3545548Z #24 7.615 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-coordination/6.10.0/kubernetes-model-coordination-6.10.0.jar
2024-08-30T19:20:28.3548619Z #24 7.615 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-discovery/6.10.0/kubernetes-model-discovery-6.10.0.jar
2024-08-30T19:20:28.3549037Z #24 7.615 Progress (2): 2.8/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3549580Z Progress (2): 2.8/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3549931Z Progress (2): 2.8/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3550406Z Progress (2): 2.9/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3550623Z Progress (2): 2.9/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3551287Z Progress (2): 2.9/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3551496Z Progress (2): 2.9/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3551990Z Progress (2): 2.9/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3552195Z Progress (2): 2.9/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3552548Z Progress (2): 3.0/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3553092Z Progress (2): 3.0/3.6 MB | 474/716 kB
2024-08-30T19:20:28.3553721Z Progress (3): 3.0/3.6 MB | 474/716 kB | 2.1/736 kB
2024-08-30T19:20:28.3554227Z Progress (3): 3.0/3.6 MB | 474/716 kB | 19/736 kB 
2024-08-30T19:20:28.3554812Z Progress (3): 3.0/3.6 MB | 474/716 kB | 35/736 kB
2024-08-30T19:20:28.3555842Z Progress (3): 3.0/3.6 MB | 474/716 kB | 51/736 kB
2024-08-30T19:20:28.3556443Z Progress (3): 3.0/3.6 MB | 474/716 kB | 68/736 kB
2024-08-30T19:20:28.3556710Z Progress (3): 3.0/3.6 MB | 474/716 kB | 84/736 kB
2024-08-30T19:20:28.3557441Z Progress (3): 3.0/3.6 MB | 474/716 kB | 100/736 kB
2024-08-30T19:20:28.3557716Z Progress (3): 3.0/3.6 MB | 474/716 kB | 117/736 kB
2024-08-30T19:20:28.3558257Z Progress (3): 3.0/3.6 MB | 474/716 kB | 133/736 kB
2024-08-30T19:20:28.3559009Z Progress (3): 3.0/3.6 MB | 474/716 kB | 150/736 kB
2024-08-30T19:20:28.3559433Z Progress (3): 3.0/3.6 MB | 474/716 kB | 166/736 kB
2024-08-30T19:20:28.3560023Z Progress (3): 3.0/3.6 MB | 474/716 kB | 182/736 kB
2024-08-30T19:20:28.3560589Z Progress (3): 3.0/3.6 MB | 474/716 kB | 199/736 kB
2024-08-30T19:20:28.3561044Z Progress (3): 3.0/3.6 MB | 474/716 kB | 215/736 kB
2024-08-30T19:20:28.3561616Z Progress (3): 3.0/3.6 MB | 474/716 kB | 232/736 kB
2024-08-30T19:20:28.3562022Z Progress (3): 3.0/3.6 MB | 474/716 kB | 248/736 kB
2024-08-30T19:20:28.3562564Z Progress (3): 3.0/3.6 MB | 474/716 kB | 264/736 kB
2024-08-30T19:20:28.3563230Z Progress (3): 3.0/3.6 MB | 474/716 kB | 281/736 kB
2024-08-30T19:20:28.3563634Z Progress (3): 3.0/3.6 MB | 474/716 kB | 297/736 kB
2024-08-30T19:20:28.3564154Z Progress (3): 3.0/3.6 MB | 474/716 kB | 313/736 kB
2024-08-30T19:20:28.3564903Z Progress (4): 3.0/3.6 MB | 474/716 kB | 313/736 kB | 15/42 kB
2024-08-30T19:20:28.3565405Z Progress (4): 3.0/3.6 MB | 474/716 kB | 330/736 kB | 15/42 kB
2024-08-30T19:20:28.3566154Z Progress (4): 3.0/3.6 MB | 474/716 kB | 330/736 kB | 31/42 kB
2024-08-30T19:20:28.3566760Z Progress (4): 3.0/3.6 MB | 474/716 kB | 346/736 kB | 31/42 kB
2024-08-30T19:20:28.3568201Z Progress (4): 3.0/3.6 MB | 474/716 kB | 346/736 kB | 42 kB   
2024-08-30T19:20:28.3568962Z Progress (4): 3.0/3.6 MB | 474/716 kB | 363/736 kB | 42 kB
2024-08-30T19:20:28.3569443Z Progress (4): 3.0/3.6 MB | 474/716 kB | 379/736 kB | 42 kB
2024-08-30T19:20:28.3570101Z Progress (4): 3.0/3.6 MB | 474/716 kB | 391/736 kB | 42 kB
2024-08-30T19:20:28.3570472Z                                                           
2024-08-30T19:20:28.3572794Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-coordination/6.10.0/kubernetes-model-coordination-6.10.0.jar (42 kB at 57 kB/s)
2024-08-30T19:20:28.3574067Z #24 7.623 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-events/6.10.0/kubernetes-model-events-6.10.0.jar
2024-08-30T19:20:28.3574398Z #24 7.624 Progress (3): 3.0/3.6 MB | 474/716 kB | 408/736 kB
2024-08-30T19:20:28.3574643Z Progress (3): 3.0/3.6 MB | 474/716 kB | 424/736 kB
2024-08-30T19:20:28.3574897Z Progress (3): 3.0/3.6 MB | 474/716 kB | 440/736 kB
2024-08-30T19:20:28.3575126Z Progress (3): 3.0/3.6 MB | 490/716 kB | 440/736 kB
2024-08-30T19:20:28.3575358Z Progress (3): 3.0/3.6 MB | 490/716 kB | 457/736 kB
2024-08-30T19:20:28.3575582Z Progress (3): 3.0/3.6 MB | 506/716 kB | 457/736 kB
2024-08-30T19:20:28.3575807Z Progress (3): 3.0/3.6 MB | 506/716 kB | 473/736 kB
2024-08-30T19:20:28.3576037Z Progress (3): 3.0/3.6 MB | 523/716 kB | 473/736 kB
2024-08-30T19:20:28.3576270Z Progress (3): 3.0/3.6 MB | 523/716 kB | 490/736 kB
2024-08-30T19:20:28.3576498Z Progress (3): 3.0/3.6 MB | 539/716 kB | 490/736 kB
2024-08-30T19:20:28.3576716Z Progress (3): 3.0/3.6 MB | 539/716 kB | 506/736 kB
2024-08-30T19:20:28.3576937Z Progress (3): 3.0/3.6 MB | 556/716 kB | 506/736 kB
2024-08-30T19:20:28.3577170Z Progress (3): 3.0/3.6 MB | 556/716 kB | 522/736 kB
2024-08-30T19:20:28.3577384Z Progress (3): 3.0/3.6 MB | 572/716 kB | 522/736 kB
2024-08-30T19:20:28.3577599Z Progress (3): 3.0/3.6 MB | 572/716 kB | 539/736 kB
2024-08-30T19:20:28.3577837Z Progress (3): 3.0/3.6 MB | 588/716 kB | 539/736 kB
2024-08-30T19:20:28.3578061Z Progress (3): 3.0/3.6 MB | 588/716 kB | 555/736 kB
2024-08-30T19:20:28.3578281Z Progress (3): 3.0/3.6 MB | 605/716 kB | 555/736 kB
2024-08-30T19:20:28.3578514Z Progress (3): 3.0/3.6 MB | 605/716 kB | 571/736 kB
2024-08-30T19:20:28.3578737Z Progress (3): 3.0/3.6 MB | 621/716 kB | 571/736 kB
2024-08-30T19:20:28.3579224Z Progress (3): 3.0/3.6 MB | 621/716 kB | 588/736 kB
2024-08-30T19:20:28.3579520Z Progress (3): 3.0/3.6 MB | 637/716 kB | 588/736 kB
2024-08-30T19:20:28.3579747Z Progress (3): 3.0/3.6 MB | 637/716 kB | 604/736 kB
2024-08-30T19:20:28.3579985Z Progress (3): 3.0/3.6 MB | 654/716 kB | 604/736 kB
2024-08-30T19:20:28.3580215Z Progress (3): 3.0/3.6 MB | 654/716 kB | 621/736 kB
2024-08-30T19:20:28.3580435Z Progress (3): 3.0/3.6 MB | 670/716 kB | 621/736 kB
2024-08-30T19:20:28.3580664Z Progress (3): 3.0/3.6 MB | 670/716 kB | 637/736 kB
2024-08-30T19:20:28.3580887Z Progress (3): 3.0/3.6 MB | 670/716 kB | 653/736 kB
2024-08-30T19:20:28.3581109Z Progress (3): 3.0/3.6 MB | 687/716 kB | 653/736 kB
2024-08-30T19:20:28.3581342Z Progress (3): 3.0/3.6 MB | 703/716 kB | 653/736 kB
2024-08-30T19:20:28.3581558Z Progress (3): 3.0/3.6 MB | 703/716 kB | 670/736 kB
2024-08-30T19:20:28.3581788Z Progress (3): 3.0/3.6 MB | 716 kB | 670/736 kB    
2024-08-30T19:20:28.3582021Z Progress (3): 3.0/3.6 MB | 716 kB | 686/736 kB
2024-08-30T19:20:28.3582231Z Progress (3): 3.0/3.6 MB | 716 kB | 703/736 kB
2024-08-30T19:20:28.3582447Z Progress (3): 3.0/3.6 MB | 716 kB | 719/736 kB
2024-08-30T19:20:28.3582652Z Progress (3): 3.0/3.6 MB | 716 kB | 735/736 kB
2024-08-30T19:20:28.3582863Z Progress (3): 3.0/3.6 MB | 716 kB | 736 kB    
2024-08-30T19:20:28.3583133Z Progress (4): 3.0/3.6 MB | 716 kB | 736 kB | 16/155 kB
2024-08-30T19:20:28.3583378Z Progress (4): 3.0/3.6 MB | 716 kB | 736 kB | 33/155 kB
2024-08-30T19:20:28.3583628Z Progress (4): 3.0/3.6 MB | 716 kB | 736 kB | 49/155 kB
2024-08-30T19:20:28.3583817Z                                                       
2024-08-30T19:20:28.3585620Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apiextensions/6.10.0/kubernetes-model-apiextensions-6.10.0.jar (716 kB at 978 kB/s)
2024-08-30T19:20:28.3587207Z #24 7.629 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-autoscaling/6.10.0/kubernetes-model-autoscaling-6.10.0.jar (736 kB at 1.0 MB/s)
2024-08-30T19:20:28.3588613Z #24 7.629 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-flowcontrol/6.10.0/kubernetes-model-flowcontrol-6.10.0.jar
2024-08-30T19:20:28.3589972Z #24 7.629 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-extensions/6.10.0/kubernetes-model-extensions-6.10.0.jar
2024-08-30T19:20:28.3590207Z #24 7.629 Progress (2): 3.0/3.6 MB | 66/155 kB
2024-08-30T19:20:28.3590377Z Progress (2): 3.0/3.6 MB | 78/155 kB
2024-08-30T19:20:28.3590543Z Progress (2): 3.0/3.6 MB | 94/155 kB
2024-08-30T19:20:28.3590737Z Progress (2): 3.0/3.6 MB | 111/155 kB
2024-08-30T19:20:28.3590913Z Progress (2): 3.0/3.6 MB | 111/155 kB
2024-08-30T19:20:28.3591085Z Progress (2): 3.0/3.6 MB | 127/155 kB
2024-08-30T19:20:28.3591258Z Progress (2): 3.0/3.6 MB | 127/155 kB
2024-08-30T19:20:28.3591425Z Progress (2): 3.0/3.6 MB | 144/155 kB
2024-08-30T19:20:28.3591601Z Progress (2): 3.0/3.6 MB | 144/155 kB
2024-08-30T19:20:28.3591775Z Progress (2): 3.0/3.6 MB | 155 kB    
2024-08-30T19:20:28.3591938Z Progress (2): 3.0/3.6 MB | 155 kB
2024-08-30T19:20:28.3592107Z Progress (2): 3.1/3.6 MB | 155 kB
2024-08-30T19:20:28.3592316Z Progress (3): 3.1/3.6 MB | 155 kB | 16/85 kB
2024-08-30T19:20:28.3592484Z                                             
2024-08-30T19:20:28.3593948Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-discovery/6.10.0/kubernetes-model-discovery-6.10.0.jar (155 kB at 212 kB/s)
2024-08-30T19:20:28.3594174Z #24 7.631 Progress (2): 3.1/3.6 MB | 16/85 kB
2024-08-30T19:20:28.3594334Z                                    
2024-08-30T19:20:28.3595635Z Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-networking/6.10.0/kubernetes-model-networking-6.10.0.jar
2024-08-30T19:20:28.3595851Z #24 7.631 Progress (2): 3.1/3.6 MB | 32/85 kB
2024-08-30T19:20:28.3596022Z Progress (2): 3.1/3.6 MB | 32/85 kB
2024-08-30T19:20:28.3596412Z Progress (2): 3.1/3.6 MB | 49/85 kB
2024-08-30T19:20:28.3596602Z Progress (2): 3.1/3.6 MB | 49/85 kB
2024-08-30T19:20:28.3596776Z Progress (2): 3.1/3.6 MB | 65/85 kB
2024-08-30T19:20:28.3596940Z Progress (2): 3.1/3.6 MB | 65/85 kB
2024-08-30T19:20:28.3597106Z Progress (2): 3.1/3.6 MB | 81/85 kB
2024-08-30T19:20:28.3597278Z Progress (2): 3.1/3.6 MB | 85 kB   
2024-08-30T19:20:28.3597446Z Progress (2): 3.1/3.6 MB | 85 kB
2024-08-30T19:20:28.3597612Z Progress (2): 3.2/3.6 MB | 85 kB
2024-08-30T19:20:28.3597786Z Progress (2): 3.2/3.6 MB | 85 kB
2024-08-30T19:20:28.3597931Z                                 
2024-08-30T19:20:28.3599355Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-events/6.10.0/kubernetes-model-events-6.10.0.jar (85 kB at 115 kB/s)
2024-08-30T19:20:28.3600659Z #24 7.637 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-metrics/6.10.0/kubernetes-model-metrics-6.10.0.jar
2024-08-30T19:20:28.3600846Z #24 7.637 Progress (1): 3.2/3.6 MB
2024-08-30T19:20:28.3601004Z Progress (1): 3.2/3.6 MB
2024-08-30T19:20:28.3601166Z Progress (1): 3.2/3.6 MB
2024-08-30T19:20:28.3601323Z Progress (1): 3.2/3.6 MB
2024-08-30T19:20:28.3601474Z Progress (1): 3.2/3.6 MB
2024-08-30T19:20:28.3601637Z Progress (1): 3.3/3.6 MB
2024-08-30T19:20:28.3601790Z Progress (1): 3.3/3.6 MB
2024-08-30T19:20:28.3601957Z Progress (1): 3.3/3.6 MB
2024-08-30T19:20:28.3602108Z Progress (1): 3.3/3.6 MB
2024-08-30T19:20:28.3602258Z Progress (1): 3.3/3.6 MB
2024-08-30T19:20:28.3602414Z Progress (1): 3.3/3.6 MB
2024-08-30T19:20:28.3602566Z Progress (1): 3.4/3.6 MB
2024-08-30T19:20:28.3602969Z Progress (2): 3.4/3.6 MB | 16/451 kB
2024-08-30T19:20:28.3603153Z Progress (2): 3.4/3.6 MB | 16/451 kB
2024-08-30T19:20:28.3603325Z Progress (2): 3.4/3.6 MB | 16/451 kB
2024-08-30T19:20:28.3603503Z Progress (2): 3.4/3.6 MB | 33/451 kB
2024-08-30T19:20:28.3603688Z Progress (2): 3.4/3.6 MB | 33/451 kB
2024-08-30T19:20:28.3603857Z Progress (2): 3.4/3.6 MB | 33/451 kB
2024-08-30T19:20:28.3604099Z Progress (3): 3.4/3.6 MB | 33/451 kB | 16/492 kB
2024-08-30T19:20:28.3604342Z Progress (3): 3.4/3.6 MB | 33/451 kB | 16/492 kB
2024-08-30T19:20:28.3604567Z Progress (3): 3.4/3.6 MB | 33/451 kB | 33/492 kB
2024-08-30T19:20:28.3604791Z Progress (3): 3.4/3.6 MB | 33/451 kB | 49/492 kB
2024-08-30T19:20:28.3605026Z Progress (3): 3.5/3.6 MB | 33/451 kB | 49/492 kB
2024-08-30T19:20:28.3605249Z Progress (3): 3.5/3.6 MB | 33/451 kB | 66/492 kB
2024-08-30T19:20:28.3605470Z Progress (3): 3.5/3.6 MB | 33/451 kB | 66/492 kB
2024-08-30T19:20:28.3605703Z Progress (3): 3.5/3.6 MB | 49/451 kB | 66/492 kB
2024-08-30T19:20:28.3605936Z Progress (3): 3.5/3.6 MB | 49/451 kB | 82/492 kB
2024-08-30T19:20:28.3606166Z Progress (3): 3.5/3.6 MB | 49/451 kB | 82/492 kB
2024-08-30T19:20:28.3606392Z Progress (3): 3.5/3.6 MB | 49/451 kB | 98/492 kB
2024-08-30T19:20:28.3606619Z Progress (3): 3.5/3.6 MB | 49/451 kB | 98/492 kB
2024-08-30T19:20:28.3606862Z Progress (3): 3.5/3.6 MB | 49/451 kB | 114/492 kB
2024-08-30T19:20:28.3607110Z Progress (3): 3.5/3.6 MB | 49/451 kB | 114/492 kB
2024-08-30T19:20:28.3607339Z Progress (3): 3.5/3.6 MB | 49/451 kB | 131/492 kB
2024-08-30T19:20:28.3607578Z Progress (3): 3.5/3.6 MB | 49/451 kB | 147/492 kB
2024-08-30T19:20:28.3607809Z Progress (3): 3.5/3.6 MB | 49/451 kB | 147/492 kB
2024-08-30T19:20:28.3608036Z Progress (3): 3.5/3.6 MB | 49/451 kB | 164/492 kB
2024-08-30T19:20:28.3608275Z Progress (3): 3.6/3.6 MB | 49/451 kB | 164/492 kB
2024-08-30T19:20:28.3608503Z Progress (3): 3.6/3.6 MB | 49/451 kB | 180/492 kB
2024-08-30T19:20:28.3608729Z Progress (3): 3.6/3.6 MB | 49/451 kB | 180/492 kB
2024-08-30T19:20:28.3608974Z Progress (3): 3.6/3.6 MB | 49/451 kB | 196/492 kB
2024-08-30T19:20:28.3609296Z Progress (4): 3.6/3.6 MB | 49/451 kB | 196/492 kB | 16/65 kB
2024-08-30T19:20:28.3609615Z Progress (4): 3.6/3.6 MB | 49/451 kB | 196/492 kB | 16/65 kB
2024-08-30T19:20:28.3609920Z Progress (4): 3.6/3.6 MB | 49/451 kB | 213/492 kB | 16/65 kB
2024-08-30T19:20:28.3610446Z Progress (4): 3.6/3.6 MB | 49/451 kB | 213/492 kB | 31/65 kB
2024-08-30T19:20:28.3610774Z Progress (4): 3.6/3.6 MB | 49/451 kB | 229/492 kB | 31/65 kB
2024-08-30T19:20:28.3611255Z Progress (4): 3.6/3.6 MB | 49/451 kB | 229/492 kB | 31/65 kB
2024-08-30T19:20:28.3611553Z Progress (4): 3.6/3.6 MB | 49/451 kB | 246/492 kB | 31/65 kB
2024-08-30T19:20:28.3611854Z Progress (4): 3.6/3.6 MB | 49/451 kB | 246/492 kB | 31/65 kB
2024-08-30T19:20:28.3612165Z Progress (4): 3.6/3.6 MB | 49/451 kB | 246/492 kB | 48/65 kB
2024-08-30T19:20:28.3613050Z Progress (4): 3.6 MB | 49/451 kB | 246/492 kB | 48/65 kB    
2024-08-30T19:20:28.3613802Z Progress (4): 3.6 MB | 49/451 kB | 262/492 kB | 48/65 kB
2024-08-30T19:20:28.3614261Z Progress (4): 3.6 MB | 49/451 kB | 262/492 kB | 64/65 kB
2024-08-30T19:20:28.3614807Z Progress (4): 3.6 MB | 49/451 kB | 262/492 kB | 65 kB   
2024-08-30T19:20:28.3615544Z Progress (4): 3.6 MB | 49/451 kB | 278/492 kB | 65 kB
2024-08-30T19:20:28.3615842Z Progress (4): 3.6 MB | 49/451 kB | 295/492 kB | 65 kB
2024-08-30T19:20:28.3616563Z Progress (4): 3.6 MB | 49/451 kB | 311/492 kB | 65 kB
2024-08-30T19:20:28.3616956Z                                                      
2024-08-30T19:20:28.3620000Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-core/6.10.0/kubernetes-model-core-6.10.0.jar (3.6 MB at 4.9 MB/s)
2024-08-30T19:20:28.3622664Z #24 7.637 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-policy/6.10.0/kubernetes-model-policy-6.10.0.jar
2024-08-30T19:20:28.3625451Z #24 7.637 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-metrics/6.10.0/kubernetes-model-metrics-6.10.0.jar (65 kB at 88 kB/s)
2024-08-30T19:20:28.3628934Z #24 7.637 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-scheduling/6.10.0/kubernetes-model-scheduling-6.10.0.jar
2024-08-30T19:20:28.3629211Z #24 7.637 Progress (2): 49/451 kB | 327/492 kB
2024-08-30T19:20:28.3629790Z Progress (2): 49/451 kB | 344/492 kB
2024-08-30T19:20:28.3630021Z Progress (2): 49/451 kB | 360/492 kB
2024-08-30T19:20:28.3630585Z Progress (2): 65/451 kB | 360/492 kB
2024-08-30T19:20:28.3630777Z Progress (2): 65/451 kB | 377/492 kB
2024-08-30T19:20:28.3631352Z Progress (2): 81/451 kB | 377/492 kB
2024-08-30T19:20:28.3631543Z Progress (2): 81/451 kB | 393/492 kB
2024-08-30T19:20:28.3631728Z Progress (2): 97/451 kB | 393/492 kB
2024-08-30T19:20:28.3632173Z Progress (3): 97/451 kB | 393/492 kB | 16/903 kB
2024-08-30T19:20:28.3632416Z Progress (3): 97/451 kB | 409/492 kB | 16/903 kB
2024-08-30T19:20:28.3632991Z Progress (3): 114/451 kB | 409/492 kB | 16/903 kB
2024-08-30T19:20:28.3633275Z Progress (3): 114/451 kB | 409/492 kB | 33/903 kB
2024-08-30T19:20:28.3633689Z Progress (3): 114/451 kB | 426/492 kB | 33/903 kB
2024-08-30T19:20:28.3633934Z Progress (3): 130/451 kB | 426/492 kB | 33/903 kB
2024-08-30T19:20:28.3634183Z Progress (3): 130/451 kB | 426/492 kB | 49/903 kB
2024-08-30T19:20:28.3634738Z Progress (3): 130/451 kB | 442/492 kB | 49/903 kB
2024-08-30T19:20:28.3635002Z Progress (3): 146/451 kB | 442/492 kB | 49/903 kB
2024-08-30T19:20:28.3635397Z Progress (3): 146/451 kB | 442/492 kB | 63/903 kB
2024-08-30T19:20:28.3635645Z Progress (3): 146/451 kB | 459/492 kB | 63/903 kB
2024-08-30T19:20:28.3635887Z Progress (3): 163/451 kB | 459/492 kB | 63/903 kB
2024-08-30T19:20:28.3636613Z Progress (3): 163/451 kB | 459/492 kB | 79/903 kB
2024-08-30T19:20:28.3636867Z Progress (3): 163/451 kB | 475/492 kB | 79/903 kB
2024-08-30T19:20:28.3637370Z Progress (3): 179/451 kB | 475/492 kB | 79/903 kB
2024-08-30T19:20:28.3638115Z Progress (3): 179/451 kB | 475/492 kB | 95/903 kB
2024-08-30T19:20:28.3638389Z Progress (3): 179/451 kB | 491/492 kB | 95/903 kB
2024-08-30T19:20:28.3638643Z Progress (3): 179/451 kB | 492 kB | 95/903 kB    
2024-08-30T19:20:28.3639058Z Progress (3): 196/451 kB | 492 kB | 95/903 kB
2024-08-30T19:20:28.3639298Z Progress (3): 196/451 kB | 492 kB | 112/903 kB
2024-08-30T19:20:28.3639914Z Progress (3): 212/451 kB | 492 kB | 112/903 kB
2024-08-30T19:20:28.3640661Z Progress (3): 212/451 kB | 492 kB | 128/903 kB
2024-08-30T19:20:28.3640895Z                                               
2024-08-30T19:20:28.3643803Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-networking/6.10.0/kubernetes-model-networking-6.10.0.jar (492 kB at 668 kB/s)
2024-08-30T19:20:28.3644269Z #24 7.637 Progress (2): 228/451 kB | 128/903 kB
2024-08-30T19:20:28.3644482Z Progress (2): 228/451 kB | 145/903 kB
2024-08-30T19:20:28.3644652Z                                      
2024-08-30T19:20:28.3646606Z Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-storageclass/6.10.0/kubernetes-model-storageclass-6.10.0.jar
2024-08-30T19:20:28.3646878Z #24 7.637 Progress (2): 228/451 kB | 161/903 kB
2024-08-30T19:20:28.3647077Z Progress (2): 245/451 kB | 161/903 kB
2024-08-30T19:20:28.3647266Z Progress (2): 245/451 kB | 177/903 kB
2024-08-30T19:20:28.3647470Z Progress (2): 261/451 kB | 177/903 kB
2024-08-30T19:20:28.3648005Z Progress (2): 278/451 kB | 177/903 kB
2024-08-30T19:20:28.3648199Z Progress (2): 278/451 kB | 194/903 kB
2024-08-30T19:20:28.3648935Z Progress (2): 278/451 kB | 210/903 kB
2024-08-30T19:20:28.3649136Z Progress (2): 294/451 kB | 210/903 kB
2024-08-30T19:20:28.3649656Z Progress (2): 294/451 kB | 226/903 kB
2024-08-30T19:20:28.3649989Z Progress (2): 310/451 kB | 226/903 kB
2024-08-30T19:20:28.3650493Z Progress (2): 310/451 kB | 243/903 kB
2024-08-30T19:20:28.3650700Z Progress (2): 327/451 kB | 243/903 kB
2024-08-30T19:20:28.3650867Z Progress (2): 343/451 kB | 243/903 kB
2024-08-30T19:20:28.3651282Z Progress (2): 343/451 kB | 259/903 kB
2024-08-30T19:20:28.3651747Z Progress (2): 359/451 kB | 259/903 kB
2024-08-30T19:20:28.3652095Z Progress (2): 359/451 kB | 276/903 kB
2024-08-30T19:20:28.3652269Z Progress (2): 376/451 kB | 276/903 kB
2024-08-30T19:20:28.3652446Z Progress (2): 376/451 kB | 292/903 kB
2024-08-30T19:20:28.3652612Z Progress (2): 376/451 kB | 308/903 kB
2024-08-30T19:20:28.3653057Z Progress (2): 392/451 kB | 308/903 kB
2024-08-30T19:20:28.3653654Z Progress (2): 409/451 kB | 308/903 kB
2024-08-30T19:20:28.3653839Z Progress (2): 409/451 kB | 325/903 kB
2024-08-30T19:20:28.3654025Z Progress (2): 409/451 kB | 341/903 kB
2024-08-30T19:20:28.3654214Z Progress (2): 425/451 kB | 341/903 kB
2024-08-30T19:20:28.3654403Z Progress (2): 425/451 kB | 358/903 kB
2024-08-30T19:20:28.3655810Z Progress (2): 425/451 kB | 374/903 kB
2024-08-30T19:20:28.3656015Z Progress (2): 425/451 kB | 390/903 kB
2024-08-30T19:20:28.3656659Z Progress (2): 425/451 kB | 407/903 kB
2024-08-30T19:20:28.4096958Z Progress (2): 425/451 kB | 423/903 kB
2024-08-30T19:20:28.4097642Z Progress (2): 425/451 kB | 439/903 kB
2024-08-30T19:20:28.4098211Z Progress (2): 425/451 kB | 456/903 kB
2024-08-30T19:20:28.4098753Z Progress (2): 425/451 kB | 472/903 kB
2024-08-30T19:20:28.4099306Z Progress (2): 425/451 kB | 489/903 kB
2024-08-30T19:20:28.4099838Z Progress (2): 425/451 kB | 505/903 kB
2024-08-30T19:20:28.4100387Z Progress (2): 425/451 kB | 521/903 kB
2024-08-30T19:20:28.4100907Z Progress (2): 425/451 kB | 538/903 kB
2024-08-30T19:20:28.4101418Z Progress (2): 425/451 kB | 554/903 kB
2024-08-30T19:20:28.4101947Z Progress (2): 425/451 kB | 571/903 kB
2024-08-30T19:20:28.4102452Z Progress (2): 425/451 kB | 587/903 kB
2024-08-30T19:20:28.4103319Z Progress (2): 425/451 kB | 603/903 kB
2024-08-30T19:20:28.4103852Z Progress (2): 425/451 kB | 620/903 kB
2024-08-30T19:20:28.4104384Z Progress (2): 425/451 kB | 636/903 kB
2024-08-30T19:20:28.4104901Z Progress (2): 425/451 kB | 652/903 kB
2024-08-30T19:20:28.4105421Z Progress (2): 425/451 kB | 669/903 kB
2024-08-30T19:20:28.4105965Z Progress (2): 425/451 kB | 685/903 kB
2024-08-30T19:20:28.4106466Z Progress (2): 425/451 kB | 702/903 kB
2024-08-30T19:20:28.4106982Z Progress (2): 425/451 kB | 718/903 kB
2024-08-30T19:20:28.4107562Z Progress (3): 425/451 kB | 718/903 kB | 16/56 kB
2024-08-30T19:20:28.4108222Z Progress (3): 425/451 kB | 718/903 kB | 33/56 kB
2024-08-30T19:20:28.4109164Z Progress (3): 425/451 kB | 718/903 kB | 49/56 kB
2024-08-30T19:20:28.4109834Z Progress (3): 425/451 kB | 718/903 kB | 56 kB   
2024-08-30T19:20:28.4110538Z Progress (4): 425/451 kB | 718/903 kB | 56 kB | 16/339 kB
2024-08-30T19:20:28.4111245Z                                                          
2024-08-30T19:20:28.4113746Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-scheduling/6.10.0/kubernetes-model-scheduling-6.10.0.jar (56 kB at 74 kB/s)
2024-08-30T19:20:28.4116456Z #24 7.653 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-node/6.10.0/kubernetes-model-node-6.10.0.jar
2024-08-30T19:20:28.4119535Z #24 7.653 Progress (3): 425/451 kB | 718/903 kB | 32/339 kB
2024-08-30T19:20:28.4120343Z Progress (3): 425/451 kB | 718/903 kB | 49/339 kB
2024-08-30T19:20:28.4121048Z Progress (3): 425/451 kB | 718/903 kB | 65/339 kB
2024-08-30T19:20:28.4121693Z Progress (3): 425/451 kB | 718/903 kB | 81/339 kB
2024-08-30T19:20:28.4123686Z Progress (3): 425/451 kB | 718/903 kB | 98/339 kB
2024-08-30T19:20:28.4124390Z Progress (3): 425/451 kB | 718/903 kB | 114/339 kB
2024-08-30T19:20:28.4125075Z Progress (3): 425/451 kB | 718/903 kB | 130/339 kB
2024-08-30T19:20:28.4127461Z Progress (3): 425/451 kB | 718/903 kB | 147/339 kB
2024-08-30T19:20:28.4128148Z Progress (3): 425/451 kB | 718/903 kB | 163/339 kB
2024-08-30T19:20:28.4128822Z Progress (3): 425/451 kB | 718/903 kB | 180/339 kB
2024-08-30T19:20:28.4129475Z Progress (3): 425/451 kB | 718/903 kB | 196/339 kB
2024-08-30T19:20:28.4130142Z Progress (3): 425/451 kB | 718/903 kB | 212/339 kB
2024-08-30T19:20:28.4133092Z Progress (3): 425/451 kB | 718/903 kB | 229/339 kB
2024-08-30T19:20:28.4134126Z Progress (3): 425/451 kB | 718/903 kB | 245/339 kB
2024-08-30T19:20:28.4134813Z Progress (3): 425/451 kB | 718/903 kB | 262/339 kB
2024-08-30T19:20:28.4135491Z Progress (3): 441/451 kB | 718/903 kB | 262/339 kB
2024-08-30T19:20:28.4137982Z Progress (3): 451 kB | 718/903 kB | 262/339 kB    
2024-08-30T19:20:28.4138682Z Progress (3): 451 kB | 718/903 kB | 278/339 kB
2024-08-30T19:20:28.4139314Z Progress (3): 451 kB | 718/903 kB | 294/339 kB
2024-08-30T19:20:28.4139939Z Progress (3): 451 kB | 718/903 kB | 311/339 kB
2024-08-30T19:20:28.4142858Z                                               
2024-08-30T19:20:28.4144817Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-extensions/6.10.0/kubernetes-model-extensions-6.10.0.jar (451 kB at 599 kB/s)
2024-08-30T19:20:28.4146509Z #24 7.653 Progress (2): 718/903 kB | 327/339 kB
2024-08-30T19:20:28.4147092Z                                      
2024-08-30T19:20:28.4222678Z Downloading from central: https://repo.maven.apache.org/maven2/org/snakeyaml/snakeyaml-engine/2.7/snakeyaml-engine-2.7.jar
2024-08-30T19:20:28.4224160Z #24 7.653 Progress (2): 718/903 kB | 339 kB
2024-08-30T19:20:28.4224723Z                                  
2024-08-30T19:20:28.4226633Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-storageclass/6.10.0/kubernetes-model-storageclass-6.10.0.jar (339 kB at 451 kB/s)
2024-08-30T19:20:28.4229691Z #24 7.653 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar
2024-08-30T19:20:28.4231434Z #24 7.653 Progress (2): 718/903 kB | 16/129 kB
2024-08-30T19:20:28.4232026Z Progress (2): 718/903 kB | 33/129 kB
2024-08-30T19:20:28.4232604Z Progress (3): 718/903 kB | 33/129 kB | 15/293 kB
2024-08-30T19:20:28.4233278Z Progress (3): 718/903 kB | 49/129 kB | 15/293 kB
2024-08-30T19:20:28.4233914Z Progress (3): 718/903 kB | 49/129 kB | 31/293 kB
2024-08-30T19:20:28.4234564Z Progress (3): 718/903 kB | 64/129 kB | 31/293 kB
2024-08-30T19:20:28.4235197Z Progress (3): 718/903 kB | 64/129 kB | 48/293 kB
2024-08-30T19:20:28.4235826Z Progress (3): 718/903 kB | 80/129 kB | 48/293 kB
2024-08-30T19:20:28.4236462Z Progress (3): 718/903 kB | 80/129 kB | 64/293 kB
2024-08-30T19:20:28.4237431Z Progress (3): 718/903 kB | 96/129 kB | 64/293 kB
2024-08-30T19:20:28.4238078Z Progress (3): 718/903 kB | 96/129 kB | 80/293 kB
2024-08-30T19:20:28.4238713Z Progress (3): 718/903 kB | 113/129 kB | 80/293 kB
2024-08-30T19:20:28.4239395Z Progress (3): 718/903 kB | 113/129 kB | 97/293 kB
2024-08-30T19:20:28.4240028Z Progress (3): 718/903 kB | 129 kB | 97/293 kB    
2024-08-30T19:20:28.4240662Z Progress (3): 718/903 kB | 129 kB | 113/293 kB
2024-08-30T19:20:28.4241342Z Progress (4): 718/903 kB | 129 kB | 113/293 kB | 15/269 kB
2024-08-30T19:20:28.4242116Z Progress (4): 718/903 kB | 129 kB | 129/293 kB | 15/269 kB
2024-08-30T19:20:28.4242862Z Progress (4): 718/903 kB | 129 kB | 146/293 kB | 15/269 kB
2024-08-30T19:20:28.4243616Z Progress (4): 718/903 kB | 129 kB | 146/293 kB | 31/269 kB
2024-08-30T19:20:28.4244301Z                                                           
2024-08-30T19:20:28.4246124Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-node/6.10.0/kubernetes-model-node-6.10.0.jar (129 kB at 171 kB/s)
2024-08-30T19:20:28.4248867Z #24 7.653 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-httpclient-okhttp/6.10.0/kubernetes-httpclient-okhttp-6.10.0.jar
2024-08-30T19:20:28.4250560Z #24 7.653 Progress (3): 718/903 kB | 146/293 kB | 48/269 kB
2024-08-30T19:20:28.4251496Z Progress (3): 718/903 kB | 162/293 kB | 48/269 kB
2024-08-30T19:20:28.4252159Z Progress (3): 718/903 kB | 179/293 kB | 48/269 kB
2024-08-30T19:20:28.4252816Z Progress (3): 718/903 kB | 179/293 kB | 64/269 kB
2024-08-30T19:20:28.4253464Z Progress (3): 718/903 kB | 179/293 kB | 78/269 kB
2024-08-30T19:20:28.4254366Z Progress (3): 718/903 kB | 195/293 kB | 78/269 kB
2024-08-30T19:20:28.4255006Z Progress (3): 718/903 kB | 195/293 kB | 95/269 kB
2024-08-30T19:20:28.4255662Z Progress (3): 718/903 kB | 211/293 kB | 95/269 kB
2024-08-30T19:20:28.4256304Z Progress (3): 718/903 kB | 211/293 kB | 111/269 kB
2024-08-30T19:20:28.4256981Z Progress (3): 718/903 kB | 228/293 kB | 111/269 kB
2024-08-30T19:20:28.4257644Z Progress (3): 718/903 kB | 244/293 kB | 111/269 kB
2024-08-30T19:20:28.4258307Z Progress (3): 718/903 kB | 244/293 kB | 128/269 kB
2024-08-30T19:20:28.4258961Z Progress (3): 718/903 kB | 260/293 kB | 128/269 kB
2024-08-30T19:20:28.4259608Z Progress (3): 718/903 kB | 260/293 kB | 144/269 kB
2024-08-30T19:20:28.4260271Z Progress (3): 718/903 kB | 277/293 kB | 144/269 kB
2024-08-30T19:20:28.4260926Z Progress (3): 718/903 kB | 277/293 kB | 160/269 kB
2024-08-30T19:20:28.4261588Z Progress (3): 718/903 kB | 293/293 kB | 160/269 kB
2024-08-30T19:20:28.4262227Z Progress (3): 718/903 kB | 293 kB | 160/269 kB    
2024-08-30T19:20:28.4262877Z Progress (3): 718/903 kB | 293 kB | 177/269 kB
2024-08-30T19:20:28.4263562Z Progress (4): 718/903 kB | 293 kB | 177/269 kB | 16/55 kB
2024-08-30T19:20:28.4264322Z Progress (4): 718/903 kB | 293 kB | 193/269 kB | 16/55 kB
2024-08-30T19:20:28.4265051Z Progress (4): 718/903 kB | 293 kB | 193/269 kB | 32/55 kB
2024-08-30T19:20:28.4265738Z                                                          
2024-08-30T19:20:28.4267458Z Downloaded from central: https://repo.maven.apache.org/maven2/org/snakeyaml/snakeyaml-engine/2.7/snakeyaml-engine-2.7.jar (293 kB at 382 kB/s)
2024-08-30T19:20:28.4268982Z #24 7.667 Progress (3): 718/903 kB | 193/269 kB | 49/55 kB
2024-08-30T19:20:28.4269691Z Progress (3): 718/903 kB | 210/269 kB | 49/55 kB
2024-08-30T19:20:28.4270296Z                                                 
2024-08-30T19:20:28.4271665Z Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp/4.12.0/okhttp-4.12.0.jar
2024-08-30T19:20:28.4272930Z #24 7.667 Progress (3): 718/903 kB | 210/269 kB | 55 kB
2024-08-30T19:20:28.4273645Z Progress (3): 718/903 kB | 226/269 kB | 55 kB
2024-08-30T19:20:28.4274266Z Progress (3): 718/903 kB | 242/269 kB | 55 kB
2024-08-30T19:20:28.4274847Z                                              
2024-08-30T19:20:28.4277249Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar (55 kB at 71 kB/s)
2024-08-30T19:20:28.4279181Z #24 7.667 Progress (2): 718/903 kB | 259/269 kB
2024-08-30T19:20:28.4279774Z                                      
2024-08-30T19:20:28.4281027Z Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio/3.6.0/okio-3.6.0.jar
2024-08-30T19:20:28.4282179Z #24 7.668 Progress (2): 718/903 kB | 269 kB
2024-08-30T19:20:28.4282762Z                                  
2024-08-30T19:20:28.4360992Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-policy/6.10.0/kubernetes-model-policy-6.10.0.jar (269 kB at 350 kB/s)
2024-08-30T19:20:28.4363553Z #24 7.668 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio-jvm/3.6.0/okio-jvm-3.6.0.jar
2024-08-30T19:20:28.4364872Z #24 7.668 Progress (2): 718/903 kB | 16/31 kB
2024-08-30T19:20:28.4365444Z Progress (2): 718/903 kB | 31 kB   
2024-08-30T19:20:28.4365972Z                                 
2024-08-30T19:20:28.4367837Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-httpclient-okhttp/6.10.0/kubernetes-httpclient-okhttp-6.10.0.jar (31 kB at 41 kB/s)
2024-08-30T19:20:28.4370636Z #24 7.668 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-common/1.9.22/kotlin-stdlib-common-1.9.22.jar
2024-08-30T19:20:28.4374012Z #24 7.668 Progress (1): 734/903 kB
2024-08-30T19:20:28.4374611Z Progress (2): 734/903 kB | 16/26 kB
2024-08-30T19:20:28.4376385Z Progress (2): 734/903 kB | 26 kB   
2024-08-30T19:20:28.4376926Z Progress (2): 751/903 kB | 26 kB
2024-08-30T19:20:28.4378893Z Progress (2): 767/903 kB | 26 kB
2024-08-30T19:20:28.4379514Z Progress (3): 767/903 kB | 26 kB | 16/790 kB
2024-08-30T19:20:28.4380200Z Progress (3): 784/903 kB | 26 kB | 16/790 kB
2024-08-30T19:20:28.4380830Z                                             
2024-08-30T19:20:28.4382328Z Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio/3.6.0/okio-3.6.0.jar (26 kB at 33 kB/s)
2024-08-30T19:20:28.4384563Z #24 7.673 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.22/kotlin-stdlib-jdk8-1.9.22.jar
2024-08-30T19:20:28.4386154Z #24 7.673 Progress (2): 800/903 kB | 16/790 kB
2024-08-30T19:20:28.4386754Z Progress (2): 800/903 kB | 33/790 kB
2024-08-30T19:20:28.4387309Z Progress (2): 816/903 kB | 33/790 kB
2024-08-30T19:20:28.4387861Z Progress (2): 833/903 kB | 33/790 kB
2024-08-30T19:20:28.4388374Z Progress (2): 833/903 kB | 49/790 kB
2024-08-30T19:20:28.4388885Z Progress (2): 849/903 kB | 49/790 kB
2024-08-30T19:20:28.4389446Z Progress (2): 849/903 kB | 63/790 kB
2024-08-30T19:20:28.4389967Z Progress (2): 865/903 kB | 63/790 kB
2024-08-30T19:20:28.4390503Z Progress (2): 865/903 kB | 80/790 kB
2024-08-30T19:20:28.4391059Z Progress (2): 882/903 kB | 80/790 kB
2024-08-30T19:20:28.4391568Z Progress (2): 882/903 kB | 96/790 kB
2024-08-30T19:20:28.4392093Z Progress (2): 898/903 kB | 96/790 kB
2024-08-30T19:20:28.4392628Z Progress (2): 903 kB | 96/790 kB    
2024-08-30T19:20:28.4393139Z Progress (2): 903 kB | 113/790 kB
2024-08-30T19:20:28.4393645Z Progress (2): 903 kB | 129/790 kB
2024-08-30T19:20:28.4394155Z                                  
2024-08-30T19:20:28.4396030Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-flowcontrol/6.10.0/kubernetes-model-flowcontrol-6.10.0.jar (903 kB at 1.2 MB/s)
2024-08-30T19:20:28.4397723Z #24 7.674 Progress (1): 145/790 kB
2024-08-30T19:20:28.4398244Z                         
2024-08-30T19:20:28.4399646Z Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.9.22/kotlin-stdlib-1.9.22.jar
2024-08-30T19:20:28.4401420Z #24 7.674 Progress (1): 162/790 kB
2024-08-30T19:20:28.4401964Z Progress (2): 162/790 kB | 16/227 kB
2024-08-30T19:20:28.4402511Z Progress (2): 178/790 kB | 16/227 kB
2024-08-30T19:20:28.4403049Z Progress (2): 194/790 kB | 16/227 kB
2024-08-30T19:20:28.4403851Z Progress (2): 194/790 kB | 33/227 kB
2024-08-30T19:20:28.4404375Z Progress (2): 211/790 kB | 33/227 kB
2024-08-30T19:20:28.4404900Z Progress (2): 211/790 kB | 49/227 kB
2024-08-30T19:20:28.4405470Z Progress (2): 227/790 kB | 49/227 kB
2024-08-30T19:20:28.4405989Z Progress (2): 227/790 kB | 66/227 kB
2024-08-30T19:20:28.4406511Z Progress (2): 244/790 kB | 66/227 kB
2024-08-30T19:20:28.4407056Z Progress (2): 244/790 kB | 80/227 kB
2024-08-30T19:20:28.4407561Z Progress (2): 260/790 kB | 80/227 kB
2024-08-30T19:20:28.4408067Z Progress (2): 260/790 kB | 97/227 kB
2024-08-30T19:20:28.4408938Z Progress (2): 276/790 kB | 97/227 kB
2024-08-30T19:20:28.4409557Z Progress (2): 276/790 kB | 113/227 kB
2024-08-30T19:20:28.4410102Z Progress (2): 293/790 kB | 113/227 kB
2024-08-30T19:20:28.4410657Z Progress (2): 309/790 kB | 113/227 kB
2024-08-30T19:20:28.4421048Z Progress (3): 309/790 kB | 113/227 kB | 967 B
2024-08-30T19:20:28.4421787Z Progress (3): 326/790 kB | 113/227 kB | 967 B
2024-08-30T19:20:28.4422433Z Progress (3): 342/790 kB | 113/227 kB | 967 B
2024-08-30T19:20:28.4423087Z Progress (3): 358/790 kB | 113/227 kB | 967 B
2024-08-30T19:20:28.4423672Z                                              
2024-08-30T19:20:28.4427158Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.22/kotlin-stdlib-jdk8-1.9.22.jar (967 B at 1.2 kB/s)
2024-08-30T19:20:28.4431784Z #24 7.676 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.22/kotlin-stdlib-jdk7-1.9.22.jar
2024-08-30T19:20:28.4435175Z #24 7.676 Progress (2): 375/790 kB | 113/227 kB
2024-08-30T19:20:28.4437514Z Progress (2): 391/790 kB | 113/227 kB
2024-08-30T19:20:28.4438115Z Progress (2): 391/790 kB | 129/227 kB
2024-08-30T19:20:28.4438672Z Progress (2): 407/790 kB | 129/227 kB
2024-08-30T19:20:28.4439193Z Progress (2): 407/790 kB | 146/227 kB
2024-08-30T19:20:28.4439727Z Progress (2): 424/790 kB | 146/227 kB
2024-08-30T19:20:28.4440281Z Progress (2): 424/790 kB | 162/227 kB
2024-08-30T19:20:28.4442024Z Progress (2): 440/790 kB | 162/227 kB
2024-08-30T19:20:28.4442611Z Progress (2): 440/790 kB | 178/227 kB
2024-08-30T19:20:28.4443181Z Progress (2): 457/790 kB | 178/227 kB
2024-08-30T19:20:28.4443741Z Progress (2): 457/790 kB | 195/227 kB
2024-08-30T19:20:28.4444251Z Progress (2): 473/790 kB | 195/227 kB
2024-08-30T19:20:28.4444789Z Progress (2): 473/790 kB | 211/227 kB
2024-08-30T19:20:28.4446688Z Progress (2): 489/790 kB | 211/227 kB
2024-08-30T19:20:28.4447230Z Progress (2): 489/790 kB | 227 kB    
2024-08-30T19:20:28.4447779Z Progress (2): 506/790 kB | 227 kB
2024-08-30T19:20:28.4448301Z Progress (2): 522/790 kB | 227 kB
2024-08-30T19:20:28.4448813Z                                  
2024-08-30T19:20:28.4501397Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-common/1.9.22/kotlin-stdlib-common-1.9.22.jar (227 kB at 293 kB/s)
2024-08-30T19:20:28.4507490Z #24 7.677 Progress (1): 539/790 kB
2024-08-30T19:20:28.4508054Z                         
2024-08-30T19:20:28.4509758Z Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/logging-interceptor/4.12.0/logging-interceptor-4.12.0.jar
2024-08-30T19:20:28.4511234Z #24 7.677 Progress (1): 555/790 kB
2024-08-30T19:20:28.4511757Z Progress (1): 571/790 kB
2024-08-30T19:20:28.4512198Z Progress (1): 588/790 kB
2024-08-30T19:20:28.4512648Z Progress (1): 604/790 kB
2024-08-30T19:20:28.4513032Z Progress (1): 620/790 kB
2024-08-30T19:20:28.4513463Z Progress (1): 637/790 kB
2024-08-30T19:20:28.4514627Z Progress (1): 653/790 kB
2024-08-30T19:20:28.4515120Z Progress (1): 670/790 kB
2024-08-30T19:20:28.4516163Z Progress (2): 670/790 kB | 961 B
2024-08-30T19:20:28.4516717Z Progress (2): 686/790 kB | 961 B
2024-08-30T19:20:28.4517214Z Progress (2): 702/790 kB | 961 B
2024-08-30T19:20:28.4518499Z Progress (2): 719/790 kB | 961 B
2024-08-30T19:20:28.4519003Z                                 
2024-08-30T19:20:28.4521143Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.22/kotlin-stdlib-jdk7-1.9.22.jar (961 B at 1.2 kB/s)
2024-08-30T19:20:28.4525398Z #24 7.677 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/zjsonpatch/0.3.0/zjsonpatch-0.3.0.jar
2024-08-30T19:20:28.4526631Z #24 7.677 Progress (1): 735/790 kB
2024-08-30T19:20:28.4527157Z Progress (1): 752/790 kB
2024-08-30T19:20:28.4529684Z Progress (1): 768/790 kB
2024-08-30T19:20:28.4530436Z Progress (1): 784/790 kB
2024-08-30T19:20:28.4536060Z Progress (1): 790 kB    
2024-08-30T19:20:28.4538105Z                     
2024-08-30T19:20:28.4544239Z Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp/4.12.0/okhttp-4.12.0.jar (790 kB at 1.0 MB/s)
2024-08-30T19:20:28.4546434Z #24 7.678 Downloading from central: https://repo.maven.apache.org/maven2/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar
2024-08-30T19:20:28.4547587Z #24 7.678 Progress (1): 16/360 kB
2024-08-30T19:20:28.4548140Z Progress (1): 32/360 kB
2024-08-30T19:20:28.4548548Z Progress (1): 49/360 kB
2024-08-30T19:20:28.4548981Z Progress (1): 65/360 kB
2024-08-30T19:20:28.4549401Z Progress (1): 81/360 kB
2024-08-30T19:20:28.4549813Z Progress (1): 97/360 kB
2024-08-30T19:20:28.4550245Z Progress (1): 113/360 kB
2024-08-30T19:20:28.4550685Z Progress (1): 130/360 kB
2024-08-30T19:20:28.4551144Z Progress (2): 130/360 kB | 16/36 kB
2024-08-30T19:20:28.4551659Z Progress (2): 146/360 kB | 16/36 kB
2024-08-30T19:20:28.4552185Z Progress (2): 162/360 kB | 16/36 kB
2024-08-30T19:20:28.4552726Z Progress (2): 162/360 kB | 32/36 kB
2024-08-30T19:20:28.4553281Z Progress (3): 162/360 kB | 32/36 kB | 0/1.7 MB
2024-08-30T19:20:28.4558258Z Progress (3): 162/360 kB | 36 kB | 0/1.7 MB   
2024-08-30T19:20:28.4558929Z Progress (3): 179/360 kB | 36 kB | 0/1.7 MB
2024-08-30T19:20:28.4560752Z Progress (3): 179/360 kB | 36 kB | 0/1.7 MB
2024-08-30T19:20:28.4561393Z Progress (3): 195/360 kB | 36 kB | 0/1.7 MB
2024-08-30T19:20:28.4563128Z Progress (3): 195/360 kB | 36 kB | 0/1.7 MB
2024-08-30T19:20:28.4563768Z                                            
2024-08-30T19:20:28.4566290Z Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/zjsonpatch/0.3.0/zjsonpatch-0.3.0.jar (36 kB at 46 kB/s)
2024-08-30T19:20:28.4569400Z #24 7.679 Progress (2): 195/360 kB | 0.1/1.7 MB
2024-08-30T19:20:28.4570387Z                                      
2024-08-30T19:20:28.4573093Z Downloading from central: https://repo.maven.apache.org/maven2/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar
2024-08-30T19:20:28.4574363Z #24 7.679 Progress (2): 195/360 kB | 0.1/1.7 MB
2024-08-30T19:20:28.4575003Z Progress (2): 195/360 kB | 0.1/1.7 MB
2024-08-30T19:20:28.4575592Z Progress (3): 195/360 kB | 0.1/1.7 MB | 16 kB
2024-08-30T19:20:28.4576214Z Progress (3): 195/360 kB | 0.1/1.7 MB | 16 kB
2024-08-30T19:20:28.4576818Z Progress (3): 195/360 kB | 0.1/1.7 MB | 16 kB
2024-08-30T19:20:28.4577446Z Progress (3): 195/360 kB | 0.1/1.7 MB | 16 kB
2024-08-30T19:20:28.4578203Z Progress (4): 195/360 kB | 0.1/1.7 MB | 16 kB | 16/334 kB
2024-08-30T19:20:28.4578897Z                                                          
2024-08-30T19:20:28.4580756Z Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/logging-interceptor/4.12.0/logging-interceptor-4.12.0.jar (16 kB at 20 kB/s)
2024-08-30T19:20:28.4583737Z #24 7.681 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-websocket/3.2.2/spring-boot-starter-websocket-3.2.2.jar
2024-08-30T19:20:28.4585554Z #24 7.681 Progress (3): 195/360 kB | 0.1/1.7 MB | 33/334 kB
2024-08-30T19:20:28.4586295Z Progress (3): 195/360 kB | 0.2/1.7 MB | 33/334 kB
2024-08-30T19:20:28.4586950Z Progress (3): 195/360 kB | 0.2/1.7 MB | 49/334 kB
2024-08-30T19:20:28.4587607Z Progress (3): 195/360 kB | 0.2/1.7 MB | 49/334 kB
2024-08-30T19:20:28.4588252Z Progress (3): 195/360 kB | 0.2/1.7 MB | 65/334 kB
2024-08-30T19:20:28.4588912Z Progress (3): 195/360 kB | 0.2/1.7 MB | 81/334 kB
2024-08-30T19:20:28.4589842Z Progress (3): 195/360 kB | 0.2/1.7 MB | 97/334 kB
2024-08-30T19:20:28.4590512Z Progress (3): 195/360 kB | 0.2/1.7 MB | 114/334 kB
2024-08-30T19:20:28.4591190Z Progress (3): 195/360 kB | 0.2/1.7 MB | 114/334 kB
2024-08-30T19:20:28.4591841Z Progress (3): 195/360 kB | 0.2/1.7 MB | 130/334 kB
2024-08-30T19:20:28.4592501Z Progress (3): 195/360 kB | 0.2/1.7 MB | 130/334 kB
2024-08-30T19:20:28.4593140Z Progress (3): 195/360 kB | 0.2/1.7 MB | 147/334 kB
2024-08-30T19:20:28.4593793Z Progress (3): 195/360 kB | 0.2/1.7 MB | 147/334 kB
2024-08-30T19:20:28.4594435Z Progress (3): 195/360 kB | 0.2/1.7 MB | 163/334 kB
2024-08-30T19:20:28.4595117Z Progress (3): 195/360 kB | 0.2/1.7 MB | 163/334 kB
2024-08-30T19:20:28.4595807Z Progress (3): 195/360 kB | 0.2/1.7 MB | 179/334 kB
2024-08-30T19:20:28.4596442Z Progress (3): 195/360 kB | 0.2/1.7 MB | 196/334 kB
2024-08-30T19:20:28.4597118Z Progress (3): 195/360 kB | 0.2/1.7 MB | 212/334 kB
2024-08-30T19:20:28.4597752Z Progress (3): 195/360 kB | 0.2/1.7 MB | 229/334 kB
2024-08-30T19:20:28.4598413Z Progress (3): 195/360 kB | 0.3/1.7 MB | 229/334 kB
2024-08-30T19:20:28.4599059Z Progress (3): 195/360 kB | 0.3/1.7 MB | 245/334 kB
2024-08-30T19:20:28.4599712Z Progress (3): 195/360 kB | 0.3/1.7 MB | 261/334 kB
2024-08-30T19:20:28.4600458Z Progress (4): 195/360 kB | 0.3/1.7 MB | 261/334 kB | 0/2.0 MB
2024-08-30T19:20:28.4601262Z Progress (4): 195/360 kB | 0.3/1.7 MB | 278/334 kB | 0/2.0 MB
2024-08-30T19:20:28.4602086Z Progress (4): 195/360 kB | 0.3/1.7 MB | 278/334 kB | 0/2.0 MB
2024-08-30T19:20:28.4602899Z Progress (4): 195/360 kB | 0.3/1.7 MB | 294/334 kB | 0/2.0 MB
2024-08-30T19:20:28.4603694Z Progress (4): 195/360 kB | 0.3/1.7 MB | 310/334 kB | 0/2.0 MB
2024-08-30T19:20:28.4604772Z Progress (4): 195/360 kB | 0.3/1.7 MB | 310/334 kB | 0/2.0 MB
2024-08-30T19:20:28.4605557Z Progress (4): 195/360 kB | 0.3/1.7 MB | 327/334 kB | 0/2.0 MB
2024-08-30T19:20:28.4606364Z Progress (4): 195/360 kB | 0.3/1.7 MB | 334 kB | 0/2.0 MB    
2024-08-30T19:20:28.4607146Z Progress (4): 195/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
2024-08-30T19:20:28.4607940Z Progress (4): 195/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
2024-08-30T19:20:28.4608699Z Progress (4): 212/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
2024-08-30T19:20:28.4609479Z Progress (4): 228/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
2024-08-30T19:20:28.4610243Z Progress (4): 228/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
2024-08-30T19:20:28.4610947Z                                                            
2024-08-30T19:20:28.4615164Z Downloaded from central: https://repo.maven.apache.org/maven2/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar (334 kB at 427 kB/s)
2024-08-30T19:20:28.4617519Z #24 7.685 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-websocket/6.1.3/spring-websocket-6.1.3.jar
2024-08-30T19:20:28.4619117Z #24 7.685 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.1/2.0 MB
2024-08-30T19:20:28.4619991Z Progress (4): 228/360 kB | 0.3/1.7 MB | 0.1/2.0 MB | 4.8 kB
2024-08-30T19:20:28.4620824Z Progress (4): 228/360 kB | 0.3/1.7 MB | 0.1/2.0 MB | 4.8 kB
2024-08-30T19:20:28.4621589Z Progress (4): 228/360 kB | 0.3/1.7 MB | 0.1/2.0 MB | 4.8 kB
2024-08-30T19:20:28.4622289Z                                                            
2024-08-30T19:20:28.4624374Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-websocket/3.2.2/spring-boot-starter-websocket-3.2.2.jar (4.8 kB at 6.1 kB/s)
2024-08-30T19:20:28.4627366Z #24 7.685 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-devtools/3.2.2/spring-boot-devtools-3.2.2.jar
2024-08-30T19:20:28.4629026Z #24 7.685 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
2024-08-30T19:20:28.4629771Z Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
2024-08-30T19:20:28.4630432Z Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
2024-08-30T19:20:28.4631093Z Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
2024-08-30T19:20:28.4631760Z Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
2024-08-30T19:20:28.4632676Z Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
2024-08-30T19:20:28.4633353Z Progress (3): 228/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4634013Z Progress (3): 228/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4634680Z Progress (3): 228/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4635363Z Progress (3): 244/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4636019Z Progress (3): 244/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4636665Z Progress (3): 261/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4637328Z Progress (3): 261/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4638005Z Progress (3): 277/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4638665Z Progress (3): 277/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4639325Z Progress (3): 294/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4639971Z Progress (3): 310/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
2024-08-30T19:20:28.4640646Z Progress (3): 310/360 kB | 0.3/1.7 MB | 0.4/2.0 MB
2024-08-30T19:20:28.4641310Z Progress (3): 326/360 kB | 0.3/1.7 MB | 0.4/2.0 MB
2024-08-30T19:20:28.4641949Z Progress (3): 326/360 kB | 0.3/1.7 MB | 0.4/2.0 MB
2024-08-30T19:20:28.4642682Z Progress (4): 326/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 16/203 kB
2024-08-30T19:20:28.4643497Z Progress (4): 343/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 16/203 kB
2024-08-30T19:20:28.4644321Z Progress (4): 359/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 16/203 kB
2024-08-30T19:20:28.4645101Z Progress (4): 359/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 16/203 kB
2024-08-30T19:20:28.4645929Z Progress (4): 359/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 33/203 kB
2024-08-30T19:20:28.4646938Z Progress (4): 360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 33/203 kB    
2024-08-30T19:20:28.4647731Z Progress (4): 360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 33/203 kB
2024-08-30T19:20:28.4648545Z Progress (4): 360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 49/203 kB
2024-08-30T19:20:28.4649315Z Progress (4): 360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 49/203 kB
2024-08-30T19:20:28.4650006Z                                                           
2024-08-30T19:20:28.4655844Z Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio-jvm/3.6.0/okio-jvm-3.6.0.jar (360 kB at 456 kB/s)
2024-08-30T19:20:28.4660651Z #24 7.690 Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar
2024-08-30T19:20:28.4661915Z #24 7.690 Progress (3): 0.3/1.7 MB | 0.4/2.0 MB | 49/203 kB
2024-08-30T19:20:28.4662646Z Progress (3): 0.3/1.7 MB | 0.4/2.0 MB | 66/203 kB
2024-08-30T19:20:28.4663336Z Progress (3): 0.3/1.7 MB | 0.4/2.0 MB | 80/203 kB
2024-08-30T19:20:28.4664014Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 80/203 kB
2024-08-30T19:20:28.4664654Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 96/203 kB
2024-08-30T19:20:28.4665287Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 96/203 kB
2024-08-30T19:20:28.4665970Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 113/203 kB
2024-08-30T19:20:28.4666655Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 113/203 kB
2024-08-30T19:20:28.4667354Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 113/203 kB
2024-08-30T19:20:28.4668034Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 129/203 kB
2024-08-30T19:20:28.4668674Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 145/203 kB
2024-08-30T19:20:28.4669359Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 145/203 kB
2024-08-30T19:20:28.4670015Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 162/203 kB
2024-08-30T19:20:28.4670682Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 162/203 kB
2024-08-30T19:20:28.4671371Z Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 178/203 kB
2024-08-30T19:20:28.4672020Z Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 178/203 kB
2024-08-30T19:20:28.4672715Z Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 195/203 kB
2024-08-30T19:20:28.4673371Z Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 203 kB    
2024-08-30T19:20:28.4674028Z Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 203 kB
2024-08-30T19:20:28.4674674Z Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 203 kB
2024-08-30T19:20:28.4675249Z                                               
2024-08-30T19:20:28.4677456Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-devtools/3.2.2/spring-boot-devtools-3.2.2.jar (203 kB at 257 kB/s)
2024-08-30T19:20:28.4680045Z #24 7.692 Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar
2024-08-30T19:20:28.4681365Z #24 7.692 Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
2024-08-30T19:20:28.4681991Z Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
2024-08-30T19:20:28.4682554Z Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
2024-08-30T19:20:28.4683067Z Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
2024-08-30T19:20:28.4683600Z Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
2024-08-30T19:20:28.4684157Z Progress (2): 0.4/1.7 MB | 0.6/2.0 MB
2024-08-30T19:20:28.4684660Z Progress (2): 0.4/1.7 MB | 0.6/2.0 MB
2024-08-30T19:20:28.4685175Z Progress (2): 0.4/1.7 MB | 0.6/2.0 MB
2024-08-30T19:20:28.4685724Z Progress (2): 0.4/1.7 MB | 0.6/2.0 MB
2024-08-30T19:20:28.4686278Z Progress (3): 0.4/1.7 MB | 0.6/2.0 MB | 16/385 kB
2024-08-30T19:20:28.4686957Z Progress (3): 0.4/1.7 MB | 0.6/2.0 MB | 16/385 kB
2024-08-30T19:20:28.4687596Z Progress (3): 0.4/1.7 MB | 0.6/2.0 MB | 16/385 kB
2024-08-30T19:20:28.4688261Z Progress (3): 0.4/1.7 MB | 0.6/2.0 MB | 33/385 kB
2024-08-30T19:20:28.4688947Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 33/385 kB
2024-08-30T19:20:28.4689577Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 33/385 kB
2024-08-30T19:20:28.4690219Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 49/385 kB
2024-08-30T19:20:28.4690879Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 49/385 kB
2024-08-30T19:20:28.4775651Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 64/385 kB
2024-08-30T19:20:28.4776795Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 64/385 kB
2024-08-30T19:20:28.4777463Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 81/385 kB
2024-08-30T19:20:28.4778176Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 81/385 kB
2024-08-30T19:20:28.4778796Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 97/385 kB
2024-08-30T19:20:28.4779446Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 97/385 kB
2024-08-30T19:20:28.4780105Z Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 113/385 kB
2024-08-30T19:20:28.4780785Z Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 113/385 kB
2024-08-30T19:20:28.4781421Z Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 130/385 kB
2024-08-30T19:20:28.4782081Z Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 130/385 kB
2024-08-30T19:20:28.4782738Z Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 146/385 kB
2024-08-30T19:20:28.4783381Z Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 146/385 kB
2024-08-30T19:20:28.4784125Z Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 146/385 kB | 1.5 kB
2024-08-30T19:20:28.4784922Z Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 163/385 kB | 1.5 kB
2024-08-30T19:20:28.4785721Z Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 163/385 kB | 1.5 kB
2024-08-30T19:20:28.4786503Z Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 179/385 kB | 1.5 kB
2024-08-30T19:20:28.4787284Z Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 179/385 kB | 1.5 kB
2024-08-30T19:20:28.4788057Z Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 195/385 kB | 1.5 kB
2024-08-30T19:20:28.4788842Z Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 195/385 kB | 1.5 kB
2024-08-30T19:20:28.4789535Z                                                            
2024-08-30T19:20:28.4791354Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar (1.5 kB at 1.9 kB/s)
2024-08-30T19:20:28.4794070Z #24 7.697 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-validation/3.2.2/spring-boot-starter-validation-3.2.2.jar
2024-08-30T19:20:28.4795919Z #24 7.697 Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 212/385 kB
2024-08-30T19:20:28.4796657Z Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 212/385 kB
2024-08-30T19:20:28.4797308Z Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 228/385 kB
2024-08-30T19:20:28.4797975Z Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 228/385 kB
2024-08-30T19:20:28.4798651Z Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 228/385 kB
2024-08-30T19:20:28.4799305Z Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 245/385 kB
2024-08-30T19:20:28.4800210Z Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 245/385 kB
2024-08-30T19:20:28.4800935Z Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 261/385 kB
2024-08-30T19:20:28.4801564Z Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 277/385 kB
2024-08-30T19:20:28.4802244Z Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 277/385 kB
2024-08-30T19:20:28.4802989Z Progress (4): 0.7/1.7 MB | 0.6/2.0 MB | 277/385 kB | 15/443 kB
2024-08-30T19:20:28.4803810Z Progress (4): 0.7/1.7 MB | 0.6/2.0 MB | 277/385 kB | 15/443 kB
2024-08-30T19:20:28.4804646Z Progress (4): 0.7/1.7 MB | 0.6/2.0 MB | 294/385 kB | 15/443 kB
2024-08-30T19:20:28.4805481Z Progress (4): 0.7/1.7 MB | 0.6/2.0 MB | 294/385 kB | 31/443 kB
2024-08-30T19:20:28.4806277Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 294/385 kB | 31/443 kB
2024-08-30T19:20:28.4807054Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 310/385 kB | 31/443 kB
2024-08-30T19:20:28.4807842Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 310/385 kB | 48/443 kB
2024-08-30T19:20:28.4808640Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 310/385 kB | 48/443 kB
2024-08-30T19:20:28.4809416Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 326/385 kB | 48/443 kB
2024-08-30T19:20:28.4810200Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 326/385 kB | 64/443 kB
2024-08-30T19:20:28.4817352Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 326/385 kB | 64/443 kB
2024-08-30T19:20:28.4818312Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 343/385 kB | 64/443 kB
2024-08-30T19:20:28.4819148Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 343/385 kB | 81/443 kB
2024-08-30T19:20:28.4819990Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 343/385 kB | 81/443 kB
2024-08-30T19:20:28.4820803Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 343/385 kB | 81/443 kB
2024-08-30T19:20:28.4821903Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 359/385 kB | 81/443 kB
2024-08-30T19:20:28.4822710Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 359/385 kB | 97/443 kB
2024-08-30T19:20:28.4823485Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 359/385 kB | 97/443 kB
2024-08-30T19:20:28.4824306Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 359/385 kB | 113/443 kB
2024-08-30T19:20:28.4825121Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 376/385 kB | 113/443 kB
2024-08-30T19:20:28.4825934Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 385 kB | 113/443 kB    
2024-08-30T19:20:28.4826717Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 385 kB | 113/443 kB
2024-08-30T19:20:28.4827525Z Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 385 kB | 129/443 kB
2024-08-30T19:20:28.4828296Z Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 129/443 kB
2024-08-30T19:20:28.4829081Z Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 146/443 kB
2024-08-30T19:20:28.4829851Z Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 146/443 kB
2024-08-30T19:20:28.4830636Z Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 162/443 kB
2024-08-30T19:20:28.4831395Z Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 162/443 kB
2024-08-30T19:20:28.4832089Z                                                            
2024-08-30T19:20:28.4833571Z Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar (385 kB at 483 kB/s)
2024-08-30T19:20:28.4834888Z #24 7.697 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 179/443 kB
2024-08-30T19:20:28.4835593Z                                                   
2024-08-30T19:20:28.4837213Z Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-el/10.1.18/tomcat-embed-el-10.1.18.jar
2024-08-30T19:20:28.4838771Z #24 7.697 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 179/443 kB
2024-08-30T19:20:28.4839488Z Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 195/443 kB
2024-08-30T19:20:28.4840169Z Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 195/443 kB
2024-08-30T19:20:28.4840832Z Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 211/443 kB
2024-08-30T19:20:28.4841509Z Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 211/443 kB
2024-08-30T19:20:28.4842202Z Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 228/443 kB
2024-08-30T19:20:28.4842860Z Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 228/443 kB
2024-08-30T19:20:28.4843743Z Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 244/443 kB
2024-08-30T19:20:28.4844413Z Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 244/443 kB
2024-08-30T19:20:28.4845081Z Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4845707Z Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4846361Z Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4847008Z Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4847728Z Progress (4): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB | 4.8 kB
2024-08-30T19:20:28.4848518Z Progress (4): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB | 4.8 kB
2024-08-30T19:20:28.4849301Z Progress (4): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB | 4.8 kB
2024-08-30T19:20:28.4850002Z                                                            
2024-08-30T19:20:28.4856617Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-validation/3.2.2/spring-boot-starter-validation-3.2.2.jar (4.8 kB at 6.0 kB/s)
2024-08-30T19:20:28.4860281Z #24 7.698 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar
2024-08-30T19:20:28.4861891Z #24 7.698 Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4862639Z Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4863348Z Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4864022Z Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4865534Z Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4867790Z Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4869582Z Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4870667Z Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4872457Z Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4874250Z Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4874962Z Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4875611Z Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4876265Z Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4876902Z Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4877556Z Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4878307Z Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4878960Z Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4879605Z Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4880230Z Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4880886Z Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4881524Z Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4882177Z Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4882827Z Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4883452Z Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4884096Z Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4884737Z Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4885397Z Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4886043Z Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4886667Z Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4887292Z Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4887935Z Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4888617Z Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4889267Z Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4889893Z Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4890531Z Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4894756Z Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4895721Z Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4896401Z Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4897050Z Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4897726Z Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4898364Z Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4899017Z Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4899647Z Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
2024-08-30T19:20:28.4900298Z Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 277/443 kB
2024-08-30T19:20:28.4900973Z Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 277/443 kB
2024-08-30T19:20:28.4901610Z Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 293/443 kB
2024-08-30T19:20:28.4901825Z Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 293/443 kB
2024-08-30T19:20:28.4902034Z Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB
2024-08-30T19:20:28.4902255Z Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB
2024-08-30T19:20:28.4902575Z Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
2024-08-30T19:20:28.4902868Z Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
2024-08-30T19:20:28.4903179Z Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
2024-08-30T19:20:28.4903484Z Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
2024-08-30T19:20:28.4903766Z Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
2024-08-30T19:20:28.4904059Z Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
2024-08-30T19:20:28.4904346Z Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
2024-08-30T19:20:28.4904881Z Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4905196Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4905490Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4905778Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4906094Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4906365Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4906647Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4906947Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4907234Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4907526Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4907808Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4908110Z Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4908422Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.1/1.3 MB
2024-08-30T19:20:28.4908712Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4909000Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4909317Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4909587Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4909877Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4910176Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4910461Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4910750Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4911045Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4911336Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4911630Z Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4911926Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.2/1.3 MB
2024-08-30T19:20:28.4912217Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4912682Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4912983Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4913275Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4913569Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4913863Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4914144Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4914430Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4914721Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4915012Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4915299Z Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4915597Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.3/1.3 MB
2024-08-30T19:20:28.4915876Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4916162Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4916480Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4916780Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4917078Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4917351Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4917653Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4918176Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4918474Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4918782Z Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 326/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4919062Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 326/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4919368Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 342/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4919661Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 342/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4919943Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 359/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4920242Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 359/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4920544Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 375/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4920805Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 375/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4921105Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 392/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4921419Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 392/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4921705Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4921999Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4922295Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4922576Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4922879Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
2024-08-30T19:20:28.4923187Z Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4923486Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4923775Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4924079Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4924358Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4924668Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4924979Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4925278Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4925574Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4926037Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4926334Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4926632Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
2024-08-30T19:20:28.4926926Z Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.6/1.3 MB
2024-08-30T19:20:28.4927218Z Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
2024-08-30T19:20:28.4927497Z Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
2024-08-30T19:20:28.4927794Z Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
2024-08-30T19:20:28.4928086Z Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
2024-08-30T19:20:28.4928370Z Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
2024-08-30T19:20:28.4928669Z Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.6/1.3 MB    
2024-08-30T19:20:28.4928958Z Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.6/1.3 MB
2024-08-30T19:20:28.4929235Z Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.6/1.3 MB
2024-08-30T19:20:28.4929512Z Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.6/1.3 MB
2024-08-30T19:20:28.4929786Z Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.7/1.3 MB
2024-08-30T19:20:28.4929980Z                                                            
2024-08-30T19:20:28.4934602Z Downloaded from central: https://repo.maven.apache.org/maven2/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar (2.0 MB at 2.5 MB/s)
2024-08-30T19:20:28.4934951Z #24 7.717 Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
2024-08-30T19:20:28.4935135Z                                                   
2024-08-30T19:20:28.4936772Z Downloading from central: https://repo.maven.apache.org/maven2/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar
2024-08-30T19:20:28.4937079Z #24 7.717 Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
2024-08-30T19:20:28.4937328Z Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
2024-08-30T19:20:28.4937557Z Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
2024-08-30T19:20:28.4937770Z Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
2024-08-30T19:20:28.4937985Z Progress (3): 1.1/1.7 MB | 424/443 kB | 0.7/1.3 MB
2024-08-30T19:20:28.4938208Z Progress (3): 1.1/1.7 MB | 424/443 kB | 0.8/1.3 MB
2024-08-30T19:20:28.4938431Z Progress (3): 1.1/1.7 MB | 441/443 kB | 0.8/1.3 MB
2024-08-30T19:20:28.4938636Z Progress (3): 1.1/1.7 MB | 443 kB | 0.8/1.3 MB    
2024-08-30T19:20:28.4938840Z Progress (3): 1.1/1.7 MB | 443 kB | 0.8/1.3 MB
2024-08-30T19:20:28.4939064Z Progress (3): 1.1/1.7 MB | 443 kB | 0.8/1.3 MB
2024-08-30T19:20:28.4939267Z Progress (3): 1.1/1.7 MB | 443 kB | 0.8/1.3 MB
2024-08-30T19:20:28.4939424Z                                               
2024-08-30T19:20:28.4940835Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-websocket/6.1.3/spring-websocket-6.1.3.jar (443 kB at 545 kB/s)
2024-08-30T19:20:28.4941892Z #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.jar
2024-08-30T19:20:28.4942121Z #24 7.717 Progress (2): 1.1/1.7 MB | 0.8/1.3 MB
2024-08-30T19:20:28.4942305Z Progress (2): 1.1/1.7 MB | 0.8/1.3 MB
2024-08-30T19:20:28.4942479Z Progress (2): 1.1/1.7 MB | 0.8/1.3 MB
2024-08-30T19:20:28.4942634Z Progress (2): 1.1/1.7 MB | 0.8/1.3 MB
2024-08-30T19:20:28.4942788Z Progress (2): 1.1/1.7 MB | 0.9/1.3 MB
2024-08-30T19:20:28.4942961Z Progress (2): 1.1/1.7 MB | 0.9/1.3 MB
2024-08-30T19:20:28.4943151Z Progress (2): 1.1/1.7 MB | 0.9/1.3 MB
2024-08-30T19:20:28.4943385Z Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 16/261 kB
2024-08-30T19:20:28.4943602Z Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 16/261 kB
2024-08-30T19:20:28.4943815Z Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 16/261 kB
2024-08-30T19:20:28.4944035Z Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 33/261 kB
2024-08-30T19:20:28.4944241Z Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 33/261 kB
2024-08-30T19:20:28.4944446Z Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 49/261 kB
2024-08-30T19:20:28.4944866Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 49/261 kB
2024-08-30T19:20:28.4945098Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 66/261 kB
2024-08-30T19:20:28.4945303Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 66/261 kB
2024-08-30T19:20:28.4945521Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 82/261 kB
2024-08-30T19:20:28.4945747Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 82/261 kB
2024-08-30T19:20:28.4945937Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 98/261 kB
2024-08-30T19:20:28.4946137Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 98/261 kB
2024-08-30T19:20:28.4946375Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 115/261 kB
2024-08-30T19:20:28.4946600Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 115/261 kB
2024-08-30T19:20:28.4946810Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 131/261 kB
2024-08-30T19:20:28.4947034Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 131/261 kB
2024-08-30T19:20:28.4947262Z Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 147/261 kB
2024-08-30T19:20:28.4947455Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 147/261 kB
2024-08-30T19:20:28.4947672Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 164/261 kB
2024-08-30T19:20:28.4947888Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 164/261 kB
2024-08-30T19:20:28.4948105Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 180/261 kB
2024-08-30T19:20:28.4948311Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 180/261 kB
2024-08-30T19:20:28.4948519Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 197/261 kB
2024-08-30T19:20:28.4948752Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 197/261 kB
2024-08-30T19:20:28.4948949Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 213/261 kB
2024-08-30T19:20:28.4949148Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 229/261 kB
2024-08-30T19:20:28.4949552Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 246/261 kB
2024-08-30T19:20:28.4949760Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 261 kB    
2024-08-30T19:20:28.4950032Z Progress (4): 1.1/1.7 MB | 1.1/1.3 MB | 261 kB | 16/18 kB
2024-08-30T19:20:28.4950325Z Progress (4): 1.1/1.7 MB | 1.1/1.3 MB | 261 kB | 18 kB   
2024-08-30T19:20:28.4950504Z                                                       
2024-08-30T19:20:28.4951965Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-el/10.1.18/tomcat-embed-el-10.1.18.jar (261 kB at 321 kB/s)
2024-08-30T19:20:28.4953201Z #24 7.717 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.jar (18 kB at 22 kB/s)
2024-08-30T19:20:28.4954435Z #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.jar
2024-08-30T19:20:28.4955815Z #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar
2024-08-30T19:20:28.4956072Z #24 7.717 Progress (2): 1.1/1.7 MB | 1.1/1.3 MB
2024-08-30T19:20:28.4956250Z Progress (2): 1.1/1.7 MB | 1.1/1.3 MB
2024-08-30T19:20:28.4956419Z Progress (2): 1.1/1.7 MB | 1.1/1.3 MB
2024-08-30T19:20:28.4956650Z Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 16/93 kB
2024-08-30T19:20:28.4956881Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 16/93 kB
2024-08-30T19:20:28.4957092Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 16/93 kB
2024-08-30T19:20:28.4957290Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 16/93 kB
2024-08-30T19:20:28.4957517Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 32/93 kB
2024-08-30T19:20:28.4957737Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 32/93 kB
2024-08-30T19:20:28.4957950Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 49/93 kB
2024-08-30T19:20:28.4958164Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 49/93 kB
2024-08-30T19:20:28.4958368Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 49/93 kB
2024-08-30T19:20:28.4958613Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 49/93 kB
2024-08-30T19:20:28.4958832Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 65/93 kB
2024-08-30T19:20:28.4959038Z Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 65/93 kB
2024-08-30T19:20:28.4959252Z Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 65/93 kB
2024-08-30T19:20:28.4959701Z Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 81/93 kB
2024-08-30T19:20:28.4959915Z Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 81/93 kB
2024-08-30T19:20:28.4960146Z Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 93 kB   
2024-08-30T19:20:28.4960361Z Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 93 kB
2024-08-30T19:20:28.4960553Z Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 93 kB
2024-08-30T19:20:28.4960757Z Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 93 kB
2024-08-30T19:20:28.4960966Z Progress (3): 1.2/1.7 MB | 1.3/1.3 MB | 93 kB
2024-08-30T19:20:28.4961175Z Progress (3): 1.2/1.7 MB | 1.3/1.3 MB | 93 kB
2024-08-30T19:20:28.4961374Z Progress (3): 1.2/1.7 MB | 1.3/1.3 MB | 93 kB
2024-08-30T19:20:28.4961547Z                                              
2024-08-30T19:20:28.4963008Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar (93 kB at 114 kB/s)
2024-08-30T19:20:28.4964240Z #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar
2024-08-30T19:20:28.4964470Z #24 7.717 Progress (2): 1.2/1.7 MB | 1.3/1.3 MB
2024-08-30T19:20:28.4964638Z Progress (2): 1.2/1.7 MB | 1.3/1.3 MB
2024-08-30T19:20:28.4964811Z Progress (2): 1.2/1.7 MB | 1.3/1.3 MB
2024-08-30T19:20:28.4964984Z Progress (2): 1.2/1.7 MB | 1.3/1.3 MB
2024-08-30T19:20:28.4965169Z Progress (2): 1.3/1.7 MB | 1.3/1.3 MB
2024-08-30T19:20:28.4965337Z Progress (2): 1.3/1.7 MB | 1.3/1.3 MB
2024-08-30T19:20:28.4965495Z Progress (2): 1.3/1.7 MB | 1.3 MB    
2024-08-30T19:20:28.4965660Z Progress (2): 1.3/1.7 MB | 1.3 MB
2024-08-30T19:20:28.4965833Z Progress (2): 1.3/1.7 MB | 1.3 MB
2024-08-30T19:20:28.4966176Z Progress (2): 1.3/1.7 MB | 1.3 MB
2024-08-30T19:20:28.4966345Z Progress (2): 1.3/1.7 MB | 1.3 MB
2024-08-30T19:20:28.4966509Z Progress (2): 1.3/1.7 MB | 1.3 MB
2024-08-30T19:20:28.4966666Z                                  
2024-08-30T19:20:28.4968296Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar (1.3 MB at 1.6 MB/s)
2024-08-30T19:20:28.4969977Z #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar
2024-08-30T19:20:28.4970175Z #24 7.717 Progress (1): 1.4/1.7 MB
2024-08-30T19:20:28.4970348Z Progress (1): 1.4/1.7 MB
2024-08-30T19:20:28.4970486Z Progress (1): 1.4/1.7 MB
2024-08-30T19:20:28.4970633Z Progress (1): 1.4/1.7 MB
2024-08-30T19:20:28.4970803Z Progress (2): 1.4/1.7 MB | 16/165 kB
2024-08-30T19:20:28.4974987Z Progress (2): 1.4/1.7 MB | 16/165 kB
2024-08-30T19:20:28.4975897Z Progress (2): 1.4/1.7 MB | 33/165 kB
2024-08-30T19:20:28.4976110Z Progress (2): 1.4/1.7 MB | 33/165 kB
2024-08-30T19:20:28.4976289Z Progress (2): 1.4/1.7 MB | 49/165 kB
2024-08-30T19:20:28.4976456Z Progress (2): 1.4/1.7 MB | 62/165 kB
2024-08-30T19:20:28.4976611Z Progress (2): 1.4/1.7 MB | 78/165 kB
2024-08-30T19:20:28.4976782Z Progress (2): 1.4/1.7 MB | 95/165 kB
2024-08-30T19:20:28.4976991Z Progress (2): 1.4/1.7 MB | 111/165 kB
2024-08-30T19:20:28.4978402Z Progress (2): 1.4/1.7 MB | 115/165 kB
2024-08-30T19:20:28.4978631Z Progress (2): 1.4/1.7 MB | 128/165 kB
2024-08-30T19:20:28.4978826Z Progress (2): 1.4/1.7 MB | 144/165 kB
2024-08-30T19:20:28.4978988Z Progress (2): 1.4/1.7 MB | 160/165 kB
2024-08-30T19:20:28.4979145Z Progress (2): 1.4/1.7 MB | 165 kB    
2024-08-30T19:20:28.4979367Z Progress (3): 1.4/1.7 MB | 165 kB | 16/59 kB
2024-08-30T19:20:28.4979542Z                                             
2024-08-30T19:20:28.4981076Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar (165 kB at 202 kB/s)
2024-08-30T19:20:28.4982020Z #24 7.721 Downloading from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar
2024-08-30T19:20:28.4982229Z #24 7.721 Progress (2): 1.4/1.7 MB | 32/59 kB
2024-08-30T19:20:28.4982643Z Progress (2): 1.4/1.7 MB | 49/59 kB
2024-08-30T19:20:28.4982827Z Progress (2): 1.4/1.7 MB | 59 kB   
2024-08-30T19:20:28.4982967Z                                 
2024-08-30T19:20:28.4984316Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar (59 kB at 72 kB/s)
2024-08-30T19:20:28.4985313Z #24 7.721 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar
2024-08-30T19:20:28.4985516Z #24 7.721 Progress (2): 1.4/1.7 MB | 0/12 MB
2024-08-30T19:20:28.4985696Z Progress (2): 1.4/1.7 MB | 0/12 MB
2024-08-30T19:20:28.4985878Z Progress (2): 1.4/1.7 MB | 0/12 MB
2024-08-30T19:20:28.4986039Z Progress (2): 1.4/1.7 MB | 0.1/12 MB
2024-08-30T19:20:28.4986206Z Progress (2): 1.4/1.7 MB | 0.1/12 MB
2024-08-30T19:20:28.4986363Z Progress (2): 1.4/1.7 MB | 0.1/12 MB
2024-08-30T19:20:28.4986545Z Progress (2): 1.4/1.7 MB | 0.1/12 MB
2024-08-30T19:20:28.4986718Z Progress (2): 1.4/1.7 MB | 0.1/12 MB
2024-08-30T19:20:28.4986872Z Progress (2): 1.4/1.7 MB | 0.1/12 MB
2024-08-30T19:20:28.4987030Z Progress (2): 1.4/1.7 MB | 0.2/12 MB
2024-08-30T19:20:28.4987193Z Progress (2): 1.4/1.7 MB | 0.2/12 MB
2024-08-30T19:20:28.4987358Z Progress (2): 1.4/1.7 MB | 0.2/12 MB
2024-08-30T19:20:28.4987527Z Progress (2): 1.4/1.7 MB | 0.2/12 MB
2024-08-30T19:20:28.4987680Z Progress (2): 1.4/1.7 MB | 0.2/12 MB
2024-08-30T19:20:28.4987898Z Progress (3): 1.4/1.7 MB | 0.2/12 MB | 16/69 kB
2024-08-30T19:20:28.4988126Z Progress (3): 1.4/1.7 MB | 0.2/12 MB | 16/69 kB
2024-08-30T19:20:28.4988331Z Progress (3): 1.4/1.7 MB | 0.2/12 MB | 33/69 kB
2024-08-30T19:20:28.4988745Z Progress (3): 1.4/1.7 MB | 0.3/12 MB | 33/69 kB
2024-08-30T19:20:28.4988979Z Progress (3): 1.4/1.7 MB | 0.3/12 MB | 49/69 kB
2024-08-30T19:20:28.4989180Z Progress (3): 1.4/1.7 MB | 0.3/12 MB | 49/69 kB
2024-08-30T19:20:28.4989376Z Progress (3): 1.4/1.7 MB | 0.3/12 MB | 66/69 kB
2024-08-30T19:20:28.4989593Z Progress (3): 1.4/1.7 MB | 0.3/12 MB | 69 kB   
2024-08-30T19:20:28.4989821Z Progress (3): 1.4/1.7 MB | 0.3/12 MB | 69 kB
2024-08-30T19:20:28.4990005Z Progress (3): 1.4/1.7 MB | 0.3/12 MB | 69 kB
2024-08-30T19:20:28.4990184Z Progress (3): 1.4/1.7 MB | 0.3/12 MB | 69 kB
2024-08-30T19:20:28.4990361Z                                             
2024-08-30T19:20:28.4991551Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar (69 kB at 84 kB/s)
2024-08-30T19:20:28.4992605Z #24 7.723 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.14.11/byte-buddy-1.14.11.jar
2024-08-30T19:20:28.4992824Z #24 7.723 Progress (2): 1.4/1.7 MB | 0.3/12 MB
2024-08-30T19:20:28.4993020Z Progress (2): 1.4/1.7 MB | 0.4/12 MB
2024-08-30T19:20:28.4993199Z Progress (2): 1.4/1.7 MB | 0.4/12 MB
2024-08-30T19:20:28.4993348Z Progress (2): 1.4/1.7 MB | 0.4/12 MB
2024-08-30T19:20:28.4993508Z Progress (2): 1.4/1.7 MB | 0.4/12 MB
2024-08-30T19:20:28.4993666Z Progress (2): 1.4/1.7 MB | 0.4/12 MB
2024-08-30T19:20:28.4993847Z Progress (2): 1.4/1.7 MB | 0.4/12 MB
2024-08-30T19:20:28.4994024Z Progress (2): 1.4/1.7 MB | 0.5/12 MB
2024-08-30T19:20:28.4994180Z Progress (2): 1.4/1.7 MB | 0.5/12 MB
2024-08-30T19:20:28.4994342Z Progress (2): 1.4/1.7 MB | 0.5/12 MB
2024-08-30T19:20:28.4994498Z Progress (2): 1.4/1.7 MB | 0.5/12 MB
2024-08-30T19:20:28.4994667Z Progress (2): 1.4/1.7 MB | 0.5/12 MB
2024-08-30T19:20:28.4994852Z Progress (2): 1.4/1.7 MB | 0.5/12 MB
2024-08-30T19:20:28.4995003Z Progress (2): 1.4/1.7 MB | 0.6/12 MB
2024-08-30T19:20:28.4995152Z Progress (2): 1.4/1.7 MB | 0.6/12 MB
2024-08-30T19:20:28.4995316Z Progress (2): 1.4/1.7 MB | 0.6/12 MB
2024-08-30T19:20:28.4995490Z Progress (2): 1.4/1.7 MB | 0.6/12 MB
2024-08-30T19:20:28.4995657Z Progress (2): 1.4/1.7 MB | 0.6/12 MB
2024-08-30T19:20:28.4995821Z Progress (2): 1.4/1.7 MB | 0.6/12 MB
2024-08-30T19:20:28.4995978Z Progress (2): 1.5/1.7 MB | 0.6/12 MB
2024-08-30T19:20:28.4996133Z Progress (2): 1.5/1.7 MB | 0.7/12 MB
2024-08-30T19:20:28.4996516Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
2024-08-30T19:20:28.4996715Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
2024-08-30T19:20:28.4996912Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
2024-08-30T19:20:28.4997135Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
2024-08-30T19:20:28.4997353Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
2024-08-30T19:20:28.4997574Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4997789Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4997995Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4998226Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4998437Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4998636Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4998858Z Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4999078Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4999293Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4999505Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4999716Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.4999936Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
2024-08-30T19:20:28.5000134Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5000330Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5000543Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5000770Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5000974Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5001405Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5001630Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5001825Z Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5002027Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5002249Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5002468Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.2/4.2 MB
2024-08-30T19:20:28.5002675Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB
2024-08-30T19:20:28.5002972Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 16/327 kB
2024-08-30T19:20:28.5003282Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 16/327 kB
2024-08-30T19:20:28.5003562Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 33/327 kB
2024-08-30T19:20:28.5003852Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 33/327 kB
2024-08-30T19:20:28.5004145Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 49/327 kB
2024-08-30T19:20:28.5004447Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 49/327 kB
2024-08-30T19:20:28.5004734Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 65/327 kB
2024-08-30T19:20:28.5005017Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 65/327 kB
2024-08-30T19:20:28.5005296Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 82/327 kB
2024-08-30T19:20:28.5005602Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 82/327 kB
2024-08-30T19:20:28.5005920Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 98/327 kB
2024-08-30T19:20:28.5006216Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 98/327 kB
2024-08-30T19:20:28.5006528Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 115/327 kB
2024-08-30T19:20:28.5006824Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 115/327 kB
2024-08-30T19:20:28.5007112Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 131/327 kB
2024-08-30T19:20:28.5007408Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 131/327 kB
2024-08-30T19:20:28.5007710Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 147/327 kB
2024-08-30T19:20:28.5007993Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 164/327 kB
2024-08-30T19:20:28.5008298Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 164/327 kB
2024-08-30T19:20:28.5008559Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 180/327 kB
2024-08-30T19:20:28.5009025Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 180/327 kB
2024-08-30T19:20:28.5009367Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 196/327 kB
2024-08-30T19:20:28.5009646Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 196/327 kB
2024-08-30T19:20:28.5009944Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 213/327 kB
2024-08-30T19:20:28.5010215Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 213/327 kB
2024-08-30T19:20:28.5010499Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 229/327 kB
2024-08-30T19:20:28.5010788Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 229/327 kB
2024-08-30T19:20:28.5013402Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 246/327 kB
2024-08-30T19:20:28.5013744Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 246/327 kB
2024-08-30T19:20:28.5014073Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 262/327 kB
2024-08-30T19:20:28.5014387Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 262/327 kB
2024-08-30T19:20:28.5014683Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 278/327 kB
2024-08-30T19:20:28.5015003Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 278/327 kB
2024-08-30T19:20:28.5015294Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 278/327 kB
2024-08-30T19:20:28.5015564Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 295/327 kB
2024-08-30T19:20:28.5015860Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 311/327 kB
2024-08-30T19:20:28.5016148Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 311/327 kB
2024-08-30T19:20:28.5016428Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB    
2024-08-30T19:20:28.5016720Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB
2024-08-30T19:20:28.5017204Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB
2024-08-30T19:20:28.5017490Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB
2024-08-30T19:20:28.5017768Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB
2024-08-30T19:20:28.5017964Z                                                           
2024-08-30T19:20:28.5019069Z Downloaded from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar (327 kB at 395 kB/s)
2024-08-30T19:20:28.5020189Z #24 7.733 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar
2024-08-30T19:20:28.5020475Z #24 7.733 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB
2024-08-30T19:20:28.5020714Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB
2024-08-30T19:20:28.5020933Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB
2024-08-30T19:20:28.5021138Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB
2024-08-30T19:20:28.5021448Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 16/68 kB
2024-08-30T19:20:28.5021747Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 16/68 kB
2024-08-30T19:20:28.5022015Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 33/68 kB
2024-08-30T19:20:28.5022305Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 33/68 kB
2024-08-30T19:20:28.5022619Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 49/68 kB
2024-08-30T19:20:28.5022917Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 49/68 kB
2024-08-30T19:20:28.5023189Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 49/68 kB
2024-08-30T19:20:28.5023482Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 66/68 kB
2024-08-30T19:20:28.5023748Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 68 kB   
2024-08-30T19:20:28.5024019Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 68 kB
2024-08-30T19:20:28.5024290Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 68 kB
2024-08-30T19:20:28.5024566Z Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB | 68 kB
2024-08-30T19:20:28.5024748Z                                                          
2024-08-30T19:20:28.5026550Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar (68 kB at 82 kB/s)
2024-08-30T19:20:28.5027064Z #24 7.733 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5027293Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5027481Z                                                  
2024-08-30T19:20:28.5028467Z Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar
2024-08-30T19:20:28.5028740Z #24 7.733 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5028966Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5029178Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5029388Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5029600Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5029816Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5030029Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5030225Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5030442Z Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5030661Z Progress (3): 1.5/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5030873Z Progress (3): 1.5/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5031082Z Progress (3): 1.5/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5031309Z Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5031527Z Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5031720Z Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5031931Z Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5032326Z Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5032527Z Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5032743Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.8/4.2 MB
2024-08-30T19:20:28.5032962Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5033163Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5033363Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5033570Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5033791Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5033992Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5034199Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5034426Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5034641Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5034832Z Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5035146Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 16/139 kB
2024-08-30T19:20:28.5035445Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 16/139 kB
2024-08-30T19:20:28.5035732Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 16/139 kB
2024-08-30T19:20:28.5036037Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 32/139 kB
2024-08-30T19:20:28.5036311Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 32/139 kB
2024-08-30T19:20:28.5036610Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 32/139 kB
2024-08-30T19:20:28.5036912Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 49/139 kB
2024-08-30T19:20:28.5037197Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 49/139 kB
2024-08-30T19:20:28.5037488Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 65/139 kB
2024-08-30T19:20:28.5037779Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 65/139 kB
2024-08-30T19:20:28.5038044Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 78/139 kB
2024-08-30T19:20:28.5038344Z Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 94/139 kB
2024-08-30T19:20:28.5038635Z Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 94/139 kB
2024-08-30T19:20:28.5038933Z Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 111/139 kB
2024-08-30T19:20:28.5039225Z Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 111/139 kB
2024-08-30T19:20:28.5039683Z Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 127/139 kB
2024-08-30T19:20:28.5039982Z Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 139 kB    
2024-08-30T19:20:28.5040267Z Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 139 kB
2024-08-30T19:20:28.5040547Z Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 139 kB
2024-08-30T19:20:28.5040821Z Progress (4): 1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 139 kB    
2024-08-30T19:20:28.5041014Z                                                       
2024-08-30T19:20:28.5042217Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar (139 kB at 166 kB/s)
2024-08-30T19:20:28.5043417Z #24 7.737 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar
2024-08-30T19:20:28.5044765Z #24 7.737 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.9.22/kotlin-stdlib-1.9.22.jar (1.7 MB at 2.1 MB/s)
2024-08-30T19:20:28.5045017Z #24 7.737 Progress (2): 1.2/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5045188Z Progress (2): 1.2/12 MB | 0.9/4.2 MB
2024-08-30T19:20:28.5045345Z Progress (2): 1.2/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5045509Z Progress (2): 1.2/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5045669Z Progress (2): 1.2/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5045842Z Progress (2): 1.2/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5046010Z Progress (2): 1.2/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5046156Z Progress (2): 1.2/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5046305Z Progress (2): 1.3/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5046480Z Progress (2): 1.3/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5106363Z Progress (2): 1.3/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5106780Z Progress (2): 1.3/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5106975Z Progress (2): 1.3/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5107161Z Progress (2): 1.3/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5107366Z Progress (2): 1.4/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5107560Z Progress (2): 1.4/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5107728Z Progress (2): 1.4/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5107924Z Progress (2): 1.4/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5108103Z Progress (2): 1.4/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5108269Z Progress (2): 1.4/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5108573Z Progress (2): 1.4/12 MB | 1.0/4.2 MB
2024-08-30T19:20:28.5108840Z Progress (3): 1.4/12 MB | 1.0/4.2 MB | 16/27 kB
2024-08-30T19:20:28.5109082Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 16/27 kB
2024-08-30T19:20:28.5113377Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 27 kB   
2024-08-30T19:20:28.5113610Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 27 kB
2024-08-30T19:20:28.5113871Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 27 kB
2024-08-30T19:20:28.5114052Z                                             
2024-08-30T19:20:28.5115562Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar (27 kB at 33 kB/s)
2024-08-30T19:20:28.5115817Z #24 7.749 Progress (2): 1.4/12 MB | 1.1/4.2 MB
2024-08-30T19:20:28.5115963Z                                     
2024-08-30T19:20:28.5116897Z Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar
2024-08-30T19:20:28.5117132Z #24 7.749 Progress (2): 1.4/12 MB | 1.1/4.2 MB
2024-08-30T19:20:28.5117356Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 16/920 kB
2024-08-30T19:20:28.5117563Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 32/920 kB
2024-08-30T19:20:28.5117770Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 49/920 kB
2024-08-30T19:20:28.5117978Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 65/920 kB
2024-08-30T19:20:28.5118196Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 81/920 kB
2024-08-30T19:20:28.5118396Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 98/920 kB
2024-08-30T19:20:28.5118621Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 114/920 kB
2024-08-30T19:20:28.5118854Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 130/920 kB
2024-08-30T19:20:28.5119043Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 147/920 kB
2024-08-30T19:20:28.5119562Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 163/920 kB
2024-08-30T19:20:28.5119792Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 180/920 kB
2024-08-30T19:20:28.5119996Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 196/920 kB
2024-08-30T19:20:28.5120226Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 212/920 kB
2024-08-30T19:20:28.5120426Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 229/920 kB
2024-08-30T19:20:28.5120627Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 245/920 kB
2024-08-30T19:20:28.5120840Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 262/920 kB
2024-08-30T19:20:28.5121052Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 278/920 kB
2024-08-30T19:20:28.5121262Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 294/920 kB
2024-08-30T19:20:28.5121476Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 311/920 kB
2024-08-30T19:20:28.5121693Z Progress (3): 1.4/12 MB | 1.1/4.2 MB | 311/920 kB
2024-08-30T19:20:28.5121909Z Progress (3): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB
2024-08-30T19:20:28.5122116Z Progress (3): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB
2024-08-30T19:20:28.5122420Z Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 16/73 kB
2024-08-30T19:20:28.5122724Z Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 16/73 kB
2024-08-30T19:20:28.5123001Z Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 32/73 kB
2024-08-30T19:20:28.5123283Z Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 32/73 kB
2024-08-30T19:20:28.5123564Z Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 49/73 kB
2024-08-30T19:20:28.5123841Z Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 49/73 kB
2024-08-30T19:20:28.5124122Z Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 65/73 kB
2024-08-30T19:20:28.5124644Z Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 73 kB   
2024-08-30T19:20:28.5124930Z Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 73 kB
2024-08-30T19:20:28.5125176Z Progress (4): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB | 73 kB
2024-08-30T19:20:28.5125452Z Progress (4): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB | 73 kB
2024-08-30T19:20:28.5125653Z                                                          
2024-08-30T19:20:28.5126963Z Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar (73 kB at 87 kB/s)
2024-08-30T19:20:28.5128253Z #24 7.749 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar
2024-08-30T19:20:28.5128541Z #24 7.749 Progress (3): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB
2024-08-30T19:20:28.5128783Z Progress (3): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB
2024-08-30T19:20:28.5129003Z Progress (3): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB
2024-08-30T19:20:28.5129220Z Progress (3): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB
2024-08-30T19:20:28.5129429Z Progress (3): 1.4/12 MB | 1.3/4.2 MB | 327/920 kB
2024-08-30T19:20:28.5129649Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 327/920 kB
2024-08-30T19:20:28.5129861Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 343/920 kB
2024-08-30T19:20:28.5130068Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 343/920 kB
2024-08-30T19:20:28.5130290Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 360/920 kB
2024-08-30T19:20:28.5130520Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 360/920 kB
2024-08-30T19:20:28.5130728Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 376/920 kB
2024-08-30T19:20:28.5130930Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 376/920 kB
2024-08-30T19:20:28.5131342Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 393/920 kB
2024-08-30T19:20:28.5131569Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 402/920 kB
2024-08-30T19:20:28.5131792Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 402/920 kB
2024-08-30T19:20:28.5131992Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 402/920 kB
2024-08-30T19:20:28.5132201Z Progress (3): 1.4/12 MB | 1.4/4.2 MB | 418/920 kB
2024-08-30T19:20:28.5132417Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 418/920 kB
2024-08-30T19:20:28.5132640Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 435/920 kB
2024-08-30T19:20:28.5132842Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 435/920 kB
2024-08-30T19:20:28.5133044Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 451/920 kB
2024-08-30T19:20:28.5133449Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 451/920 kB
2024-08-30T19:20:28.5133652Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 468/920 kB
2024-08-30T19:20:28.5133857Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 468/920 kB
2024-08-30T19:20:28.5134071Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 484/920 kB
2024-08-30T19:20:28.5134282Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 500/920 kB
2024-08-30T19:20:28.5134489Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 500/920 kB
2024-08-30T19:20:28.5134688Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 517/920 kB
2024-08-30T19:20:28.5134905Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 517/920 kB
2024-08-30T19:20:28.5135128Z Progress (3): 1.4/12 MB | 1.5/4.2 MB | 533/920 kB
2024-08-30T19:20:28.5135324Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 533/920 kB
2024-08-30T19:20:28.5135536Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 549/920 kB
2024-08-30T19:20:28.5135760Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 549/920 kB
2024-08-30T19:20:28.5135976Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 566/920 kB
2024-08-30T19:20:28.5136196Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 566/920 kB
2024-08-30T19:20:28.5136409Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 582/920 kB
2024-08-30T19:20:28.5136619Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 582/920 kB
2024-08-30T19:20:28.5136854Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 599/920 kB
2024-08-30T19:20:28.5137048Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 599/920 kB
2024-08-30T19:20:28.5137244Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 615/920 kB
2024-08-30T19:20:28.5137463Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 615/920 kB
2024-08-30T19:20:28.5137673Z Progress (3): 1.4/12 MB | 1.6/4.2 MB | 631/920 kB
2024-08-30T19:20:28.5138092Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 631/920 kB
2024-08-30T19:20:28.5138323Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 648/920 kB
2024-08-30T19:20:28.5138536Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 648/920 kB
2024-08-30T19:20:28.5138730Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 664/920 kB
2024-08-30T19:20:28.5138947Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 664/920 kB
2024-08-30T19:20:28.5139167Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 681/920 kB
2024-08-30T19:20:28.5139373Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 681/920 kB
2024-08-30T19:20:28.5139584Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 697/920 kB
2024-08-30T19:20:28.5139794Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 697/920 kB
2024-08-30T19:20:28.5140022Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 713/920 kB
2024-08-30T19:20:28.5140213Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 713/920 kB
2024-08-30T19:20:28.5140407Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 730/920 kB
2024-08-30T19:20:28.5140625Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 730/920 kB
2024-08-30T19:20:28.5140849Z Progress (3): 1.4/12 MB | 1.7/4.2 MB | 746/920 kB
2024-08-30T19:20:28.5141048Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 746/920 kB
2024-08-30T19:20:28.5141261Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 762/920 kB
2024-08-30T19:20:28.5141477Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 762/920 kB
2024-08-30T19:20:28.5141685Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 779/920 kB
2024-08-30T19:20:28.5141891Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 779/920 kB
2024-08-30T19:20:28.5142105Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 795/920 kB
2024-08-30T19:20:28.5142316Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 795/920 kB
2024-08-30T19:20:28.5142534Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 812/920 kB
2024-08-30T19:20:28.5142734Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 812/920 kB
2024-08-30T19:20:28.5142941Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 812/920 kB
2024-08-30T19:20:28.5143157Z Progress (3): 1.4/12 MB | 1.8/4.2 MB | 828/920 kB
2024-08-30T19:20:28.5143365Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 828/920 kB
2024-08-30T19:20:28.5143579Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 844/920 kB
2024-08-30T19:20:28.5143787Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 844/920 kB
2024-08-30T19:20:28.5143999Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 861/920 kB
2024-08-30T19:20:28.5144211Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 877/920 kB
2024-08-30T19:20:28.5144592Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 894/920 kB
2024-08-30T19:20:28.5144830Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 910/920 kB
2024-08-30T19:20:28.5145042Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 920 kB    
2024-08-30T19:20:28.5145199Z                                              
2024-08-30T19:20:28.5146389Z Downloading from central: https://repo.maven.apache.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar
2024-08-30T19:20:28.5146732Z #24 7.749 Progress (4): 1.4/12 MB | 1.9/4.2 MB | 920 kB | 16/26 kB
2024-08-30T19:20:28.5146998Z Progress (4): 1.4/12 MB | 1.9/4.2 MB | 920 kB | 26 kB   
2024-08-30T19:20:28.5147195Z                                                      
2024-08-30T19:20:28.5148587Z Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar (26 kB at 31 kB/s)
2024-08-30T19:20:28.5149690Z #24 7.749 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar
2024-08-30T19:20:28.5149970Z #24 7.749 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5150169Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5150372Z Progress (3): 1.4/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5150598Z Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5150791Z Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5150984Z Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5151197Z Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5151409Z Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5151593Z Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5151958Z Progress (3): 1.6/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5152158Z Progress (3): 1.6/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5152355Z Progress (3): 1.6/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5152544Z Progress (3): 1.6/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5152807Z Progress (4): 1.6/12 MB | 1.9/4.2 MB | 920 kB | 11 kB
2024-08-30T19:20:28.5153065Z Progress (4): 1.6/12 MB | 1.9/4.2 MB | 920 kB | 11 kB
2024-08-30T19:20:28.5153286Z Progress (4): 1.6/12 MB | 1.9/4.2 MB | 920 kB | 11 kB
2024-08-30T19:20:28.5153464Z                                                      
2024-08-30T19:20:28.5154786Z Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar (11 kB at 13 kB/s)
2024-08-30T19:20:28.5156175Z #24 7.749 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-annotations/3.5.6-Final/hibernate-annotations-3.5.6-Final.jar
2024-08-30T19:20:28.5156456Z #24 7.749 Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5156650Z Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5156850Z Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5157134Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 16/326 kB
2024-08-30T19:20:28.5157400Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 33/326 kB
2024-08-30T19:20:28.5157665Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 49/326 kB
2024-08-30T19:20:28.5157924Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 62/326 kB
2024-08-30T19:20:28.5158170Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 79/326 kB
2024-08-30T19:20:28.5158429Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 95/326 kB
2024-08-30T19:20:28.5158711Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 112/326 kB
2024-08-30T19:20:28.5158975Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 128/326 kB
2024-08-30T19:20:28.5159249Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 144/326 kB
2024-08-30T19:20:28.5159516Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 161/326 kB
2024-08-30T19:20:28.5159772Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 177/326 kB
2024-08-30T19:20:28.5160044Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 194/326 kB
2024-08-30T19:20:28.5160307Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 198/326 kB
2024-08-30T19:20:28.5160744Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 214/326 kB
2024-08-30T19:20:28.5161039Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 218/326 kB
2024-08-30T19:20:28.5161284Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 234/326 kB
2024-08-30T19:20:28.5161544Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 251/326 kB
2024-08-30T19:20:28.5161832Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 259/326 kB
2024-08-30T19:20:28.5162093Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 275/326 kB
2024-08-30T19:20:28.5162357Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 292/326 kB
2024-08-30T19:20:28.5162640Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 308/326 kB
2024-08-30T19:20:28.5162893Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 325/326 kB
2024-08-30T19:20:28.5163161Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 326 kB    
2024-08-30T19:20:28.5163416Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 326 kB
2024-08-30T19:20:28.5163653Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 326 kB
2024-08-30T19:20:28.5163909Z Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 326 kB
2024-08-30T19:20:28.5164098Z                                                       
2024-08-30T19:20:28.5165319Z Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar (326 kB at 386 kB/s)
2024-08-30T19:20:28.5165598Z #24 7.749 Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5165818Z Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
2024-08-30T19:20:28.5166002Z Progress (3): 1.7/12 MB | 2.0/4.2 MB | 920 kB
2024-08-30T19:20:28.5166200Z Progress (3): 1.7/12 MB | 2.0/4.2 MB | 920 kB
2024-08-30T19:20:28.5166638Z Progress (3): 1.7/12 MB | 2.0/4.2 MB | 920 kB
2024-08-30T19:20:28.5166844Z Progress (3): 1.7/12 MB | 2.0/4.2 MB | 920 kB
2024-08-30T19:20:28.5167116Z Progress (4): 1.7/12 MB | 2.0/4.2 MB | 920 kB | 15/366 kB
2024-08-30T19:20:28.5167396Z Progress (4): 1.7/12 MB | 2.0/4.2 MB | 920 kB | 15/366 kB
2024-08-30T19:20:28.5167644Z Progress (4): 1.7/12 MB | 2.0/4.2 MB | 920 kB | 15/366 kB
2024-08-30T19:20:28.5167907Z Progress (4): 1.7/12 MB | 2.0/4.2 MB | 920 kB | 31/366 kB
2024-08-30T19:20:28.5168160Z Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 31/366 kB
2024-08-30T19:20:28.5168420Z Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 31/366 kB
2024-08-30T19:20:28.5168671Z Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 48/366 kB
2024-08-30T19:20:28.5168938Z Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 48/366 kB
2024-08-30T19:20:28.5169191Z Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 48/366 kB
2024-08-30T19:20:28.5169444Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 48/366 kB
2024-08-30T19:20:28.5169726Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 64/366 kB
2024-08-30T19:20:28.5169990Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 64/366 kB
2024-08-30T19:20:28.5170243Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 64/366 kB
2024-08-30T19:20:28.5170524Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 81/366 kB
2024-08-30T19:20:28.5170775Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 81/366 kB
2024-08-30T19:20:28.5198523Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 97/366 kB
2024-08-30T19:20:28.5198921Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 97/366 kB
2024-08-30T19:20:28.5203750Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 97/366 kB
2024-08-30T19:20:28.5204120Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 112/366 kB
2024-08-30T19:20:28.5205816Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 112/366 kB
2024-08-30T19:20:28.5206100Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 112/366 kB
2024-08-30T19:20:28.5206378Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 128/366 kB
2024-08-30T19:20:28.5206671Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 128/366 kB
2024-08-30T19:20:28.5206923Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 128/366 kB
2024-08-30T19:20:28.5207206Z Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 145/366 kB
2024-08-30T19:20:28.5207475Z Progress (4): 1.8/12 MB | 2.2/4.2 MB | 920 kB | 145/366 kB
2024-08-30T19:20:28.5207970Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 145/366 kB
2024-08-30T19:20:28.5208234Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 161/366 kB
2024-08-30T19:20:28.5208495Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 161/366 kB
2024-08-30T19:20:28.5208759Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 161/366 kB
2024-08-30T19:20:28.5209020Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 178/366 kB
2024-08-30T19:20:28.5209280Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 178/366 kB
2024-08-30T19:20:28.5209547Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 178/366 kB
2024-08-30T19:20:28.5209809Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 194/366 kB
2024-08-30T19:20:28.5210067Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 194/366 kB
2024-08-30T19:20:28.5210335Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 194/366 kB
2024-08-30T19:20:28.5210593Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 210/366 kB
2024-08-30T19:20:28.5210866Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 210/366 kB
2024-08-30T19:20:28.5211372Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 210/366 kB
2024-08-30T19:20:28.5211624Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 227/366 kB
2024-08-30T19:20:28.5211877Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 227/366 kB
2024-08-30T19:20:28.5212148Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 227/366 kB
2024-08-30T19:20:28.5212402Z Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 243/366 kB
2024-08-30T19:20:28.5212659Z Progress (4): 1.9/12 MB | 2.3/4.2 MB | 920 kB | 243/366 kB
2024-08-30T19:20:28.5212948Z Progress (4): 1.9/12 MB | 2.3/4.2 MB | 920 kB | 243/366 kB
2024-08-30T19:20:28.5213447Z Progress (4): 1.9/12 MB | 2.3/4.2 MB | 920 kB | 259/366 kB
2024-08-30T19:20:28.5213712Z Progress (4): 1.9/12 MB | 2.3/4.2 MB | 920 kB | 259/366 kB
2024-08-30T19:20:28.5213975Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 259/366 kB
2024-08-30T19:20:28.5214226Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
2024-08-30T19:20:28.5214519Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
2024-08-30T19:20:28.5216259Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
2024-08-30T19:20:28.5216568Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
2024-08-30T19:20:28.5216869Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
2024-08-30T19:20:28.5217151Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 292/366 kB
2024-08-30T19:20:28.5217412Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 292/366 kB
2024-08-30T19:20:28.5217691Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 292/366 kB
2024-08-30T19:20:28.5217959Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 309/366 kB
2024-08-30T19:20:28.5218222Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 309/366 kB
2024-08-30T19:20:28.5218485Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 309/366 kB
2024-08-30T19:20:28.5218743Z Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 325/366 kB
2024-08-30T19:20:28.5219011Z Progress (4): 2.0/12 MB | 2.4/4.2 MB | 920 kB | 325/366 kB
2024-08-30T19:20:28.5219281Z Progress (4): 2.0/12 MB | 2.4/4.2 MB | 920 kB | 325/366 kB
2024-08-30T19:20:28.5219545Z Progress (4): 2.0/12 MB | 2.4/4.2 MB | 920 kB | 341/366 kB
2024-08-30T19:20:28.5219816Z Progress (4): 2.0/12 MB | 2.4/4.2 MB | 920 kB | 341/366 kB
2024-08-30T19:20:28.5220084Z Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 341/366 kB
2024-08-30T19:20:28.5220350Z Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 358/366 kB
2024-08-30T19:20:28.5220614Z Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB    
2024-08-30T19:20:28.5220869Z Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
2024-08-30T19:20:28.5221137Z Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
2024-08-30T19:20:28.5221360Z Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
2024-08-30T19:20:28.5221597Z Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
2024-08-30T19:20:28.5221847Z Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
2024-08-30T19:20:28.5222318Z Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
2024-08-30T19:20:28.5222517Z                                                       
2024-08-30T19:20:28.5224166Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-annotations/3.5.6-Final/hibernate-annotations-3.5.6-Final.jar (366 kB at 424 kB/s)
2024-08-30T19:20:28.5225038Z #24 7.765 Downloading from central: https://repo.maven.apache.org/maven2/antlr/antlr/2.7.6/antlr-2.7.6.jar
2024-08-30T19:20:28.5226249Z #24 7.765 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-core/3.5.6-Final/hibernate-core-3.5.6-Final.jar
2024-08-30T19:20:28.5227568Z #24 7.765 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar (920 kB at 1.1 MB/s)
2024-08-30T19:20:28.5228828Z #24 7.765 Downloading from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.jar
2024-08-30T19:20:28.5229073Z #24 7.765 Progress (2): 2.1/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5229259Z Progress (2): 2.1/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5229426Z Progress (2): 2.2/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5229579Z Progress (2): 2.2/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5229729Z Progress (2): 2.2/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5229894Z Progress (2): 2.2/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5230070Z Progress (2): 2.2/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5230227Z Progress (2): 2.2/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5230381Z Progress (2): 2.3/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5230545Z Progress (2): 2.3/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5230923Z Progress (2): 2.3/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5231075Z Progress (2): 2.3/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5231234Z Progress (2): 2.3/12 MB | 2.4/4.2 MB
2024-08-30T19:20:28.5231463Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 16/559 kB
2024-08-30T19:20:28.5231686Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 33/559 kB
2024-08-30T19:20:28.5231911Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 49/559 kB
2024-08-30T19:20:28.5232116Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 65/559 kB
2024-08-30T19:20:28.5232338Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 81/559 kB
2024-08-30T19:20:28.5232564Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 98/559 kB
2024-08-30T19:20:28.5232762Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 114/559 kB
2024-08-30T19:20:28.5232974Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 131/559 kB
2024-08-30T19:20:28.5233188Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 147/559 kB
2024-08-30T19:20:28.5233398Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 163/559 kB
2024-08-30T19:20:28.5233608Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 180/559 kB
2024-08-30T19:20:28.5233822Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 192/559 kB
2024-08-30T19:20:28.5234039Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 196/559 kB
2024-08-30T19:20:28.5234256Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 213/559 kB
2024-08-30T19:20:28.5234454Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 229/559 kB
2024-08-30T19:20:28.5234672Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 245/559 kB
2024-08-30T19:20:28.5234898Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 249/559 kB
2024-08-30T19:20:28.5235107Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 262/559 kB
2024-08-30T19:20:28.5235320Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 278/559 kB
2024-08-30T19:20:28.5235535Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 294/559 kB
2024-08-30T19:20:28.5235764Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 311/559 kB
2024-08-30T19:20:28.5235961Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 327/559 kB
2024-08-30T19:20:28.5236157Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 344/559 kB
2024-08-30T19:20:28.5236369Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 360/559 kB
2024-08-30T19:20:28.5236598Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 376/559 kB
2024-08-30T19:20:28.5236800Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 393/559 kB
2024-08-30T19:20:28.5237004Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 409/559 kB
2024-08-30T19:20:28.5237232Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 426/559 kB
2024-08-30T19:20:28.5237621Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 442/559 kB
2024-08-30T19:20:28.5237835Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 458/559 kB
2024-08-30T19:20:28.5238065Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 475/559 kB
2024-08-30T19:20:28.5238270Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 491/559 kB
2024-08-30T19:20:28.5238480Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 507/559 kB
2024-08-30T19:20:28.5238699Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 524/559 kB
2024-08-30T19:20:28.5238924Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 540/559 kB
2024-08-30T19:20:28.5239121Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 557/559 kB
2024-08-30T19:20:28.5239321Z Progress (3): 2.3/12 MB | 2.4/4.2 MB | 559 kB    
2024-08-30T19:20:28.5239604Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 16/443 kB
2024-08-30T19:20:28.5239888Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 32/443 kB
2024-08-30T19:20:28.5240144Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 49/443 kB
2024-08-30T19:20:28.5240405Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 65/443 kB
2024-08-30T19:20:28.5240685Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 81/443 kB
2024-08-30T19:20:28.5240930Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 98/443 kB
2024-08-30T19:20:28.5241195Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 114/443 kB
2024-08-30T19:20:28.5241476Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 130/443 kB
2024-08-30T19:20:28.5241738Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 147/443 kB
2024-08-30T19:20:28.5242018Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 163/443 kB
2024-08-30T19:20:28.5242299Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 180/443 kB
2024-08-30T19:20:28.5242553Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 196/443 kB
2024-08-30T19:20:28.5243006Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 212/443 kB
2024-08-30T19:20:28.5243271Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 229/443 kB
2024-08-30T19:20:28.5243525Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 245/443 kB
2024-08-30T19:20:28.5243802Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 245/443 kB
2024-08-30T19:20:28.5244052Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 262/443 kB
2024-08-30T19:20:28.5244308Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 278/443 kB
2024-08-30T19:20:28.5244583Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 294/443 kB
2024-08-30T19:20:28.5244841Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 311/443 kB
2024-08-30T19:20:28.5245093Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 327/443 kB
2024-08-30T19:20:28.5245371Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 343/443 kB
2024-08-30T19:20:28.5245620Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 360/443 kB
2024-08-30T19:20:28.5245895Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 376/443 kB
2024-08-30T19:20:28.5246153Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 393/443 kB
2024-08-30T19:20:28.5246407Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 409/443 kB
2024-08-30T19:20:28.5246668Z Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 425/443 kB
2024-08-30T19:20:28.5246937Z Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 425/443 kB
2024-08-30T19:20:28.5247190Z Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 442/443 kB
2024-08-30T19:20:28.5247445Z Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB    
2024-08-30T19:20:28.5247698Z Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB
2024-08-30T19:20:28.5247941Z Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB
2024-08-30T19:20:28.5248184Z Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB
2024-08-30T19:20:28.5248424Z Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB
2024-08-30T19:20:28.5248620Z                                                       
2024-08-30T19:20:28.5249590Z Downloaded from central: https://repo.maven.apache.org/maven2/antlr/antlr/2.7.6/antlr-2.7.6.jar (443 kB at 510 kB/s)
2024-08-30T19:20:28.5249859Z #24 7.777 Progress (3): 2.3/12 MB | 2.5/4.2 MB | 559 kB
2024-08-30T19:20:28.5250074Z Progress (3): 2.3/12 MB | 2.6/4.2 MB | 559 kB
2024-08-30T19:20:28.5250291Z Progress (3): 2.3/12 MB | 2.6/4.2 MB | 559 kB
2024-08-30T19:20:28.5250733Z Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
2024-08-30T19:20:28.5251193Z Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
2024-08-30T19:20:28.5263239Z Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
2024-08-30T19:20:28.5263556Z Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
2024-08-30T19:20:28.5263851Z Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
2024-08-30T19:20:28.5264105Z Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
2024-08-30T19:20:28.5264385Z Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5264682Z Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5264948Z Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5265222Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5265488Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5265758Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5266035Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5266291Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5266538Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5266808Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5267066Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5267319Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
2024-08-30T19:20:28.5267594Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.2/2.6 MB
2024-08-30T19:20:28.5268030Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.2/2.6 MB
2024-08-30T19:20:28.5268312Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.2/2.6 MB
2024-08-30T19:20:28.5268571Z Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.2/2.6 MB
2024-08-30T19:20:28.5268824Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
2024-08-30T19:20:28.5269101Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
2024-08-30T19:20:28.5269377Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
2024-08-30T19:20:28.5269616Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
2024-08-30T19:20:28.5269887Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
2024-08-30T19:20:28.5270149Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
2024-08-30T19:20:28.5270402Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
2024-08-30T19:20:28.5270669Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
2024-08-30T19:20:28.5270939Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
2024-08-30T19:20:28.5271197Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
2024-08-30T19:20:28.5271460Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
2024-08-30T19:20:28.5271713Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
2024-08-30T19:20:28.5271976Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
2024-08-30T19:20:28.5272240Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
2024-08-30T19:20:28.5272513Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
2024-08-30T19:20:28.5272755Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
2024-08-30T19:20:28.5273014Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
2024-08-30T19:20:28.5273274Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5273538Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5273802Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5274065Z Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5274271Z                                                           
2024-08-30T19:20:28.5275099Z Downloading from central: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar
2024-08-30T19:20:28.5275459Z #24 7.777 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5275939Z Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5276231Z Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5276517Z Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5276779Z Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5277036Z Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5277313Z Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5277567Z Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5277821Z Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5278171Z Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5278431Z Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5278694Z Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5278972Z Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5279217Z Progress (4): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5279482Z Progress (4): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5279747Z Progress (4): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5280008Z Progress (4): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5280361Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 16/314 kB
2024-08-30T19:20:28.5280713Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 33/314 kB
2024-08-30T19:20:28.5281030Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 49/314 kB
2024-08-30T19:20:28.5281577Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 63/314 kB
2024-08-30T19:20:28.5281908Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 63/314 kB
2024-08-30T19:20:28.5282253Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 79/314 kB
2024-08-30T19:20:28.5282571Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 79/314 kB
2024-08-30T19:20:28.5282913Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 96/314 kB
2024-08-30T19:20:28.5283261Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 96/314 kB
2024-08-30T19:20:28.5283616Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 112/314 kB
2024-08-30T19:20:28.5283960Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 112/314 kB
2024-08-30T19:20:28.5284295Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 129/314 kB
2024-08-30T19:20:28.5284629Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 129/314 kB
2024-08-30T19:20:28.5284976Z Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 145/314 kB
2024-08-30T19:20:28.5285328Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 145/314 kB
2024-08-30T19:20:28.5285669Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 161/314 kB
2024-08-30T19:20:28.5286026Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 178/314 kB
2024-08-30T19:20:28.5286370Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 178/314 kB
2024-08-30T19:20:28.5286705Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 194/314 kB
2024-08-30T19:20:28.5287053Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 194/314 kB
2024-08-30T19:20:28.5287358Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 210/314 kB
2024-08-30T19:20:28.5287694Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 210/314 kB
2024-08-30T19:20:28.5288044Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 210/314 kB
2024-08-30T19:20:28.5288383Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 227/314 kB
2024-08-30T19:20:28.5288723Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 227/314 kB
2024-08-30T19:20:28.5289052Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 243/314 kB
2024-08-30T19:20:28.5289554Z Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 260/314 kB
2024-08-30T19:20:28.5289910Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 260/314 kB
2024-08-30T19:20:28.5290252Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 276/314 kB
2024-08-30T19:20:28.5290563Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 276/314 kB
2024-08-30T19:20:28.5290904Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 292/314 kB
2024-08-30T19:20:28.5305804Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 292/314 kB
2024-08-30T19:20:28.5306189Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 292/314 kB
2024-08-30T19:20:28.5306567Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 309/314 kB
2024-08-30T19:20:28.5306911Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 314 kB    
2024-08-30T19:20:28.5307264Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 314 kB
2024-08-30T19:20:28.5307606Z Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 314 kB
2024-08-30T19:20:28.5307928Z Progress (5): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.5/2.6 MB | 314 kB
2024-08-30T19:20:28.5308146Z                                                                    
2024-08-30T19:20:28.5309173Z Downloaded from central: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar (314 kB at 358 kB/s)
2024-08-30T19:20:28.5309510Z #24 7.781 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5309798Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.5/2.6 MB
2024-08-30T19:20:28.5310068Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
2024-08-30T19:20:28.5310331Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
2024-08-30T19:20:28.5310858Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
2024-08-30T19:20:28.5311117Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
2024-08-30T19:20:28.5311398Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
2024-08-30T19:20:28.5311668Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
2024-08-30T19:20:28.5311930Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
2024-08-30T19:20:28.5312208Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
2024-08-30T19:20:28.5312467Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
2024-08-30T19:20:28.5312717Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
2024-08-30T19:20:28.5312991Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
2024-08-30T19:20:28.5313251Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
2024-08-30T19:20:28.5313506Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
2024-08-30T19:20:28.5313788Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
2024-08-30T19:20:28.5314039Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
2024-08-30T19:20:28.5314295Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
2024-08-30T19:20:28.5314559Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
2024-08-30T19:20:28.5314825Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
2024-08-30T19:20:28.5315087Z Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
2024-08-30T19:20:28.5315277Z                                                           
2024-08-30T19:20:28.5316636Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.jar (559 kB at 636 kB/s)
2024-08-30T19:20:28.5317590Z #24 7.783 Downloading from central: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar
2024-08-30T19:20:28.5317894Z #24 7.783 Progress (3): 2.6/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5318132Z Progress (3): 2.6/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5318348Z Progress (3): 2.6/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5318562Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5318794Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5319193Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5319423Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5319642Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5319842Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5320045Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5320270Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5320478Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5320676Z Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5320898Z Progress (3): 2.7/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5321119Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5321321Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5321533Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5321749Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5321991Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5322179Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5322378Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5322604Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5322811Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5323011Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5323224Z Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5323444Z Progress (3): 2.8/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5323655Z Progress (3): 2.8/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5324040Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5324257Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5324466Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5324676Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5324845Z                                                  
2024-08-30T19:20:28.5325698Z Downloading from central: https://repo.maven.apache.org/maven2/javax/transaction/jta/1.1/jta-1.1.jar
2024-08-30T19:20:28.5326071Z #24 7.789 Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 16/109 kB
2024-08-30T19:20:28.5326367Z Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 32/109 kB
2024-08-30T19:20:28.5326670Z Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 49/109 kB
2024-08-30T19:20:28.5326946Z Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 65/109 kB
2024-08-30T19:20:28.5327228Z Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 81/109 kB
2024-08-30T19:20:28.5327527Z Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 98/109 kB
2024-08-30T19:20:28.5327806Z Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 109 kB   
2024-08-30T19:20:28.5327998Z                                                           
2024-08-30T19:20:28.5329079Z Downloaded from central: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar (109 kB at 124 kB/s)
2024-08-30T19:20:28.5329371Z #24 7.789 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
2024-08-30T19:20:28.5329596Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
2024-08-30T19:20:28.5329815Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
2024-08-30T19:20:28.5330038Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
2024-08-30T19:20:28.5330232Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
2024-08-30T19:20:28.5330435Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
2024-08-30T19:20:28.5330649Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
2024-08-30T19:20:28.5330870Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
2024-08-30T19:20:28.5336892Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
2024-08-30T19:20:28.5337187Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
2024-08-30T19:20:28.5337416Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
2024-08-30T19:20:28.5337626Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
2024-08-30T19:20:28.5338118Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
2024-08-30T19:20:28.5338373Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
2024-08-30T19:20:28.5338582Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
2024-08-30T19:20:28.5338794Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
2024-08-30T19:20:28.5339013Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
2024-08-30T19:20:28.5339211Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
2024-08-30T19:20:28.5339414Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
2024-08-30T19:20:28.5339628Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
2024-08-30T19:20:28.5339849Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
2024-08-30T19:20:28.5340072Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
2024-08-30T19:20:28.5340278Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
2024-08-30T19:20:28.5340486Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
2024-08-30T19:20:28.5340717Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
2024-08-30T19:20:28.5340920Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5341117Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5341337Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5341552Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5341763Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5341960Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5342237Z Progress (4): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB | 15 kB
2024-08-30T19:20:28.5342447Z                                                          
2024-08-30T19:20:28.5343697Z Downloaded from central: https://repo.maven.apache.org/maven2/javax/transaction/jta/1.1/jta-1.1.jar (15 kB at 17 kB/s)
2024-08-30T19:20:28.5345276Z #24 7.789 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-commons-annotations/3.2.0.Final/hibernate-commons-annotations-3.2.0.Final.jar
2024-08-30T19:20:28.5345592Z #24 7.789 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5345831Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5346032Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5346255Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5346476Z Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5346691Z Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5346891Z Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5347099Z Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5347329Z Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5347537Z Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5347733Z Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5347961Z Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5348176Z Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5348386Z Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5348599Z Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5348816Z Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5349047Z Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5349248Z Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5349445Z Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5349675Z Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5349889Z Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5350091Z Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5350309Z Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5350525Z Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5350743Z Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5350947Z Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5351355Z Progress (3): 3.2/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5351573Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5351770Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5351982Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5352187Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5352395Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5352607Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5352847Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5353045Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5353250Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5353484Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5353697Z Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5353902Z Progress (3): 3.4/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5354122Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5354335Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5354561Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5354760Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5354957Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5355172Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5355393Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5355597Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5355806Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5356234Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5356426Z Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5356637Z Progress (3): 3.5/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5356847Z Progress (3): 3.5/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5357069Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5357283Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5357489Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5357714Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5357943Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5358137Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5358344Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5358573Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
2024-08-30T19:20:28.5358866Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 16/71 kB
2024-08-30T19:20:28.5359167Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 33/71 kB
2024-08-30T19:20:28.5359466Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 49/71 kB
2024-08-30T19:20:28.5359725Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 64/71 kB
2024-08-30T19:20:28.5360034Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 71 kB   
2024-08-30T19:20:28.5360246Z                                                          
2024-08-30T19:20:28.5361917Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-commons-annotations/3.2.0.Final/hibernate-commons-annotations-3.2.0.Final.jar (71 kB at 81 kB/s)
2024-08-30T19:20:28.5363514Z #24 7.789 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/javax/persistence/hibernate-jpa-2.0-api/1.0.0.Final/hibernate-jpa-2.0-api-1.0.0.Final.jar
2024-08-30T19:20:28.5364714Z #24 7.789 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.10/spring-messaging-6.1.10.jar
2024-08-30T19:20:28.5365029Z #24 7.789 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
2024-08-30T19:20:28.5365261Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
2024-08-30T19:20:28.5365472Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
2024-08-30T19:20:28.5365686Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
2024-08-30T19:20:28.5366060Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
2024-08-30T19:20:28.5366268Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
2024-08-30T19:20:28.5366475Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
2024-08-30T19:20:28.5366695Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
2024-08-30T19:20:28.5366910Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
2024-08-30T19:20:28.5367120Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
2024-08-30T19:20:28.5367325Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
2024-08-30T19:20:28.5367554Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
2024-08-30T19:20:28.5367803Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
2024-08-30T19:20:28.5367994Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
2024-08-30T19:20:28.5368204Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
2024-08-30T19:20:28.5368430Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
2024-08-30T19:20:28.5368648Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
2024-08-30T19:20:28.5368869Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
2024-08-30T19:20:28.5369073Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5369299Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5369591Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 15/101 kB
2024-08-30T19:20:28.5369888Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 31/101 kB
2024-08-30T19:20:28.5370182Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 48/101 kB
2024-08-30T19:20:28.5370476Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 64/101 kB
2024-08-30T19:20:28.5370749Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 81/101 kB
2024-08-30T19:20:28.5373315Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 96/101 kB
2024-08-30T19:20:28.5373635Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 101 kB   
2024-08-30T19:20:28.5373853Z                                                           
2024-08-30T19:20:28.5375629Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/javax/persistence/hibernate-jpa-2.0-api/1.0.0.Final/hibernate-jpa-2.0-api-1.0.0.Final.jar (101 kB at 114 kB/s)
2024-08-30T19:20:28.5375931Z #24 7.793 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5376157Z Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5376473Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 16/615 kB
2024-08-30T19:20:28.5376749Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 16/615 kB
2024-08-30T19:20:28.5377034Z Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 33/615 kB
2024-08-30T19:20:28.5377340Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 33/615 kB
2024-08-30T19:20:28.5377633Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 49/615 kB
2024-08-30T19:20:28.5377927Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 49/615 kB
2024-08-30T19:20:28.5378268Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 66/615 kB
2024-08-30T19:20:28.5378539Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 81/615 kB
2024-08-30T19:20:28.5378832Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 81/615 kB
2024-08-30T19:20:28.5379116Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 98/615 kB
2024-08-30T19:20:28.5379389Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 98/615 kB
2024-08-30T19:20:28.5379696Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 114/615 kB
2024-08-30T19:20:28.5379977Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 114/615 kB
2024-08-30T19:20:28.5380248Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 131/615 kB
2024-08-30T19:20:28.5380546Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 131/615 kB
2024-08-30T19:20:28.5380842Z Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 147/615 kB
2024-08-30T19:20:28.5381126Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 147/615 kB
2024-08-30T19:20:28.5381414Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 163/615 kB
2024-08-30T19:20:28.5381693Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 163/615 kB
2024-08-30T19:20:28.5382218Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 180/615 kB
2024-08-30T19:20:28.5382530Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 180/615 kB
2024-08-30T19:20:28.5382804Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 196/615 kB
2024-08-30T19:20:28.5383105Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 196/615 kB
2024-08-30T19:20:28.5383370Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 213/615 kB
2024-08-30T19:20:28.5383656Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 213/615 kB
2024-08-30T19:20:28.5383951Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 229/615 kB
2024-08-30T19:20:28.5384242Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 245/615 kB
2024-08-30T19:20:28.5384527Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 245/615 kB
2024-08-30T19:20:28.5384828Z Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 262/615 kB
2024-08-30T19:20:28.5385086Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 262/615 kB
2024-08-30T19:20:28.5385394Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 278/615 kB
2024-08-30T19:20:28.5385682Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 278/615 kB
2024-08-30T19:20:28.5385957Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 294/615 kB
2024-08-30T19:20:28.5386251Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 294/615 kB
2024-08-30T19:20:28.5386541Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 311/615 kB
2024-08-30T19:20:28.5386807Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 311/615 kB
2024-08-30T19:20:28.5387103Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 327/615 kB
2024-08-30T19:20:28.5387644Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 327/615 kB
2024-08-30T19:20:28.5387936Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 344/615 kB
2024-08-30T19:20:28.5388231Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 344/615 kB
2024-08-30T19:20:28.5388496Z Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 360/615 kB
2024-08-30T19:20:28.5388800Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 360/615 kB
2024-08-30T19:20:28.5389090Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 376/615 kB
2024-08-30T19:20:28.5389366Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 393/615 kB
2024-08-30T19:20:28.5389665Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 393/615 kB
2024-08-30T19:20:28.5389934Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 409/615 kB
2024-08-30T19:20:28.5390208Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 409/615 kB
2024-08-30T19:20:28.5390505Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 426/615 kB
2024-08-30T19:20:28.5390799Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 426/615 kB
2024-08-30T19:20:28.5391072Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 442/615 kB
2024-08-30T19:20:28.5391376Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 458/615 kB
2024-08-30T19:20:28.5391634Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 458/615 kB
2024-08-30T19:20:28.5391945Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 475/615 kB
2024-08-30T19:20:28.5392232Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 491/615 kB
2024-08-30T19:20:28.5392506Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 491/615 kB
2024-08-30T19:20:28.5392797Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 507/615 kB
2024-08-30T19:20:28.5393084Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 524/615 kB
2024-08-30T19:20:28.5393345Z Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 540/615 kB
2024-08-30T19:20:28.5393637Z Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 540/615 kB
2024-08-30T19:20:28.5393938Z Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 557/615 kB
2024-08-30T19:20:28.5394213Z Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 573/615 kB
2024-08-30T19:20:28.5394511Z Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 589/615 kB
2024-08-30T19:20:28.5394791Z Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 589/615 kB
2024-08-30T19:20:28.5395251Z Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 606/615 kB
2024-08-30T19:20:28.5395553Z Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 615 kB    
2024-08-30T19:20:28.5395835Z Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 615 kB
2024-08-30T19:20:28.5396028Z                                                           
2024-08-30T19:20:28.5397314Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.10/spring-messaging-6.1.10.jar (615 kB at 689 kB/s)
2024-08-30T19:20:28.5398308Z #24 7.805 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-test/6.1.3/spring-test-6.1.3.jar
2024-08-30T19:20:28.5398609Z #24 7.805 Progress (3): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5398832Z Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5399044Z Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5399237Z Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5399441Z Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5399647Z Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5399852Z Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5400048Z Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5400258Z Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5400452Z Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5400660Z Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5400870Z Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5401074Z Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5401529Z Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5402180Z Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5402420Z Progress (3): 3.8/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5402655Z Progress (3): 3.8/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5402880Z Progress (3): 3.8/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5403052Z Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5403185Z Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5403311Z Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5403433Z Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5403565Z Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5403690Z Progress (3): 3.8/12 MB | 4.2 MB | 1.7/2.6 MB    
2024-08-30T19:20:28.5403816Z Progress (3): 3.8/12 MB | 4.2 MB | 1.7/2.6 MB
2024-08-30T19:20:28.5403991Z Progress (4): 3.8/12 MB | 4.2 MB | 1.7/2.6 MB | 16/854 kB
2024-08-30T19:20:28.5404214Z Progress (4): 3.8/12 MB | 4.2 MB | 1.7/2.6 MB | 33/854 kB
2024-08-30T19:20:28.5404403Z                                                          
2024-08-30T19:20:28.5405535Z Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.14.11/byte-buddy-1.14.11.jar (4.2 MB at 4.7 MB/s)
2024-08-30T19:20:28.5405835Z #24 7.805 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 49/854 kB
2024-08-30T19:20:28.5408812Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 65/854 kB
2024-08-30T19:20:28.5409118Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 81/854 kB
2024-08-30T19:20:28.5409345Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 97/854 kB
2024-08-30T19:20:28.5409590Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 114/854 kB
2024-08-30T19:20:28.5409805Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 130/854 kB
2024-08-30T19:20:28.5410012Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 146/854 kB
2024-08-30T19:20:28.5410222Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 163/854 kB
2024-08-30T19:20:28.5410473Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 179/854 kB
2024-08-30T19:20:28.5410694Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 196/854 kB
2024-08-30T19:20:28.5410931Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 212/854 kB
2024-08-30T19:20:28.5411321Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 228/854 kB
2024-08-30T19:20:28.5411860Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 245/854 kB
2024-08-30T19:20:28.5412125Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 261/854 kB
2024-08-30T19:20:28.5412353Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 278/854 kB
2024-08-30T19:20:28.5412585Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 294/854 kB
2024-08-30T19:20:28.5412804Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 310/854 kB
2024-08-30T19:20:28.5413027Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 327/854 kB
2024-08-30T19:20:28.5413256Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 343/854 kB
2024-08-30T19:20:28.5413479Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 359/854 kB
2024-08-30T19:20:28.5413701Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 376/854 kB
2024-08-30T19:20:28.5413946Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 392/854 kB
2024-08-30T19:20:28.5414168Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 409/854 kB
2024-08-30T19:20:28.5414392Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 425/854 kB
2024-08-30T19:20:28.5414633Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 441/854 kB
2024-08-30T19:20:28.5414878Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 458/854 kB
2024-08-30T19:20:28.5415105Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 474/854 kB
2024-08-30T19:20:28.5415328Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 491/854 kB
2024-08-30T19:20:28.5415549Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 507/854 kB
2024-08-30T19:20:28.5415778Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 523/854 kB
2024-08-30T19:20:28.5415988Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 540/854 kB
2024-08-30T19:20:28.5416215Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5416407Z                                                  
2024-08-30T19:20:28.5417455Z Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-api/0.12.6/jjwt-api-0.12.6.jar
2024-08-30T19:20:28.5418053Z #24 7.805 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5418316Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5418554Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5418792Z Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5419031Z Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5419251Z Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5419482Z Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5419712Z Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5419931Z Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5420164Z Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5420402Z Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5420627Z Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5420873Z Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5421103Z Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5421336Z Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5421575Z Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5421805Z Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5422028Z Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5422270Z Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5424343Z Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5424630Z Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5424878Z Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5425111Z Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5425343Z Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5425577Z Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5425816Z Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5426052Z Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5426283Z Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5426512Z Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5426975Z Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5427228Z Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5427461Z Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5427699Z Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5427922Z Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5428147Z Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5428392Z Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5428621Z Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5428866Z Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5429108Z Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5429335Z Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
2024-08-30T19:20:28.5429677Z Progress (4): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB | 16/140 kB
2024-08-30T19:20:28.5429980Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 16/140 kB
2024-08-30T19:20:28.5430291Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 32/140 kB
2024-08-30T19:20:28.5430611Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 32/140 kB
2024-08-30T19:20:28.5430930Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 49/140 kB
2024-08-30T19:20:28.5431240Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 49/140 kB
2024-08-30T19:20:28.5431563Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 65/140 kB
2024-08-30T19:20:28.5431870Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 65/140 kB
2024-08-30T19:20:28.5432179Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 81/140 kB
2024-08-30T19:20:28.5432761Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 81/140 kB
2024-08-30T19:20:28.5433072Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 81/140 kB
2024-08-30T19:20:28.5433388Z Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 98/140 kB
2024-08-30T19:20:28.5433725Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 98/140 kB
2024-08-30T19:20:28.5434064Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 114/140 kB
2024-08-30T19:20:28.5434387Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 114/140 kB
2024-08-30T19:20:28.5434686Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 130/140 kB
2024-08-30T19:20:28.5434980Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 130/140 kB
2024-08-30T19:20:28.5435287Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 140 kB    
2024-08-30T19:20:28.5435579Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 140 kB
2024-08-30T19:20:28.5435889Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 140 kB
2024-08-30T19:20:28.5436179Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 140 kB
2024-08-30T19:20:28.5436480Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 572/854 kB | 140 kB
2024-08-30T19:20:28.5436781Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 589/854 kB | 140 kB
2024-08-30T19:20:28.5437077Z Progress (4): 3.8/12 MB | 2.5/2.6 MB | 605/854 kB | 140 kB
2024-08-30T19:20:28.5437276Z                                                           
2024-08-30T19:20:28.5438544Z Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-api/0.12.6/jjwt-api-0.12.6.jar (140 kB at 156 kB/s)
2024-08-30T19:20:28.5438877Z #24 7.809 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 622/854 kB
2024-08-30T19:20:28.5439069Z                                                  
2024-08-30T19:20:28.5440106Z Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-impl/0.12.6/jjwt-impl-0.12.6.jar
2024-08-30T19:20:28.5440417Z #24 7.809 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 638/854 kB
2024-08-30T19:20:28.5440675Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 654/854 kB
2024-08-30T19:20:28.5440914Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 671/854 kB
2024-08-30T19:20:28.5441140Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 687/854 kB
2024-08-30T19:20:28.5441380Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 704/854 kB
2024-08-30T19:20:28.5441612Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 720/854 kB
2024-08-30T19:20:28.5442073Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 736/854 kB
2024-08-30T19:20:28.5442330Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 753/854 kB
2024-08-30T19:20:28.5442562Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 769/854 kB
2024-08-30T19:20:28.5442789Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 785/854 kB
2024-08-30T19:20:28.5443019Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 802/854 kB
2024-08-30T19:20:28.5443248Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 818/854 kB
2024-08-30T19:20:28.5443480Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 835/854 kB
2024-08-30T19:20:28.5443725Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 851/854 kB
2024-08-30T19:20:28.5443960Z Progress (3): 3.8/12 MB | 2.5/2.6 MB | 854 kB    
2024-08-30T19:20:28.5444160Z                                              
2024-08-30T19:20:28.5445449Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-test/6.1.3/spring-test-6.1.3.jar (854 kB at 946 kB/s)
2024-08-30T19:20:28.5446661Z #24 7.809 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-jackson/0.12.6/jjwt-jackson-0.12.6.jar
2024-08-30T19:20:28.5448122Z #24 7.809 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-web/6.3.1/spring-security-web-6.3.1.jar
2024-08-30T19:20:28.5448379Z #24 7.809 Progress (2): 3.8/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5448572Z Progress (2): 3.8/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5448765Z Progress (2): 3.9/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5448947Z Progress (2): 3.9/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5449130Z Progress (2): 3.9/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5449316Z Progress (2): 3.9/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5449706Z Progress (2): 3.9/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5449900Z Progress (2): 3.9/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5450078Z Progress (2): 4.0/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5450255Z Progress (2): 4.0/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5450441Z Progress (2): 4.0/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5450603Z Progress (2): 4.0/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5450792Z Progress (2): 4.0/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5451178Z Progress (2): 4.0/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5451367Z Progress (2): 4.0/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5451545Z Progress (2): 4.1/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5451732Z Progress (2): 4.1/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5451906Z Progress (2): 4.1/12 MB | 2.5/2.6 MB
2024-08-30T19:20:28.5452158Z Progress (3): 4.1/12 MB | 2.5/2.6 MB | 16/473 kB
2024-08-30T19:20:28.5452406Z Progress (3): 4.1/12 MB | 2.5/2.6 MB | 16/473 kB
2024-08-30T19:20:28.5452635Z Progress (3): 4.1/12 MB | 2.5/2.6 MB | 16/473 kB
2024-08-30T19:20:28.5452876Z Progress (3): 4.1/12 MB | 2.5/2.6 MB | 33/473 kB
2024-08-30T19:20:28.5453110Z Progress (3): 4.1/12 MB | 2.5/2.6 MB | 33/473 kB
2024-08-30T19:20:28.5453336Z Progress (3): 4.1/12 MB | 2.5/2.6 MB | 49/473 kB
2024-08-30T19:20:28.5453559Z Progress (3): 4.2/12 MB | 2.5/2.6 MB | 49/473 kB
2024-08-30T19:20:28.5453802Z Progress (3): 4.2/12 MB | 2.5/2.6 MB | 49/473 kB
2024-08-30T19:20:28.5454044Z Progress (3): 4.2/12 MB | 2.5/2.6 MB | 49/473 kB
2024-08-30T19:20:28.5454282Z Progress (3): 4.2/12 MB | 2.5/2.6 MB | 66/473 kB
2024-08-30T19:20:28.5454506Z Progress (3): 4.2/12 MB | 2.5/2.6 MB | 66/473 kB
2024-08-30T19:20:28.5454733Z Progress (3): 4.2/12 MB | 2.5/2.6 MB | 66/473 kB
2024-08-30T19:20:28.5454962Z Progress (3): 4.2/12 MB | 2.5/2.6 MB | 82/473 kB
2024-08-30T19:20:28.5455189Z Progress (3): 4.2/12 MB | 2.5/2.6 MB | 98/473 kB
2024-08-30T19:20:28.5455501Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 98/473 kB | 16/804 kB
2024-08-30T19:20:28.5455833Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 115/473 kB | 16/804 kB
2024-08-30T19:20:28.5456171Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 115/473 kB | 33/804 kB
2024-08-30T19:20:28.5456485Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 115/473 kB | 49/804 kB
2024-08-30T19:20:28.5456808Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 131/473 kB | 49/804 kB
2024-08-30T19:20:28.5457114Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 131/473 kB | 63/804 kB
2024-08-30T19:20:28.5457689Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 131/473 kB | 80/804 kB
2024-08-30T19:20:28.5458030Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 147/473 kB | 80/804 kB
2024-08-30T19:20:28.5458339Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 147/473 kB | 96/804 kB
2024-08-30T19:20:28.5458658Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 164/473 kB | 96/804 kB
2024-08-30T19:20:28.5458984Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 164/473 kB | 112/804 kB
2024-08-30T19:20:28.5459302Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 164/473 kB | 129/804 kB
2024-08-30T19:20:28.5459619Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 180/473 kB | 129/804 kB
2024-08-30T19:20:28.5459924Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 180/473 kB | 145/804 kB
2024-08-30T19:20:28.5460221Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 180/473 kB | 161/804 kB
2024-08-30T19:20:28.5460524Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 197/473 kB | 161/804 kB
2024-08-30T19:20:28.5460824Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 197/473 kB | 178/804 kB
2024-08-30T19:20:28.5461146Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 213/473 kB | 178/804 kB
2024-08-30T19:20:28.5461465Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 213/473 kB | 194/804 kB
2024-08-30T19:20:28.5461773Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 213/473 kB | 211/804 kB
2024-08-30T19:20:28.5462094Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 229/473 kB | 211/804 kB
2024-08-30T19:20:28.5462399Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 229/473 kB | 227/804 kB
2024-08-30T19:20:28.5462705Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 246/473 kB | 227/804 kB
2024-08-30T19:20:28.5463019Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 246/473 kB | 243/804 kB
2024-08-30T19:20:28.5463627Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 256/473 kB | 243/804 kB
2024-08-30T19:20:28.5463944Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 256/473 kB | 260/804 kB
2024-08-30T19:20:28.5464264Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 272/473 kB | 260/804 kB
2024-08-30T19:20:28.5464567Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 272/473 kB | 276/804 kB
2024-08-30T19:20:28.5464863Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 289/473 kB | 276/804 kB
2024-08-30T19:20:28.5465171Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 289/473 kB | 293/804 kB
2024-08-30T19:20:28.5465475Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 289/473 kB | 309/804 kB
2024-08-30T19:20:28.5465793Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 305/473 kB | 309/804 kB
2024-08-30T19:20:28.5466095Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 305/473 kB | 325/804 kB
2024-08-30T19:20:28.5466409Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 321/473 kB | 325/804 kB
2024-08-30T19:20:28.5466726Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 321/473 kB | 342/804 kB
2024-08-30T19:20:28.5467029Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 338/473 kB | 342/804 kB
2024-08-30T19:20:28.5467346Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 338/473 kB | 358/804 kB
2024-08-30T19:20:28.5467659Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 354/473 kB | 358/804 kB
2024-08-30T19:20:28.5467951Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 354/473 kB | 374/804 kB
2024-08-30T19:20:28.5468265Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 370/473 kB | 374/804 kB
2024-08-30T19:20:28.5468585Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 387/473 kB | 374/804 kB
2024-08-30T19:20:28.5468895Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 403/473 kB | 374/804 kB
2024-08-30T19:20:28.5469279Z Progress (5): 4.2/12 MB | 2.5/2.6 MB | 403/473 kB | 374/804 kB | 9.4 kB
2024-08-30T19:20:28.5469635Z Progress (5): 4.2/12 MB | 2.5/2.6 MB | 420/473 kB | 374/804 kB | 9.4 kB
2024-08-30T19:20:28.5470000Z Progress (5): 4.2/12 MB | 2.5/2.6 MB | 436/473 kB | 374/804 kB | 9.4 kB
2024-08-30T19:20:28.5470239Z                                                                        
2024-08-30T19:20:28.5471779Z Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-jackson/0.12.6/jjwt-jackson-0.12.6.jar (9.4 kB at 10 kB/s)
2024-08-30T19:20:28.5473329Z #24 7.809 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-config/6.3.1/spring-security-config-6.3.1.jar
2024-08-30T19:20:28.5474006Z #24 7.809 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 452/473 kB | 374/804 kB
2024-08-30T19:20:28.5474352Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 469/473 kB | 374/804 kB
2024-08-30T19:20:28.5474675Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 473 kB | 374/804 kB    
2024-08-30T19:20:28.5474965Z Progress (4): 4.2/12 MB | 2.5/2.6 MB | 473 kB | 374/804 kB
2024-08-30T19:20:28.5475258Z Progress (4): 4.3/12 MB | 2.5/2.6 MB | 473 kB | 374/804 kB
2024-08-30T19:20:28.5475480Z                                                           
2024-08-30T19:20:28.5476720Z Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-impl/0.12.6/jjwt-impl-0.12.6.jar (473 kB at 523 kB/s)
2024-08-30T19:20:28.5477053Z #24 7.809 Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5477311Z Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5477546Z Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5477780Z Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5478021Z Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5478341Z Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5478583Z Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5478822Z Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5479049Z Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5479284Z Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5479508Z Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5479719Z Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5480182Z Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5480412Z Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5480654Z Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5480893Z Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5481119Z Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5481377Z Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5481619Z Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5481850Z Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5482084Z Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5482310Z Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5482534Z Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5482767Z Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5482996Z Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5483241Z Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5483491Z Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5483717Z Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5483951Z Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5484187Z Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5484418Z Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5484649Z Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5484870Z Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5485095Z Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5485321Z Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5485550Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5485784Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5486019Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 374/804 kB
2024-08-30T19:20:28.5486261Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 391/804 kB
2024-08-30T19:20:28.5486492Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 407/804 kB
2024-08-30T19:20:28.5486739Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 424/804 kB
2024-08-30T19:20:28.5486962Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 440/804 kB
2024-08-30T19:20:28.5487184Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 456/804 kB
2024-08-30T19:20:28.5487675Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 473/804 kB
2024-08-30T19:20:28.5487924Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 489/804 kB
2024-08-30T19:20:28.5488153Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 506/804 kB
2024-08-30T19:20:28.5488381Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 522/804 kB
2024-08-30T19:20:28.5488615Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 538/804 kB
2024-08-30T19:20:28.5488857Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 555/804 kB
2024-08-30T19:20:28.5489093Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 571/804 kB
2024-08-30T19:20:28.5489320Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 587/804 kB
2024-08-30T19:20:28.5489564Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 604/804 kB
2024-08-30T19:20:28.5489783Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 608/804 kB
2024-08-30T19:20:28.5490004Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 624/804 kB
2024-08-30T19:20:28.5490240Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 641/804 kB
2024-08-30T19:20:28.5490462Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 657/804 kB
2024-08-30T19:20:28.5490699Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 673/804 kB
2024-08-30T19:20:28.5490948Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 690/804 kB
2024-08-30T19:20:28.5491544Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 706/804 kB
2024-08-30T19:20:28.5491769Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 723/804 kB
2024-08-30T19:20:28.5492005Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 739/804 kB
2024-08-30T19:20:28.5492232Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 755/804 kB
2024-08-30T19:20:28.5492475Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 772/804 kB
2024-08-30T19:20:28.5492706Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 788/804 kB
2024-08-30T19:20:28.5493214Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 804 kB    
2024-08-30T19:20:28.5493416Z                                              
2024-08-30T19:20:28.5495077Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-web/6.3.1/spring-security-web-6.3.1.jar (804 kB at 886 kB/s)
2024-08-30T19:20:28.5495411Z #24 7.813 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0/1.9 MB
2024-08-30T19:20:28.5495670Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0/1.9 MB
2024-08-30T19:20:28.5495895Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0/1.9 MB
2024-08-30T19:20:28.5496128Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
2024-08-30T19:20:28.5496363Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
2024-08-30T19:20:28.5496583Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
2024-08-30T19:20:28.5496813Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
2024-08-30T19:20:28.5497037Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
2024-08-30T19:20:28.5497268Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
2024-08-30T19:20:28.5497523Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
2024-08-30T19:20:28.5497758Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
2024-08-30T19:20:28.5497986Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
2024-08-30T19:20:28.5498228Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
2024-08-30T19:20:28.5498479Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
2024-08-30T19:20:28.5498704Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
2024-08-30T19:20:28.5498937Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.3/1.9 MB
2024-08-30T19:20:28.5499168Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.3/1.9 MB
2024-08-30T19:20:28.5499391Z Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.3/1.9 MB
2024-08-30T19:20:28.5499620Z Progress (3): 4.9/12 MB | 2.6/2.6 MB | 0.3/1.9 MB
2024-08-30T19:20:28.5499826Z Progress (3): 4.9/12 MB | 2.6 MB | 0.3/1.9 MB    
2024-08-30T19:20:28.5500005Z                                              
2024-08-30T19:20:28.5501378Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-core/3.5.6-Final/hibernate-core-3.5.6-Final.jar (2.6 MB at 2.8 MB/s)
2024-08-30T19:20:28.5501608Z #24 7.813 Progress (2): 4.9/12 MB | 0.3/1.9 MB
2024-08-30T19:20:28.5501777Z Progress (2): 4.9/12 MB | 0.3/1.9 MB
2024-08-30T19:20:28.5501936Z Progress (2): 4.9/12 MB | 0.3/1.9 MB
2024-08-30T19:20:28.5502399Z Progress (2): 4.9/12 MB | 0.4/1.9 MB
2024-08-30T19:20:28.5502595Z Progress (2): 4.9/12 MB | 0.4/1.9 MB
2024-08-30T19:20:28.5502763Z Progress (2): 4.9/12 MB | 0.4/1.9 MB
2024-08-30T19:20:28.5502919Z Progress (2): 4.9/12 MB | 0.4/1.9 MB
2024-08-30T19:20:28.5503084Z Progress (2): 4.9/12 MB | 0.4/1.9 MB
2024-08-30T19:20:28.5503242Z Progress (2): 4.9/12 MB | 0.4/1.9 MB
2024-08-30T19:20:28.5503399Z Progress (2): 4.9/12 MB | 0.5/1.9 MB
2024-08-30T19:20:28.5503567Z Progress (2): 4.9/12 MB | 0.5/1.9 MB
2024-08-30T19:20:28.5503723Z Progress (2): 4.9/12 MB | 0.5/1.9 MB
2024-08-30T19:20:28.5503877Z Progress (2): 4.9/12 MB | 0.5/1.9 MB
2024-08-30T19:20:28.5504050Z Progress (2): 4.9/12 MB | 0.5/1.9 MB
2024-08-30T19:20:28.5504204Z Progress (2): 4.9/12 MB | 0.5/1.9 MB
2024-08-30T19:20:28.5504373Z Progress (2): 4.9/12 MB | 0.6/1.9 MB
2024-08-30T19:20:28.5504536Z Progress (2): 4.9/12 MB | 0.6/1.9 MB
2024-08-30T19:20:28.5504689Z Progress (2): 4.9/12 MB | 0.6/1.9 MB
2024-08-30T19:20:28.5504876Z Progress (2): 4.9/12 MB | 0.6/1.9 MB
2024-08-30T19:20:28.5505064Z Progress (2): 4.9/12 MB | 0.6/1.9 MB
2024-08-30T19:20:28.5505244Z Progress (2): 4.9/12 MB | 0.6/1.9 MB
2024-08-30T19:20:28.5505430Z Progress (2): 4.9/12 MB | 0.7/1.9 MB
2024-08-30T19:20:28.5505610Z Progress (2): 4.9/12 MB | 0.7/1.9 MB
2024-08-30T19:20:28.5505788Z Progress (2): 4.9/12 MB | 0.7/1.9 MB
2024-08-30T19:20:28.5505974Z Progress (2): 4.9/12 MB | 0.7/1.9 MB
2024-08-30T19:20:28.5506153Z Progress (2): 4.9/12 MB | 0.7/1.9 MB
2024-08-30T19:20:28.5506336Z Progress (2): 4.9/12 MB | 0.7/1.9 MB
2024-08-30T19:20:28.5506514Z Progress (2): 4.9/12 MB | 0.8/1.9 MB
2024-08-30T19:20:28.5506686Z Progress (2): 4.9/12 MB | 0.8/1.9 MB
2024-08-30T19:20:28.5507078Z Progress (2): 4.9/12 MB | 0.8/1.9 MB
2024-08-30T19:20:28.5507266Z Progress (2): 4.9/12 MB | 0.8/1.9 MB
2024-08-30T19:20:28.5507441Z Progress (2): 4.9/12 MB | 0.8/1.9 MB
2024-08-30T19:20:28.5507612Z Progress (2): 4.9/12 MB | 0.8/1.9 MB
2024-08-30T19:20:28.5507800Z Progress (2): 4.9/12 MB | 0.9/1.9 MB
2024-08-30T19:20:28.5507984Z Progress (2): 4.9/12 MB | 0.9/1.9 MB
2024-08-30T19:20:28.5508164Z Progress (2): 4.9/12 MB | 0.9/1.9 MB
2024-08-30T19:20:28.5508351Z Progress (2): 4.9/12 MB | 0.9/1.9 MB
2024-08-30T19:20:28.5508524Z Progress (2): 4.9/12 MB | 0.9/1.9 MB
2024-08-30T19:20:28.5508716Z Progress (2): 4.9/12 MB | 0.9/1.9 MB
2024-08-30T19:20:28.5508893Z Progress (2): 4.9/12 MB | 0.9/1.9 MB
2024-08-30T19:20:28.5509070Z Progress (2): 4.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5509258Z Progress (2): 4.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5509430Z Progress (2): 4.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5509601Z Progress (2): 4.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5509804Z Progress (2): 4.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5509977Z Progress (2): 4.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5510149Z Progress (2): 4.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5510336Z Progress (2): 5.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5510526Z Progress (2): 5.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5510707Z Progress (2): 5.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5510911Z Progress (2): 5.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5511094Z Progress (2): 5.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5511271Z Progress (2): 5.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5511453Z Progress (2): 5.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5511630Z Progress (2): 5.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5511800Z Progress (2): 5.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5511984Z Progress (2): 5.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5512160Z Progress (2): 5.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5512343Z Progress (2): 5.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5512519Z Progress (2): 5.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5512712Z Progress (2): 5.2/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5512898Z Progress (2): 5.2/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5513071Z Progress (2): 5.2/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5513246Z Progress (2): 5.2/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5513438Z Progress (2): 5.2/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5513889Z Progress (2): 5.2/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5514095Z Progress (2): 5.3/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5514281Z Progress (2): 5.3/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5514454Z Progress (2): 5.3/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5514632Z Progress (2): 5.3/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5514815Z Progress (2): 5.3/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5514994Z Progress (2): 5.3/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5515173Z Progress (2): 5.4/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5515360Z Progress (2): 5.4/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5515538Z Progress (2): 5.4/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5515738Z Progress (2): 5.4/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5515927Z Progress (2): 5.4/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5516102Z Progress (2): 5.4/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5516276Z Progress (2): 5.5/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5516456Z Progress (2): 5.5/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5516628Z Progress (2): 5.5/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5516827Z Progress (2): 5.5/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5516999Z Progress (2): 5.5/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5517175Z Progress (2): 5.5/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5517367Z Progress (2): 5.6/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5517543Z Progress (2): 5.6/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5517719Z Progress (2): 5.6/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5517903Z Progress (2): 5.6/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5518082Z Progress (2): 5.6/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5518262Z Progress (2): 5.6/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5518450Z Progress (2): 5.7/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5518867Z Progress (2): 5.7/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5519038Z Progress (2): 5.7/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5519221Z Progress (2): 5.7/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5519392Z Progress (2): 5.7/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5519566Z Progress (2): 5.7/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5519764Z Progress (2): 5.8/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5519954Z Progress (2): 5.8/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5520135Z Progress (2): 5.8/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5520331Z Progress (2): 5.8/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5520513Z Progress (2): 5.8/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5520698Z Progress (2): 5.8/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5520873Z Progress (2): 5.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5521042Z Progress (2): 5.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5521227Z Progress (2): 5.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5521405Z Progress (2): 5.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5521592Z Progress (2): 5.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5521772Z Progress (2): 5.9/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5521950Z Progress (2): 6.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5522138Z Progress (2): 6.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5522339Z Progress (2): 6.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5522513Z Progress (2): 6.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5522702Z Progress (2): 6.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5522892Z Progress (2): 6.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5523073Z Progress (2): 6.0/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5523254Z Progress (2): 6.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5523438Z Progress (2): 6.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5523611Z Progress (2): 6.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5523783Z Progress (2): 6.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5523967Z Progress (2): 6.1/12 MB | 1.0/1.9 MB
2024-08-30T19:20:28.5524143Z Progress (2): 6.1/12 MB | 1.1/1.9 MB
2024-08-30T19:20:28.5524319Z Progress (2): 6.1/12 MB | 1.1/1.9 MB
2024-08-30T19:20:28.5524522Z Progress (2): 6.1/12 MB | 1.1/1.9 MB
2024-08-30T19:20:28.5524701Z Progress (2): 6.1/12 MB | 1.1/1.9 MB
2024-08-30T19:20:28.5524886Z Progress (2): 6.1/12 MB | 1.1/1.9 MB
2024-08-30T19:20:28.5525066Z Progress (2): 6.1/12 MB | 1.1/1.9 MB
2024-08-30T19:20:28.5525248Z Progress (2): 6.1/12 MB | 1.2/1.9 MB
2024-08-30T19:20:28.5525645Z Progress (2): 6.1/12 MB | 1.2/1.9 MB
2024-08-30T19:20:28.5525824Z Progress (2): 6.1/12 MB | 1.2/1.9 MB
2024-08-30T19:20:28.5525996Z Progress (2): 6.1/12 MB | 1.2/1.9 MB
2024-08-30T19:20:28.5526182Z Progress (2): 6.1/12 MB | 1.2/1.9 MB
2024-08-30T19:20:28.5526359Z Progress (2): 6.1/12 MB | 1.2/1.9 MB
2024-08-30T19:20:28.5526536Z Progress (2): 6.1/12 MB | 1.3/1.9 MB
2024-08-30T19:20:28.5526728Z Progress (2): 6.1/12 MB | 1.3/1.9 MB
2024-08-30T19:20:28.5526911Z Progress (2): 6.1/12 MB | 1.3/1.9 MB
2024-08-30T19:20:28.5527092Z Progress (2): 6.1/12 MB | 1.3/1.9 MB
2024-08-30T19:20:28.5527277Z Progress (2): 6.1/12 MB | 1.3/1.9 MB
2024-08-30T19:20:28.5527468Z Progress (2): 6.1/12 MB | 1.3/1.9 MB
2024-08-30T19:20:28.5527648Z Progress (2): 6.1/12 MB | 1.4/1.9 MB
2024-08-30T19:20:28.5527840Z Progress (2): 6.1/12 MB | 1.4/1.9 MB
2024-08-30T19:20:28.5528017Z Progress (2): 6.1/12 MB | 1.4/1.9 MB
2024-08-30T19:20:28.5528190Z Progress (2): 6.1/12 MB | 1.4/1.9 MB
2024-08-30T19:20:28.5528376Z Progress (2): 6.1/12 MB | 1.4/1.9 MB
2024-08-30T19:20:28.5528563Z Progress (2): 6.1/12 MB | 1.4/1.9 MB
2024-08-30T19:20:28.5528750Z Progress (2): 6.1/12 MB | 1.4/1.9 MB
2024-08-30T19:20:28.5528927Z Progress (2): 6.1/12 MB | 1.5/1.9 MB
2024-08-30T19:20:28.5529104Z Progress (2): 6.1/12 MB | 1.5/1.9 MB
2024-08-30T19:20:28.5529295Z Progress (2): 6.1/12 MB | 1.5/1.9 MB
2024-08-30T19:20:28.5529474Z Progress (2): 6.1/12 MB | 1.5/1.9 MB
2024-08-30T19:20:28.5529649Z Progress (2): 6.1/12 MB | 1.5/1.9 MB
2024-08-30T19:20:28.5529845Z Progress (2): 6.1/12 MB | 1.5/1.9 MB
2024-08-30T19:20:28.5530025Z Progress (2): 6.1/12 MB | 1.6/1.9 MB
2024-08-30T19:20:28.5530197Z Progress (2): 6.1/12 MB | 1.6/1.9 MB
2024-08-30T19:20:28.5530598Z Progress (2): 6.1/12 MB | 1.6/1.9 MB
2024-08-30T19:20:28.5530776Z Progress (2): 6.1/12 MB | 1.6/1.9 MB
2024-08-30T19:20:28.5530950Z Progress (2): 6.1/12 MB | 1.6/1.9 MB
2024-08-30T19:20:28.5531400Z Progress (2): 6.1/12 MB | 1.6/1.9 MB
2024-08-30T19:20:28.5531592Z Progress (2): 6.1/12 MB | 1.7/1.9 MB
2024-08-30T19:20:28.5531791Z Progress (2): 6.1/12 MB | 1.7/1.9 MB
2024-08-30T19:20:28.5531987Z Progress (2): 6.1/12 MB | 1.7/1.9 MB
2024-08-30T19:20:28.5532165Z Progress (2): 6.1/12 MB | 1.7/1.9 MB
2024-08-30T19:20:28.5532343Z Progress (2): 6.1/12 MB | 1.7/1.9 MB
2024-08-30T19:20:28.5532532Z Progress (2): 6.1/12 MB | 1.7/1.9 MB
2024-08-30T19:20:28.5532715Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5532897Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5533091Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5533273Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5533458Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5533637Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5533832Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5534005Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5534180Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5534371Z Progress (2): 6.1/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5534547Z Progress (2): 6.2/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5534734Z Progress (2): 6.2/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5534926Z Progress (2): 6.2/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5535103Z Progress (2): 6.2/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5535275Z Progress (2): 6.2/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5535455Z Progress (2): 6.2/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5535631Z Progress (2): 6.3/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5535804Z Progress (2): 6.3/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5535988Z Progress (2): 6.3/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5536160Z Progress (2): 6.3/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5536340Z Progress (2): 6.3/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5536543Z Progress (2): 6.3/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5536719Z Progress (2): 6.4/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5536894Z Progress (2): 6.4/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5537081Z Progress (2): 6.4/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5537262Z Progress (2): 6.4/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5537452Z Progress (2): 6.4/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5537929Z Progress (2): 6.4/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5538145Z Progress (2): 6.5/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5538337Z Progress (2): 6.5/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5538513Z Progress (2): 6.5/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5538691Z Progress (2): 6.5/12 MB | 1.8/1.9 MB
2024-08-30T19:20:28.5538884Z Progress (2): 6.5/12 MB | 1.9/1.9 MB
2024-08-30T19:20:28.5539068Z Progress (2): 6.5/12 MB | 1.9/1.9 MB
2024-08-30T19:20:28.5539255Z Progress (2): 6.5/12 MB | 1.9/1.9 MB
2024-08-30T19:20:28.5539453Z Progress (2): 6.5/12 MB | 1.9 MB    
2024-08-30T19:20:28.5539619Z                                 
2024-08-30T19:20:28.5541413Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-config/6.3.1/spring-security-config-6.3.1.jar (1.9 MB at 2.1 MB/s)
2024-08-30T19:20:28.5541625Z #24 7.825 Progress (1): 6.5/12 MB
2024-08-30T19:20:28.5541802Z Progress (1): 6.5/12 MB
2024-08-30T19:20:28.5541986Z Progress (1): 6.6/12 MB
2024-08-30T19:20:28.5542168Z Progress (1): 6.6/12 MB
2024-08-30T19:20:28.5542333Z Progress (1): 6.6/12 MB
2024-08-30T19:20:28.5542495Z Progress (1): 6.6/12 MB
2024-08-30T19:20:28.5542663Z Progress (1): 6.6/12 MB
2024-08-30T19:20:28.5542821Z Progress (1): 6.6/12 MB
2024-08-30T19:20:28.5542986Z Progress (1): 6.7/12 MB
2024-08-30T19:20:28.5543148Z Progress (1): 6.7/12 MB
2024-08-30T19:20:28.5543308Z Progress (1): 6.7/12 MB
2024-08-30T19:20:28.5543479Z Progress (1): 6.7/12 MB
2024-08-30T19:20:28.5543643Z Progress (1): 6.7/12 MB
2024-08-30T19:20:28.5543813Z Progress (1): 6.7/12 MB
2024-08-30T19:20:28.5543987Z Progress (1): 6.8/12 MB
2024-08-30T19:20:28.5544458Z Progress (1): 6.8/12 MB
2024-08-30T19:20:28.5544628Z Progress (1): 6.8/12 MB
2024-08-30T19:20:28.5544795Z Progress (1): 6.8/12 MB
2024-08-30T19:20:28.5544951Z Progress (1): 6.8/12 MB
2024-08-30T19:20:28.5545107Z Progress (1): 6.8/12 MB
2024-08-30T19:20:28.5545272Z Progress (1): 6.9/12 MB
2024-08-30T19:20:28.5545433Z Progress (1): 6.9/12 MB
2024-08-30T19:20:28.5545601Z Progress (1): 6.9/12 MB
2024-08-30T19:20:28.5545770Z Progress (1): 6.9/12 MB
2024-08-30T19:20:28.5545965Z Progress (1): 6.9/12 MB
2024-08-30T19:20:28.5546206Z Progress (1): 6.9/12 MB
2024-08-30T19:20:28.5546382Z Progress (1): 6.9/12 MB
2024-08-30T19:20:28.5546547Z Progress (1): 7.0/12 MB
2024-08-30T19:20:28.5546711Z Progress (1): 7.0/12 MB
2024-08-30T19:20:28.5546884Z Progress (1): 7.0/12 MB
2024-08-30T19:20:28.5547049Z Progress (1): 7.0/12 MB
2024-08-30T19:20:28.5547211Z Progress (1): 7.0/12 MB
2024-08-30T19:20:28.5547385Z Progress (1): 7.0/12 MB
2024-08-30T19:20:28.5547546Z Progress (1): 7.1/12 MB
2024-08-30T19:20:28.5547722Z Progress (1): 7.1/12 MB
2024-08-30T19:20:28.5547893Z Progress (1): 7.1/12 MB
2024-08-30T19:20:28.5548052Z Progress (1): 7.1/12 MB
2024-08-30T19:20:28.5548211Z Progress (1): 7.1/12 MB
2024-08-30T19:20:28.5548381Z Progress (1): 7.1/12 MB
2024-08-30T19:20:28.5548545Z Progress (1): 7.2/12 MB
2024-08-30T19:20:28.5548716Z Progress (1): 7.2/12 MB
2024-08-30T19:20:28.5548897Z Progress (1): 7.2/12 MB
2024-08-30T19:20:28.5549067Z Progress (1): 7.2/12 MB
2024-08-30T19:20:28.5549234Z Progress (1): 7.2/12 MB
2024-08-30T19:20:28.5549404Z Progress (1): 7.2/12 MB
2024-08-30T19:20:28.5549566Z Progress (1): 7.3/12 MB
2024-08-30T19:20:28.5549729Z Progress (1): 7.3/12 MB
2024-08-30T19:20:28.5549885Z Progress (1): 7.3/12 MB
2024-08-30T19:20:28.5550039Z Progress (1): 7.3/12 MB
2024-08-30T19:20:28.5550205Z Progress (1): 7.3/12 MB
2024-08-30T19:20:28.5550364Z Progress (1): 7.3/12 MB
2024-08-30T19:20:28.5550522Z Progress (1): 7.4/12 MB
2024-08-30T19:20:28.5550696Z Progress (1): 7.4/12 MB
2024-08-30T19:20:28.5550878Z Progress (1): 7.4/12 MB
2024-08-30T19:20:28.5551040Z Progress (1): 7.4/12 MB
2024-08-30T19:20:28.5551217Z Progress (1): 7.4/12 MB
2024-08-30T19:20:28.5551392Z Progress (1): 7.4/12 MB
2024-08-30T19:20:28.5551557Z Progress (1): 7.5/12 MB
2024-08-30T19:20:28.5551735Z Progress (1): 7.5/12 MB
2024-08-30T19:20:28.5551901Z Progress (1): 7.5/12 MB
2024-08-30T19:20:28.5552266Z Progress (1): 7.5/12 MB
2024-08-30T19:20:28.5552449Z Progress (1): 7.5/12 MB
2024-08-30T19:20:28.5552611Z Progress (1): 7.5/12 MB
2024-08-30T19:20:28.5552767Z Progress (1): 7.6/12 MB
2024-08-30T19:20:28.5552933Z Progress (1): 7.6/12 MB
2024-08-30T19:20:28.5553098Z Progress (1): 7.6/12 MB
2024-08-30T19:20:28.5553266Z Progress (1): 7.6/12 MB
2024-08-30T19:20:28.5553442Z Progress (1): 7.6/12 MB
2024-08-30T19:20:28.5553606Z Progress (1): 7.6/12 MB
2024-08-30T19:20:28.5553778Z Progress (1): 7.7/12 MB
2024-08-30T19:20:28.5553953Z Progress (1): 7.7/12 MB
2024-08-30T19:20:28.5554120Z Progress (1): 7.7/12 MB
2024-08-30T19:20:28.5554282Z Progress (1): 7.7/12 MB
2024-08-30T19:20:28.5554461Z Progress (1): 7.7/12 MB
2024-08-30T19:20:28.5554618Z Progress (1): 7.7/12 MB
2024-08-30T19:20:28.5554782Z Progress (1): 7.8/12 MB
2024-08-30T19:20:28.5554950Z Progress (1): 7.8/12 MB
2024-08-30T19:20:28.5555108Z Progress (1): 7.8/12 MB
2024-08-30T19:20:28.5555274Z Progress (1): 7.8/12 MB
2024-08-30T19:20:28.5555452Z Progress (1): 7.8/12 MB
2024-08-30T19:20:28.5555628Z Progress (1): 7.8/12 MB
2024-08-30T19:20:28.5555803Z Progress (1): 7.9/12 MB
2024-08-30T19:20:28.5555966Z Progress (1): 7.9/12 MB
2024-08-30T19:20:28.5556131Z Progress (1): 7.9/12 MB
2024-08-30T19:20:28.5556303Z Progress (1): 7.9/12 MB
2024-08-30T19:20:28.5556473Z Progress (1): 7.9/12 MB
2024-08-30T19:20:28.5556637Z Progress (1): 7.9/12 MB
2024-08-30T19:20:28.5556811Z Progress (1): 7.9/12 MB
2024-08-30T19:20:28.5556971Z Progress (1): 8.0/12 MB
2024-08-30T19:20:28.5557127Z Progress (1): 8.0/12 MB
2024-08-30T19:20:28.5557296Z Progress (1): 8.0/12 MB
2024-08-30T19:20:28.5557458Z Progress (1): 8.0/12 MB
2024-08-30T19:20:28.5557851Z Progress (1): 8.0/12 MB
2024-08-30T19:20:28.5558034Z Progress (1): 8.0/12 MB
2024-08-30T19:20:28.5558202Z Progress (1): 8.1/12 MB
2024-08-30T19:20:28.5558370Z Progress (1): 8.1/12 MB
2024-08-30T19:20:28.5558549Z Progress (1): 8.1/12 MB
2024-08-30T19:20:28.5558715Z Progress (1): 8.1/12 MB
2024-08-30T19:20:28.5558878Z Progress (1): 8.1/12 MB
2024-08-30T19:20:28.5559053Z Progress (1): 8.1/12 MB
2024-08-30T19:20:28.5559214Z Progress (1): 8.2/12 MB
2024-08-30T19:20:28.5559379Z Progress (1): 8.2/12 MB
2024-08-30T19:20:28.5559548Z Progress (1): 8.2/12 MB
2024-08-30T19:20:28.5559709Z Progress (1): 8.2/12 MB
2024-08-30T19:20:28.5559873Z Progress (1): 8.2/12 MB
2024-08-30T19:20:28.5560051Z Progress (1): 8.2/12 MB
2024-08-30T19:20:28.5560217Z Progress (1): 8.3/12 MB
2024-08-30T19:20:28.5560382Z Progress (1): 8.3/12 MB
2024-08-30T19:20:28.5560551Z Progress (1): 8.3/12 MB
2024-08-30T19:20:28.5560715Z Progress (1): 8.3/12 MB
2024-08-30T19:20:28.5560878Z Progress (1): 8.3/12 MB
2024-08-30T19:20:28.5561069Z Progress (1): 8.3/12 MB
2024-08-30T19:20:28.5561238Z Progress (1): 8.4/12 MB
2024-08-30T19:20:28.5561398Z Progress (1): 8.4/12 MB
2024-08-30T19:20:28.5561568Z Progress (1): 8.4/12 MB
2024-08-30T19:20:28.5561725Z Progress (1): 8.4/12 MB
2024-08-30T19:20:28.5561890Z Progress (1): 8.4/12 MB
2024-08-30T19:20:28.5562051Z Progress (1): 8.4/12 MB
2024-08-30T19:20:28.5562222Z Progress (1): 8.5/12 MB
2024-08-30T19:20:28.5562389Z Progress (1): 8.5/12 MB
2024-08-30T19:20:28.5562562Z Progress (1): 8.5/12 MB
2024-08-30T19:20:28.5562736Z Progress (1): 8.5/12 MB
2024-08-30T19:20:28.5562911Z Progress (1): 8.5/12 MB
2024-08-30T19:20:28.5563074Z Progress (1): 8.5/12 MB
2024-08-30T19:20:28.5563240Z Progress (1): 8.6/12 MB
2024-08-30T19:20:28.5563410Z Progress (1): 8.6/12 MB
2024-08-30T19:20:28.5563571Z Progress (1): 8.6/12 MB
2024-08-30T19:20:28.5563726Z Progress (1): 8.6/12 MB
2024-08-30T19:20:28.5563892Z Progress (1): 8.6/12 MB
2024-08-30T19:20:28.5564048Z Progress (1): 8.6/12 MB
2024-08-30T19:20:28.5564207Z Progress (1): 8.7/12 MB
2024-08-30T19:20:28.5564388Z Progress (1): 8.7/12 MB
2024-08-30T19:20:28.5564548Z Progress (1): 8.7/12 MB
2024-08-30T19:20:28.5564719Z Progress (1): 8.7/12 MB
2024-08-30T19:20:28.5564896Z Progress (1): 8.7/12 MB
2024-08-30T19:20:28.5565063Z Progress (1): 8.7/12 MB
2024-08-30T19:20:28.5565226Z Progress (1): 8.7/12 MB
2024-08-30T19:20:28.5565398Z Progress (1): 8.8/12 MB
2024-08-30T19:20:28.5565776Z Progress (1): 8.8/12 MB
2024-08-30T19:20:28.5565962Z Progress (1): 8.8/12 MB
2024-08-30T19:20:28.6347026Z Progress (1): 8.8/12 MB
2024-08-30T19:20:28.6347668Z Progress (1): 8.8/12 MB
2024-08-30T19:20:28.6348095Z Progress (1): 8.8/12 MB
2024-08-30T19:20:28.6348532Z Progress (1): 8.9/12 MB
2024-08-30T19:20:28.6348943Z Progress (1): 8.9/12 MB
2024-08-30T19:20:28.6349348Z Progress (1): 8.9/12 MB
2024-08-30T19:20:28.6349764Z Progress (1): 8.9/12 MB
2024-08-30T19:20:28.6350177Z Progress (1): 8.9/12 MB
2024-08-30T19:20:28.6350609Z Progress (1): 8.9/12 MB
2024-08-30T19:20:28.6351081Z Progress (1): 9.0/12 MB
2024-08-30T19:20:28.6351551Z Progress (1): 9.0/12 MB
2024-08-30T19:20:28.6351980Z Progress (1): 9.0/12 MB
2024-08-30T19:20:28.6352399Z Progress (1): 9.0/12 MB
2024-08-30T19:20:28.6352818Z Progress (1): 9.0/12 MB
2024-08-30T19:20:28.6353237Z Progress (1): 9.0/12 MB
2024-08-30T19:20:28.6353678Z Progress (1): 9.1/12 MB
2024-08-30T19:20:28.6354103Z Progress (1): 9.1/12 MB
2024-08-30T19:20:28.6354557Z Progress (1): 9.1/12 MB
2024-08-30T19:20:28.6355007Z Progress (1): 9.1/12 MB
2024-08-30T19:20:28.6355459Z Progress (1): 9.1/12 MB
2024-08-30T19:20:28.6355886Z Progress (1): 9.1/12 MB
2024-08-30T19:20:28.6356334Z Progress (1): 9.1/12 MB
2024-08-30T19:20:28.6356807Z Progress (1): 9.2/12 MB
2024-08-30T19:20:28.6357275Z Progress (1): 9.2/12 MB
2024-08-30T19:20:28.6357732Z Progress (1): 9.2/12 MB
2024-08-30T19:20:28.6358199Z Progress (1): 9.2/12 MB
2024-08-30T19:20:28.6358639Z Progress (1): 9.2/12 MB
2024-08-30T19:20:28.6359069Z Progress (1): 9.2/12 MB
2024-08-30T19:20:28.6359497Z Progress (1): 9.3/12 MB
2024-08-30T19:20:28.6360526Z Progress (1): 9.3/12 MB
2024-08-30T19:20:28.6360970Z Progress (1): 9.3/12 MB
2024-08-30T19:20:28.6361426Z Progress (1): 9.3/12 MB
2024-08-30T19:20:28.6361888Z Progress (1): 9.3/12 MB
2024-08-30T19:20:28.6362302Z Progress (1): 9.3/12 MB
2024-08-30T19:20:28.6362709Z Progress (1): 9.4/12 MB
2024-08-30T19:20:28.6363125Z Progress (1): 9.4/12 MB
2024-08-30T19:20:28.6363547Z Progress (1): 9.4/12 MB
2024-08-30T19:20:28.6363970Z Progress (1): 9.4/12 MB
2024-08-30T19:20:28.6364396Z Progress (1): 9.4/12 MB
2024-08-30T19:20:28.6364799Z Progress (1): 9.4/12 MB
2024-08-30T19:20:28.6365176Z Progress (1): 9.5/12 MB
2024-08-30T19:20:28.6365560Z Progress (1): 9.5/12 MB
2024-08-30T19:20:28.6365929Z Progress (1): 9.5/12 MB
2024-08-30T19:20:28.6366298Z Progress (1): 9.5/12 MB
2024-08-30T19:20:28.6366705Z Progress (1): 9.5/12 MB
2024-08-30T19:20:28.6367124Z Progress (1): 9.5/12 MB
2024-08-30T19:20:28.6367544Z Progress (1): 9.6/12 MB
2024-08-30T19:20:28.6367959Z Progress (1): 9.6/12 MB
2024-08-30T19:20:28.6368382Z Progress (1): 9.6/12 MB
2024-08-30T19:20:28.6368802Z Progress (1): 9.6/12 MB
2024-08-30T19:20:28.6369220Z Progress (1): 9.6/12 MB
2024-08-30T19:20:28.6369624Z Progress (1): 9.6/12 MB
2024-08-30T19:20:28.6370035Z Progress (1): 9.7/12 MB
2024-08-30T19:20:28.6370430Z Progress (1): 9.7/12 MB
2024-08-30T19:20:28.6370848Z Progress (1): 9.7/12 MB
2024-08-30T19:20:28.6371642Z Progress (1): 9.7/12 MB
2024-08-30T19:20:28.6372055Z Progress (1): 9.7/12 MB
2024-08-30T19:20:28.6372458Z Progress (1): 9.7/12 MB
2024-08-30T19:20:28.6372857Z Progress (1): 9.8/12 MB
2024-08-30T19:20:28.6373271Z Progress (1): 9.8/12 MB
2024-08-30T19:20:28.6373683Z Progress (1): 9.8/12 MB
2024-08-30T19:20:28.6374068Z Progress (1): 9.8/12 MB
2024-08-30T19:20:28.6374473Z Progress (1): 9.8/12 MB
2024-08-30T19:20:28.6374856Z Progress (1): 9.8/12 MB
2024-08-30T19:20:28.6375253Z Progress (1): 9.9/12 MB
2024-08-30T19:20:28.6375660Z Progress (1): 9.9/12 MB
2024-08-30T19:20:28.6376097Z Progress (1): 9.9/12 MB
2024-08-30T19:20:28.6376513Z Progress (1): 9.9/12 MB
2024-08-30T19:20:28.6376938Z Progress (1): 9.9/12 MB
2024-08-30T19:20:28.6377325Z Progress (1): 9.9/12 MB
2024-08-30T19:20:28.6377766Z Progress (1): 10.0/12 MB
2024-08-30T19:20:28.6378233Z Progress (1): 10.0/12 MB
2024-08-30T19:20:28.6378665Z Progress (1): 10.0/12 MB
2024-08-30T19:20:28.6379089Z Progress (1): 10/12 MB  
2024-08-30T19:20:28.6379517Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6380333Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6380823Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6381297Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6381714Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6382125Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6382544Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6382945Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6383348Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6383769Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6384167Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6384588Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6385008Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6385423Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6385834Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6386263Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6386676Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6387107Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6387536Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6387927Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6388328Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6388736Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6389163Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6389582Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6389988Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6390408Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6390844Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6391243Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6391641Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6392081Z Progress (1): 10/12 MB
2024-08-30T19:20:28.6392496Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6392929Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6393348Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6394115Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6394538Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6394977Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6395395Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6395817Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6396246Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6396643Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6397056Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6397473Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6397876Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6398291Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6398708Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6399109Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6399515Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6399950Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6400369Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6400795Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6401222Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6401623Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6402025Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6402446Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6402856Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6403258Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6403650Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6404037Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6404436Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6404845Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6405240Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6405640Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6406041Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6406437Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6406860Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6407286Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6407710Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6408117Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6408752Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6409638Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6411433Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6411865Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6412272Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6412665Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6413059Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6413493Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6413909Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6414307Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6414698Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6415136Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6415854Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6416310Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6416736Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6417132Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6417533Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6417937Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6418327Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6418719Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6419113Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6419491Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6419877Z Progress (1): 11/12 MB
2024-08-30T19:20:28.6420265Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6420637Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6421016Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6421410Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6421653Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6421897Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6422138Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6422367Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6422618Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6422861Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6423092Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6423331Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6423568Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6423800Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6424039Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6424275Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6424509Z Progress (1): 12/12 MB
2024-08-30T19:20:28.6424757Z Progress (1): 12 MB   
2024-08-30T19:20:28.6425003Z                    
2024-08-30T19:20:28.6426190Z Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.jar (12 MB at 12 MB/s)
2024-08-30T19:20:28.6427325Z #24 7.962 [INFO] 
2024-08-30T19:20:28.7359494Z #24 7.962 [INFO] --- clean:3.3.2:clean (default-clean) @ backend ---
2024-08-30T19:20:28.7361276Z #24 7.969 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.pom
2024-08-30T19:20:28.7362406Z #24 7.973 Progress (1): 8.7 kB
2024-08-30T19:20:28.7362710Z                     
2024-08-30T19:20:28.7363628Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.pom (8.7 kB at 1.7 MB/s)
2024-08-30T19:20:28.7364911Z #24 7.975 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/13/plexus-13.pom
2024-08-30T19:20:28.7365589Z #24 7.979 Progress (1): 16/27 kB
2024-08-30T19:20:28.7365900Z Progress (1): 27 kB   
2024-08-30T19:20:28.7366154Z                    
2024-08-30T19:20:28.7366911Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/13/plexus-13.pom (27 kB at 4.6 MB/s)
2024-08-30T19:20:28.7368187Z #24 7.985 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.jar
2024-08-30T19:20:28.7368963Z #24 7.989 Progress (1): 16/192 kB
2024-08-30T19:20:28.7369267Z Progress (1): 33/192 kB
2024-08-30T19:20:28.7369535Z Progress (1): 49/192 kB
2024-08-30T19:20:28.7369792Z Progress (1): 62/192 kB
2024-08-30T19:20:28.7370048Z Progress (1): 78/192 kB
2024-08-30T19:20:28.7370304Z Progress (1): 94/192 kB
2024-08-30T19:20:28.7370556Z Progress (1): 111/192 kB
2024-08-30T19:20:28.7370816Z Progress (1): 127/192 kB
2024-08-30T19:20:28.7371353Z Progress (1): 143/192 kB
2024-08-30T19:20:28.7371619Z Progress (1): 160/192 kB
2024-08-30T19:20:28.7371867Z Progress (1): 176/192 kB
2024-08-30T19:20:28.7372129Z Progress (1): 192 kB    
2024-08-30T19:20:28.7372381Z                     
2024-08-30T19:20:28.7373259Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.jar (192 kB at 32 MB/s)
2024-08-30T19:20:28.7374091Z #24 8.032 [INFO] 
2024-08-30T19:20:28.7374577Z #24 8.032 [INFO] --- resources:3.3.1:resources (default-resources) @ backend ---
2024-08-30T19:20:28.7376017Z #24 8.036 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.pom
2024-08-30T19:20:28.7376863Z #24 8.039 Progress (1): 2.7 kB
2024-08-30T19:20:28.7377145Z                     
2024-08-30T19:20:28.7378076Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.pom (2.7 kB at 531 kB/s)
2024-08-30T19:20:28.7379389Z #24 8.042 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom
2024-08-30T19:20:28.7380067Z #24 8.045 Progress (1): 16/23 kB
2024-08-30T19:20:28.7380360Z Progress (1): 23 kB   
2024-08-30T19:20:28.7380624Z                    
2024-08-30T19:20:28.7381384Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom (23 kB at 4.5 MB/s)
2024-08-30T19:20:28.7382626Z #24 8.049 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.pom
2024-08-30T19:20:28.7383366Z #24 8.053 Progress (1): 8.8 kB
2024-08-30T19:20:28.7383641Z                     
2024-08-30T19:20:28.7384478Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.pom (8.8 kB at 1.8 MB/s)
2024-08-30T19:20:28.7385773Z #24 8.055 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/10/plexus-10.pom
2024-08-30T19:20:28.7386883Z #24 8.059 Progress (1): 16/25 kB
2024-08-30T19:20:28.7387361Z Progress (1): 25 kB   
2024-08-30T19:20:28.7387749Z                    
2024-08-30T19:20:28.7389089Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/10/plexus-10.pom (25 kB at 5.1 MB/s)
2024-08-30T19:20:28.7394081Z #24 8.063 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.pom
2024-08-30T19:20:28.8383538Z #24 8.067 Progress (1): 6.0 kB
2024-08-30T19:20:28.8384270Z                     
2024-08-30T19:20:28.8386946Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.pom (6.0 kB at 1.5 MB/s)
2024-08-30T19:20:28.8390606Z #24 8.069 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/39/maven-shared-components-39.pom
2024-08-30T19:20:28.8393882Z #24 8.073 Progress (1): 3.2 kB
2024-08-30T19:20:28.8394402Z                     
2024-08-30T19:20:28.8396249Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/39/maven-shared-components-39.pom (3.2 kB at 805 kB/s)
2024-08-30T19:20:28.8400197Z #24 8.076 Downloading from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.pom
2024-08-30T19:20:28.8401471Z #24 8.080 Progress (1): 612 B
2024-08-30T19:20:28.8401928Z                    
2024-08-30T19:20:28.8403367Z Downloaded from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.pom (612 B at 153 kB/s)
2024-08-30T19:20:28.8405520Z #24 8.083 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.pom
2024-08-30T19:20:28.8406752Z #24 8.086 Progress (1): 2.7 kB
2024-08-30T19:20:28.8407227Z                     
2024-08-30T19:20:28.8408634Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.pom (2.7 kB at 686 kB/s)
2024-08-30T19:20:28.8410805Z #24 8.088 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.36/slf4j-parent-1.7.36.pom
2024-08-30T19:20:28.8412204Z #24 8.091 Progress (1): 14 kB
2024-08-30T19:20:28.8412699Z                    
2024-08-30T19:20:28.8414134Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.36/slf4j-parent-1.7.36.pom (14 kB at 3.5 MB/s)
2024-08-30T19:20:28.8416991Z #24 8.094 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.pom
2024-08-30T19:20:28.8418468Z #24 8.098 Progress (1): 3.2 kB
2024-08-30T19:20:28.8418980Z                     
2024-08-30T19:20:28.8420641Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.pom (3.2 kB at 801 kB/s)
2024-08-30T19:20:28.8423134Z #24 8.100 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/15/spice-parent-15.pom
2024-08-30T19:20:28.8424461Z #24 8.103 Progress (1): 8.4 kB
2024-08-30T19:20:28.8424925Z                     
2024-08-30T19:20:28.8426491Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/15/spice-parent-15.pom (8.4 kB at 2.8 MB/s)
2024-08-30T19:20:28.8428847Z #24 8.105 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom
2024-08-30T19:20:28.8430139Z #24 8.109 Progress (1): 8.4 kB
2024-08-30T19:20:28.8430632Z                     
2024-08-30T19:20:28.8432094Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (8.4 kB at 1.7 MB/s)
2024-08-30T19:20:28.8434510Z #24 8.112 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.pom
2024-08-30T19:20:28.8435831Z #24 8.116 Progress (1): 8.0 kB
2024-08-30T19:20:28.8436330Z                     
2024-08-30T19:20:28.8437884Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.pom (8.0 kB at 2.0 MB/s)
2024-08-30T19:20:28.8440503Z #24 8.119 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.pom
2024-08-30T19:20:28.8441714Z #24 8.123 Progress (1): 16/20 kB
2024-08-30T19:20:28.8442225Z Progress (1): 20 kB   
2024-08-30T19:20:28.8442648Z                    
2024-08-30T19:20:28.8444075Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.pom (20 kB at 4.9 MB/s)
2024-08-30T19:20:28.8446265Z #24 8.128 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.2/junit-bom-5.7.2.pom
2024-08-30T19:20:28.8447514Z #24 8.132 Progress (1): 5.1 kB
2024-08-30T19:20:28.8447986Z                     
2024-08-30T19:20:28.8449331Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.2/junit-bom-5.7.2.pom (5.1 kB at 1.3 MB/s)
2024-08-30T19:20:28.8451755Z #24 8.135 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.pom
2024-08-30T19:20:28.8453154Z #24 8.139 Progress (1): 16/31 kB
2024-08-30T19:20:28.8453666Z Progress (1): 31 kB   
2024-08-30T19:20:28.8454185Z                    
2024-08-30T19:20:28.8455799Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.pom (31 kB at 6.1 MB/s)
2024-08-30T19:20:28.8458119Z #24 8.144 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.1/junit-bom-5.7.1.pom
2024-08-30T19:20:28.8459312Z #24 8.147 Progress (1): 5.1 kB
2024-08-30T19:20:28.8459718Z                     
2024-08-30T19:20:28.8460771Z Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.1/junit-bom-5.7.1.pom (5.1 kB at 1.3 MB/s)
2024-08-30T19:20:28.8462384Z #24 8.151 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar
2024-08-30T19:20:28.8463506Z #24 8.155 Progress (1): 16/85 kB
2024-08-30T19:20:28.8463882Z Progress (1): 32/85 kB
2024-08-30T19:20:28.8464194Z Progress (1): 49/85 kB
2024-08-30T19:20:28.8464588Z Progress (1): 65/85 kB
2024-08-30T19:20:28.8464837Z Progress (1): 81/85 kB
2024-08-30T19:20:28.8465198Z Progress (1): 85 kB   
2024-08-30T19:20:28.8465507Z                    
2024-08-30T19:20:28.8466904Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar (85 kB at 14 MB/s)
2024-08-30T19:20:28.8468720Z #24 8.158 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.jar
2024-08-30T19:20:28.8470543Z #24 8.159 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.jar
2024-08-30T19:20:28.8472133Z #24 8.160 Downloading from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.jar
2024-08-30T19:20:28.8473510Z #24 8.161 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2024-08-30T19:20:28.9384292Z #24 8.165 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar
2024-08-30T19:20:28.9385833Z #24 8.166 Progress (1): 16/269 kB
2024-08-30T19:20:28.9386437Z Progress (1): 32/269 kB
2024-08-30T19:20:28.9386885Z Progress (1): 49/269 kB
2024-08-30T19:20:28.9387336Z Progress (2): 49/269 kB | 2.5 kB
2024-08-30T19:20:28.9387834Z Progress (2): 65/269 kB | 2.5 kB
2024-08-30T19:20:28.9388331Z Progress (2): 80/269 kB | 2.5 kB
2024-08-30T19:20:28.9388829Z Progress (2): 96/269 kB | 2.5 kB
2024-08-30T19:20:28.9389319Z Progress (2): 113/269 kB | 2.5 kB
2024-08-30T19:20:28.9389809Z                                  
2024-08-30T19:20:28.9391235Z Downloaded from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.jar (2.5 kB at 277 kB/s)
2024-08-30T19:20:28.9392508Z #24 8.169 Progress (1): 129/269 kB
2024-08-30T19:20:28.9393504Z                         
2024-08-30T19:20:28.9394792Z Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar
2024-08-30T19:20:28.9396009Z #24 8.170 Progress (1): 145/269 kB
2024-08-30T19:20:28.9396568Z Progress (1): 162/269 kB
2024-08-30T19:20:28.9397029Z Progress (1): 178/269 kB
2024-08-30T19:20:28.9397464Z Progress (1): 194/269 kB
2024-08-30T19:20:28.9397912Z Progress (1): 211/269 kB
2024-08-30T19:20:28.9398376Z Progress (2): 211/269 kB | 16/55 kB
2024-08-30T19:20:28.9398886Z Progress (2): 227/269 kB | 16/55 kB
2024-08-30T19:20:28.9399404Z Progress (2): 227/269 kB | 32/55 kB
2024-08-30T19:20:28.9399914Z Progress (2): 244/269 kB | 32/55 kB
2024-08-30T19:20:28.9400415Z Progress (2): 244/269 kB | 49/55 kB
2024-08-30T19:20:28.9400913Z Progress (2): 244/269 kB | 55 kB   
2024-08-30T19:20:28.9401406Z                                 
2024-08-30T19:20:28.9403070Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.jar (55 kB at 3.7 MB/s)
2024-08-30T19:20:28.9405488Z #24 8.173 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar
2024-08-30T19:20:28.9406861Z #24 8.173 Progress (2): 244/269 kB | 16/327 kB
2024-08-30T19:20:28.9407437Z Progress (2): 244/269 kB | 32/327 kB
2024-08-30T19:20:28.9407946Z Progress (2): 244/269 kB | 49/327 kB
2024-08-30T19:20:28.9408450Z Progress (2): 244/269 kB | 65/327 kB
2024-08-30T19:20:28.9408947Z Progress (2): 244/269 kB | 78/327 kB
2024-08-30T19:20:28.9409442Z Progress (2): 244/269 kB | 94/327 kB
2024-08-30T19:20:28.9409943Z Progress (2): 244/269 kB | 111/327 kB
2024-08-30T19:20:28.9410442Z Progress (2): 244/269 kB | 127/327 kB
2024-08-30T19:20:28.9411157Z Progress (2): 244/269 kB | 143/327 kB
2024-08-30T19:20:28.9411659Z Progress (2): 244/269 kB | 160/327 kB
2024-08-30T19:20:28.9412163Z Progress (2): 244/269 kB | 176/327 kB
2024-08-30T19:20:28.9412694Z Progress (2): 244/269 kB | 193/327 kB
2024-08-30T19:20:28.9413214Z Progress (2): 244/269 kB | 209/327 kB
2024-08-30T19:20:28.9413739Z Progress (2): 244/269 kB | 225/327 kB
2024-08-30T19:20:28.9414251Z Progress (2): 244/269 kB | 242/327 kB
2024-08-30T19:20:28.9414776Z Progress (2): 244/269 kB | 258/327 kB
2024-08-30T19:20:28.9415667Z Progress (2): 244/269 kB | 275/327 kB
2024-08-30T19:20:28.9416215Z Progress (2): 244/269 kB | 291/327 kB
2024-08-30T19:20:28.9416744Z Progress (2): 244/269 kB | 307/327 kB
2024-08-30T19:20:28.9417284Z Progress (2): 244/269 kB | 324/327 kB
2024-08-30T19:20:28.9417813Z Progress (2): 244/269 kB | 327 kB    
2024-08-30T19:20:28.9418322Z                                  
2024-08-30T19:20:28.9419785Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar (327 kB at 23 MB/s)
2024-08-30T19:20:28.9421111Z #24 8.176 Progress (2): 244/269 kB | 8.5 kB
2024-08-30T19:20:28.9421671Z Progress (2): 260/269 kB | 8.5 kB
2024-08-30T19:20:28.9422144Z                                  
2024-08-30T19:20:28.9423741Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar (8.5 kB at 530 kB/s)
2024-08-30T19:20:28.9425231Z #24 8.178 Progress (1): 269 kB
2024-08-30T19:20:28.9425734Z                     
2024-08-30T19:20:28.9427238Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.jar (269 kB at 13 MB/s)
2024-08-30T19:20:28.9428693Z #24 8.179 Progress (1): 16/587 kB
2024-08-30T19:20:28.9429201Z Progress (1): 32/587 kB
2024-08-30T19:20:28.9429635Z Progress (1): 49/587 kB
2024-08-30T19:20:28.9430066Z Progress (1): 65/587 kB
2024-08-30T19:20:28.9430498Z Progress (1): 80/587 kB
2024-08-30T19:20:28.9430938Z Progress (1): 96/587 kB
2024-08-30T19:20:28.9431376Z Progress (1): 113/587 kB
2024-08-30T19:20:28.9431803Z Progress (1): 129/587 kB
2024-08-30T19:20:28.9432231Z Progress (1): 145/587 kB
2024-08-30T19:20:28.9432979Z Progress (1): 162/587 kB
2024-08-30T19:20:28.9433425Z Progress (1): 178/587 kB
2024-08-30T19:20:28.9433855Z Progress (1): 194/587 kB
2024-08-30T19:20:28.9434305Z Progress (1): 211/587 kB
2024-08-30T19:20:28.9434745Z Progress (1): 227/587 kB
2024-08-30T19:20:28.9435171Z Progress (1): 244/587 kB
2024-08-30T19:20:28.9435618Z Progress (1): 260/587 kB
2024-08-30T19:20:28.9436053Z Progress (1): 276/587 kB
2024-08-30T19:20:28.9436468Z Progress (1): 293/587 kB
2024-08-30T19:20:28.9436892Z Progress (1): 309/587 kB
2024-08-30T19:20:28.9437312Z Progress (1): 326/587 kB
2024-08-30T19:20:28.9437724Z Progress (1): 342/587 kB
2024-08-30T19:20:28.9438146Z Progress (1): 358/587 kB
2024-08-30T19:20:28.9438565Z Progress (1): 375/587 kB
2024-08-30T19:20:28.9438981Z Progress (1): 391/587 kB
2024-08-30T19:20:28.9439405Z Progress (1): 407/587 kB
2024-08-30T19:20:28.9439835Z Progress (1): 424/587 kB
2024-08-30T19:20:28.9440255Z Progress (1): 440/587 kB
2024-08-30T19:20:28.9440683Z Progress (1): 457/587 kB
2024-08-30T19:20:28.9441115Z Progress (1): 473/587 kB
2024-08-30T19:20:28.9441531Z Progress (1): 489/587 kB
2024-08-30T19:20:28.9441964Z Progress (1): 506/587 kB
2024-08-30T19:20:28.9442390Z Progress (1): 522/587 kB
2024-08-30T19:20:28.9442813Z Progress (1): 539/587 kB
2024-08-30T19:20:28.9443240Z Progress (1): 555/587 kB
2024-08-30T19:20:28.9443669Z Progress (1): 571/587 kB
2024-08-30T19:20:28.9444091Z Progress (1): 587 kB    
2024-08-30T19:20:28.9444533Z Progress (2): 587 kB | 16/41 kB
2024-08-30T19:20:28.9445012Z                                
2024-08-30T19:20:28.9446618Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar (587 kB at 23 MB/s)
2024-08-30T19:20:28.9448021Z #24 8.187 Progress (1): 32/41 kB
2024-08-30T19:20:28.9448503Z Progress (1): 41 kB   
2024-08-30T19:20:28.9448884Z                    
2024-08-30T19:20:28.9450168Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar (41 kB at 1.5 MB/s)
2024-08-30T19:20:28.9452010Z #24 8.242 [INFO] Copying 1 resource from src/main/resources to target/classes
2024-08-30T19:20:28.9453049Z #24 8.255 [INFO] Copying 1 resource from src/main/resources to target/classes
2024-08-30T19:20:28.9453802Z #24 8.257 [INFO] 
2024-08-30T19:20:28.9454554Z #24 8.257 [INFO] --- compiler:3.11.0:compile (default-compile) @ backend ---
2024-08-30T19:20:28.9456681Z #24 8.260 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.pom
2024-08-30T19:20:29.0416883Z #24 8.266 Progress (1): 5.8 kB
2024-08-30T19:20:29.0417481Z                     
2024-08-30T19:20:29.0419495Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.pom (5.8 kB at 833 kB/s)
2024-08-30T19:20:29.0422400Z #24 8.271 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/34/maven-shared-components-34.pom
2024-08-30T19:20:29.0423992Z #24 8.275 Progress (1): 5.1 kB
2024-08-30T19:20:29.0424470Z                     
2024-08-30T19:20:29.0426223Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/34/maven-shared-components-34.pom (5.1 kB at 1.3 MB/s)
2024-08-30T19:20:29.0428764Z #24 8.277 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/34/maven-parent-34.pom
2024-08-30T19:20:29.0429986Z #24 8.281 Progress (1): 16/43 kB
2024-08-30T19:20:29.0430513Z Progress (1): 33/43 kB
2024-08-30T19:20:29.0431028Z Progress (1): 43 kB   
2024-08-30T19:20:29.0431457Z                    
2024-08-30T19:20:29.0432862Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/34/maven-parent-34.pom (43 kB at 11 MB/s)
2024-08-30T19:20:29.0435005Z #24 8.286 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.pom
2024-08-30T19:20:29.0436595Z #24 8.289 Progress (1): 14 kB
2024-08-30T19:20:29.0437058Z                    
2024-08-30T19:20:29.0438352Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.pom (14 kB at 3.6 MB/s)
2024-08-30T19:20:29.0440517Z #24 8.292 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom
2024-08-30T19:20:29.0441813Z #24 8.296 Progress (1): 16/68 kB
2024-08-30T19:20:29.0442290Z Progress (1): 32/68 kB
2024-08-30T19:20:29.0442718Z Progress (1): 49/68 kB
2024-08-30T19:20:29.0443155Z Progress (1): 65/68 kB
2024-08-30T19:20:29.0443584Z Progress (1): 68 kB   
2024-08-30T19:20:29.0443986Z                    
2024-08-30T19:20:29.0445440Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom (68 kB at 14 MB/s)
2024-08-30T19:20:29.0447522Z #24 8.300 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pom
2024-08-30T19:20:29.0448611Z #24 8.304 Progress (1): 16 kB
2024-08-30T19:20:29.0449075Z                    
2024-08-30T19:20:29.0450296Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pom (16 kB at 3.9 MB/s)
2024-08-30T19:20:29.0453068Z #24 8.307 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom
2024-08-30T19:20:29.0454651Z #24 8.311 Progress (1): 4.7 kB
2024-08-30T19:20:29.0455119Z                     
2024-08-30T19:20:29.0456884Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom (4.7 kB at 1.2 MB/s)
2024-08-30T19:20:29.0459748Z #24 8.313 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom
2024-08-30T19:20:29.0461285Z #24 8.317 Progress (1): 6.4 kB
2024-08-30T19:20:29.0461771Z                     
2024-08-30T19:20:29.0463504Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom (6.4 kB at 1.6 MB/s)
2024-08-30T19:20:29.0466017Z #24 8.319 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/23/maven-parent-23.pom
2024-08-30T19:20:29.0467826Z #24 8.323 Progress (1): 16/33 kB
2024-08-30T19:20:29.0468403Z Progress (1): 33 kB   
2024-08-30T19:20:29.0468851Z                    
2024-08-30T19:20:29.0470318Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/23/maven-parent-23.pom (33 kB at 8.1 MB/s)
2024-08-30T19:20:29.0473021Z #24 8.327 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom
2024-08-30T19:20:29.0474765Z #24 8.330 Progress (1): 815 B
2024-08-30T19:20:29.0475235Z                    
2024-08-30T19:20:29.0477112Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom (815 B at 204 kB/s)
2024-08-30T19:20:29.0479932Z #24 8.333 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom
2024-08-30T19:20:29.0481399Z #24 8.336 Progress (1): 4.2 kB
2024-08-30T19:20:29.0481877Z                     
2024-08-30T19:20:29.0483484Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom (4.2 kB at 1.1 MB/s)
2024-08-30T19:20:29.0485793Z #24 8.338 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom
2024-08-30T19:20:29.0487007Z #24 8.342 Progress (1): 16/17 kB
2024-08-30T19:20:29.0487500Z Progress (1): 17 kB   
2024-08-30T19:20:29.0487892Z                    
2024-08-30T19:20:29.0489328Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom (17 kB at 4.3 MB/s)
2024-08-30T19:20:29.0492430Z #24 8.346 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.2/plexus-java-1.1.2.pom
2024-08-30T19:20:29.0493748Z #24 8.349 Progress (1): 5.0 kB
2024-08-30T19:20:29.0494216Z                     
2024-08-30T19:20:29.0495699Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.2/plexus-java-1.1.2.pom (5.0 kB at 994 kB/s)
2024-08-30T19:20:29.0498183Z #24 8.352 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-languages/1.1.2/plexus-languages-1.1.2.pom
2024-08-30T19:20:29.0499565Z #24 8.355 Progress (1): 4.1 kB
2024-08-30T19:20:29.0500071Z                     
2024-08-30T19:20:29.0501610Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-languages/1.1.2/plexus-languages-1.1.2.pom (4.1 kB at 1.0 MB/s)
2024-08-30T19:20:29.0503815Z #24 8.358 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.4/asm-9.4.pom
2024-08-30T19:20:29.0504866Z #24 8.362 Progress (1): 2.4 kB
2024-08-30T19:20:29.0505332Z                     
2024-08-30T19:20:29.0506497Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.4/asm-9.4.pom (2.4 kB at 592 kB/s)
2024-08-30T19:20:29.0508484Z #24 8.365 Downloading from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.pom
2024-08-30T19:20:29.0509681Z #24 8.368 Progress (1): 16/17 kB
2024-08-30T19:20:29.1417448Z Progress (1): 17 kB   
2024-08-30T19:20:29.1418290Z                    
2024-08-30T19:20:29.1420732Z Downloaded from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.pom (17 kB at 3.4 MB/s)
2024-08-30T19:20:29.1424613Z #24 8.373 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.13.0/plexus-compiler-api-2.13.0.pom
2024-08-30T19:20:29.1426666Z #24 8.384 Progress (1): 1.1 kB
2024-08-30T19:20:29.1427369Z                     
2024-08-30T19:20:29.1429947Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.13.0/plexus-compiler-api-2.13.0.pom (1.1 kB at 88 kB/s)
2024-08-30T19:20:29.1433619Z #24 8.387 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler/2.13.0/plexus-compiler-2.13.0.pom
2024-08-30T19:20:29.1435453Z #24 8.391 Progress (1): 8.4 kB
2024-08-30T19:20:29.1436175Z                     
2024-08-30T19:20:29.1438340Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler/2.13.0/plexus-compiler-2.13.0.pom (8.4 kB at 1.7 MB/s)
2024-08-30T19:20:29.1441252Z #24 8.395 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/10.0/plexus-components-10.0.pom
2024-08-30T19:20:29.1443277Z #24 8.399 Progress (1): 2.7 kB
2024-08-30T19:20:29.1443776Z                     
2024-08-30T19:20:29.1445517Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/10.0/plexus-components-10.0.pom (2.7 kB at 536 kB/s)
2024-08-30T19:20:29.1449609Z #24 8.404 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.13.0/plexus-compiler-manager-2.13.0.pom
2024-08-30T19:20:29.1452307Z #24 8.408 Progress (1): 1.1 kB
2024-08-30T19:20:29.1453120Z                     
2024-08-30T19:20:29.1455432Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.13.0/plexus-compiler-manager-2.13.0.pom (1.1 kB at 228 kB/s)
2024-08-30T19:20:29.1459729Z #24 8.412 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/2.1.1/plexus-component-annotations-2.1.1.pom
2024-08-30T19:20:29.1461391Z #24 8.415 Progress (1): 770 B
2024-08-30T19:20:29.1462151Z                    
2024-08-30T19:20:29.1465326Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/2.1.1/plexus-component-annotations-2.1.1.pom (770 B at 154 kB/s)
2024-08-30T19:20:29.1468206Z #24 8.418 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/2.1.1/plexus-containers-2.1.1.pom
2024-08-30T19:20:29.1470562Z #24 8.421 Progress (1): 6.0 kB
2024-08-30T19:20:29.1471389Z                     
2024-08-30T19:20:29.1473146Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/2.1.1/plexus-containers-2.1.1.pom (6.0 kB at 1.5 MB/s)
2024-08-30T19:20:29.1476322Z #24 8.425 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/6.5/plexus-6.5.pom
2024-08-30T19:20:29.1478800Z #24 8.428 Progress (1): 16/26 kB
2024-08-30T19:20:29.1479502Z Progress (1): 26 kB   
2024-08-30T19:20:29.1479940Z                    
2024-08-30T19:20:29.1481686Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/6.5/plexus-6.5.pom (26 kB at 5.1 MB/s)
2024-08-30T19:20:29.1484907Z #24 8.433 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.13.0/plexus-compiler-javac-2.13.0.pom
2024-08-30T19:20:29.1486958Z #24 8.437 Progress (1): 1.2 kB
2024-08-30T19:20:29.1487442Z                     
2024-08-30T19:20:29.1491515Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.13.0/plexus-compiler-javac-2.13.0.pom (1.2 kB at 301 kB/s)
2024-08-30T19:20:29.1495962Z #24 8.439 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compilers/2.13.0/plexus-compilers-2.13.0.pom
2024-08-30T19:20:29.1497739Z #24 8.443 Progress (1): 1.3 kB
2024-08-30T19:20:29.1498390Z                     
2024-08-30T19:20:29.1500406Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compilers/2.13.0/plexus-compilers-2.13.0.pom (1.3 kB at 331 kB/s)
2024-08-30T19:20:29.1503846Z #24 8.449 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar
2024-08-30T19:20:29.1505955Z #24 8.453 Progress (1): 16/153 kB
2024-08-30T19:20:29.1506509Z Progress (1): 33/153 kB
2024-08-30T19:20:29.1507768Z Progress (1): 49/153 kB
2024-08-30T19:20:29.1508447Z Progress (1): 65/153 kB
2024-08-30T19:20:29.1508895Z Progress (1): 81/153 kB
2024-08-30T19:20:29.1509524Z Progress (1): 97/153 kB
2024-08-30T19:20:29.1510129Z Progress (1): 114/153 kB
2024-08-30T19:20:29.1510618Z Progress (1): 130/153 kB
2024-08-30T19:20:29.1511246Z Progress (1): 147/153 kB
2024-08-30T19:20:29.1511846Z Progress (1): 153 kB    
2024-08-30T19:20:29.1512276Z                     
2024-08-30T19:20:29.1514502Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar (153 kB at 22 MB/s)
2024-08-30T19:20:29.1517590Z #24 8.456 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.jar
2024-08-30T19:20:29.1520389Z #24 8.457 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar
2024-08-30T19:20:29.1523536Z #24 8.457 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar
2024-08-30T19:20:29.1526333Z #24 8.459 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.2/plexus-java-1.1.2.jar
2024-08-30T19:20:29.1528321Z #24 8.459 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.4/asm-9.4.jar
2024-08-30T19:20:29.1529383Z #24 8.462 Progress (1): 16/215 kB
2024-08-30T19:20:29.1529900Z Progress (1): 33/215 kB
2024-08-30T19:20:29.1530343Z Progress (1): 49/215 kB
2024-08-30T19:20:29.1530783Z Progress (1): 65/215 kB
2024-08-30T19:20:29.1532076Z Progress (2): 65/215 kB | 14 kB
2024-08-30T19:20:29.1532579Z Progress (2): 81/215 kB | 14 kB
2024-08-30T19:20:29.1533297Z Progress (2): 97/215 kB | 14 kB
2024-08-30T19:20:29.1533840Z Progress (3): 97/215 kB | 14 kB | 4.2 kB
2024-08-30T19:20:29.1534442Z Progress (3): 114/215 kB | 14 kB | 4.2 kB
2024-08-30T19:20:29.1535068Z Progress (3): 130/215 kB | 14 kB | 4.2 kB
2024-08-30T19:20:29.1535651Z                                          
2024-08-30T19:20:29.1537572Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar (14 kB at 2.3 MB/s)
2024-08-30T19:20:29.1540136Z #24 8.462 Downloading from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.jar
2024-08-30T19:20:29.1541370Z #24 8.462 Progress (2): 147/215 kB | 4.2 kB
2024-08-30T19:20:29.1541932Z                                  
2024-08-30T19:20:29.1543866Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar (4.2 kB at 702 kB/s)
2024-08-30T19:20:29.1546998Z #24 8.462 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.13.0/plexus-compiler-api-2.13.0.jar
2024-08-30T19:20:29.1548489Z #24 8.462 Progress (1): 163/215 kB
2024-08-30T19:20:29.1549010Z Progress (1): 179/215 kB
2024-08-30T19:20:29.1549462Z Progress (1): 196/215 kB
2024-08-30T19:20:29.1549909Z Progress (1): 212/215 kB
2024-08-30T19:20:29.1550358Z Progress (1): 215 kB    
2024-08-30T19:20:29.1550783Z                     
2024-08-30T19:20:29.1552118Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.jar (215 kB at 27 MB/s)
2024-08-30T19:20:29.1554405Z #24 8.463 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.jar
2024-08-30T19:20:29.1555762Z #24 8.464 Progress (1): 16/122 kB
2024-08-30T19:20:29.1556310Z Progress (2): 16/122 kB | 16/27 kB
2024-08-30T19:20:29.1556836Z Progress (2): 32/122 kB | 16/27 kB
2024-08-30T19:20:29.1557352Z Progress (2): 49/122 kB | 16/27 kB
2024-08-30T19:20:29.1557922Z Progress (3): 49/122 kB | 16/27 kB | 16/334 kB
2024-08-30T19:20:29.1558563Z Progress (3): 65/122 kB | 16/27 kB | 16/334 kB
2024-08-30T19:20:29.1559503Z Progress (3): 81/122 kB | 16/27 kB | 16/334 kB
2024-08-30T19:20:29.1560185Z Progress (3): 81/122 kB | 16/27 kB | 33/334 kB
2024-08-30T19:20:29.1560829Z Progress (3): 98/122 kB | 16/27 kB | 33/334 kB
2024-08-30T19:20:29.1561465Z Progress (3): 98/122 kB | 16/27 kB | 49/334 kB
2024-08-30T19:20:29.1562113Z Progress (3): 114/122 kB | 16/27 kB | 49/334 kB
2024-08-30T19:20:29.1562769Z Progress (3): 122 kB | 16/27 kB | 49/334 kB    
2024-08-30T19:20:29.1563404Z Progress (3): 122 kB | 16/27 kB | 63/334 kB
2024-08-30T19:20:29.1564027Z Progress (3): 122 kB | 16/27 kB | 80/334 kB
2024-08-30T19:20:29.1564639Z Progress (3): 122 kB | 16/27 kB | 96/334 kB
2024-08-30T19:20:29.1565261Z Progress (3): 122 kB | 16/27 kB | 113/334 kB
2024-08-30T19:20:29.1565957Z Progress (4): 122 kB | 16/27 kB | 113/334 kB | 16/267 kB
2024-08-30T19:20:29.1566643Z                                                         
2024-08-30T19:20:29.1568128Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.4/asm-9.4.jar (122 kB at 14 MB/s)
2024-08-30T19:20:29.1570520Z #24 8.467 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.13.0/plexus-compiler-manager-2.13.0.jar
2024-08-30T19:20:29.1572911Z #24 8.467 Progress (3): 16/27 kB | 129/334 kB | 16/267 kB
2024-08-30T19:20:29.1573695Z Progress (3): 16/27 kB | 129/334 kB | 33/267 kB
2024-08-30T19:20:29.1574348Z Progress (3): 16/27 kB | 145/334 kB | 33/267 kB
2024-08-30T19:20:29.1575001Z Progress (3): 16/27 kB | 162/334 kB | 33/267 kB
2024-08-30T19:20:29.1575645Z Progress (3): 16/27 kB | 162/334 kB | 49/267 kB
2024-08-30T19:20:29.1576281Z Progress (3): 16/27 kB | 162/334 kB | 64/267 kB
2024-08-30T19:20:29.1577274Z Progress (3): 16/27 kB | 178/334 kB | 64/267 kB
2024-08-30T19:20:29.1577930Z Progress (3): 16/27 kB | 178/334 kB | 80/267 kB
2024-08-30T19:20:29.1578568Z Progress (3): 16/27 kB | 178/334 kB | 97/267 kB
2024-08-30T19:20:29.1579218Z Progress (3): 16/27 kB | 194/334 kB | 97/267 kB
2024-08-30T19:20:29.1579883Z Progress (3): 16/27 kB | 194/334 kB | 113/267 kB
2024-08-30T19:20:29.1580551Z Progress (3): 16/27 kB | 194/334 kB | 129/267 kB
2024-08-30T19:20:29.1581228Z Progress (3): 16/27 kB | 211/334 kB | 129/267 kB
2024-08-30T19:20:29.1581887Z Progress (3): 16/27 kB | 211/334 kB | 146/267 kB
2024-08-30T19:20:29.2436931Z Progress (3): 16/27 kB | 211/334 kB | 162/267 kB
2024-08-30T19:20:29.2437932Z Progress (3): 16/27 kB | 211/334 kB | 179/267 kB
2024-08-30T19:20:29.2438881Z Progress (3): 16/27 kB | 227/334 kB | 179/267 kB
2024-08-30T19:20:29.2439752Z Progress (3): 16/27 kB | 227/334 kB | 195/267 kB
2024-08-30T19:20:29.2440626Z Progress (3): 16/27 kB | 244/334 kB | 195/267 kB
2024-08-30T19:20:29.2441539Z Progress (3): 16/27 kB | 244/334 kB | 211/267 kB
2024-08-30T19:20:29.2442607Z Progress (3): 16/27 kB | 244/334 kB | 228/267 kB
2024-08-30T19:20:29.2443482Z Progress (3): 16/27 kB | 244/334 kB | 244/267 kB
2024-08-30T19:20:29.2444321Z Progress (3): 27 kB | 244/334 kB | 244/267 kB   
2024-08-30T19:20:29.2445184Z Progress (3): 27 kB | 244/334 kB | 261/267 kB
2024-08-30T19:20:29.2446031Z Progress (3): 27 kB | 244/334 kB | 267 kB    
2024-08-30T19:20:29.2446846Z Progress (3): 27 kB | 260/334 kB | 267 kB
2024-08-30T19:20:29.2447636Z Progress (3): 27 kB | 276/334 kB | 267 kB
2024-08-30T19:20:29.2448367Z                                          
2024-08-30T19:20:29.2455433Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.jar (267 kB at 22 MB/s)
2024-08-30T19:20:29.2459077Z #24 8.470 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.13.0/plexus-compiler-javac-2.13.0.jar
2024-08-30T19:20:29.2461167Z #24 8.470 Progress (2): 27 kB | 293/334 kB
2024-08-30T19:20:29.2462079Z Progress (2): 27 kB | 309/334 kB
2024-08-30T19:20:29.2462894Z Progress (2): 27 kB | 326/334 kB
2024-08-30T19:20:29.2463701Z Progress (2): 27 kB | 334 kB    
2024-08-30T19:20:29.2464496Z                             
2024-08-30T19:20:29.2467497Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.13.0/plexus-compiler-api-2.13.0.jar (27 kB at 2.1 MB/s)
2024-08-30T19:20:29.2470615Z #24 8.471 Downloaded from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.jar (334 kB at 26 MB/s)
2024-08-30T19:20:29.2472085Z #24 8.471 Progress (1): 16/55 kB
2024-08-30T19:20:29.2472629Z Progress (1): 32/55 kB
2024-08-30T19:20:29.2473417Z Progress (1): 49/55 kB
2024-08-30T19:20:29.2473884Z Progress (1): 55 kB   
2024-08-30T19:20:29.2474364Z Progress (2): 55 kB | 16/23 kB
2024-08-30T19:20:29.2474904Z Progress (2): 55 kB | 23 kB   
2024-08-30T19:20:29.2475425Z                            
2024-08-30T19:20:29.2477330Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.13.0/plexus-compiler-javac-2.13.0.jar (23 kB at 1.5 MB/s)
2024-08-30T19:20:29.2480570Z #24 8.474 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.2/plexus-java-1.1.2.jar (55 kB at 3.2 MB/s)
2024-08-30T19:20:29.2482139Z #24 8.475 Progress (1): 4.7 kB
2024-08-30T19:20:29.2482661Z                     
2024-08-30T19:20:29.2484455Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.13.0/plexus-compiler-manager-2.13.0.jar (4.7 kB at 274 kB/s)
2024-08-30T19:20:29.3963871Z #24 8.570 [INFO] Changes detected - recompiling the module! :source
2024-08-30T19:20:29.3965053Z #24 8.573 [INFO] Compiling 148 source files with javac [debug release 17] to target/classes
2024-08-30T19:20:34.1791557Z #24 13.50 [INFO] Annotation processing is enabled because one or more processors were found
2024-08-30T19:20:34.1794020Z #24 13.50   on the class path. A future release of javac may disable annotation processing
2024-08-30T19:20:34.1796105Z #24 13.50   unless at least one processor is specified by name (-processor), or a search
2024-08-30T19:20:34.1798088Z #24 13.50   path is specified (--processor-path, --processor-module-path), or annotation
2024-08-30T19:20:34.1799741Z #24 13.50   processing is enabled explicitly (-proc:only, -proc:full).
2024-08-30T19:20:34.1801010Z #24 13.50   Use -Xlint:-options to suppress this message.
2024-08-30T19:20:34.1802460Z #24 13.50   Use -proc:none to disable annotation processing.
2024-08-30T19:20:34.1804079Z #24 13.50 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
2024-08-30T19:20:34.3492548Z #24 13.50   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
2024-08-30T19:20:34.3496134Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java:[20,27] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3501884Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java:[21,27] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3507178Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[65,42] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3512193Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[68,33] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3517692Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[78,31] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3522549Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[81,33] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3527436Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[97,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3532757Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[100,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3537427Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[103,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3542496Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[106,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3547274Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[109,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3552047Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[112,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3557176Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/RequstHandling/Requests/CodeTestRequest.java:[29,23] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3562573Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Program/RawProgram.java:[12,10] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3568050Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Program/SolutionProgram.java:[30,24] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3574172Z #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Program/SolutionProgram.java:[31,16] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
2024-08-30T19:20:34.3580614Z #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/RequstHandling/Requests/SpecifiedSingleDatabaseExerciseTestRequest.java:[19,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
2024-08-30T19:20:34.3586938Z #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/Messages/ExecutionResponses/ExecutionResponseStatusUpdate.java:[15,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
2024-08-30T19:20:34.3592939Z #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/RequstHandling/Requests/SaveExerciseSolutionRequest.java:[12,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
2024-08-30T19:20:34.3598995Z #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/Messages/ExecutionResponses/ExecutionChainScheme.java:[19,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
2024-08-30T19:20:34.3604553Z #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Program/RawProgram.java:[8,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
2024-08-30T19:20:34.3608394Z #24 13.51 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
2024-08-30T19:20:34.3609988Z #24 13.51   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
2024-08-30T19:20:34.3611771Z #24 13.51 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
2024-08-30T19:20:34.3613385Z #24 13.51   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
2024-08-30T19:20:34.3614985Z #24 13.51 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
2024-08-30T19:20:34.3617141Z #24 13.51   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
2024-08-30T19:20:34.3618721Z #24 13.51 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
2024-08-30T19:20:34.3620301Z #24 13.51   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
2024-08-30T19:20:34.3622219Z #24 13.51 [INFO] /backend/src/main/java/com/redocode/backend/Secuirity/JwtService.java: Some input files use or override a deprecated API.
2024-08-30T19:20:34.3624727Z #24 13.51 [INFO] /backend/src/main/java/com/redocode/backend/Secuirity/JwtService.java: Recompile with -Xlint:deprecation for details.
2024-08-30T19:20:34.3627814Z #24 13.51 [INFO] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java: /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java uses unchecked or unsafe operations.
2024-08-30T19:20:34.3631675Z #24 13.51 [INFO] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java: Recompile with -Xlint:unchecked for details.
2024-08-30T19:20:34.3633236Z #24 13.51 [INFO] 
2024-08-30T19:20:34.3634053Z #24 13.51 [INFO] --- resources:3.3.1:testResources (default-testResources) @ backend ---
2024-08-30T19:20:34.3635175Z #24 13.51 [INFO] skip non existing resourceDirectory /backend/src/test/resources
2024-08-30T19:20:34.3636465Z #24 13.51 [INFO] 
2024-08-30T19:20:34.3637264Z #24 13.51 [INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ backend ---
2024-08-30T19:20:34.3638436Z #24 13.53 [INFO] Changes detected - recompiling the module! :dependency
2024-08-30T19:20:34.3639682Z #24 13.53 [INFO] Compiling 66 source files with javac [debug release 17] to target/test-classes
2024-08-30T19:20:36.0858443Z #24 15.41 [INFO] Annotation processing is enabled because one or more processors were found
2024-08-30T19:20:36.0859847Z #24 15.41   on the class path. A future release of javac may disable annotation processing
2024-08-30T19:20:36.0861500Z #24 15.41   unless at least one processor is specified by name (-processor), or a search
2024-08-30T19:20:36.0862884Z #24 15.41   path is specified (--processor-path, --processor-module-path), or annotation
2024-08-30T19:20:36.0864148Z #24 15.41   processing is enabled explicitly (-proc:only, -proc:full).
2024-08-30T19:20:36.0865179Z #24 15.41   Use -Xlint:-options to suppress this message.
2024-08-30T19:20:36.0866129Z #24 15.41   Use -proc:none to disable annotation processing.
2024-08-30T19:20:36.0867750Z #24 15.41 [INFO] /backend/src/test/java/com/redocode/backend/WebSocketTestBase.java: Some input files use or override a deprecated API.
2024-08-30T19:20:36.0870083Z #24 15.41 [INFO] /backend/src/test/java/com/redocode/backend/WebSocketTestBase.java: Recompile with -Xlint:deprecation for details.
2024-08-30T19:20:36.0872481Z #24 15.41 [INFO] /backend/src/test/java/com/redocode/backend/endpoints/ExcecisesEndpointsTest.java: Some input files use unchecked or unsafe operations.
2024-08-30T19:20:36.1897378Z #24 15.41 [INFO] /backend/src/test/java/com/redocode/backend/endpoints/ExcecisesEndpointsTest.java: Recompile with -Xlint:unchecked for details.
2024-08-30T19:20:36.1899702Z #24 15.41 [INFO] 
2024-08-30T19:20:36.1900660Z #24 15.41 [INFO] --- surefire:3.1.2:test (default-test) @ backend ---
2024-08-30T19:20:36.1902852Z #24 15.42 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/3.1.2/maven-surefire-common-3.1.2.pom
2024-08-30T19:20:36.1904528Z #24 15.43 Progress (1): 6.1 kB
2024-08-30T19:20:36.1905036Z                     
2024-08-30T19:20:36.1906955Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/3.1.2/maven-surefire-common-3.1.2.pom (6.1 kB at 677 kB/s)
2024-08-30T19:20:36.1909894Z #24 15.44 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/3.1.2/surefire-api-3.1.2.pom
2024-08-30T19:20:36.1911356Z #24 15.44 Progress (1): 3.5 kB
2024-08-30T19:20:36.1911873Z                     
2024-08-30T19:20:36.1913584Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/3.1.2/surefire-api-3.1.2.pom (3.5 kB at 706 kB/s)
2024-08-30T19:20:36.1916476Z #24 15.44 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-logger-api/3.1.2/surefire-logger-api-3.1.2.pom
2024-08-30T19:20:36.1918106Z #24 15.45 Progress (1): 3.3 kB
2024-08-30T19:20:36.1918621Z                     
2024-08-30T19:20:36.1920496Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-logger-api/3.1.2/surefire-logger-api-3.1.2.pom (3.3 kB at 652 kB/s)
2024-08-30T19:20:36.1923543Z #24 15.45 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-shared-utils/3.1.2/surefire-shared-utils-3.1.2.pom
2024-08-30T19:20:36.1925205Z #24 15.46 Progress (1): 4.1 kB
2024-08-30T19:20:36.1925719Z                     
2024-08-30T19:20:36.1927674Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-shared-utils/3.1.2/surefire-shared-utils-3.1.2.pom (4.1 kB at 812 kB/s)
2024-08-30T19:20:36.1930804Z #24 15.46 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-api/3.1.2/surefire-extensions-api-3.1.2.pom
2024-08-30T19:20:36.1934568Z #24 15.46 Progress (1): 3.3 kB
2024-08-30T19:20:36.1935106Z                     
2024-08-30T19:20:36.1937060Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-api/3.1.2/surefire-extensions-api-3.1.2.pom (3.3 kB at 826 kB/s)
2024-08-30T19:20:36.1940042Z #24 15.47 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/3.1.2/surefire-booter-3.1.2.pom
2024-08-30T19:20:36.1941562Z #24 15.47 Progress (1): 4.5 kB
2024-08-30T19:20:36.1942052Z                     
2024-08-30T19:20:36.1943824Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/3.1.2/surefire-booter-3.1.2.pom (4.5 kB at 1.1 MB/s)
2024-08-30T19:20:36.1946838Z #24 15.47 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-spi/3.1.2/surefire-extensions-spi-3.1.2.pom
2024-08-30T19:20:36.1948526Z #24 15.48 Progress (1): 1.8 kB
2024-08-30T19:20:36.1949054Z                     
2024-08-30T19:20:36.1950991Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-spi/3.1.2/surefire-extensions-spi-3.1.2.pom (1.8 kB at 352 kB/s)
2024-08-30T19:20:36.1954468Z #24 15.48 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.pom
2024-08-30T19:20:36.1956031Z #24 15.49 Progress (1): 2.2 kB
2024-08-30T19:20:36.1956550Z                     
2024-08-30T19:20:36.1958337Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.pom (2.2 kB at 548 kB/s)
2024-08-30T19:20:36.1961465Z #24 15.49 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether/1.0.0.v20140518/aether-1.0.0.v20140518.pom
2024-08-30T19:20:36.1963396Z #24 15.50 Progress (1): 16/30 kB
2024-08-30T19:20:36.1963955Z Progress (1): 30 kB   
2024-08-30T19:20:36.1964412Z                    
2024-08-30T19:20:36.1966090Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether/1.0.0.v20140518/aether-1.0.0.v20140518.pom (30 kB at 3.8 MB/s)
2024-08-30T19:20:36.1968869Z #24 15.50 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.pom
2024-08-30T19:20:36.1970213Z #24 15.50 Progress (1): 1.9 kB
2024-08-30T19:20:36.1970700Z                     
2024-08-30T19:20:36.1977492Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.pom (1.9 kB at 379 kB/s)
2024-08-30T19:20:36.1980636Z #24 15.51 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.1.1/maven-common-artifact-filters-3.1.1.pom
2024-08-30T19:20:36.1982431Z #24 15.51 Progress (1): 5.8 kB
2024-08-30T19:20:36.1982934Z                     
2024-08-30T19:20:36.1984954Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.1.1/maven-common-artifact-filters-3.1.1.pom (5.8 kB at 1.2 MB/s)
2024-08-30T19:20:36.2916495Z #24 15.52 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.pom
2024-08-30T19:20:36.2918120Z #24 15.53 Progress (1): 2.3 kB
2024-08-30T19:20:36.2918789Z                     
2024-08-30T19:20:36.2920698Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.pom (2.3 kB at 235 kB/s)
2024-08-30T19:20:36.2923613Z #24 15.53 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/3.2.5/maven-3.2.5.pom
2024-08-30T19:20:36.2925089Z #24 15.53 Progress (1): 16/22 kB
2024-08-30T19:20:36.2925586Z Progress (1): 22 kB   
2024-08-30T19:20:36.2926159Z                    
2024-08-30T19:20:36.2928407Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/3.2.5/maven-3.2.5.pom (22 kB at 3.2 MB/s)
2024-08-30T19:20:36.2931269Z #24 15.54 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/25/maven-parent-25.pom
2024-08-30T19:20:36.2932829Z #24 15.54 Progress (1): 16/37 kB
2024-08-30T19:20:36.2933306Z Progress (1): 33/37 kB
2024-08-30T19:20:36.2933893Z Progress (1): 37 kB   
2024-08-30T19:20:36.2934451Z                    
2024-08-30T19:20:36.2936131Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/25/maven-parent-25.pom (37 kB at 7.5 MB/s)
2024-08-30T19:20:36.2938820Z #24 15.55 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/15/apache-15.pom
2024-08-30T19:20:36.2940404Z #24 15.55 Progress (1): 15 kB
2024-08-30T19:20:36.2941126Z                    
2024-08-30T19:20:36.2942592Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/15/apache-15.pom (15 kB at 1.9 MB/s)
2024-08-30T19:20:36.2949549Z #24 15.56 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.pom
2024-08-30T19:20:36.2950780Z #24 15.56 Progress (1): 8.1 kB
2024-08-30T19:20:36.2951221Z                     
2024-08-30T19:20:36.2952661Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.pom (8.1 kB at 1.6 MB/s)
2024-08-30T19:20:36.2955156Z #24 15.57 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.pom
2024-08-30T19:20:36.2956460Z #24 15.57 Progress (1): 2.2 kB
2024-08-30T19:20:36.2957273Z                     
2024-08-30T19:20:36.2958745Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.pom (2.2 kB at 362 kB/s)
2024-08-30T19:20:36.2961217Z #24 15.58 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.pom
2024-08-30T19:20:36.2962628Z #24 15.58 Progress (1): 2.6 kB
2024-08-30T19:20:36.2963087Z                     
2024-08-30T19:20:36.2964707Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.pom (2.6 kB at 371 kB/s)
2024-08-30T19:20:36.2967474Z #24 15.59 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.pom
2024-08-30T19:20:36.2968859Z #24 15.59 Progress (1): 1.5 kB
2024-08-30T19:20:36.2969307Z                     
2024-08-30T19:20:36.2970874Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.pom (1.5 kB at 308 kB/s)
2024-08-30T19:20:36.2973638Z #24 15.60 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.3.1/plexus-components-1.3.1.pom
2024-08-30T19:20:36.2975146Z #24 15.60 Progress (1): 3.1 kB
2024-08-30T19:20:36.2975743Z                     
2024-08-30T19:20:36.2977611Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.3.1/plexus-components-1.3.1.pom (3.1 kB at 613 kB/s)
2024-08-30T19:20:36.2980140Z #24 15.61 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.3.1/plexus-3.3.1.pom
2024-08-30T19:20:36.2981626Z #24 15.61 Progress (1): 16/20 kB
2024-08-30T19:20:36.2982353Z Progress (1): 20 kB   
2024-08-30T19:20:36.2982899Z                    
2024-08-30T19:20:36.2984819Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.3.1/plexus-3.3.1.pom (20 kB at 3.4 MB/s)
2024-08-30T19:20:36.2987735Z #24 15.61 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/17/spice-parent-17.pom
2024-08-30T19:20:36.3921606Z #24 15.62 Progress (1): 6.8 kB
2024-08-30T19:20:36.3922199Z                     
2024-08-30T19:20:36.3924377Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/17/spice-parent-17.pom (6.8 kB at 751 kB/s)
2024-08-30T19:20:36.3926862Z #24 15.63 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/10/forge-parent-10.pom
2024-08-30T19:20:36.3928144Z #24 15.63 Progress (1): 14 kB
2024-08-30T19:20:36.3928615Z                    
2024-08-30T19:20:36.3930043Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/10/forge-parent-10.pom (14 kB at 2.3 MB/s)
2024-08-30T19:20:36.3933255Z #24 15.63 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.pom
2024-08-30T19:20:36.3934716Z #24 15.64 Progress (1): 3.0 kB
2024-08-30T19:20:36.3935173Z                     
2024-08-30T19:20:36.3942334Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.pom (3.0 kB at 494 kB/s)
2024-08-30T19:20:36.3944903Z #24 15.64 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/12/spice-parent-12.pom
2024-08-30T19:20:36.3946167Z #24 15.65 Progress (1): 6.8 kB
2024-08-30T19:20:36.3946633Z                     
2024-08-30T19:20:36.3948053Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/12/spice-parent-12.pom (6.8 kB at 1.4 MB/s)
2024-08-30T19:20:36.3950243Z #24 15.65 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/4/forge-parent-4.pom
2024-08-30T19:20:36.3951904Z #24 15.66 Progress (1): 8.4 kB
2024-08-30T19:20:36.3952392Z                     
2024-08-30T19:20:36.3953817Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/4/forge-parent-4.pom (8.4 kB at 1.4 MB/s)
2024-08-30T19:20:36.3956146Z #24 15.66 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.pom
2024-08-30T19:20:36.3957479Z #24 15.66 Progress (1): 2.1 kB
2024-08-30T19:20:36.3957957Z                     
2024-08-30T19:20:36.3959439Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.pom (2.1 kB at 516 kB/s)
2024-08-30T19:20:36.3967005Z #24 15.66 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.pom
2024-08-30T19:20:36.3968579Z #24 15.67 Progress (1): 2.2 kB
2024-08-30T19:20:36.3969048Z                     
2024-08-30T19:20:36.3970814Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.pom (2.2 kB at 557 kB/s)
2024-08-30T19:20:36.3973933Z #24 15.67 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.pom
2024-08-30T19:20:36.3975289Z #24 15.68 Progress (1): 3.0 kB
2024-08-30T19:20:36.3975763Z                     
2024-08-30T19:20:36.3977299Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.pom (3.0 kB at 605 kB/s)
2024-08-30T19:20:36.3979879Z #24 15.68 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.5/org.eclipse.sisu.plexus-0.3.5.pom
2024-08-30T19:20:36.3981316Z #24 15.68 Progress (1): 4.3 kB
2024-08-30T19:20:36.3981783Z                     
2024-08-30T19:20:36.3983460Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.5/org.eclipse.sisu.plexus-0.3.5.pom (4.3 kB at 857 kB/s)
2024-08-30T19:20:36.3985973Z #24 15.69 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/sisu-plexus/0.3.5/sisu-plexus-0.3.5.pom
2024-08-30T19:20:36.3987256Z #24 15.69 Progress (1): 14 kB
2024-08-30T19:20:36.3987709Z                    
2024-08-30T19:20:36.3989521Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/sisu-plexus/0.3.5/sisu-plexus-0.3.5.pom (14 kB at 2.7 MB/s)
2024-08-30T19:20:36.3992428Z #24 15.70 Downloading from central: https://repo.maven.apache.org/maven2/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.pom
2024-08-30T19:20:36.3993834Z #24 15.70 Progress (1): 13 kB
2024-08-30T19:20:36.3994302Z                    
2024-08-30T19:20:36.3996408Z Downloaded from central: https://repo.maven.apache.org/maven2/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.pom (13 kB at 1.7 MB/s)
2024-08-30T19:20:36.3999102Z #24 15.71 Downloading from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/3/jvnet-parent-3.pom
2024-08-30T19:20:36.4000257Z #24 15.71 Progress (1): 4.8 kB
2024-08-30T19:20:36.4000731Z                     
2024-08-30T19:20:36.4002022Z Downloaded from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/3/jvnet-parent-3.pom (4.8 kB at 798 kB/s)
2024-08-30T19:20:36.4004075Z #24 15.71 Downloading from central: https://repo.maven.apache.org/maven2/javax/enterprise/cdi-api/1.2/cdi-api-1.2.pom
2024-08-30T19:20:36.4950344Z #24 15.72 Progress (1): 6.3 kB
2024-08-30T19:20:36.4955405Z                     
2024-08-30T19:20:36.4962854Z Downloaded from central: https://repo.maven.apache.org/maven2/javax/enterprise/cdi-api/1.2/cdi-api-1.2.pom (6.3 kB at 897 kB/s)
2024-08-30T19:20:36.4964240Z #24 15.72 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/weld/weld-parent/26/weld-parent-26.pom
2024-08-30T19:20:36.4964945Z #24 15.73 Progress (1): 16/32 kB
2024-08-30T19:20:36.4965616Z Progress (1): 32 kB   
2024-08-30T19:20:36.4965861Z                    
2024-08-30T19:20:36.4966645Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/weld/weld-parent/26/weld-parent-26.pom (32 kB at 5.4 MB/s)
2024-08-30T19:20:36.4968028Z #24 15.73 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.5/org.eclipse.sisu.inject-0.3.5.pom
2024-08-30T19:20:36.4968858Z #24 15.74 Progress (1): 2.6 kB
2024-08-30T19:20:36.4969140Z                     
2024-08-30T19:20:36.4970081Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.5/org.eclipse.sisu.inject-0.3.5.pom (2.6 kB at 525 kB/s)
2024-08-30T19:20:36.4971740Z #24 15.74 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/sisu-inject/0.3.5/sisu-inject-0.3.5.pom
2024-08-30T19:20:36.4972461Z #24 15.74 Progress (1): 14 kB
2024-08-30T19:20:36.4972739Z                    
2024-08-30T19:20:36.4973548Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/sisu-inject/0.3.5/sisu-inject-0.3.5.pom (14 kB at 2.9 MB/s)
2024-08-30T19:20:36.4974918Z #24 15.75 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.pom
2024-08-30T19:20:36.4975711Z #24 15.75 Progress (1): 7.3 kB
2024-08-30T19:20:36.4975993Z                     
2024-08-30T19:20:36.4977023Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.pom (7.3 kB at 913 kB/s)
2024-08-30T19:20:36.4978485Z #24 15.76 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.pom
2024-08-30T19:20:36.4979287Z #24 15.76 Progress (1): 3.0 kB
2024-08-30T19:20:36.4979557Z                     
2024-08-30T19:20:36.4980454Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.pom (3.0 kB at 599 kB/s)
2024-08-30T19:20:36.4981922Z #24 15.77 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.pom
2024-08-30T19:20:36.4982727Z #24 15.77 Progress (1): 4.2 kB
2024-08-30T19:20:36.4982997Z                     
2024-08-30T19:20:36.4984623Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.pom (4.2 kB at 1.1 MB/s)
2024-08-30T19:20:36.4987408Z #24 15.78 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.pom
2024-08-30T19:20:36.4988403Z #24 15.78 Progress (1): 2.1 kB
2024-08-30T19:20:36.4988685Z                     
2024-08-30T19:20:36.4989653Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.pom (2.1 kB at 410 kB/s)
2024-08-30T19:20:36.4991132Z #24 15.78 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.pom
2024-08-30T19:20:36.4991934Z #24 15.79 Progress (1): 3.5 kB
2024-08-30T19:20:36.4992212Z                     
2024-08-30T19:20:36.4993127Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.pom (3.5 kB at 695 kB/s)
2024-08-30T19:20:36.4994466Z #24 15.79 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3.pom
2024-08-30T19:20:36.4995177Z #24 15.80 Progress (1): 11 kB
2024-08-30T19:20:36.4995451Z                    
2024-08-30T19:20:36.4996242Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3.pom (11 kB at 2.2 MB/s)
2024-08-30T19:20:36.4997587Z #24 15.80 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/sisu/inject/guice-parent/3.2.3/guice-parent-3.2.3.pom
2024-08-30T19:20:36.4998624Z #24 15.80 Progress (1): 13 kB
2024-08-30T19:20:36.4998905Z                    
2024-08-30T19:20:36.4999792Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/sisu/inject/guice-parent/3.2.3/guice-parent-3.2.3.pom (13 kB at 2.7 MB/s)
2024-08-30T19:20:36.5001130Z #24 15.81 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/38/forge-parent-38.pom
2024-08-30T19:20:36.5001849Z #24 15.81 Progress (1): 16/19 kB
2024-08-30T19:20:36.5002141Z Progress (1): 19 kB   
2024-08-30T19:20:36.5002386Z                    
2024-08-30T19:20:36.5003525Z Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/38/forge-parent-38.pom (19 kB at 3.7 MB/s)
2024-08-30T19:20:36.5005626Z #24 15.82 Downloading from central: https://repo.maven.apache.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.pom
2024-08-30T19:20:36.5954505Z #24 15.82 Progress (1): 363 B
2024-08-30T19:20:36.5955133Z                    
2024-08-30T19:20:36.5956755Z Downloaded from central: https://repo.maven.apache.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.pom (363 B at 73 kB/s)
2024-08-30T19:20:36.5958976Z #24 15.83 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/16.0.1/guava-16.0.1.pom
2024-08-30T19:20:36.5960154Z #24 15.83 Progress (1): 6.1 kB
2024-08-30T19:20:36.5960632Z                     
2024-08-30T19:20:36.5961977Z Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/16.0.1/guava-16.0.1.pom (6.1 kB at 1.5 MB/s)
2024-08-30T19:20:36.5964274Z #24 15.83 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/16.0.1/guava-parent-16.0.1.pom
2024-08-30T19:20:36.5965566Z #24 15.84 Progress (1): 7.3 kB
2024-08-30T19:20:36.5966044Z                     
2024-08-30T19:20:36.5967551Z Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/16.0.1/guava-parent-16.0.1.pom (7.3 kB at 1.8 MB/s)
2024-08-30T19:20:36.5969828Z #24 15.84 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.12.0/commons-io-2.12.0.pom
2024-08-30T19:20:36.5971395Z #24 15.84 Progress (1): 16/20 kB
2024-08-30T19:20:36.5971915Z Progress (1): 20 kB   
2024-08-30T19:20:36.5972307Z                    
2024-08-30T19:20:36.5974016Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.12.0/commons-io-2.12.0.pom (20 kB at 3.4 MB/s)
2024-08-30T19:20:36.5976270Z #24 15.85 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/57/commons-parent-57.pom
2024-08-30T19:20:36.5977597Z #24 15.85 Progress (1): 16/83 kB
2024-08-30T19:20:36.5978078Z Progress (1): 33/83 kB
2024-08-30T19:20:36.5978491Z Progress (1): 37/83 kB
2024-08-30T19:20:36.5978896Z Progress (1): 53/83 kB
2024-08-30T19:20:36.5979310Z Progress (1): 69/83 kB
2024-08-30T19:20:36.5979713Z Progress (1): 83 kB   
2024-08-30T19:20:36.5980137Z                    
2024-08-30T19:20:36.5981560Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/57/commons-parent-57.pom (83 kB at 14 MB/s)
2024-08-30T19:20:36.5984212Z #24 15.86 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/3.1.2/maven-surefire-common-3.1.2.jar
2024-08-30T19:20:36.5985847Z #24 15.87 Progress (1): 16/306 kB
2024-08-30T19:20:36.5986331Z Progress (1): 33/306 kB
2024-08-30T19:20:36.5986779Z Progress (1): 49/306 kB
2024-08-30T19:20:36.5987194Z Progress (1): 65/306 kB
2024-08-30T19:20:36.5987613Z Progress (1): 81/306 kB
2024-08-30T19:20:36.5988004Z Progress (1): 97/306 kB
2024-08-30T19:20:36.5988446Z Progress (1): 114/306 kB
2024-08-30T19:20:36.5988871Z Progress (1): 130/306 kB
2024-08-30T19:20:36.5989302Z Progress (1): 147/306 kB
2024-08-30T19:20:36.5989715Z Progress (1): 163/306 kB
2024-08-30T19:20:36.5990143Z Progress (1): 179/306 kB
2024-08-30T19:20:36.5990580Z Progress (1): 196/306 kB
2024-08-30T19:20:36.5991381Z Progress (1): 212/306 kB
2024-08-30T19:20:36.5991795Z Progress (1): 228/306 kB
2024-08-30T19:20:36.5992252Z Progress (1): 245/306 kB
2024-08-30T19:20:36.5992668Z Progress (1): 261/306 kB
2024-08-30T19:20:36.5993100Z Progress (1): 278/306 kB
2024-08-30T19:20:36.5993489Z Progress (1): 294/306 kB
2024-08-30T19:20:36.5993926Z Progress (1): 306 kB    
2024-08-30T19:20:36.5994344Z                     
2024-08-30T19:20:36.5996153Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/3.1.2/maven-surefire-common-3.1.2.jar (306 kB at 28 MB/s)
2024-08-30T19:20:36.5998858Z #24 15.88 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/3.1.2/surefire-api-3.1.2.jar
2024-08-30T19:20:36.6000265Z #24 15.88 Progress (1): 16/171 kB
2024-08-30T19:20:36.6000748Z Progress (1): 33/171 kB
2024-08-30T19:20:36.6001193Z Progress (1): 49/171 kB
2024-08-30T19:20:36.6001600Z Progress (1): 64/171 kB
2024-08-30T19:20:36.6002038Z Progress (1): 80/171 kB
2024-08-30T19:20:36.6002451Z Progress (1): 97/171 kB
2024-08-30T19:20:36.6002857Z Progress (1): 113/171 kB
2024-08-30T19:20:36.6003311Z Progress (1): 130/171 kB
2024-08-30T19:20:36.6003716Z                         
2024-08-30T19:20:36.6005303Z Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-logger-api/3.1.2/surefire-logger-api-3.1.2.jar
2024-08-30T19:20:36.6006782Z #24 15.88 Progress (1): 146/171 kB
2024-08-30T19:20:36.6007284Z Progress (1): 162/171 kB
2024-08-30T19:20:36.6007706Z Progress (1): 171 kB    
2024-08-30T19:20:36.6008112Z                     
2024-08-30T19:20:36.6009705Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/3.1.2/surefire-api-3.1.2.jar (171 kB at 17 MB/s)
2024-08-30T19:20:36.6012749Z #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-api/3.1.2/surefire-extensions-api-3.1.2.jar
2024-08-30T19:20:36.6014351Z #24 15.89 Progress (1): 14 kB
2024-08-30T19:20:36.6014807Z                    
2024-08-30T19:20:36.6016536Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-logger-api/3.1.2/surefire-logger-api-3.1.2.jar (14 kB at 1.0 MB/s)
2024-08-30T19:20:36.6018151Z #24 15.89 Progress (1): 16/26 kB
2024-08-30T19:20:36.6018936Z Progress (1): 26 kB   
2024-08-30T19:20:36.6019373Z                    
2024-08-30T19:20:36.6021151Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-api/3.1.2/surefire-extensions-api-3.1.2.jar (26 kB at 2.9 MB/s)
2024-08-30T19:20:36.6023986Z #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/3.1.2/surefire-booter-3.1.2.jar
2024-08-30T19:20:36.6026612Z #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.jar
2024-08-30T19:20:36.6029383Z #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-spi/3.1.2/surefire-extensions-spi-3.1.2.jar
2024-08-30T19:20:36.6032393Z #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.1.1/maven-common-artifact-filters-3.1.1.jar
2024-08-30T19:20:36.6035136Z #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.jar
2024-08-30T19:20:36.6036404Z #24 15.89 Progress (1): 16/118 kB
2024-08-30T19:20:36.6036887Z Progress (1): 32/118 kB
2024-08-30T19:20:36.6037296Z Progress (1): 49/118 kB
2024-08-30T19:20:36.6037685Z Progress (1): 65/118 kB
2024-08-30T19:20:36.6038058Z Progress (1): 81/118 kB
2024-08-30T19:20:36.6038433Z Progress (1): 98/118 kB
2024-08-30T19:20:36.6038824Z Progress (1): 114/118 kB
2024-08-30T19:20:36.6039253Z Progress (1): 118 kB    
2024-08-30T19:20:36.6040048Z                     
2024-08-30T19:20:36.6041771Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/3.1.2/surefire-booter-3.1.2.jar (118 kB at 9.0 MB/s)
2024-08-30T19:20:36.6044023Z #24 15.90 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.12.0/commons-io-2.12.0.jar
2024-08-30T19:20:36.6045146Z #24 15.90 Progress (1): 16/146 kB
2024-08-30T19:20:36.6045645Z Progress (2): 16/146 kB | 16/61 kB
2024-08-30T19:20:36.6046153Z Progress (2): 33/146 kB | 16/61 kB
2024-08-30T19:20:36.6046639Z Progress (2): 33/146 kB | 32/61 kB
2024-08-30T19:20:36.6047145Z Progress (2): 49/146 kB | 32/61 kB
2024-08-30T19:20:36.6047658Z Progress (2): 49/146 kB | 49/61 kB
2024-08-30T19:20:36.6048172Z Progress (2): 64/146 kB | 49/61 kB
2024-08-30T19:20:36.6048704Z Progress (2): 64/146 kB | 61 kB   
2024-08-30T19:20:36.6049220Z Progress (2): 80/146 kB | 61 kB
2024-08-30T19:20:36.6049690Z Progress (2): 97/146 kB | 61 kB
2024-08-30T19:20:36.6050209Z Progress (2): 113/146 kB | 61 kB
2024-08-30T19:20:36.6050706Z                                 
2024-08-30T19:20:36.6060761Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.1.1/maven-common-artifact-filters-3.1.1.jar (61 kB at 4.7 MB/s)
2024-08-30T19:20:36.6065021Z #24 15.90 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-shared-utils/3.1.2/surefire-shared-utils-3.1.2.jar
2024-08-30T19:20:36.6067085Z #24 15.91 Progress (1): 129/146 kB
2024-08-30T19:20:36.6067891Z Progress (1): 146/146 kB
2024-08-30T19:20:36.6068552Z Progress (1): 146 kB    
2024-08-30T19:20:36.6069209Z                     
2024-08-30T19:20:36.6071431Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.jar (146 kB at 9.7 MB/s)
2024-08-30T19:20:36.6073691Z #24 15.91 Progress (1): 16/136 kB
2024-08-30T19:20:36.6074491Z Progress (1): 33/136 kB
2024-08-30T19:20:36.6074966Z Progress (1): 49/136 kB
2024-08-30T19:20:36.6075658Z Progress (1): 62/136 kB
2024-08-30T19:20:36.6076372Z Progress (2): 62/136 kB | 8.2 kB
2024-08-30T19:20:36.6077172Z                                 
2024-08-30T19:20:36.6080402Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-spi/3.1.2/surefire-extensions-spi-3.1.2.jar (8.2 kB at 409 kB/s)
2024-08-30T19:20:36.6082630Z #24 15.91 Progress (1): 78/136 kB
2024-08-30T19:20:36.6083376Z Progress (1): 95/136 kB
2024-08-30T19:20:36.6084135Z Progress (1): 111/136 kB
2024-08-30T19:20:36.6084866Z Progress (1): 128/136 kB
2024-08-30T19:20:36.6085585Z Progress (1): 136 kB    
2024-08-30T19:20:36.6086071Z Progress (2): 136 kB | 0/2.3 MB
2024-08-30T19:20:36.6086828Z                                
2024-08-30T19:20:36.6089337Z Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.jar (136 kB at 6.2 MB/s)
2024-08-30T19:20:36.6092087Z #24 15.91 Progress (1): 0/2.3 MB
2024-08-30T19:20:36.6092592Z Progress (1): 0/2.3 MB
2024-08-30T19:20:36.6093049Z Progress (1): 0.1/2.3 MB
2024-08-30T19:20:36.6093513Z Progress (2): 0.1/2.3 MB | 16/474 kB
2024-08-30T19:20:36.6094085Z Progress (2): 0.1/2.3 MB | 33/474 kB
2024-08-30T19:20:36.6094734Z Progress (2): 0.1/2.3 MB | 49/474 kB
2024-08-30T19:20:36.6095309Z Progress (2): 0.1/2.3 MB | 49/474 kB
2024-08-30T19:20:36.6095868Z Progress (2): 0.1/2.3 MB | 65/474 kB
2024-08-30T19:20:36.6096439Z Progress (2): 0.1/2.3 MB | 81/474 kB
2024-08-30T19:20:36.6097016Z Progress (2): 0.1/2.3 MB | 81/474 kB
2024-08-30T19:20:36.6097597Z Progress (2): 0.1/2.3 MB | 98/474 kB
2024-08-30T19:20:36.6098153Z Progress (2): 0.1/2.3 MB | 98/474 kB
2024-08-30T19:20:36.6098693Z Progress (2): 0.1/2.3 MB | 114/474 kB
2024-08-30T19:20:36.6099227Z Progress (2): 0.1/2.3 MB | 114/474 kB
2024-08-30T19:20:36.6099710Z Progress (2): 0.1/2.3 MB | 131/474 kB
2024-08-30T19:20:36.6100199Z Progress (2): 0.1/2.3 MB | 147/474 kB
2024-08-30T19:20:36.6101110Z Progress (2): 0.1/2.3 MB | 163/474 kB
2024-08-30T19:20:36.6101605Z Progress (2): 0.1/2.3 MB | 163/474 kB
2024-08-30T19:20:36.6102099Z Progress (2): 0.1/2.3 MB | 180/474 kB
2024-08-30T19:20:36.6102606Z Progress (2): 0.1/2.3 MB | 196/474 kB
2024-08-30T19:20:36.6103123Z Progress (2): 0.1/2.3 MB | 212/474 kB
2024-08-30T19:20:36.6103701Z Progress (2): 0.2/2.3 MB | 212/474 kB
2024-08-30T19:20:36.6104270Z Progress (2): 0.2/2.3 MB | 229/474 kB
2024-08-30T19:20:36.6104829Z Progress (2): 0.2/2.3 MB | 229/474 kB
2024-08-30T19:20:36.6105370Z Progress (2): 0.2/2.3 MB | 245/474 kB
2024-08-30T19:20:36.6105926Z Progress (2): 0.2/2.3 MB | 262/474 kB
2024-08-30T19:20:36.6106499Z Progress (2): 0.2/2.3 MB | 262/474 kB
2024-08-30T19:20:36.6107036Z Progress (2): 0.2/2.3 MB | 278/474 kB
2024-08-30T19:20:36.6107546Z Progress (2): 0.2/2.3 MB | 278/474 kB
2024-08-30T19:20:36.6108037Z Progress (2): 0.2/2.3 MB | 294/474 kB
2024-08-30T19:20:36.6108545Z Progress (2): 0.2/2.3 MB | 311/474 kB
2024-08-30T19:20:36.6109116Z Progress (2): 0.2/2.3 MB | 327/474 kB
2024-08-30T19:20:36.6109629Z Progress (2): 0.2/2.3 MB | 327/474 kB
2024-08-30T19:20:36.6110133Z Progress (2): 0.2/2.3 MB | 344/474 kB
2024-08-30T19:20:36.6110696Z Progress (2): 0.2/2.3 MB | 344/474 kB
2024-08-30T19:20:36.6111218Z Progress (2): 0.2/2.3 MB | 360/474 kB
2024-08-30T19:20:36.6111759Z Progress (2): 0.2/2.3 MB | 376/474 kB
2024-08-30T19:20:36.6112288Z Progress (2): 0.3/2.3 MB | 376/474 kB
2024-08-30T19:20:36.6112814Z Progress (2): 0.3/2.3 MB | 393/474 kB
2024-08-30T19:20:36.6113327Z Progress (2): 0.3/2.3 MB | 409/474 kB
2024-08-30T19:20:36.6113865Z Progress (2): 0.3/2.3 MB | 409/474 kB
2024-08-30T19:20:36.6114450Z Progress (2): 0.3/2.3 MB | 425/474 kB
2024-08-30T19:20:36.6115000Z Progress (2): 0.3/2.3 MB | 425/474 kB
2024-08-30T19:20:36.6115550Z Progress (2): 0.3/2.3 MB | 442/474 kB
2024-08-30T19:20:36.6116093Z Progress (2): 0.3/2.3 MB | 454/474 kB
2024-08-30T19:20:36.6116655Z Progress (2): 0.3/2.3 MB | 454/474 kB
2024-08-30T19:20:36.6117221Z Progress (2): 0.3/2.3 MB | 471/474 kB
2024-08-30T19:20:36.6117778Z Progress (2): 0.3/2.3 MB | 474 kB    
2024-08-30T19:20:36.6118336Z Progress (2): 0.3/2.3 MB | 474 kB
2024-08-30T19:20:36.6118863Z Progress (2): 0.3/2.3 MB | 474 kB
2024-08-30T19:20:36.6119385Z                                  
2024-08-30T19:20:36.6121356Z Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.12.0/commons-io-2.12.0.jar (474 kB at 18 MB/s)
2024-08-30T19:20:36.6122790Z #24 15.92 Progress (1): 0.4/2.3 MB
2024-08-30T19:20:36.6123327Z Progress (1): 0.4/2.3 MB
2024-08-30T19:20:36.6123797Z Progress (1): 0.4/2.3 MB
2024-08-30T19:20:36.6124225Z Progress (1): 0.4/2.3 MB
2024-08-30T19:20:36.6124677Z Progress (1): 0.4/2.3 MB
2024-08-30T19:20:36.6125109Z Progress (1): 0.4/2.3 MB
2024-08-30T19:20:36.6125539Z Progress (1): 0.5/2.3 MB
2024-08-30T19:20:36.6125984Z Progress (1): 0.5/2.3 MB
2024-08-30T19:20:36.6126431Z Progress (1): 0.5/2.3 MB
2024-08-30T19:20:36.6126882Z Progress (1): 0.5/2.3 MB
2024-08-30T19:20:36.6127338Z Progress (1): 0.5/2.3 MB
2024-08-30T19:20:36.6127787Z Progress (1): 0.5/2.3 MB
2024-08-30T19:20:36.6128228Z Progress (1): 0.6/2.3 MB
2024-08-30T19:20:36.6128682Z Progress (1): 0.6/2.3 MB
2024-08-30T19:20:36.6129113Z Progress (1): 0.6/2.3 MB
2024-08-30T19:20:36.6129519Z Progress (1): 0.6/2.3 MB
2024-08-30T19:20:36.6129957Z Progress (1): 0.6/2.3 MB
2024-08-30T19:20:36.6130416Z Progress (1): 0.6/2.3 MB
2024-08-30T19:20:36.6130866Z Progress (1): 0.7/2.3 MB
2024-08-30T19:20:36.6131609Z Progress (1): 0.7/2.3 MB
2024-08-30T19:20:36.6132066Z Progress (1): 0.7/2.3 MB
2024-08-30T19:20:36.6132511Z Progress (1): 0.7/2.3 MB
2024-08-30T19:20:36.6132960Z Progress (1): 0.7/2.3 MB
2024-08-30T19:20:36.6133409Z Progress (1): 0.7/2.3 MB
2024-08-30T19:20:36.6133872Z Progress (1): 0.8/2.3 MB
2024-08-30T19:20:36.6134322Z Progress (1): 0.8/2.3 MB
2024-08-30T19:20:36.6134756Z Progress (1): 0.8/2.3 MB
2024-08-30T19:20:36.6135214Z Progress (1): 0.8/2.3 MB
2024-08-30T19:20:36.6135657Z Progress (1): 0.8/2.3 MB
2024-08-30T19:20:36.6136460Z Progress (1): 0.8/2.3 MB
2024-08-30T19:20:36.6136913Z Progress (1): 0.9/2.3 MB
2024-08-30T19:20:36.6137355Z Progress (1): 0.9/2.3 MB
2024-08-30T19:20:36.6137790Z Progress (1): 0.9/2.3 MB
2024-08-30T19:20:36.6138243Z Progress (1): 0.9/2.3 MB
2024-08-30T19:20:36.6138706Z Progress (1): 0.9/2.3 MB
2024-08-30T19:20:36.6139140Z Progress (1): 0.9/2.3 MB
2024-08-30T19:20:36.6139567Z Progress (1): 0.9/2.3 MB
2024-08-30T19:20:36.6140037Z Progress (1): 1.0/2.3 MB
2024-08-30T19:20:36.6140506Z Progress (1): 1.0/2.3 MB
2024-08-30T19:20:36.6140978Z Progress (1): 1.0/2.3 MB
2024-08-30T19:20:36.6141443Z Progress (1): 1.0/2.3 MB
2024-08-30T19:20:36.6141905Z Progress (1): 1.0/2.3 MB
2024-08-30T19:20:36.6142383Z Progress (1): 1.0/2.3 MB
2024-08-30T19:20:36.6142842Z Progress (1): 1.1/2.3 MB
2024-08-30T19:20:36.6143913Z Progress (1): 1.1/2.3 MB
2024-08-30T19:20:36.6144433Z Progress (1): 1.1/2.3 MB
2024-08-30T19:20:36.6144906Z Progress (1): 1.1/2.3 MB
2024-08-30T19:20:36.6145357Z Progress (1): 1.1/2.3 MB
2024-08-30T19:20:36.6145821Z Progress (1): 1.1/2.3 MB
2024-08-30T19:20:36.6146289Z Progress (1): 1.2/2.3 MB
2024-08-30T19:20:36.6146745Z Progress (1): 1.2/2.3 MB
2024-08-30T19:20:36.6147184Z Progress (1): 1.2/2.3 MB
2024-08-30T19:20:36.6147604Z Progress (1): 1.2/2.3 MB
2024-08-30T19:20:36.6148059Z Progress (1): 1.2/2.3 MB
2024-08-30T19:20:36.6148530Z Progress (1): 1.2/2.3 MB
2024-08-30T19:20:36.6148992Z Progress (1): 1.3/2.3 MB
2024-08-30T19:20:36.6149418Z Progress (1): 1.3/2.3 MB
2024-08-30T19:20:36.6149822Z Progress (1): 1.3/2.3 MB
2024-08-30T19:20:36.6150196Z Progress (1): 1.3/2.3 MB
2024-08-30T19:20:36.6150604Z Progress (1): 1.3/2.3 MB
2024-08-30T19:20:36.6151012Z Progress (1): 1.3/2.3 MB
2024-08-30T19:20:36.6151418Z Progress (1): 1.4/2.3 MB
2024-08-30T19:20:36.6151826Z Progress (1): 1.4/2.3 MB
2024-08-30T19:20:36.6152264Z Progress (1): 1.4/2.3 MB
2024-08-30T19:20:36.6152699Z Progress (1): 1.4/2.3 MB
2024-08-30T19:20:36.6153138Z Progress (1): 1.4/2.3 MB
2024-08-30T19:20:36.6153574Z Progress (1): 1.4/2.3 MB
2024-08-30T19:20:36.6154015Z Progress (1): 1.5/2.3 MB
2024-08-30T19:20:36.6154452Z Progress (1): 1.5/2.3 MB
2024-08-30T19:20:36.6154870Z Progress (1): 1.5/2.3 MB
2024-08-30T19:20:36.6155263Z Progress (1): 1.5/2.3 MB
2024-08-30T19:20:36.6155681Z Progress (1): 1.5/2.3 MB
2024-08-30T19:20:36.6156072Z Progress (1): 1.5/2.3 MB
2024-08-30T19:20:36.6156420Z Progress (1): 1.6/2.3 MB
2024-08-30T19:20:36.6157238Z Progress (1): 1.6/2.3 MB
2024-08-30T19:20:36.6954335Z Progress (1): 1.6/2.3 MB
2024-08-30T19:20:36.6954734Z Progress (1): 1.6/2.3 MB
2024-08-30T19:20:36.6955019Z Progress (1): 1.6/2.3 MB
2024-08-30T19:20:36.6955291Z Progress (1): 1.6/2.3 MB
2024-08-30T19:20:36.6955559Z Progress (1): 1.7/2.3 MB
2024-08-30T19:20:36.6955816Z Progress (1): 1.7/2.3 MB
2024-08-30T19:20:36.6956077Z Progress (1): 1.7/2.3 MB
2024-08-30T19:20:36.6956331Z Progress (1): 1.7/2.3 MB
2024-08-30T19:20:36.6956579Z Progress (1): 1.7/2.3 MB
2024-08-30T19:20:36.6956841Z Progress (1): 1.7/2.3 MB
2024-08-30T19:20:36.6957084Z Progress (1): 1.8/2.3 MB
2024-08-30T19:20:36.6957352Z Progress (1): 1.8/2.3 MB
2024-08-30T19:20:36.6957603Z Progress (1): 1.8/2.3 MB
2024-08-30T19:20:36.6957844Z Progress (1): 1.8/2.3 MB
2024-08-30T19:20:36.6958092Z Progress (1): 1.8/2.3 MB
2024-08-30T19:20:36.6958344Z Progress (1): 1.8/2.3 MB
2024-08-30T19:20:36.6958590Z Progress (1): 1.9/2.3 MB
2024-08-30T19:20:36.6958839Z Progress (1): 1.9/2.3 MB
2024-08-30T19:20:36.6959097Z Progress (1): 1.9/2.3 MB
2024-08-30T19:20:36.6959341Z Progress (1): 1.9/2.3 MB
2024-08-30T19:20:36.6959591Z Progress (1): 1.9/2.3 MB
2024-08-30T19:20:36.6959837Z Progress (1): 1.9/2.3 MB
2024-08-30T19:20:36.6960077Z Progress (1): 1.9/2.3 MB
2024-08-30T19:20:36.6960326Z Progress (1): 2.0/2.3 MB
2024-08-30T19:20:36.6960574Z Progress (1): 2.0/2.3 MB
2024-08-30T19:20:36.6960815Z Progress (1): 2.0/2.3 MB
2024-08-30T19:20:36.6961070Z Progress (1): 2.0/2.3 MB
2024-08-30T19:20:36.6961318Z Progress (1): 2.0/2.3 MB
2024-08-30T19:20:36.6961557Z Progress (1): 2.0/2.3 MB
2024-08-30T19:20:36.6961804Z Progress (1): 2.1/2.3 MB
2024-08-30T19:20:36.6962498Z Progress (1): 2.1/2.3 MB
2024-08-30T19:20:36.6962748Z Progress (1): 2.1/2.3 MB
2024-08-30T19:20:36.6963000Z Progress (1): 2.1/2.3 MB
2024-08-30T19:20:36.6963251Z Progress (1): 2.1/2.3 MB
2024-08-30T19:20:36.6963496Z Progress (1): 2.1/2.3 MB
2024-08-30T19:20:36.6963746Z Progress (1): 2.2/2.3 MB
2024-08-30T19:20:36.6963993Z Progress (1): 2.2/2.3 MB
2024-08-30T19:20:36.6964239Z Progress (1): 2.2/2.3 MB
2024-08-30T19:20:36.6964496Z Progress (1): 2.2/2.3 MB
2024-08-30T19:20:36.6964743Z Progress (1): 2.2/2.3 MB
2024-08-30T19:20:36.6964986Z Progress (1): 2.2/2.3 MB
2024-08-30T19:20:36.6965236Z Progress (1): 2.3/2.3 MB
2024-08-30T19:20:36.6965480Z Progress (1): 2.3/2.3 MB
2024-08-30T19:20:36.6965728Z Progress (1): 2.3/2.3 MB
2024-08-30T19:20:36.6965991Z Progress (1): 2.3/2.3 MB
2024-08-30T19:20:36.6966246Z Progress (1): 2.3/2.3 MB
2024-08-30T19:20:36.6966493Z Progress (1): 2.3/2.3 MB
2024-08-30T19:20:36.6966745Z Progress (1): 2.3/2.3 MB
2024-08-30T19:20:36.6966996Z Progress (1): 2.3 MB    
2024-08-30T19:20:36.6967240Z                     
2024-08-30T19:20:36.6968502Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-shared-utils/3.1.2/surefire-shared-utils-3.1.2.jar (2.3 MB at 57 MB/s)
2024-08-30T19:20:36.7954400Z #24 16.02 [INFO] Tests are skipped.
2024-08-30T19:20:36.7955235Z #24 16.03 [INFO] 
2024-08-30T19:20:36.7956199Z #24 16.03 [INFO] --- jar:3.3.0:jar (default-jar) @ backend ---
2024-08-30T19:20:36.7958098Z #24 16.03 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.pom
2024-08-30T19:20:36.7959647Z #24 16.03 Progress (1): 4.5 kB
2024-08-30T19:20:36.7960284Z                     
2024-08-30T19:20:36.7962005Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.pom (4.5 kB at 897 kB/s)
2024-08-30T19:20:36.7964962Z #24 16.03 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/36/maven-shared-components-36.pom
2024-08-30T19:20:36.7966588Z #24 16.04 Progress (1): 4.9 kB
2024-08-30T19:20:36.7967148Z                     
2024-08-30T19:20:36.7969054Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/36/maven-shared-components-36.pom (4.9 kB at 1.2 MB/s)
2024-08-30T19:20:36.7972612Z #24 16.04 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/36/maven-parent-36.pom
2024-08-30T19:20:36.7974306Z #24 16.04 Progress (1): 16/45 kB
2024-08-30T19:20:36.7975056Z Progress (1): 32/45 kB
2024-08-30T19:20:36.7975690Z Progress (1): 45 kB   
2024-08-30T19:20:36.7976326Z                    
2024-08-30T19:20:36.7978033Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/36/maven-parent-36.pom (45 kB at 9.1 MB/s)
2024-08-30T19:20:36.7980431Z #24 16.05 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/26/apache-26.pom
2024-08-30T19:20:36.7981821Z #24 16.05 Progress (1): 16/21 kB
2024-08-30T19:20:36.7982908Z Progress (1): 21 kB   
2024-08-30T19:20:36.7983559Z                    
2024-08-30T19:20:36.7985133Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/26/apache-26.pom (21 kB at 3.4 MB/s)
2024-08-30T19:20:36.7987706Z #24 16.06 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.pom
2024-08-30T19:20:36.7989349Z #24 16.06 Progress (1): 5.2 kB
2024-08-30T19:20:36.7990273Z                     
2024-08-30T19:20:36.7992928Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.pom (5.2 kB at 1.3 MB/s)
2024-08-30T19:20:36.7995707Z #24 16.06 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/3.6.0/maven-archiver-3.6.0.pom
2024-08-30T19:20:36.7997244Z #24 16.07 Progress (1): 3.9 kB
2024-08-30T19:20:36.7998297Z                     
2024-08-30T19:20:36.8000035Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/3.6.0/maven-archiver-3.6.0.pom (3.9 kB at 784 kB/s)
2024-08-30T19:20:36.8002564Z #24 16.07 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/3.4.0/plexus-io-3.4.0.pom
2024-08-30T19:20:36.8004104Z #24 16.07 Progress (1): 6.0 kB
2024-08-30T19:20:36.8004728Z                     
2024-08-30T19:20:36.8006310Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/3.4.0/plexus-io-3.4.0.pom (6.0 kB at 1.5 MB/s)
2024-08-30T19:20:36.8008853Z #24 16.08 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/4.4.0/plexus-archiver-4.4.0.pom
2024-08-30T19:20:36.8010422Z #24 16.08 Progress (1): 6.3 kB
2024-08-30T19:20:36.8056583Z                     
2024-08-30T19:20:36.8058641Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/4.4.0/plexus-archiver-4.4.0.pom (6.3 kB at 1.6 MB/s)
2024-08-30T19:20:36.8060994Z #24 16.08 Downloading from central: https://repo.maven.apache.org/maven2/org/iq80/snappy/snappy/0.4/snappy-0.4.pom
2024-08-30T19:20:36.8062191Z #24 16.09 Progress (1): 15 kB
2024-08-30T19:20:36.8062678Z                    
2024-08-30T19:20:36.8064015Z Downloaded from central: https://repo.maven.apache.org/maven2/org/iq80/snappy/snappy/0.4/snappy-0.4.pom (15 kB at 3.6 MB/s)
2024-08-30T19:20:36.8065963Z #24 16.09 Downloading from central: https://repo.maven.apache.org/maven2/org/tukaani/xz/1.9/xz-1.9.pom
2024-08-30T19:20:36.8067018Z #24 16.10 Progress (1): 2.0 kB
2024-08-30T19:20:36.8067495Z                     
2024-08-30T19:20:36.8068693Z Downloaded from central: https://repo.maven.apache.org/maven2/org/tukaani/xz/1.9/xz-1.9.pom (2.0 kB at 409 kB/s)
2024-08-30T19:20:36.8070827Z #24 16.10 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.pom
2024-08-30T19:20:36.8072186Z #24 16.10 Progress (1): 8.2 kB
2024-08-30T19:20:36.8072649Z                     
2024-08-30T19:20:36.8074197Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.pom (8.2 kB at 2.1 MB/s)
2024-08-30T19:20:36.8076837Z #24 16.11 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/8/plexus-8.pom
2024-08-30T19:20:36.8078045Z #24 16.11 Progress (1): 16/25 kB
2024-08-30T19:20:36.8078571Z Progress (1): 25 kB   
2024-08-30T19:20:36.8078996Z                    
2024-08-30T19:20:36.8080329Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/8/plexus-8.pom (25 kB at 5.1 MB/s)
2024-08-30T19:20:36.8082659Z #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.jar
2024-08-30T19:20:36.8084047Z #24 16.12 Progress (1): 16/36 kB
2024-08-30T19:20:36.8084543Z Progress (1): 32/36 kB
2024-08-30T19:20:36.8084962Z Progress (1): 36 kB   
2024-08-30T19:20:36.8085354Z                    
2024-08-30T19:20:36.8086928Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.jar (36 kB at 7.3 MB/s)
2024-08-30T19:20:36.8089404Z #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/3.6.0/maven-archiver-3.6.0.jar
2024-08-30T19:20:36.8091834Z #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/3.4.0/plexus-io-3.4.0.jar
2024-08-30T19:20:36.8093773Z #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/tukaani/xz/1.9/xz-1.9.jar
2024-08-30T19:20:36.9688378Z #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/4.4.0/plexus-archiver-4.4.0.jar
2024-08-30T19:20:36.9690703Z #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/iq80/snappy/snappy/0.4/snappy-0.4.jar
2024-08-30T19:20:36.9692933Z #24 16.13 Progress (1): 16/26 kB
2024-08-30T19:20:36.9693508Z Progress (2): 16/26 kB | 16/79 kB
2024-08-30T19:20:36.9694094Z Progress (2): 26 kB | 16/79 kB   
2024-08-30T19:20:36.9694663Z Progress (2): 26 kB | 32/79 kB
2024-08-30T19:20:36.9695213Z Progress (2): 26 kB | 49/79 kB
2024-08-30T19:20:36.9695746Z                               
2024-08-30T19:20:36.9697438Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/3.6.0/maven-archiver-3.6.0.jar (26 kB at 3.7 MB/s)
2024-08-30T19:20:36.9699974Z #24 16.13 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.jar
2024-08-30T19:20:36.9701385Z #24 16.13 Progress (1): 65/79 kB
2024-08-30T19:20:36.9701948Z Progress (1): 79 kB   
2024-08-30T19:20:36.9702393Z                    
2024-08-30T19:20:36.9703926Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/3.4.0/plexus-io-3.4.0.jar (79 kB at 9.9 MB/s)
2024-08-30T19:20:36.9705388Z #24 16.13 Progress (1): 0.1/267 kB
2024-08-30T19:20:36.9705969Z Progress (2): 0.1/267 kB | 16/211 kB
2024-08-30T19:20:36.9706559Z Progress (2): 16/267 kB | 16/211 kB 
2024-08-30T19:20:36.9707140Z Progress (2): 16/267 kB | 33/211 kB
2024-08-30T19:20:36.9707716Z Progress (2): 33/267 kB | 33/211 kB
2024-08-30T19:20:36.9708289Z Progress (2): 33/267 kB | 49/211 kB
2024-08-30T19:20:36.9708855Z Progress (2): 33/267 kB | 61/211 kB
2024-08-30T19:20:36.9709417Z Progress (2): 33/267 kB | 78/211 kB
2024-08-30T19:20:36.9709991Z Progress (2): 49/267 kB | 78/211 kB
2024-08-30T19:20:36.9710552Z Progress (2): 49/267 kB | 94/211 kB
2024-08-30T19:20:36.9711115Z Progress (2): 66/267 kB | 94/211 kB
2024-08-30T19:20:36.9711681Z Progress (2): 66/267 kB | 111/211 kB
2024-08-30T19:20:36.9712247Z Progress (2): 82/267 kB | 111/211 kB
2024-08-30T19:20:36.9712822Z Progress (2): 82/267 kB | 127/211 kB
2024-08-30T19:20:36.9713424Z Progress (2): 98/267 kB | 127/211 kB
2024-08-30T19:20:36.9714021Z Progress (2): 98/267 kB | 143/211 kB
2024-08-30T19:20:36.9714612Z Progress (2): 115/267 kB | 143/211 kB
2024-08-30T19:20:36.9715215Z Progress (2): 115/267 kB | 160/211 kB
2024-08-30T19:20:36.9715852Z Progress (3): 115/267 kB | 160/211 kB | 16/58 kB
2024-08-30T19:20:36.9716567Z Progress (3): 115/267 kB | 160/211 kB | 33/58 kB
2024-08-30T19:20:36.9717650Z Progress (3): 115/267 kB | 160/211 kB | 49/58 kB
2024-08-30T19:20:36.9718436Z Progress (3): 115/267 kB | 160/211 kB | 58 kB   
2024-08-30T19:20:36.9719146Z                                              
2024-08-30T19:20:36.9720728Z Downloaded from central: https://repo.maven.apache.org/maven2/org/iq80/snappy/snappy/0.4/snappy-0.4.jar (58 kB at 3.9 MB/s)
2024-08-30T19:20:36.9722139Z #24 16.14 Progress (2): 131/267 kB | 160/211 kB
2024-08-30T19:20:36.9722824Z Progress (2): 131/267 kB | 176/211 kB
2024-08-30T19:20:36.9723420Z Progress (2): 148/267 kB | 176/211 kB
2024-08-30T19:20:36.9723990Z Progress (2): 148/267 kB | 193/211 kB
2024-08-30T19:20:36.9724582Z Progress (2): 164/267 kB | 193/211 kB
2024-08-30T19:20:36.9725166Z Progress (2): 164/267 kB | 209/211 kB
2024-08-30T19:20:36.9725757Z Progress (2): 164/267 kB | 211 kB    
2024-08-30T19:20:36.9726338Z Progress (2): 180/267 kB | 211 kB
2024-08-30T19:20:36.9726885Z Progress (2): 197/267 kB | 211 kB
2024-08-30T19:20:36.9727442Z Progress (2): 213/267 kB | 211 kB
2024-08-30T19:20:36.9727962Z Progress (2): 229/267 kB | 211 kB
2024-08-30T19:20:36.9728444Z                                  
2024-08-30T19:20:36.9730184Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/4.4.0/plexus-archiver-4.4.0.jar (211 kB at 12 MB/s)
2024-08-30T19:20:36.9732485Z #24 16.14 Progress (1): 246/267 kB
2024-08-30T19:20:36.9733047Z Progress (1): 262/267 kB
2024-08-30T19:20:36.9733519Z Progress (1): 267 kB    
2024-08-30T19:20:36.9733975Z                     
2024-08-30T19:20:36.9735647Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.jar (267 kB at 16 MB/s)
2024-08-30T19:20:36.9737454Z #24 16.14 Progress (1): 16/116 kB
2024-08-30T19:20:36.9737986Z Progress (1): 32/116 kB
2024-08-30T19:20:36.9738452Z Progress (1): 49/116 kB
2024-08-30T19:20:36.9738903Z Progress (1): 65/116 kB
2024-08-30T19:20:36.9739341Z Progress (1): 81/116 kB
2024-08-30T19:20:36.9739801Z Progress (1): 98/116 kB
2024-08-30T19:20:36.9740251Z Progress (1): 114/116 kB
2024-08-30T19:20:36.9740721Z Progress (1): 116 kB    
2024-08-30T19:20:36.9741162Z                     
2024-08-30T19:20:36.9742401Z Downloaded from central: https://repo.maven.apache.org/maven2/org/tukaani/xz/1.9/xz-1.9.jar (116 kB at 5.0 MB/s)
2024-08-30T19:20:37.0951527Z #24 16.32 [INFO] Building jar: /backend/target/backend-0.0.1-SNAPSHOT.jar
2024-08-30T19:20:37.0952402Z #24 16.41 [INFO] 
2024-08-30T19:20:37.0953190Z #24 16.41 [INFO] --- spring-boot:3.2.2:repackage (repackage) @ backend ---
2024-08-30T19:20:37.0955406Z #24 16.41 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-buildpack-platform/3.2.2/spring-boot-buildpack-platform-3.2.2.pom
2024-08-30T19:20:37.0957179Z #24 16.42 Progress (1): 3.2 kB
2024-08-30T19:20:37.0957660Z                     
2024-08-30T19:20:37.0959627Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-buildpack-platform/3.2.2/spring-boot-buildpack-platform-3.2.2.pom (3.2 kB at 402 kB/s)
2024-08-30T19:20:37.1953629Z #24 16.42 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.pom
2024-08-30T19:20:37.1955175Z #24 16.43 Progress (1): 16/19 kB
2024-08-30T19:20:37.1955675Z Progress (1): 19 kB   
2024-08-30T19:20:37.1956071Z                    
2024-08-30T19:20:37.1957730Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.pom (19 kB at 4.9 MB/s)
2024-08-30T19:20:37.1960180Z #24 16.43 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.14.2/jackson-base-2.14.2.pom
2024-08-30T19:20:37.1961414Z #24 16.43 Progress (1): 10 kB
2024-08-30T19:20:37.1961844Z                    
2024-08-30T19:20:37.1963772Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.14.2/jackson-base-2.14.2.pom (10 kB at 2.0 MB/s)
2024-08-30T19:20:37.1966147Z #24 16.44 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.14.2/jackson-bom-2.14.2.pom
2024-08-30T19:20:37.1967476Z #24 16.44 Progress (1): 16/17 kB
2024-08-30T19:20:37.1967966Z Progress (1): 17 kB   
2024-08-30T19:20:37.1968369Z                    
2024-08-30T19:20:37.1969808Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.14.2/jackson-bom-2.14.2.pom (17 kB at 4.4 MB/s)
2024-08-30T19:20:37.1972339Z #24 16.44 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.14/jackson-parent-2.14.pom
2024-08-30T19:20:37.1973556Z #24 16.45 Progress (1): 7.7 kB
2024-08-30T19:20:37.1973851Z                     
2024-08-30T19:20:37.1974774Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.14/jackson-parent-2.14.pom (7.7 kB at 1.9 MB/s)
2024-08-30T19:20:37.1976061Z #24 16.45 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/48/oss-parent-48.pom
2024-08-30T19:20:37.1976736Z #24 16.45 Progress (1): 16/24 kB
2024-08-30T19:20:37.1977028Z Progress (1): 24 kB   
2024-08-30T19:20:37.1977276Z                    
2024-08-30T19:20:37.1978012Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/48/oss-parent-48.pom (24 kB at 5.9 MB/s)
2024-08-30T19:20:37.1979389Z #24 16.45 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.14.2/jackson-annotations-2.14.2.pom
2024-08-30T19:20:37.1980563Z #24 16.46 Progress (1): 6.2 kB
2024-08-30T19:20:37.1980840Z                     
2024-08-30T19:20:37.1981840Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.14.2/jackson-annotations-2.14.2.pom (6.2 kB at 1.6 MB/s)
2024-08-30T19:20:37.1983347Z #24 16.46 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.14.2/jackson-core-2.14.2.pom
2024-08-30T19:20:37.1984127Z #24 16.47 Progress (1): 7.0 kB
2024-08-30T19:20:37.1984399Z                     
2024-08-30T19:20:37.1985287Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.14.2/jackson-core-2.14.2.pom (7.0 kB at 1.4 MB/s)
2024-08-30T19:20:37.1987312Z #24 16.47 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.14.2/jackson-module-parameter-names-2.14.2.pom
2024-08-30T19:20:37.1988328Z #24 16.47 Progress (1): 4.4 kB
2024-08-30T19:20:37.1988598Z                     
2024-08-30T19:20:37.1989710Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.14.2/jackson-module-parameter-names-2.14.2.pom (4.4 kB at 1.1 MB/s)
2024-08-30T19:20:37.1991456Z #24 16.47 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-java8/2.14.2/jackson-modules-java8-2.14.2.pom
2024-08-30T19:20:37.1992341Z #24 16.48 Progress (1): 3.1 kB
2024-08-30T19:20:37.1992613Z                     
2024-08-30T19:20:37.1993605Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-java8/2.14.2/jackson-modules-java8-2.14.2.pom (3.1 kB at 775 kB/s)
2024-08-30T19:20:37.1995925Z #24 16.48 Downloading from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna-platform/5.13.0/jna-platform-5.13.0.pom
2024-08-30T19:20:37.1997132Z #24 16.48 Progress (1): 2.3 kB
2024-08-30T19:20:37.1997587Z                     
2024-08-30T19:20:37.1999055Z Downloaded from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna-platform/5.13.0/jna-platform-5.13.0.pom (2.3 kB at 563 kB/s)
2024-08-30T19:20:37.2001810Z #24 16.49 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.pom
2024-08-30T19:20:37.2003177Z #24 16.49 Progress (1): 16/22 kB
2024-08-30T19:20:37.2003674Z Progress (1): 22 kB   
2024-08-30T19:20:37.2004091Z                    
2024-08-30T19:20:37.2005803Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.pom (22 kB at 4.4 MB/s)
2024-08-30T19:20:37.2008180Z #24 16.49 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/56/commons-parent-56.pom
2024-08-30T19:20:37.2009376Z #24 16.50 Progress (1): 16/82 kB
2024-08-30T19:20:37.2009852Z Progress (1): 33/82 kB
2024-08-30T19:20:37.2010277Z Progress (1): 49/82 kB
2024-08-30T19:20:37.2010692Z Progress (1): 66/82 kB
2024-08-30T19:20:37.2011297Z Progress (1): 82/82 kB
2024-08-30T19:20:37.2011681Z Progress (1): 82 kB   
2024-08-30T19:20:37.2012023Z                    
2024-08-30T19:20:37.2013378Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/56/commons-parent-56.pom (82 kB at 16 MB/s)
2024-08-30T19:20:37.2015724Z #24 16.50 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.0.10/spring-core-6.0.10.pom
2024-08-30T19:20:37.2016932Z #24 16.51 Progress (1): 2.0 kB
2024-08-30T19:20:37.2017362Z                     
2024-08-30T19:20:37.2018717Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.0.10/spring-core-6.0.10.pom (2.0 kB at 403 kB/s)
2024-08-30T19:20:37.2020935Z #24 16.51 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.0.10/spring-jcl-6.0.10.pom
2024-08-30T19:20:37.2022576Z #24 16.52 Progress (1): 1.8 kB
2024-08-30T19:20:37.2023031Z                     
2024-08-30T19:20:37.2024463Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.0.10/spring-jcl-6.0.10.pom (1.8 kB at 368 kB/s)
2024-08-30T19:20:37.2026558Z #24 16.52 Downloading from central: https://repo.maven.apache.org/maven2/org/tomlj/tomlj/1.0.0/tomlj-1.0.0.pom
2024-08-30T19:20:37.2027611Z #24 16.52 Progress (1): 2.8 kB
2024-08-30T19:20:37.2953680Z                     
2024-08-30T19:20:37.2955393Z Downloaded from central: https://repo.maven.apache.org/maven2/org/tomlj/tomlj/1.0.0/tomlj-1.0.0.pom (2.8 kB at 706 kB/s)
2024-08-30T19:20:37.2957711Z #24 16.52 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.7.2/antlr4-runtime-4.7.2.pom
2024-08-30T19:20:37.2959028Z #24 16.53 Progress (1): 3.6 kB
2024-08-30T19:20:37.2959504Z                     
2024-08-30T19:20:37.2960995Z Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.7.2/antlr4-runtime-4.7.2.pom (3.6 kB at 904 kB/s)
2024-08-30T19:20:37.2963342Z #24 16.53 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-master/4.7.2/antlr4-master-4.7.2.pom
2024-08-30T19:20:37.2965562Z #24 16.54 Progress (1): 4.4 kB
2024-08-30T19:20:37.2966192Z                     
2024-08-30T19:20:37.2967736Z Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-master/4.7.2/antlr4-master-4.7.2.pom (4.4 kB at 881 kB/s)
2024-08-30T19:20:37.2970081Z #24 16.54 Downloading from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.pom
2024-08-30T19:20:37.2971546Z #24 16.55 Progress (1): 4.3 kB
2024-08-30T19:20:37.2972022Z                     
2024-08-30T19:20:37.2973537Z Downloaded from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.pom (4.3 kB at 857 kB/s)
2024-08-30T19:20:37.2976276Z #24 16.55 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-loader-tools/3.2.2/spring-boot-loader-tools-3.2.2.pom
2024-08-30T19:20:37.2977951Z #24 16.56 Progress (1): 2.2 kB
2024-08-30T19:20:37.2978415Z                     
2024-08-30T19:20:37.2980718Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-loader-tools/3.2.2/spring-boot-loader-tools-3.2.2.pom (2.2 kB at 374 kB/s)
2024-08-30T19:20:37.2983955Z #24 16.56 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.3.2/maven-common-artifact-filters-3.3.2.pom
2024-08-30T19:20:37.2985714Z #24 16.56 Progress (1): 5.3 kB
2024-08-30T19:20:37.2986208Z                     
2024-08-30T19:20:37.2988167Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.3.2/maven-common-artifact-filters-3.3.2.pom (5.3 kB at 1.1 MB/s)
2024-08-30T19:20:37.2993174Z #24 16.56 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/37/maven-shared-components-37.pom
2024-08-30T19:20:37.2995440Z #24 16.57 Progress (1): 4.9 kB
2024-08-30T19:20:37.2995947Z                     
2024-08-30T19:20:37.2998446Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/37/maven-shared-components-37.pom (4.9 kB at 816 kB/s)
2024-08-30T19:20:37.3002217Z #24 16.57 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom
2024-08-30T19:20:37.3004133Z #24 16.58 Progress (1): 8.1 kB
2024-08-30T19:20:37.3004805Z                     
2024-08-30T19:20:37.3006845Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom (8.1 kB at 1.3 MB/s)
2024-08-30T19:20:37.3009997Z #24 16.58 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom
2024-08-30T19:20:37.3012593Z #24 16.58 Progress (1): 12 kB
2024-08-30T19:20:37.3013328Z                    
2024-08-30T19:20:37.3015231Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom (12 kB at 2.3 MB/s)
2024-08-30T19:20:37.3018543Z #24 16.59 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-shade-plugin/3.5.0/maven-shade-plugin-3.5.0.pom
2024-08-30T19:20:37.3020602Z #24 16.59 Progress (1): 12 kB
2024-08-30T19:20:37.3021096Z                    
2024-08-30T19:20:37.3023399Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-shade-plugin/3.5.0/maven-shade-plugin-3.5.0.pom (12 kB at 2.5 MB/s)
2024-08-30T19:20:37.3026875Z #24 16.60 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.pom
2024-08-30T19:20:37.3028576Z #24 16.60 Progress (1): 3.8 kB
2024-08-30T19:20:37.3029243Z                     
2024-08-30T19:20:37.3031091Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.pom (3.8 kB at 959 kB/s)
2024-08-30T19:20:37.3033911Z #24 16.60 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.32/slf4j-parent-1.7.32.pom
2024-08-30T19:20:37.3035399Z #24 16.60 Progress (1): 14 kB
2024-08-30T19:20:37.3035910Z                    
2024-08-30T19:20:37.3037584Z Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.32/slf4j-parent-1.7.32.pom (14 kB at 3.5 MB/s)
2024-08-30T19:20:37.3039633Z #24 16.61 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.pom
2024-08-30T19:20:37.3041260Z #24 16.61 Progress (1): 2.4 kB
2024-08-30T19:20:37.3041951Z                     
2024-08-30T19:20:37.3043474Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.pom (2.4 kB at 592 kB/s)
2024-08-30T19:20:37.3045552Z #24 16.61 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-commons/9.5/asm-commons-9.5.pom
2024-08-30T19:20:37.3047122Z #24 16.62 Progress (1): 2.8 kB
2024-08-30T19:20:37.3047893Z                     
2024-08-30T19:20:37.3049529Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-commons/9.5/asm-commons-9.5.pom (2.8 kB at 697 kB/s)
2024-08-30T19:20:37.3052381Z #24 16.62 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-tree/9.5/asm-tree-9.5.pom
2024-08-30T19:20:37.3958152Z #24 16.62 Progress (1): 2.6 kB
2024-08-30T19:20:37.3958786Z                     
2024-08-30T19:20:37.3960382Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-tree/9.5/asm-tree-9.5.pom (2.6 kB at 432 kB/s)
2024-08-30T19:20:37.3962356Z #24 16.63 Downloading from central: https://repo.maven.apache.org/maven2/org/jdom/jdom2/2.0.6.1/jdom2-2.0.6.1.pom
2024-08-30T19:20:37.3963425Z #24 16.63 Progress (1): 4.6 kB
2024-08-30T19:20:37.3963879Z                     
2024-08-30T19:20:37.3965307Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jdom/jdom2/2.0.6.1/jdom2-2.0.6.1.pom (4.6 kB at 767 kB/s)
2024-08-30T19:20:37.3967790Z #24 16.64 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/3.2.1/maven-dependency-tree-3.2.1.pom
2024-08-30T19:20:37.3969323Z #24 16.64 Progress (1): 6.2 kB
2024-08-30T19:20:37.3969812Z                     
2024-08-30T19:20:37.3971766Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/3.2.1/maven-dependency-tree-3.2.1.pom (6.2 kB at 1.2 MB/s)
2024-08-30T19:20:37.3974356Z #24 16.65 Downloading from central: https://repo.maven.apache.org/maven2/org/vafer/jdependency/2.8.0/jdependency-2.8.0.pom
2024-08-30T19:20:37.3975584Z #24 16.65 Progress (1): 14 kB
2024-08-30T19:20:37.3976046Z                    
2024-08-30T19:20:37.3977516Z Downloaded from central: https://repo.maven.apache.org/maven2/org/vafer/jdependency/2.8.0/jdependency-2.8.0.pom (14 kB at 3.5 MB/s)
2024-08-30T19:20:37.3980390Z #24 16.65 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.pom
2024-08-30T19:20:37.3981864Z #24 16.66 Progress (1): 16/24 kB
2024-08-30T19:20:37.3982452Z Progress (1): 24 kB   
2024-08-30T19:20:37.3982866Z                    
2024-08-30T19:20:37.3984513Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.pom (24 kB at 4.8 MB/s)
2024-08-30T19:20:37.3986909Z #24 16.66 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/48/commons-parent-48.pom
2024-08-30T19:20:37.3988225Z #24 16.66 Progress (1): 16/72 kB
2024-08-30T19:20:37.3988700Z Progress (1): 33/72 kB
2024-08-30T19:20:37.3989124Z Progress (1): 49/72 kB
2024-08-30T19:20:37.3989545Z Progress (1): 66/72 kB
2024-08-30T19:20:37.3989956Z Progress (1): 72 kB   
2024-08-30T19:20:37.3990346Z                    
2024-08-30T19:20:37.3991824Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/48/commons-parent-48.pom (72 kB at 12 MB/s)
2024-08-30T19:20:37.3994577Z #24 16.68 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-buildpack-platform/3.2.2/spring-boot-buildpack-platform-3.2.2.jar
2024-08-30T19:20:37.3996365Z #24 16.68 Progress (1): 16/272 kB
2024-08-30T19:20:37.3996880Z Progress (1): 33/272 kB
2024-08-30T19:20:37.3997329Z Progress (1): 49/272 kB
2024-08-30T19:20:37.3997777Z Progress (1): 64/272 kB
2024-08-30T19:20:37.3998193Z Progress (1): 81/272 kB
2024-08-30T19:20:37.3998646Z Progress (1): 97/272 kB
2024-08-30T19:20:37.3999046Z Progress (1): 114/272 kB
2024-08-30T19:20:37.3999503Z Progress (1): 130/272 kB
2024-08-30T19:20:37.3999925Z Progress (1): 146/272 kB
2024-08-30T19:20:37.4000365Z Progress (1): 163/272 kB
2024-08-30T19:20:37.4000796Z Progress (1): 179/272 kB
2024-08-30T19:20:37.4001253Z Progress (1): 195/272 kB
2024-08-30T19:20:37.4001670Z Progress (1): 212/272 kB
2024-08-30T19:20:37.4002159Z Progress (1): 228/272 kB
2024-08-30T19:20:37.4002611Z Progress (1): 245/272 kB
2024-08-30T19:20:37.4003024Z Progress (1): 261/272 kB
2024-08-30T19:20:37.4003471Z Progress (1): 272 kB    
2024-08-30T19:20:37.4003884Z                     
2024-08-30T19:20:37.4006220Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-buildpack-platform/3.2.2/spring-boot-buildpack-platform-3.2.2.jar (272 kB at 30 MB/s)
2024-08-30T19:20:37.4009170Z #24 16.69 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.14.2/jackson-core-2.14.2.jar
2024-08-30T19:20:37.4011888Z #24 16.69 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.jar
2024-08-30T19:20:37.4014587Z #24 16.69 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.14.2/jackson-annotations-2.14.2.jar
2024-08-30T19:20:37.4016092Z #24 16.69 Progress (1): 0/1.6 MB
2024-08-30T19:20:37.4016590Z Progress (2): 0/1.6 MB | 16/459 kB
2024-08-30T19:20:37.4017111Z Progress (2): 0/1.6 MB | 33/459 kB
2024-08-30T19:20:37.4017599Z                                   
2024-08-30T19:20:37.4019652Z Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.14.2/jackson-module-parameter-names-2.14.2.jar
2024-08-30T19:20:37.4021447Z #24 16.69 Progress (2): 0/1.6 MB | 49/459 kB
2024-08-30T19:20:37.4022058Z Progress (2): 0/1.6 MB | 65/459 kB
2024-08-30T19:20:37.4022567Z Progress (2): 0/1.6 MB | 82/459 kB
2024-08-30T19:20:37.4023082Z Progress (2): 0/1.6 MB | 98/459 kB
2024-08-30T19:20:37.4023574Z Progress (2): 0/1.6 MB | 114/459 kB
2024-08-30T19:20:37.4024125Z Progress (2): 0/1.6 MB | 131/459 kB
2024-08-30T19:20:37.4024694Z Progress (2): 0/1.6 MB | 147/459 kB
2024-08-30T19:20:37.4025631Z Progress (2): 0/1.6 MB | 164/459 kB
2024-08-30T19:20:37.4026204Z Progress (2): 0/1.6 MB | 180/459 kB
2024-08-30T19:20:37.4026747Z Progress (2): 0/1.6 MB | 196/459 kB
2024-08-30T19:20:37.4027274Z Progress (2): 0/1.6 MB | 213/459 kB
2024-08-30T19:20:37.4027783Z Progress (2): 0/1.6 MB | 229/459 kB
2024-08-30T19:20:37.4028280Z Progress (2): 0/1.6 MB | 245/459 kB
2024-08-30T19:20:37.4028792Z Progress (2): 0/1.6 MB | 262/459 kB
2024-08-30T19:20:37.4029302Z Progress (2): 0/1.6 MB | 278/459 kB
2024-08-30T19:20:37.4029853Z Progress (2): 0/1.6 MB | 295/459 kB
2024-08-30T19:20:37.4030363Z Progress (2): 0/1.6 MB | 311/459 kB
2024-08-30T19:20:37.4030889Z Progress (2): 0/1.6 MB | 327/459 kB
2024-08-30T19:20:37.4031408Z Progress (2): 0/1.6 MB | 344/459 kB
2024-08-30T19:20:37.4031961Z Progress (3): 0/1.6 MB | 344/459 kB | 16/77 kB
2024-08-30T19:20:37.4032586Z Progress (3): 0/1.6 MB | 344/459 kB | 33/77 kB
2024-08-30T19:20:37.4033206Z Progress (3): 0/1.6 MB | 344/459 kB | 49/77 kB
2024-08-30T19:20:37.4033793Z                                               
2024-08-30T19:20:37.4035262Z Downloading from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna-platform/5.13.0/jna-platform-5.13.0.jar
2024-08-30T19:20:37.4036615Z #24 16.70 Progress (3): 0/1.6 MB | 344/459 kB | 66/77 kB
2024-08-30T19:20:37.4037304Z Progress (3): 0/1.6 MB | 344/459 kB | 77 kB   
2024-08-30T19:20:37.4037898Z                                            
2024-08-30T19:20:37.4039787Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.14.2/jackson-annotations-2.14.2.jar (77 kB at 4.5 MB/s)
2024-08-30T19:20:37.4042481Z #24 16.71 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.jar
2024-08-30T19:20:37.4043962Z #24 16.71 Progress (3): 0/1.6 MB | 344/459 kB | 9.5 kB
2024-08-30T19:20:37.4044601Z                                             
2024-08-30T19:20:37.4046791Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.14.2/jackson-module-parameter-names-2.14.2.jar (9.5 kB at 526 kB/s)
2024-08-30T19:20:37.4049802Z #24 16.71 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.2.3/httpclient5-5.2.3.jar
2024-08-30T19:20:37.4052101Z #24 16.71 Progress (2): 0/1.6 MB | 360/459 kB
2024-08-30T19:20:37.4052721Z Progress (2): 0/1.6 MB | 377/459 kB
2024-08-30T19:20:37.4053254Z Progress (2): 0/1.6 MB | 393/459 kB
2024-08-30T19:20:37.4053779Z Progress (2): 0/1.6 MB | 409/459 kB
2024-08-30T19:20:37.4054323Z Progress (2): 0/1.6 MB | 426/459 kB
2024-08-30T19:20:37.4054918Z Progress (2): 0/1.6 MB | 442/459 kB
2024-08-30T19:20:37.4055461Z Progress (2): 0/1.6 MB | 458/459 kB
2024-08-30T19:20:37.4056064Z Progress (2): 0/1.6 MB | 459 kB    
2024-08-30T19:20:37.4056569Z                                
2024-08-30T19:20:37.4058290Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.14.2/jackson-core-2.14.2.jar (459 kB at 24 MB/s)
2024-08-30T19:20:37.4060772Z #24 16.71 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.0.10/spring-core-6.0.10.jar
2024-08-30T19:20:37.4062109Z #24 16.71 Progress (2): 0/1.6 MB | 0/1.4 MB
2024-08-30T19:20:37.4062719Z Progress (2): 0/1.6 MB | 0/1.4 MB
2024-08-30T19:20:37.4063222Z Progress (2): 0/1.6 MB | 0/1.4 MB
2024-08-30T19:20:37.4063772Z Progress (3): 0/1.6 MB | 0/1.4 MB | 0/1.1 MB
2024-08-30T19:20:37.4064398Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
2024-08-30T19:20:37.4065049Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
2024-08-30T19:20:37.4065734Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
2024-08-30T19:20:37.4066405Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
2024-08-30T19:20:37.4067046Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
2024-08-30T19:20:37.4068640Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4069836Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4071382Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4072392Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4073632Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4074325Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4075428Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4076076Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4076707Z Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4077344Z Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.1/1.1 MB
2024-08-30T19:20:37.4077969Z Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
2024-08-30T19:20:37.4078614Z Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
2024-08-30T19:20:37.4079248Z Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
2024-08-30T19:20:37.4079893Z Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
2024-08-30T19:20:37.4080564Z Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
2024-08-30T19:20:37.4081284Z Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
2024-08-30T19:20:37.4082068Z Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB | 16/843 kB
2024-08-30T19:20:37.4082942Z Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 16/843 kB
2024-08-30T19:20:37.4083788Z Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 16/843 kB
2024-08-30T19:20:37.4084618Z Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 33/843 kB
2024-08-30T19:20:37.4085376Z Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 33/843 kB
2024-08-30T19:20:37.4086114Z Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 49/843 kB
2024-08-30T19:20:37.4086869Z Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 63/843 kB
2024-08-30T19:20:37.4087725Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 63/843 kB | 0/1.8 MB
2024-08-30T19:20:37.4088718Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 80/843 kB | 0/1.8 MB
2024-08-30T19:20:37.4089699Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 80/843 kB | 0/1.8 MB
2024-08-30T19:20:37.4090661Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 96/843 kB | 0/1.8 MB
2024-08-30T19:20:37.4091972Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 96/843 kB | 0/1.8 MB
2024-08-30T19:20:37.4092922Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 113/843 kB | 0/1.8 MB
2024-08-30T19:20:37.4094254Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 113/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4095300Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 113/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4096340Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4097342Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4098347Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4099353Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4100357Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4101415Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 145/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4102446Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 145/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4103477Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 162/843 kB | 0.1/1.8 MB
2024-08-30T19:20:37.4104511Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 162/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4105616Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 162/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4106635Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 178/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4107666Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 194/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4108690Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 194/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4109701Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 194/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4110687Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 211/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4112070Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4113057Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4114073Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4114987Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.2/1.8 MB
2024-08-30T19:20:37.4115935Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4116848Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4117864Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4119019Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4120169Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4121268Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4122564Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4123641Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4124751Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4125936Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4127044Z Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4128085Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4129253Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4130350Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4131542Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4132817Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4133972Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4135040Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4172022Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4173566Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4174605Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 227/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4175630Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4176536Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4177534Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4178511Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.4179488Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6086678Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 244/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6087811Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6088905Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6089938Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6091250Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6092258Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6093249Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6094227Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6095193Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6096708Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 276/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6097693Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 276/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6098674Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 276/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6099666Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 276/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6100627Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6101605Z Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6102600Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6103563Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6104535Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6105521Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6106516Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6107492Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6108459Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6109450Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6110449Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6111437Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.3/1.8 MB
2024-08-30T19:20:37.6112413Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6113373Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 309/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6114331Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 309/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6115304Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6116278Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6117237Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6118211Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6119500Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6120537Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6121516Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6122501Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 342/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6123466Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 342/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6124440Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 342/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6125336Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 342/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6126326Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 342/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6127303Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 342/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6128274Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 342/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6129254Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 342/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6130215Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.4/1.8 MB
2024-08-30T19:20:37.6132210Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6133221Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6134188Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6135151Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6136117Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6137371Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6138335Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6139297Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6140261Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6141307Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6142259Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6143205Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 375/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6144144Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6145097Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6146051Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6147000Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.5/1.8 MB
2024-08-30T19:20:37.6147954Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6148898Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6149836Z Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6150795Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6151790Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6152693Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6153634Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6154491Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6172223Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 395/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6173228Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 395/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6174179Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 395/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6175145Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 395/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6176528Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6177518Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6178471Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.6/1.8 MB
2024-08-30T19:20:37.6179391Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6180292Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6181197Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6182108Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6183025Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6183926Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6184844Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6185738Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6186638Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6187538Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 444/843 kB | 0.7/1.8 MB
2024-08-30T19:20:37.6188444Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 444/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6189375Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 444/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6190302Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 444/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6191532Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6192462Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6193356Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6194280Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6195114Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6195948Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6196851Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6197759Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.8/1.8 MB
2024-08-30T19:20:37.6198669Z Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6199601Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6200517Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6201422Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6202341Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6203251Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6204193Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6205149Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6206144Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6207102Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 0.9/1.8 MB
2024-08-30T19:20:37.6208032Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6208950Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6209897Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6210825Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6212120Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6213390Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6214336Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6215274Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6216218Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6217134Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.0/1.8 MB
2024-08-30T19:20:37.6218076Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6219016Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6219952Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6220883Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6221814Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6222738Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6223972Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6224885Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6225793Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6226685Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.1/1.8 MB
2024-08-30T19:20:37.6227653Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6228608Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6229883Z Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6230834Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6231788Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 571/843 kB | 1.2/1.8 MB    
2024-08-30T19:20:37.6232734Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 571/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6233642Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6234567Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6235468Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6236362Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6237291Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6238206Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 604/843 kB | 1.2/1.8 MB
2024-08-30T19:20:37.6239110Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 604/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6240020Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 604/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6240922Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 620/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6241813Z Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 620/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6242572Z                                                                       
2024-08-30T19:20:37.6244843Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.jar (1.1 MB at 14 MB/s)
2024-08-30T19:20:37.6247236Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.0.10/spring-jcl-6.0.10.jar
2024-08-30T19:20:37.6248591Z #24 16.78 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 620/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6249449Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 637/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6250231Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 637/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6251269Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 637/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6252044Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 637/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6253087Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 653/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6253860Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 653/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6254671Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 653/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6255485Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6256218Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.3/1.8 MB
2024-08-30T19:20:37.6256965Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.4/1.8 MB
2024-08-30T19:20:37.6257728Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.4/1.8 MB
2024-08-30T19:20:37.6258498Z Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.4/1.8 MB
2024-08-30T19:20:37.6259261Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 670/843 kB | 1.4/1.8 MB
2024-08-30T19:20:37.6260017Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 670/843 kB | 1.4/1.8 MB
2024-08-30T19:20:37.6260754Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.4/1.8 MB
2024-08-30T19:20:37.6261511Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.4/1.8 MB
2024-08-30T19:20:37.6262262Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.4/1.8 MB
2024-08-30T19:20:37.6263021Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.4/1.8 MB
2024-08-30T19:20:37.6263818Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6264576Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6265310Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6266039Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6266763Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6267785Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6268512Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 719/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6269305Z Progress (5): 0/1.6 MB | 0.8/1.4 MB | 719/843 kB | 1.5/1.8 MB | 16/24 kB
2024-08-30T19:20:37.6270191Z Progress (5): 0/1.6 MB | 0.8/1.4 MB | 719/843 kB | 1.5/1.8 MB | 16/24 kB
2024-08-30T19:20:37.6271039Z Progress (5): 0/1.6 MB | 0.8/1.4 MB | 735/843 kB | 1.5/1.8 MB | 16/24 kB
2024-08-30T19:20:37.6271878Z Progress (5): 0/1.6 MB | 0.8/1.4 MB | 735/843 kB | 1.5/1.8 MB | 24 kB   
2024-08-30T19:20:37.6272714Z Progress (5): 0/1.6 MB | 0.8/1.4 MB | 752/843 kB | 1.5/1.8 MB | 24 kB
2024-08-30T19:20:37.6273548Z Progress (5): 0/1.6 MB | 0.8/1.4 MB | 752/843 kB | 1.5/1.8 MB | 24 kB
2024-08-30T19:20:37.6274272Z                                                                      
2024-08-30T19:20:37.6275912Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.0.10/spring-jcl-6.0.10.jar (24 kB at 308 kB/s)
2024-08-30T19:20:37.6277893Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/tomlj/tomlj/1.0.0/tomlj-1.0.0.jar
2024-08-30T19:20:37.6279105Z #24 16.78 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 752/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6279935Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6280710Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6281487Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.5/1.8 MB
2024-08-30T19:20:37.6282284Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.6/1.8 MB
2024-08-30T19:20:37.6283086Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.6/1.8 MB
2024-08-30T19:20:37.6283871Z Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.6/1.8 MB
2024-08-30T19:20:37.6284693Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 768/843 kB | 1.6/1.8 MB
2024-08-30T19:20:37.6285436Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.6/1.8 MB
2024-08-30T19:20:37.6286226Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.6/1.8 MB
2024-08-30T19:20:37.6286976Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.6/1.8 MB
2024-08-30T19:20:37.6287740Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.6/1.8 MB
2024-08-30T19:20:37.6288444Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6289441Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6290178Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6290918Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6292016Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6292751Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6293495Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6294237Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6294978Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6295734Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6296503Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6297272Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.7/1.8 MB
2024-08-30T19:20:37.6298021Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.8/1.8 MB
2024-08-30T19:20:37.6298763Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.8/1.8 MB
2024-08-30T19:20:37.6299495Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.8/1.8 MB
2024-08-30T19:20:37.6300224Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 833/843 kB | 1.8/1.8 MB
2024-08-30T19:20:37.6300964Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8/1.8 MB    
2024-08-30T19:20:37.6301685Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8/1.8 MB
2024-08-30T19:20:37.6302398Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8/1.8 MB
2024-08-30T19:20:37.6303097Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8/1.8 MB
2024-08-30T19:20:37.6304052Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB    
2024-08-30T19:20:37.6304723Z Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB
2024-08-30T19:20:37.6305466Z Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 16/157 kB
2024-08-30T19:20:37.6306273Z Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 16/157 kB
2024-08-30T19:20:37.6307116Z Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 33/157 kB
2024-08-30T19:20:37.6307894Z Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 49/157 kB
2024-08-30T19:20:37.6308698Z Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 65/157 kB
2024-08-30T19:20:37.6309488Z Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 81/157 kB
2024-08-30T19:20:37.6310300Z Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 81/157 kB
2024-08-30T19:20:37.6311146Z Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 98/157 kB
2024-08-30T19:20:37.6311985Z Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 98/157 kB
2024-08-30T19:20:37.6312842Z Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 114/157 kB
2024-08-30T19:20:37.6313699Z Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 130/157 kB
2024-08-30T19:20:37.6314547Z Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 147/157 kB
2024-08-30T19:20:37.6315391Z Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 157 kB    
2024-08-30T19:20:37.6316210Z Progress (5): 0.1/1.6 MB | 1.0/1.4 MB | 843 kB | 1.8 MB | 157 kB
2024-08-30T19:20:37.6316909Z                                                                 
2024-08-30T19:20:37.6318347Z Downloaded from central: https://repo.maven.apache.org/maven2/org/tomlj/tomlj/1.0.0/tomlj-1.0.0.jar (157 kB at 2.0 MB/s)
2024-08-30T19:20:37.6320313Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.7.2/antlr4-runtime-4.7.2.jar
2024-08-30T19:20:37.6321713Z #24 16.78 Progress (4): 0.1/1.6 MB | 1.0/1.4 MB | 843 kB | 1.8 MB
2024-08-30T19:20:37.6322444Z                                                        
2024-08-30T19:20:37.6323974Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.0.10/spring-core-6.0.10.jar (1.8 MB at 23 MB/s)
2024-08-30T19:20:37.6326386Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2024-08-30T19:20:37.6327666Z #24 16.78 Progress (3): 0.1/1.6 MB | 1.0/1.4 MB | 843 kB
2024-08-30T19:20:37.6328335Z Progress (3): 0.1/1.6 MB | 1.0/1.4 MB | 843 kB
2024-08-30T19:20:37.6328917Z                                               
2024-08-30T19:20:37.6330586Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.2.3/httpclient5-5.2.3.jar (843 kB at 11 MB/s)
2024-08-30T19:20:37.6333588Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-loader-tools/3.2.2/spring-boot-loader-tools-3.2.2.jar
2024-08-30T19:20:37.6335144Z #24 16.78 Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
2024-08-30T19:20:37.6335721Z Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
2024-08-30T19:20:37.6336236Z Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
2024-08-30T19:20:37.6336739Z Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
2024-08-30T19:20:37.6337244Z Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
2024-08-30T19:20:37.6337765Z Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
2024-08-30T19:20:37.6338267Z Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
2024-08-30T19:20:37.6338856Z Progress (3): 0.1/1.6 MB | 1.0/1.4 MB | 16/338 kB
2024-08-30T19:20:37.6339539Z Progress (3): 0.1/1.6 MB | 1.0/1.4 MB | 33/338 kB
2024-08-30T19:20:37.6340164Z Progress (3): 0.2/1.6 MB | 1.0/1.4 MB | 33/338 kB
2024-08-30T19:20:37.6340800Z Progress (3): 0.2/1.6 MB | 1.0/1.4 MB | 49/338 kB
2024-08-30T19:20:37.6341388Z Progress (3): 0.2/1.6 MB | 1.0/1.4 MB | 63/338 kB
2024-08-30T19:20:37.6342026Z Progress (3): 0.2/1.6 MB | 1.0/1.4 MB | 79/338 kB
2024-08-30T19:20:37.6342671Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 79/338 kB
2024-08-30T19:20:37.6343600Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 96/338 kB
2024-08-30T19:20:37.6344240Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 96/338 kB
2024-08-30T19:20:37.6344893Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 112/338 kB
2024-08-30T19:20:37.6345545Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB
2024-08-30T19:20:37.6346215Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB
2024-08-30T19:20:37.6346943Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB
2024-08-30T19:20:37.6347728Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 16/20 kB
2024-08-30T19:20:37.6348568Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 16/20 kB
2024-08-30T19:20:37.6349345Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 20 kB   
2024-08-30T19:20:37.6350121Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 20 kB
2024-08-30T19:20:37.6350964Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 20 kB
2024-08-30T19:20:37.6351717Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 20 kB
2024-08-30T19:20:37.6352383Z                                                           
2024-08-30T19:20:37.6353989Z Downloaded from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar (20 kB at 256 kB/s)
2024-08-30T19:20:37.6355574Z #24 16.78 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 145/338 kB
2024-08-30T19:20:37.6356306Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 145/338 kB
2024-08-30T19:20:37.6356960Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 161/338 kB
2024-08-30T19:20:37.6357602Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 161/338 kB
2024-08-30T19:20:37.6358262Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 178/338 kB
2024-08-30T19:20:37.6358900Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 194/338 kB
2024-08-30T19:20:37.6359497Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 211/338 kB
2024-08-30T19:20:37.6360099Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 227/338 kB
2024-08-30T19:20:37.6360758Z Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 243/338 kB
2024-08-30T19:20:37.6361531Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 243/338 kB | 16/434 kB
2024-08-30T19:20:37.6362353Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 260/338 kB | 16/434 kB
2024-08-30T19:20:37.6363087Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 260/338 kB | 33/434 kB
2024-08-30T19:20:37.6363811Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 276/338 kB | 33/434 kB
2024-08-30T19:20:37.6364831Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 276/338 kB | 49/434 kB
2024-08-30T19:20:37.6365602Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 292/338 kB | 49/434 kB
2024-08-30T19:20:37.6366353Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 292/338 kB | 65/434 kB
2024-08-30T19:20:37.6367118Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 309/338 kB | 65/434 kB
2024-08-30T19:20:37.6367795Z                                                               
2024-08-30T19:20:37.6369604Z Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.3.2/maven-common-artifact-filters-3.3.2.jar
2024-08-30T19:20:37.6371717Z #24 16.78 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 309/338 kB | 81/434 kB
2024-08-30T19:20:37.6372566Z Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 309/338 kB | 81/434 kB
2024-08-30T19:20:37.6373323Z Progress (4): 0.3/1.6 MB | 1.1/1.4 MB | 309/338 kB | 81/434 kB
2024-08-30T19:20:37.6374077Z Progress (4): 0.3/1.6 MB | 1.1/1.4 MB | 309/338 kB | 98/434 kB
2024-08-30T19:20:37.6374818Z Progress (4): 0.3/1.6 MB | 1.1/1.4 MB | 325/338 kB | 98/434 kB
2024-08-30T19:20:37.6375567Z Progress (4): 0.3/1.6 MB | 1.1/1.4 MB | 338 kB | 98/434 kB    
2024-08-30T19:20:37.6376302Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 338 kB | 98/434 kB
2024-08-30T19:20:37.6377016Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 338 kB | 98/434 kB
2024-08-30T19:20:37.6377653Z                                                           
2024-08-30T19:20:37.6379148Z Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.7.2/antlr4-runtime-4.7.2.jar (338 kB at 4.3 MB/s)
2024-08-30T19:20:37.6381321Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.jar
2024-08-30T19:20:37.6382945Z #24 16.78 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 114/434 kB
2024-08-30T19:20:37.6383647Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 114/434 kB
2024-08-30T19:20:37.6384288Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 114/434 kB
2024-08-30T19:20:37.6384926Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 130/434 kB
2024-08-30T19:20:37.6385565Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 130/434 kB
2024-08-30T19:20:37.6386172Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 130/434 kB
2024-08-30T19:20:37.6386776Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 130/434 kB
2024-08-30T19:20:37.6387398Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 147/434 kB
2024-08-30T19:20:37.6388012Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 147/434 kB
2024-08-30T19:20:37.6388616Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB
2024-08-30T19:20:37.6389230Z Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB
2024-08-30T19:20:37.6389920Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB | 16/58 kB
2024-08-30T19:20:37.6390741Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB | 33/58 kB
2024-08-30T19:20:37.6391506Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB | 49/58 kB
2024-08-30T19:20:37.6392272Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 180/434 kB | 49/58 kB
2024-08-30T19:20:37.6393019Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 180/434 kB | 58 kB   
2024-08-30T19:20:37.6393761Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 180/434 kB | 58 kB
2024-08-30T19:20:37.6394486Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 180/434 kB | 58 kB
2024-08-30T19:20:37.6395201Z Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 196/434 kB | 58 kB
2024-08-30T19:20:37.6395838Z                                                           
2024-08-30T19:20:37.6397790Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.3.2/maven-common-artifact-filters-3.3.2.jar (58 kB at 738 kB/s)
2024-08-30T19:20:37.6400561Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-shade-plugin/3.5.0/maven-shade-plugin-3.5.0.jar
2024-08-30T19:20:37.6402097Z #24 16.78 Progress (3): 0.4/1.6 MB | 1.2/1.4 MB | 196/434 kB
2024-08-30T19:20:37.6402806Z Progress (3): 0.4/1.6 MB | 1.2/1.4 MB | 196/434 kB
2024-08-30T19:20:37.6403438Z Progress (3): 0.4/1.6 MB | 1.2/1.4 MB | 212/434 kB
2024-08-30T19:20:37.6404394Z Progress (4): 0.4/1.6 MB | 1.2/1.4 MB | 212/434 kB | 16/268 kB
2024-08-30T19:20:37.6405166Z Progress (4): 0.4/1.6 MB | 1.2/1.4 MB | 212/434 kB | 16/268 kB
2024-08-30T19:20:37.6405927Z Progress (4): 0.4/1.6 MB | 1.2/1.4 MB | 212/434 kB | 19/268 kB
2024-08-30T19:20:37.6406664Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 212/434 kB | 19/268 kB
2024-08-30T19:20:37.6407423Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 212/434 kB | 36/268 kB
2024-08-30T19:20:37.6408190Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 212/434 kB | 52/268 kB
2024-08-30T19:20:37.6408954Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 229/434 kB | 52/268 kB
2024-08-30T19:20:37.6409696Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 229/434 kB | 52/268 kB
2024-08-30T19:20:37.6410433Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 229/434 kB | 65/268 kB
2024-08-30T19:20:37.6411377Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 65/268 kB
2024-08-30T19:20:37.6412125Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 81/268 kB
2024-08-30T19:20:37.6412892Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 81/268 kB
2024-08-30T19:20:37.6413648Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 97/268 kB
2024-08-30T19:20:37.6414409Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 114/268 kB
2024-08-30T19:20:37.6415197Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 130/268 kB
2024-08-30T19:20:37.6415982Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 130/268 kB
2024-08-30T19:20:37.6416737Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 146/268 kB
2024-08-30T19:20:37.6417512Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 146/268 kB
2024-08-30T19:20:37.6418558Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 163/268 kB
2024-08-30T19:20:37.6419321Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 163/268 kB
2024-08-30T19:20:37.6420070Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 179/268 kB
2024-08-30T19:20:37.6420822Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 179/268 kB
2024-08-30T19:20:37.6421596Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 196/268 kB
2024-08-30T19:20:37.6422348Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 212/268 kB
2024-08-30T19:20:37.6423114Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 212/268 kB
2024-08-30T19:20:37.6423874Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 228/268 kB
2024-08-30T19:20:37.6424634Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 245/268 kB
2024-08-30T19:20:37.6425390Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 261/268 kB
2024-08-30T19:20:37.6426124Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 278/434 kB | 261/268 kB
2024-08-30T19:20:37.6426883Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 278/434 kB | 268 kB    
2024-08-30T19:20:37.6427625Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 278/434 kB | 268 kB
2024-08-30T19:20:37.6428355Z Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 278/434 kB | 268 kB
2024-08-30T19:20:37.6429004Z                                                            
2024-08-30T19:20:37.6430570Z Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.jar (268 kB at 3.3 MB/s)
2024-08-30T19:20:37.6432051Z #24 16.78 Progress (3): 0.4/1.6 MB | 1.3/1.4 MB | 294/434 kB
2024-08-30T19:20:37.6432751Z Progress (3): 0.5/1.6 MB | 1.3/1.4 MB | 294/434 kB
2024-08-30T19:20:37.6433378Z Progress (3): 0.5/1.6 MB | 1.3/1.4 MB | 294/434 kB
2024-08-30T19:20:37.6434075Z Progress (4): 0.5/1.6 MB | 1.3/1.4 MB | 294/434 kB | 16/147 kB
2024-08-30T19:20:37.6434846Z Progress (4): 0.5/1.6 MB | 1.3/1.4 MB | 311/434 kB | 16/147 kB
2024-08-30T19:20:37.6435603Z Progress (4): 0.5/1.6 MB | 1.3/1.4 MB | 311/434 kB | 33/147 kB
2024-08-30T19:20:37.6436369Z Progress (4): 0.5/1.6 MB | 1.3/1.4 MB | 311/434 kB | 49/147 kB
2024-08-30T19:20:37.6437128Z Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 49/147 kB
2024-08-30T19:20:37.6437872Z Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 63/147 kB
2024-08-30T19:20:37.6438876Z Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 63/147 kB
2024-08-30T19:20:37.6439648Z Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 79/147 kB
2024-08-30T19:20:37.6440367Z Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 95/147 kB
2024-08-30T19:20:37.6441148Z Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 327/434 kB | 95/147 kB
2024-08-30T19:20:37.6441929Z Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 95/147 kB    
2024-08-30T19:20:37.6442620Z Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 112/147 kB
2024-08-30T19:20:37.6443324Z Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 128/147 kB
2024-08-30T19:20:37.6444026Z Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 145/147 kB
2024-08-30T19:20:37.6444813Z Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 147 kB    
2024-08-30T19:20:37.6445469Z                                                        
2024-08-30T19:20:37.6447316Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-shade-plugin/3.5.0/maven-shade-plugin-3.5.0.jar (147 kB at 1.7 MB/s)
2024-08-30T19:20:37.6449503Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar
2024-08-30T19:20:37.6450598Z #24 16.78 Progress (3): 0.5/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6451768Z Progress (3): 0.5/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6452362Z                                               
2024-08-30T19:20:37.6453680Z Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-commons/9.5/asm-commons-9.5.jar
2024-08-30T19:20:37.6454920Z #24 16.78 Progress (3): 0.5/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6455611Z Progress (3): 0.5/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6456541Z Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6457157Z Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6457771Z Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6458395Z Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6459003Z Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6459618Z Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6460250Z Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6460913Z Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6461579Z Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6462204Z Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6462799Z Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6463395Z Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6463996Z Progress (3): 0.8/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6464610Z Progress (3): 0.8/1.6 MB | 1.4 MB | 327/434 kB
2024-08-30T19:20:37.6465294Z Progress (4): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 16/122 kB
2024-08-30T19:20:37.6466128Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 16/122 kB | 16/72 kB
2024-08-30T19:20:37.6467011Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 33/122 kB | 16/72 kB
2024-08-30T19:20:37.6467914Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 33/122 kB | 33/72 kB
2024-08-30T19:20:37.6468799Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 49/122 kB | 33/72 kB
2024-08-30T19:20:37.6469649Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 49/122 kB | 49/72 kB
2024-08-30T19:20:37.6470529Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 66/122 kB | 49/72 kB
2024-08-30T19:20:37.6471434Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 66/122 kB | 66/72 kB
2024-08-30T19:20:37.6472271Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 82/122 kB | 66/72 kB
2024-08-30T19:20:37.6473107Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 82/122 kB | 72 kB   
2024-08-30T19:20:37.6473981Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 98/122 kB | 72 kB
2024-08-30T19:20:37.6474864Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 115/122 kB | 72 kB
2024-08-30T19:20:37.6475738Z Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 122 kB | 72 kB    
2024-08-30T19:20:37.6476728Z                                                                
2024-08-30T19:20:37.6478276Z Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-commons/9.5/asm-commons-9.5.jar (72 kB at 860 kB/s)
2024-08-30T19:20:37.6480203Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-tree/9.5/asm-tree-9.5.jar
2024-08-30T19:20:37.6482088Z #24 16.78 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar (122 kB at 1.5 MB/s)
2024-08-30T19:20:37.6483923Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/jdom/jdom2/2.0.6.1/jdom2-2.0.6.1.jar
2024-08-30T19:20:37.6485090Z #24 16.78 Progress (3): 0.8/1.6 MB | 1.4 MB | 343/434 kB
2024-08-30T19:20:37.6485757Z Progress (3): 0.8/1.6 MB | 1.4 MB | 360/434 kB
2024-08-30T19:20:37.6486373Z Progress (3): 0.8/1.6 MB | 1.4 MB | 376/434 kB
2024-08-30T19:20:37.6486972Z Progress (3): 0.8/1.6 MB | 1.4 MB | 393/434 kB
2024-08-30T19:20:37.6487558Z Progress (3): 0.8/1.6 MB | 1.4 MB | 409/434 kB
2024-08-30T19:20:37.6488181Z Progress (3): 0.8/1.6 MB | 1.4 MB | 425/434 kB
2024-08-30T19:20:37.6488793Z Progress (3): 0.8/1.6 MB | 1.4 MB | 434 kB    
2024-08-30T19:20:37.6489360Z                                           
2024-08-30T19:20:37.6491355Z Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-loader-tools/3.2.2/spring-boot-loader-tools-3.2.2.jar (434 kB at 5.2 MB/s)
2024-08-30T19:20:37.6494203Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/3.2.1/maven-dependency-tree-3.2.1.jar
2024-08-30T19:20:37.6496764Z #24 16.78 Downloaded from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna-platform/5.13.0/jna-platform-5.13.0.jar (1.4 MB at 15 MB/s)
2024-08-30T19:20:37.6499128Z #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/vafer/jdependency/2.8.0/jdependency-2.8.0.jar
2024-08-30T19:20:37.6500249Z #24 16.78 Progress (1): 0.8/1.6 MB
2024-08-30T19:20:37.6500725Z Progress (1): 0.8/1.6 MB
2024-08-30T19:20:37.6501167Z Progress (2): 0.8/1.6 MB | 16/328 kB
2024-08-30T19:20:37.6501685Z Progress (2): 0.8/1.6 MB | 33/328 kB
2024-08-30T19:20:37.6502198Z Progress (2): 0.8/1.6 MB | 49/328 kB
2024-08-30T19:20:37.6502699Z Progress (2): 0.8/1.6 MB | 63/328 kB
2024-08-30T19:20:37.6503197Z Progress (2): 0.8/1.6 MB | 79/328 kB
2024-08-30T19:20:37.6503697Z Progress (2): 0.8/1.6 MB | 95/328 kB
2024-08-30T19:20:37.6504198Z Progress (2): 0.8/1.6 MB | 112/328 kB
2024-08-30T19:20:37.6504723Z Progress (2): 0.8/1.6 MB | 128/328 kB
2024-08-30T19:20:37.6505232Z Progress (2): 0.8/1.6 MB | 144/328 kB
2024-08-30T19:20:37.6505752Z Progress (2): 0.8/1.6 MB | 161/328 kB
2024-08-30T19:20:37.6506254Z Progress (2): 0.8/1.6 MB | 177/328 kB
2024-08-30T19:20:37.6506758Z Progress (2): 0.8/1.6 MB | 194/328 kB
2024-08-30T19:20:37.6507261Z Progress (2): 0.8/1.6 MB | 210/328 kB
2024-08-30T19:20:37.6507758Z Progress (2): 0.8/1.6 MB | 226/328 kB
2024-08-30T19:20:37.6508255Z Progress (2): 0.8/1.6 MB | 243/328 kB
2024-08-30T19:20:37.6508754Z Progress (2): 0.8/1.6 MB | 259/328 kB
2024-08-30T19:20:37.6509264Z Progress (2): 0.8/1.6 MB | 276/328 kB
2024-08-30T19:20:37.6509837Z Progress (3): 0.8/1.6 MB | 276/328 kB | 16/233 kB
2024-08-30T19:20:37.6510453Z Progress (3): 0.8/1.6 MB | 292/328 kB | 16/233 kB
2024-08-30T19:20:37.6511097Z Progress (3): 0.8/1.6 MB | 308/328 kB | 16/233 kB
2024-08-30T19:20:37.6511713Z Progress (3): 0.8/1.6 MB | 308/328 kB | 33/233 kB
2024-08-30T19:20:37.6512307Z Progress (3): 0.8/1.6 MB | 308/328 kB | 49/233 kB
2024-08-30T19:20:37.6512919Z Progress (3): 0.8/1.6 MB | 308/328 kB | 65/233 kB
2024-08-30T19:20:37.6513604Z Progress (4): 0.8/1.6 MB | 308/328 kB | 65/233 kB | 16/43 kB
2024-08-30T19:20:37.6514418Z Progress (5): 0.8/1.6 MB | 308/328 kB | 65/233 kB | 16/43 kB | 16/52 kB
2024-08-30T19:20:37.6515275Z Progress (5): 0.8/1.6 MB | 308/328 kB | 81/233 kB | 16/43 kB | 16/52 kB
2024-08-30T19:20:37.6516130Z Progress (5): 0.8/1.6 MB | 308/328 kB | 81/233 kB | 33/43 kB | 16/52 kB
2024-08-30T19:20:37.6517216Z Progress (5): 0.8/1.6 MB | 308/328 kB | 81/233 kB | 33/43 kB | 32/52 kB
2024-08-30T19:20:37.6518076Z Progress (5): 0.8/1.6 MB | 308/328 kB | 81/233 kB | 43 kB | 32/52 kB   
2024-08-30T19:20:37.6518918Z Progress (5): 0.8/1.6 MB | 308/328 kB | 97/233 kB | 43 kB | 32/52 kB
2024-08-30T19:20:37.6519749Z Progress (5): 0.8/1.6 MB | 308/328 kB | 97/233 kB | 43 kB | 49/52 kB
2024-08-30T19:20:37.6520573Z Progress (5): 0.8/1.6 MB | 308/328 kB | 97/233 kB | 43 kB | 52 kB   
2024-08-30T19:20:37.6521386Z Progress (5): 0.8/1.6 MB | 308/328 kB | 114/233 kB | 43 kB | 52 kB
2024-08-30T19:20:37.6522199Z Progress (5): 0.8/1.6 MB | 308/328 kB | 130/233 kB | 43 kB | 52 kB
2024-08-30T19:20:37.6522920Z                                                                   
2024-08-30T19:20:37.6524790Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/3.2.1/maven-dependency-tree-3.2.1.jar (43 kB at 501 kB/s)
2024-08-30T19:20:37.6526540Z #24 16.78 Progress (4): 0.8/1.6 MB | 308/328 kB | 146/233 kB | 52 kB
2024-08-30T19:20:37.6527265Z                                                           
2024-08-30T19:20:37.6528746Z Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar
2024-08-30T19:20:37.6530897Z #24 16.78 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-tree/9.5/asm-tree-9.5.jar (52 kB at 611 kB/s)
2024-08-30T19:20:37.6532434Z #24 16.78 Progress (3): 0.8/1.6 MB | 308/328 kB | 163/233 kB
2024-08-30T19:20:37.6533126Z Progress (3): 0.8/1.6 MB | 308/328 kB | 179/233 kB
2024-08-30T19:20:37.6534025Z Progress (3): 0.8/1.6 MB | 308/328 kB | 196/233 kB
2024-08-30T19:20:37.6534647Z Progress (3): 0.8/1.6 MB | 325/328 kB | 196/233 kB
2024-08-30T19:20:37.6535277Z Progress (3): 0.8/1.6 MB | 328 kB | 196/233 kB    
2024-08-30T19:20:37.6535891Z Progress (3): 0.8/1.6 MB | 328 kB | 212/233 kB
2024-08-30T19:20:37.6536489Z Progress (3): 0.8/1.6 MB | 328 kB | 228/233 kB
2024-08-30T19:20:37.6537088Z Progress (3): 0.8/1.6 MB | 328 kB | 233 kB    
2024-08-30T19:20:37.6537640Z                                           
2024-08-30T19:20:37.6538974Z Downloaded from central: https://repo.maven.apache.org/maven2/org/jdom/jdom2/2.0.6.1/jdom2-2.0.6.1.jar (328 kB at 3.9 MB/s)
2024-08-30T19:20:37.6540149Z #24 16.78 Progress (2): 0.8/1.6 MB | 233 kB
2024-08-30T19:20:37.6540687Z Progress (2): 0.8/1.6 MB | 233 kB
2024-08-30T19:20:37.6541168Z Progress (2): 0.9/1.6 MB | 233 kB
2024-08-30T19:20:37.6541643Z Progress (2): 0.9/1.6 MB | 233 kB
2024-08-30T19:20:37.6542099Z Progress (2): 0.9/1.6 MB | 233 kB
2024-08-30T19:20:37.6542582Z Progress (2): 0.9/1.6 MB | 233 kB
2024-08-30T19:20:37.6543040Z Progress (2): 0.9/1.6 MB | 233 kB
2024-08-30T19:20:37.6543492Z Progress (2): 0.9/1.6 MB | 233 kB
2024-08-30T19:20:37.6543964Z Progress (2): 1.0/1.6 MB | 233 kB
2024-08-30T19:20:37.6544427Z Progress (2): 1.0/1.6 MB | 233 kB
2024-08-30T19:20:37.6544882Z Progress (2): 1.0/1.6 MB | 233 kB
2024-08-30T19:20:37.6545361Z Progress (2): 1.0/1.6 MB | 233 kB
2024-08-30T19:20:37.6545824Z Progress (2): 1.0/1.6 MB | 233 kB
2024-08-30T19:20:37.6546273Z Progress (2): 1.0/1.6 MB | 233 kB
2024-08-30T19:20:37.6546737Z Progress (2): 1.1/1.6 MB | 233 kB
2024-08-30T19:20:37.6547200Z Progress (2): 1.1/1.6 MB | 233 kB
2024-08-30T19:20:37.6547633Z                                  
2024-08-30T19:20:37.6548980Z Downloaded from central: https://repo.maven.apache.org/maven2/org/vafer/jdependency/2.8.0/jdependency-2.8.0.jar (233 kB at 2.7 MB/s)
2024-08-30T19:20:37.6550205Z #24 16.78 Progress (1): 1.1/1.6 MB
2024-08-30T19:20:37.6550667Z Progress (1): 1.1/1.6 MB
2024-08-30T19:20:37.6551087Z Progress (1): 1.1/1.6 MB
2024-08-30T19:20:37.6551505Z Progress (1): 1.1/1.6 MB
2024-08-30T19:20:37.6551917Z Progress (2): 1.1/1.6 MB | 16/752 kB
2024-08-30T19:20:37.6552418Z Progress (2): 1.1/1.6 MB | 33/752 kB
2024-08-30T19:20:37.6552919Z Progress (2): 1.1/1.6 MB | 49/752 kB
2024-08-30T19:20:37.6553406Z Progress (2): 1.1/1.6 MB | 64/752 kB
2024-08-30T19:20:37.6554208Z Progress (2): 1.1/1.6 MB | 80/752 kB
2024-08-30T19:20:37.6554778Z Progress (2): 1.1/1.6 MB | 96/752 kB
2024-08-30T19:20:37.6555261Z Progress (2): 1.1/1.6 MB | 113/752 kB
2024-08-30T19:20:37.6555767Z Progress (2): 1.1/1.6 MB | 129/752 kB
2024-08-30T19:20:37.6556273Z Progress (2): 1.1/1.6 MB | 145/752 kB
2024-08-30T19:20:37.6556764Z Progress (2): 1.1/1.6 MB | 162/752 kB
2024-08-30T19:20:37.6557258Z Progress (2): 1.1/1.6 MB | 178/752 kB
2024-08-30T19:20:37.6557758Z Progress (2): 1.1/1.6 MB | 195/752 kB
2024-08-30T19:20:37.6558245Z Progress (2): 1.1/1.6 MB | 211/752 kB
2024-08-30T19:20:37.6558735Z Progress (2): 1.1/1.6 MB | 227/752 kB
2024-08-30T19:20:37.6559240Z Progress (2): 1.1/1.6 MB | 244/752 kB
2024-08-30T19:20:37.6559724Z Progress (2): 1.1/1.6 MB | 260/752 kB
2024-08-30T19:20:37.6560218Z Progress (2): 1.1/1.6 MB | 277/752 kB
2024-08-30T19:20:37.6560712Z Progress (2): 1.1/1.6 MB | 293/752 kB
2024-08-30T19:20:37.6561196Z Progress (2): 1.1/1.6 MB | 309/752 kB
2024-08-30T19:20:37.6561698Z Progress (2): 1.1/1.6 MB | 326/752 kB
2024-08-30T19:20:37.6562194Z Progress (2): 1.1/1.6 MB | 342/752 kB
2024-08-30T19:20:37.6562671Z Progress (2): 1.1/1.6 MB | 358/752 kB
2024-08-30T19:20:37.6563151Z Progress (2): 1.1/1.6 MB | 375/752 kB
2024-08-30T19:20:37.6563639Z Progress (2): 1.1/1.6 MB | 391/752 kB
2024-08-30T19:20:37.6564126Z Progress (2): 1.1/1.6 MB | 408/752 kB
2024-08-30T19:20:37.6564619Z Progress (2): 1.1/1.6 MB | 424/752 kB
2024-08-30T19:20:37.6565118Z Progress (2): 1.1/1.6 MB | 440/752 kB
2024-08-30T19:20:37.6565613Z Progress (2): 1.1/1.6 MB | 457/752 kB
2024-08-30T19:20:37.6566117Z Progress (2): 1.1/1.6 MB | 473/752 kB
2024-08-30T19:20:37.6566872Z Progress (2): 1.1/1.6 MB | 490/752 kB
2024-08-30T19:20:37.6567351Z Progress (2): 1.1/1.6 MB | 506/752 kB
2024-08-30T19:20:37.6567831Z Progress (2): 1.1/1.6 MB | 522/752 kB
2024-08-30T19:20:37.6568349Z Progress (2): 1.1/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6568850Z Progress (2): 1.1/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6569367Z Progress (2): 1.2/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6569865Z Progress (2): 1.2/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6570349Z Progress (2): 1.2/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6570844Z Progress (2): 1.2/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6571552Z Progress (2): 1.2/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6572039Z Progress (2): 1.2/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6572528Z Progress (2): 1.3/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6573029Z Progress (2): 1.3/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6573510Z Progress (2): 1.3/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6573999Z Progress (2): 1.3/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6574495Z Progress (2): 1.3/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6574983Z Progress (2): 1.3/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6575470Z Progress (2): 1.4/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6575975Z Progress (2): 1.4/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6576459Z Progress (2): 1.4/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6576952Z Progress (2): 1.4/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6577477Z Progress (2): 1.4/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6577985Z Progress (2): 1.4/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6578510Z Progress (2): 1.5/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6579022Z Progress (2): 1.5/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6579573Z Progress (2): 1.5/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6580091Z Progress (2): 1.5/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6580598Z Progress (2): 1.5/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6581076Z Progress (2): 1.5/1.6 MB | 539/752 kB
2024-08-30T19:20:37.6581572Z Progress (2): 1.5/1.6 MB | 555/752 kB
2024-08-30T19:20:37.6582083Z Progress (2): 1.5/1.6 MB | 571/752 kB
2024-08-30T19:20:37.6582570Z Progress (2): 1.5/1.6 MB | 588/752 kB
2024-08-30T19:20:37.6583050Z Progress (2): 1.5/1.6 MB | 604/752 kB
2024-08-30T19:20:37.6583521Z Progress (2): 1.5/1.6 MB | 621/752 kB
2024-08-30T19:20:37.6583986Z Progress (2): 1.5/1.6 MB | 637/752 kB
2024-08-30T19:20:37.6584462Z Progress (2): 1.5/1.6 MB | 653/752 kB
2024-08-30T19:20:37.6585191Z Progress (2): 1.5/1.6 MB | 670/752 kB
2024-08-30T19:20:37.6585679Z Progress (2): 1.5/1.6 MB | 686/752 kB
2024-08-30T19:20:37.6586161Z Progress (2): 1.5/1.6 MB | 702/752 kB
2024-08-30T19:20:37.6586642Z Progress (2): 1.5/1.6 MB | 719/752 kB
2024-08-30T19:20:37.6587118Z Progress (2): 1.5/1.6 MB | 735/752 kB
2024-08-30T19:20:37.6587614Z Progress (2): 1.5/1.6 MB | 752/752 kB
2024-08-30T19:20:37.6588095Z Progress (2): 1.5/1.6 MB | 752 kB    
2024-08-30T19:20:37.6588551Z                                  
2024-08-30T19:20:37.6590168Z Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar (752 kB at 8.7 MB/s)
2024-08-30T19:20:37.6591565Z #24 16.78 Progress (1): 1.6/1.6 MB
2024-08-30T19:20:37.6592021Z Progress (1): 1.6/1.6 MB
2024-08-30T19:20:37.6592393Z Progress (1): 1.6/1.6 MB
2024-08-30T19:20:37.6592776Z Progress (1): 1.6/1.6 MB
2024-08-30T19:20:37.6593173Z Progress (1): 1.6 MB    
2024-08-30T19:20:37.6593545Z                     
2024-08-30T19:20:37.6595059Z Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.jar (1.6 MB at 16 MB/s)
2024-08-30T19:20:38.1875119Z #24 17.35 [INFO] Replacing main artifact /backend/target/backend-0.0.1-SNAPSHOT.jar with repackaged archive, adding nested dependencies in BOOT-INF/.
2024-08-30T19:20:38.1877909Z #24 17.35 [INFO] The original artifact has been renamed to /backend/target/backend-0.0.1-SNAPSHOT.jar.original
2024-08-30T19:20:38.1879095Z #24 17.35 [INFO] 
2024-08-30T19:20:38.1880013Z #24 17.35 [INFO] --- install:3.1.1:install (default-install) @ backend ---
2024-08-30T19:20:38.1883128Z #24 17.38 [INFO] Installing /backend/pom.xml to /root/.m2/repository/com/redocode/backend/0.0.1-SNAPSHOT/backend-0.0.1-SNAPSHOT.pom
2024-08-30T19:20:38.1886235Z #24 17.38 [INFO] Installing /backend/target/backend-0.0.1-SNAPSHOT.jar to /root/.m2/repository/com/redocode/backend/0.0.1-SNAPSHOT/backend-0.0.1-SNAPSHOT.jar
2024-08-30T19:20:38.1888461Z #24 17.51 [INFO] ------------------------------------------------------------------------
2024-08-30T19:20:38.1889351Z #24 17.51 [INFO] BUILD SUCCESS
2024-08-30T19:20:38.1890306Z #24 17.51 [INFO] ------------------------------------------------------------------------
2024-08-30T19:20:38.3394365Z #24 17.52 [INFO] Total time:  15.461 s
2024-08-30T19:20:38.9537284Z #24 17.52 [INFO] Finished at: 2024-08-30T19:20:38Z
2024-08-30T19:20:38.9538766Z #24 17.52 [INFO] ------------------------------------------------------------------------
2024-08-30T19:20:38.9539770Z #24 DONE 18.3s
2024-08-30T19:20:39.2019839Z 
2024-08-30T19:20:39.2021478Z #26 [api production-stage 5/5] COPY --from=build-stage /backend/target/backend-0.0.1-SNAPSHOT.jar /backend/backend.jar
2024-08-30T19:20:39.2807108Z #26 DONE 0.2s
2024-08-30T19:20:39.4320349Z 
2024-08-30T19:20:39.4320981Z #27 [api] exporting to image
2024-08-30T19:20:39.4321556Z #27 exporting layers
2024-08-30T19:20:40.0158934Z #27 exporting layers 0.7s done
2024-08-30T19:20:40.1954057Z #27 writing image sha256:80be31c2ba52fda9e4e29d96917862e6a299672ce3b040a1c33e99529141679d done
2024-08-30T19:20:40.1955931Z #27 naming to docker.io/library/projectsource-api done
2024-08-30T19:20:40.1956712Z #27 DONE 0.7s
2024-08-30T19:20:40.1956954Z 
2024-08-30T19:20:40.1957230Z #28 [api] resolving provenance for metadata file
2024-08-30T19:20:40.1957879Z #28 DONE 0.0s
2024-08-30T19:20:40.1958139Z 
2024-08-30T19:20:40.1958519Z #29 [frontend internal] load build definition from Dockerfile
2024-08-30T19:20:40.1959266Z #29 transferring dockerfile: 439B done
2024-08-30T19:20:40.1960201Z #29 WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 2)
2024-08-30T19:20:40.1961361Z #29 WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 13)
2024-08-30T19:20:40.1961964Z #29 DONE 0.0s
2024-08-30T19:20:40.1962187Z 
2024-08-30T19:20:40.1962690Z #30 [frontend auth] library/node:pull token for registry-1.docker.io
2024-08-30T19:20:40.3471900Z #30 DONE 0.0s
2024-08-30T19:20:40.3472333Z 
2024-08-30T19:20:40.3473847Z #31 [frontend auth] library/nginx:pull token for registry-1.docker.io
2024-08-30T19:20:40.3474869Z #31 DONE 0.0s
2024-08-30T19:20:40.3475132Z 
2024-08-30T19:20:40.3475670Z #32 [frontend internal] load metadata for docker.io/library/node:21-alpine
2024-08-30T19:20:40.5535042Z #32 DONE 0.5s
2024-08-30T19:20:40.5535387Z 
2024-08-30T19:20:40.5536057Z #33 [frontend internal] load metadata for docker.io/library/nginx:stable-alpine
2024-08-30T19:20:40.6802409Z #33 DONE 0.5s
2024-08-30T19:20:40.6802787Z 
2024-08-30T19:20:40.6803047Z #34 [frontend internal] load .dockerignore
2024-08-30T19:20:40.6803764Z #34 transferring context: 406B done
2024-08-30T19:20:40.6804376Z #34 DONE 0.0s
2024-08-30T19:20:40.6804641Z 
2024-08-30T19:20:40.6804881Z #35 [frontend internal] load build context
2024-08-30T19:20:40.6805583Z #35 transferring context: 4.68MB 0.1s done
2024-08-30T19:20:40.6806104Z #35 DONE 0.1s
2024-08-30T19:20:40.6806275Z 
2024-08-30T19:20:40.6807306Z #36 [frontend build-stage 1/8] FROM docker.io/library/node:21-alpine@sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93
2024-08-30T19:20:40.6808876Z #36 resolve docker.io/library/node:21-alpine@sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93 done
2024-08-30T19:20:40.6810008Z #36 sha256:14d453f422e7d10a7e49d97e6a77f66239fcc1503954b4a887b7ac16e66220a8 0B / 1.38MB 0.1s
2024-08-30T19:20:40.6811212Z #36 sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93 1.43kB / 1.43kB done
2024-08-30T19:20:40.6812217Z #36 sha256:6908bbe242172d79727839290c3d893aa66607aec20e405823c8e56b0b27d8c4 1.16kB / 1.16kB done
2024-08-30T19:20:40.6813619Z #36 sha256:cad63adc9266f2381a0730aabdb7f8dc65ef32c446cdeb238dae9a54a1ea490f 7.23kB / 7.23kB done
2024-08-30T19:20:40.6814605Z #36 sha256:d25f557d7f31bf7acfac935859b5153da41d13c41f2b468d16f729a5b883634f 0B / 3.62MB 0.1s
2024-08-30T19:20:40.6815541Z #36 sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 0B / 43.94MB 0.1s
2024-08-30T19:20:40.7828043Z #36 sha256:14d453f422e7d10a7e49d97e6a77f66239fcc1503954b4a887b7ac16e66220a8 1.38MB / 1.38MB 0.1s done
2024-08-30T19:20:40.7829374Z #36 sha256:d25f557d7f31bf7acfac935859b5153da41d13c41f2b468d16f729a5b883634f 3.62MB / 3.62MB 0.1s done
2024-08-30T19:20:40.7830206Z #36 sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 8.39MB / 43.94MB 0.2s
2024-08-30T19:20:40.7830988Z #36 extracting sha256:d25f557d7f31bf7acfac935859b5153da41d13c41f2b468d16f729a5b883634f
2024-08-30T19:20:40.7831732Z #36 sha256:24ff74239155098e7efecdea07095e1d467cb0c2bd55b3795b0a080716951fe7 0B / 450B 0.2s
2024-08-30T19:20:40.8828953Z #36 sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 25.17MB / 43.94MB 0.3s
2024-08-30T19:20:40.8829899Z #36 extracting sha256:d25f557d7f31bf7acfac935859b5153da41d13c41f2b468d16f729a5b883634f 0.1s done
2024-08-30T19:20:40.8831038Z #36 sha256:24ff74239155098e7efecdea07095e1d467cb0c2bd55b3795b0a080716951fe7 450B / 450B 0.2s done
2024-08-30T19:20:41.0797445Z #36 sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 43.94MB / 43.94MB 0.5s done
2024-08-30T19:20:41.1827952Z #36 extracting sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f
2024-08-30T19:20:41.8549952Z #36 ...
2024-08-30T19:20:41.8554162Z 
2024-08-30T19:20:41.8559364Z #37 [frontend production-stage 1/4] FROM docker.io/library/nginx:stable-alpine@sha256:d4d72ee8e6d028c5ad939454164d3645be2d38afb5c352277926a48e24abf4fa
2024-08-30T19:20:41.8565457Z #37 resolve docker.io/library/nginx:stable-alpine@sha256:d4d72ee8e6d028c5ad939454164d3645be2d38afb5c352277926a48e24abf4fa 0.0s done
2024-08-30T19:20:41.8571547Z #37 sha256:d4d72ee8e6d028c5ad939454164d3645be2d38afb5c352277926a48e24abf4fa 9.06kB / 9.06kB done
2024-08-30T19:20:41.8577372Z #37 sha256:f05d105face814474acc5538160bd3f29309d9398dd895a4e71f676a4fd9a3fc 2.50kB / 2.50kB done
2024-08-30T19:20:41.8582680Z #37 sha256:9703b2608a982bc40633a891858a59ab10fc1c96156056e888d5754fb427d6ed 11.21kB / 11.21kB done
2024-08-30T19:20:41.8587680Z #37 sha256:e84a595b509f2cd3a17f9451e677ea9a3fad34a4dacf685d68589bdafe64f675 1.76MB / 1.76MB 0.2s done
2024-08-30T19:20:41.8592108Z #37 extracting sha256:e84a595b509f2cd3a17f9451e677ea9a3fad34a4dacf685d68589bdafe64f675 0.1s done
2024-08-30T19:20:41.8596600Z #37 sha256:8e479110e8a8177d2f9462c9efd90a78016306778bc47920b6d01c6b0cae4ab7 956B / 956B 0.3s done
2024-08-30T19:20:41.8600979Z #37 sha256:ecc9b66af851df3e20f5692dd98202f3699178e161291bce3c4557ecaee3655e 394B / 394B 0.3s done
2024-08-30T19:20:41.8605509Z #37 sha256:09732b09eef5bd0314b1a68423cd67bdcbf2ee7c3d4ef1b7f2803fee1b5de08e 1.21kB / 1.21kB 0.3s done
2024-08-30T19:20:41.8609598Z #37 sha256:49fbf0520b780f67800f90704831bc8d461373f30e3ea4f64c82e2c0303948aa 628B / 628B 0.3s done
2024-08-30T19:20:41.8614540Z #37 sha256:128ae6f0c7f5f795d18361d96629fd7c2571705018259fa3bcca03a07b6b7dd3 13.19MB / 13.19MB 0.5s done
2024-08-30T19:20:41.8618065Z #37 sha256:2a633cf0ba84ee9a0920946c0c6d46c05fb4e4d898f3ef1a153d1452be9476ca 1.40kB / 1.40kB 0.4s done
2024-08-30T19:20:41.8621110Z #37 extracting sha256:49fbf0520b780f67800f90704831bc8d461373f30e3ea4f64c82e2c0303948aa done
2024-08-30T19:20:41.8624267Z #37 extracting sha256:8e479110e8a8177d2f9462c9efd90a78016306778bc47920b6d01c6b0cae4ab7 done
2024-08-30T19:20:41.8627659Z #37 extracting sha256:ecc9b66af851df3e20f5692dd98202f3699178e161291bce3c4557ecaee3655e done
2024-08-30T19:20:41.8630998Z #37 extracting sha256:09732b09eef5bd0314b1a68423cd67bdcbf2ee7c3d4ef1b7f2803fee1b5de08e done
2024-08-30T19:20:41.8634285Z #37 extracting sha256:2a633cf0ba84ee9a0920946c0c6d46c05fb4e4d898f3ef1a153d1452be9476ca done
2024-08-30T19:20:41.8637615Z #37 extracting sha256:128ae6f0c7f5f795d18361d96629fd7c2571705018259fa3bcca03a07b6b7dd3 0.4s done
2024-08-30T19:20:41.8641074Z #37 DONE 1.2s
2024-08-30T19:20:41.8643128Z 
2024-08-30T19:20:41.8645711Z #38 [frontend production-stage 2/4] COPY nginx.conf /etc/nginx/nginx.conf
2024-08-30T19:20:41.8648508Z #38 DONE 0.0s
2024-08-30T19:20:41.8650769Z 
2024-08-30T19:20:41.8653879Z #36 [frontend build-stage 1/8] FROM docker.io/library/node:21-alpine@sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93
2024-08-30T19:20:42.1909375Z #36 ...
2024-08-30T19:20:42.1909579Z 
2024-08-30T19:20:42.1910122Z #39 [frontend production-stage 3/4] RUN rm -r /etc/nginx/conf.d
2024-08-30T19:20:42.1910564Z #39 DONE 0.2s
2024-08-30T19:20:42.1993580Z 
2024-08-30T19:20:42.1995605Z #36 [frontend build-stage 1/8] FROM docker.io/library/node:21-alpine@sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93
2024-08-30T19:20:42.6945471Z #36 extracting sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 1.5s done
2024-08-30T19:20:42.6947090Z #36 extracting sha256:14d453f422e7d10a7e49d97e6a77f66239fcc1503954b4a887b7ac16e66220a8
2024-08-30T19:20:42.8052242Z #36 extracting sha256:14d453f422e7d10a7e49d97e6a77f66239fcc1503954b4a887b7ac16e66220a8 0.0s done
2024-08-30T19:20:42.8053139Z #36 extracting sha256:24ff74239155098e7efecdea07095e1d467cb0c2bd55b3795b0a080716951fe7 done
2024-08-30T19:20:42.8053714Z #36 DONE 2.2s
2024-08-30T19:20:42.8053941Z 
2024-08-30T19:20:42.8054392Z #40 [frontend build-stage 2/8] WORKDIR /app
2024-08-30T19:20:42.8054741Z #40 DONE 0.0s
2024-08-30T19:20:42.8054876Z 
2024-08-30T19:20:42.8055173Z #41 [frontend build-stage 3/8] COPY package*.json ./
2024-08-30T19:20:42.8055795Z #41 DONE 0.0s
2024-08-30T19:20:42.9571229Z 
2024-08-30T19:20:42.9572138Z #42 [frontend build-stage 4/8] RUN yarn
2024-08-30T19:20:43.2059136Z #42 0.399 yarn install v1.22.19
2024-08-30T19:20:43.4138821Z #42 0.418 info No lockfile found.
2024-08-30T19:20:43.4139367Z #42 0.423 [1/4] Resolving packages...
2024-08-30T19:20:43.4140309Z #42 0.457 (node:1) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
2024-08-30T19:20:43.4141726Z #42 0.457 (Use `node --trace-deprecation ...` to show where the warning was created)
2024-08-30T19:20:45.5653451Z #42 2.758 warning gh-pages > globby > glob@7.2.3: Glob versions prior to v9 are no longer supported
2024-08-30T19:20:45.7741379Z #42 2.817 warning gh-pages > globby > glob > inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
2024-08-30T19:20:50.7706841Z #42 7.964 warning eslint > @humanwhocodes/config-array@0.11.14: Use @eslint/config-array instead
2024-08-30T19:20:50.9978586Z #42 8.011 warning eslint > file-entry-cache > flat-cache > rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported
2024-08-30T19:20:50.9980110Z #42 8.012 warning eslint > file-entry-cache > flat-cache > rimraf > glob@7.2.3: Glob versions prior to v9 are no longer supported
2024-08-30T19:20:50.9981579Z #42 8.040 warning eslint > @humanwhocodes/config-array > @humanwhocodes/object-schema@2.0.3: Use @eslint/object-schema instead
2024-08-30T19:20:53.7743335Z #42 10.97 [2/4] Fetching packages...
2024-08-30T19:21:05.5502658Z #42 22.74 warning chart.js@4.4.4: The engine "pnpm" appears to be invalid.
2024-08-30T19:21:05.7119926Z #42 22.75 [3/4] Linking dependencies...
2024-08-30T19:21:05.7121528Z #42 22.75 warning " > @guolao/vue-monaco-editor@1.5.4" has unmet peer dependency "monaco-editor@>=0.43.0".
2024-08-30T19:21:05.7122893Z #42 22.75 warning "@guolao/vue-monaco-editor > @monaco-editor/loader@1.4.0" has unmet peer dependency "monaco-editor@>= 0.21.0 < 1".
2024-08-30T19:21:05.7123884Z #42 22.75 warning " > bootstrap@5.3.3" has unmet peer dependency "@popperjs/core@^2.11.8".
2024-08-30T19:21:10.0309740Z #42 27.22 [4/4] Building fresh packages...
2024-08-30T19:21:22.1453628Z #42 39.34 success Saved lockfile.
2024-08-30T19:21:22.2995694Z #42 39.34 Done in 38.95s.
2024-08-30T19:21:25.0507909Z #42 DONE 42.2s
2024-08-30T19:21:25.2679204Z 
2024-08-30T19:21:25.2680052Z #43 [frontend build-stage 5/8] COPY . .
2024-08-30T19:21:25.2746595Z #43 DONE 0.1s
2024-08-30T19:21:25.2746925Z 
2024-08-30T19:21:25.2747413Z #44 [frontend build-stage 6/8] RUN npm install
2024-08-30T19:21:29.3408034Z #44 4.223 
2024-08-30T19:21:29.3408999Z #44 4.223 added 1 package, changed 1 package, and audited 739 packages in 4s
2024-08-30T19:21:29.4965330Z #44 4.223 
2024-08-30T19:21:29.4967541Z #44 4.223 178 packages are looking for funding
2024-08-30T19:21:29.4968264Z #44 4.223   run `npm fund` for details
2024-08-30T19:21:29.4968632Z #44 4.228 
2024-08-30T19:21:29.4968947Z #44 4.228 3 moderate severity vulnerabilities
2024-08-30T19:21:29.4969353Z #44 4.228 
2024-08-30T19:21:29.4969966Z #44 4.228 To address all issues (including breaking changes), run:
2024-08-30T19:21:29.4971200Z #44 4.228   npm audit fix --force
2024-08-30T19:21:29.4971609Z #44 4.228 
2024-08-30T19:21:29.4971860Z #44 4.228 Run `npm audit` for details.
2024-08-30T19:21:29.4972332Z #44 4.228 npm notice 
2024-08-30T19:21:29.4973161Z #44 4.228 npm notice New minor version of npm available! 10.5.0 -> 10.8.3
2024-08-30T19:21:29.4973898Z #44 4.229 npm notice Changelog: <https://github.com/npm/cli/releases/tag/v10.8.3>
2024-08-30T19:21:29.4974682Z #44 4.229 npm notice Run `npm install -g npm@10.8.3` to update!
2024-08-30T19:21:29.4975227Z #44 4.229 npm notice 
2024-08-30T19:21:29.5467101Z #44 DONE 4.4s
2024-08-30T19:21:29.6987053Z 
2024-08-30T19:21:29.6988032Z #45 [frontend build-stage 7/8] RUN yarn install
2024-08-30T19:21:30.2062482Z #45 0.658 ➤ YN0000: · Yarn 4.0.2
2024-08-30T19:21:30.3734618Z #45 0.675 ➤ YN0000: ┌ Resolution step
2024-08-30T19:21:35.2710207Z #45 5.723 ➤ YN0085: │ + @guolao/vue-monaco-editor@npm:1.5.4, @rushstack/eslint-patch@npm:1.10.4, @stomp/stompjs@npm:7.0.0, @testing-library/vue@npm:8.1.0, and 786 more.
2024-08-30T19:21:35.4353461Z #45 5.735 ➤ YN0000: └ Completed in 5s 60ms
2024-08-30T19:21:35.4356565Z #45 5.736 ➤ YN0000: ┌ Post-resolution validation
2024-08-30T19:21:35.4358092Z #45 5.736 ➤ YN0002: │ yarn_ts_vue@workspace:. doesn't provide @popperjs/core (p3f8e2), requested by bootstrap.
2024-08-30T19:21:35.4360090Z #45 5.736 ➤ YN0002: │ yarn_ts_vue@workspace:. doesn't provide monaco-editor (pe0eff), requested by @guolao/vue-monaco-editor.
2024-08-30T19:21:35.4363255Z #45 5.736 ➤ YN0086: │ Some peer dependencies are incorrectly met; run yarn explain peer-requirements <hash> for details, where <hash> is the six-letter p-prefixed code.
2024-08-30T19:21:35.4364985Z #45 5.737 ➤ YN0000: └ Completed
2024-08-30T19:21:35.4365739Z #45 5.737 ➤ YN0000: ┌ Fetch step
2024-08-30T19:21:40.2469745Z #45 10.70 ➤ YN0013: │ 752 packages were added to the project (+ 279.58 MiB).
2024-08-30T19:21:40.4341263Z #45 10.70 ➤ YN0000: └ Completed in 4s 963ms
2024-08-30T19:21:40.4342048Z #45 10.74 ➤ YN0000: ┌ Link step
2024-08-30T19:21:46.4965047Z #45 16.95 ➤ YN0007: │ cypress@npm:13.14.1 must be built because it never has been before or the last one failed
2024-08-30T19:21:46.6481725Z #45 16.95 ➤ YN0007: │ vue-demi@npm:0.13.11 [be68b] must be built because it never has been before or the last one failed
2024-08-30T19:21:46.6483716Z #45 16.95 ➤ YN0007: │ vue-demi@npm:0.14.10 [ad0db] must be built because it never has been before or the last one failed
2024-08-30T19:21:46.6485635Z #45 16.95 ➤ YN0007: │ esbuild@npm:0.21.5 must be built because it never has been before or the last one failed
2024-08-30T19:21:47.1575340Z #45 17.61 ➤ YN0000: └ Completed in 6s 873ms
2024-08-30T19:21:47.3593085Z #45 17.66 ➤ YN0000: · Done with warnings in 17s 4ms
2024-08-30T19:21:48.1653304Z #45 DONE 18.6s
2024-08-30T19:21:48.3164708Z 
2024-08-30T19:21:48.3165627Z #46 [frontend build-stage 8/8] RUN yarn build
2024-08-30T19:21:49.9806109Z #46 1.814 vite v5.4.2 building for production...
2024-08-30T19:21:50.1935853Z #46 1.877 transforming...
2024-08-30T19:21:51.7143785Z #46 3.548 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
2024-08-30T19:21:51.7145847Z #46 3.548 rules will be changing to match the behavior specified by CSS in an upcoming
2024-08-30T19:21:51.7147135Z #46 3.548 version. To keep the existing behavior, move the declaration above the nested
2024-08-30T19:21:51.7148310Z #46 3.548 rule. To opt into the new behavior, wrap the declaration in `& {}`.
2024-08-30T19:21:51.7149171Z #46 3.548 
2024-08-30T19:21:51.7149941Z #46 3.548 More info: https://sass-lang.com/d/mixed-decls
2024-08-30T19:21:51.7150609Z #46 3.548 
2024-08-30T19:21:51.7151339Z #46 3.548     ┌──> node_modules/bootstrap/scss/_reboot.scss
2024-08-30T19:21:51.7152184Z #46 3.548 503 │     font-weight: $legend-font-weight;
2024-08-30T19:21:51.7152985Z #46 3.548     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ declaration
2024-08-30T19:21:51.7153572Z #46 3.548     ╵
2024-08-30T19:21:51.7154106Z #46 3.548     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
2024-08-30T19:21:51.7155080Z #46 3.548 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
2024-08-30T19:21:51.7155993Z #46 3.548 137 │ │       @content;
2024-08-30T19:21:51.7156519Z #46 3.548 138 │ │     }
2024-08-30T19:21:51.7156994Z #46 3.548     │ └─── nested rule
2024-08-30T19:21:51.7157475Z #46 3.548     ╵
2024-08-30T19:21:51.7157990Z #46 3.548     node_modules/bootstrap/scss/_reboot.scss 503:3   @import
2024-08-30T19:21:51.7158851Z #46 3.548     node_modules/bootstrap/scss/bootstrap.scss 16:9  @import
2024-08-30T19:21:51.7159737Z #46 3.548     src/assets/styles/styles.scss 1:9                root stylesheet
2024-08-30T19:21:51.7160426Z #46 3.548 
2024-08-30T19:21:51.9235171Z #46 3.552 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
2024-08-30T19:21:51.9237080Z #46 3.552 rules will be changing to match the behavior specified by CSS in an upcoming
2024-08-30T19:21:51.9238662Z #46 3.552 version. To keep the existing behavior, move the declaration above the nested
2024-08-30T19:21:51.9240109Z #46 3.552 rule. To opt into the new behavior, wrap the declaration in `& {}`.
2024-08-30T19:21:51.9241184Z #46 3.552 
2024-08-30T19:21:51.9242058Z #46 3.552 More info: https://sass-lang.com/d/mixed-decls
2024-08-30T19:21:51.9242903Z #46 3.552 
2024-08-30T19:21:51.9243761Z #46 3.552     ┌──> node_modules/bootstrap/scss/_reboot.scss
2024-08-30T19:21:51.9244791Z #46 3.552 504 │     line-height: inherit;
2024-08-30T19:21:51.9246321Z #46 3.552     │     ^^^^^^^^^^^^^^^^^^^^ declaration
2024-08-30T19:21:51.9247241Z #46 3.552     ╵
2024-08-30T19:21:51.9248107Z #46 3.552     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
2024-08-30T19:21:51.9249388Z #46 3.552 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
2024-08-30T19:21:51.9250483Z #46 3.552 137 │ │       @content;
2024-08-30T19:21:51.9251515Z #46 3.552 138 │ │     }
2024-08-30T19:21:51.9252289Z #46 3.552     │ └─── nested rule
2024-08-30T19:21:51.9253009Z #46 3.552     ╵
2024-08-30T19:21:51.9253749Z #46 3.552     node_modules/bootstrap/scss/_reboot.scss 504:3   @import
2024-08-30T19:21:51.9254946Z #46 3.552     node_modules/bootstrap/scss/bootstrap.scss 16:9  @import
2024-08-30T19:21:51.9256162Z #46 3.552     src/assets/styles/styles.scss 1:9                root stylesheet
2024-08-30T19:21:51.9257083Z #46 3.552 
2024-08-30T19:21:51.9258146Z #46 3.602 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
2024-08-30T19:21:51.9259671Z #46 3.602 rules will be changing to match the behavior specified by CSS in an upcoming
2024-08-30T19:21:51.9261202Z #46 3.602 version. To keep the existing behavior, move the declaration above the nested
2024-08-30T19:21:51.9262584Z #46 3.602 rule. To opt into the new behavior, wrap the declaration in `& {}`.
2024-08-30T19:21:51.9263569Z #46 3.602 
2024-08-30T19:21:51.9264463Z #46 3.602 More info: https://sass-lang.com/d/mixed-decls
2024-08-30T19:21:51.9265352Z #46 3.602 
2024-08-30T19:21:51.9266186Z #46 3.602     ┌──> node_modules/bootstrap/scss/_type.scss
2024-08-30T19:21:51.9267281Z #46 3.602 38  │       font-family: $display-font-family;
2024-08-30T19:21:51.9270892Z #46 3.602     │       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ declaration
2024-08-30T19:21:51.9271632Z #46 3.602     ╵
2024-08-30T19:21:51.9272334Z #46 3.602     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
2024-08-30T19:21:51.9273467Z #46 3.602 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
2024-08-30T19:21:51.9274420Z #46 3.602 137 │ │       @content;
2024-08-30T19:21:51.9275023Z #46 3.602 138 │ │     }
2024-08-30T19:21:51.9275604Z #46 3.602     │ └─── nested rule
2024-08-30T19:21:51.9276169Z #46 3.602     ╵
2024-08-30T19:21:51.9276789Z #46 3.602     node_modules/bootstrap/scss/_type.scss 38:5      @import
2024-08-30T19:21:51.9277786Z #46 3.602     node_modules/bootstrap/scss/bootstrap.scss 17:9  @import
2024-08-30T19:21:51.9278857Z #46 3.602     src/assets/styles/styles.scss 1:9                root stylesheet
2024-08-30T19:21:51.9279689Z #46 3.602 
2024-08-30T19:21:51.9280656Z #46 3.604 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
2024-08-30T19:21:51.9281997Z #46 3.604 rules will be changing to match the behavior specified by CSS in an upcoming
2024-08-30T19:21:51.9283270Z #46 3.604 version. To keep the existing behavior, move the declaration above the nested
2024-08-30T19:21:51.9284456Z #46 3.604 rule. To opt into the new behavior, wrap the declaration in `& {}`.
2024-08-30T19:21:51.9285278Z #46 3.604 
2024-08-30T19:21:51.9285945Z #46 3.604 More info: https://sass-lang.com/d/mixed-decls
2024-08-30T19:21:51.9286607Z #46 3.604 
2024-08-30T19:21:51.9287232Z #46 3.604     ┌──> node_modules/bootstrap/scss/_type.scss
2024-08-30T19:21:51.9288131Z #46 3.604 39  │       font-style: $display-font-style;
2024-08-30T19:21:51.9289010Z #46 3.604     │       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ declaration
2024-08-30T19:21:51.9289701Z #46 3.604     ╵
2024-08-30T19:21:51.9290365Z #46 3.604     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
2024-08-30T19:21:51.9291701Z #46 3.604 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
2024-08-30T19:21:51.9292647Z #46 3.604 137 │ │       @content;
2024-08-30T19:21:51.9293222Z #46 3.604 138 │ │     }
2024-08-30T19:21:51.9293755Z #46 3.604     │ └─── nested rule
2024-08-30T19:21:51.9294312Z #46 3.604     ╵
2024-08-30T19:21:51.9294923Z #46 3.604     node_modules/bootstrap/scss/_type.scss 39:5      @import
2024-08-30T19:21:51.9296209Z #46 3.604     node_modules/bootstrap/scss/bootstrap.scss 17:9  @import
2024-08-30T19:21:51.9297283Z #46 3.604     src/assets/styles/styles.scss 1:9                root stylesheet
2024-08-30T19:21:51.9298088Z #46 3.604 
2024-08-30T19:21:51.9298987Z #46 3.607 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
2024-08-30T19:21:51.9300266Z #46 3.607 rules will be changing to match the behavior specified by CSS in an upcoming
2024-08-30T19:21:51.9301521Z #46 3.607 version. To keep the existing behavior, move the declaration above the nested
2024-08-30T19:21:51.9302711Z #46 3.607 rule. To opt into the new behavior, wrap the declaration in `& {}`.
2024-08-30T19:21:51.9303529Z #46 3.607 
2024-08-30T19:21:51.9304201Z #46 3.607 More info: https://sass-lang.com/d/mixed-decls
2024-08-30T19:21:51.9304864Z #46 3.607 
2024-08-30T19:21:51.9305492Z #46 3.607     ┌──> node_modules/bootstrap/scss/_type.scss
2024-08-30T19:21:51.9306395Z #46 3.607 40  │       font-weight: $display-font-weight;
2024-08-30T19:21:51.9307317Z #46 3.607     │       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ declaration
2024-08-30T19:21:51.9307993Z #46 3.607     ╵
2024-08-30T19:21:51.9308665Z #46 3.607     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
2024-08-30T19:21:51.9309709Z #46 3.607 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
2024-08-30T19:21:51.9310560Z #46 3.607 137 │ │       @content;
2024-08-30T19:21:51.9311125Z #46 3.607 138 │ │     }
2024-08-30T19:21:51.9311645Z #46 3.607     │ └─── nested rule
2024-08-30T19:21:51.9312165Z #46 3.607     ╵
2024-08-30T19:21:51.9312764Z #46 3.607     node_modules/bootstrap/scss/_type.scss 40:5      @import
2024-08-30T19:21:51.9314095Z #46 3.607     node_modules/bootstrap/scss/bootstrap.scss 17:9  @import
2024-08-30T19:21:51.9315148Z #46 3.607     src/assets/styles/styles.scss 1:9                root stylesheet
2024-08-30T19:21:51.9315960Z #46 3.607 
2024-08-30T19:21:56.1964310Z #46 8.030 WARNING: 22 repetitive deprecation warnings omitted.
2024-08-30T19:21:56.1965137Z #46 8.030 
2024-08-30T19:22:01.0012060Z #46 12.83 ✓ 326 modules transformed.
2024-08-30T19:22:01.3562768Z #46 13.19 rendering chunks...
2024-08-30T19:22:01.6591612Z #46 13.49 computing gzip size...
2024-08-30T19:22:01.8432071Z #46 13.52 dist/index.html                                0.76 kB │ gzip:  0.36 kB
2024-08-30T19:22:01.8433276Z #46 13.53 dist/assets/fronImage3-3n7qjO-G.png           62.55 kB
2024-08-30T19:22:01.8434327Z #46 13.53 dist/assets/fronImage2-BA4ZG6tS.png          121.73 kB
2024-08-30T19:22:01.8435351Z #46 13.53 dist/assets/fronImage1-DEr6hecF.png          179.95 kB
2024-08-30T19:22:01.8436357Z #46 13.53 dist/assets/Inter-roman.var-C-r5W2Hj.woff2   227.18 kB
2024-08-30T19:22:01.8439011Z #46 13.53 dist/assets/Inter-italic.var-DhD-tpjY.woff2  245.04 kB
2024-08-30T19:22:01.8440278Z #46 13.53 dist/assets/RegisterView-C4KoTHqj.css          0.02 kB │ gzip:  0.04 kB
2024-08-30T19:22:01.8441610Z #46 13.53 dist/assets/HomeView-emTC5DPx.css              0.12 kB │ gzip:  0.11 kB
2024-08-30T19:22:01.8445950Z #46 13.53 dist/assets/ExcersicesView-CAuvQzI_.css        0.18 kB │ gzip:  0.15 kB
2024-08-30T19:22:01.8447220Z #46 13.53 dist/assets/CreateView-CbODDtcb.css            0.57 kB │ gzip:  0.25 kB
2024-08-30T19:22:01.8447983Z #46 13.53 dist/assets/ResultsView-BeMKBENi.css           0.71 kB │ gzip:  0.32 kB
2024-08-30T19:22:01.8448717Z #46 13.53 dist/assets/components-CIw8x5Tv.css            3.00 kB │ gzip:  0.96 kB
2024-08-30T19:22:01.8449432Z #46 13.53 dist/assets/index-B431HODb.css               738.40 kB │ gzip: 93.29 kB
2024-08-30T19:22:01.8450131Z #46 13.53 dist/assets/TestView-BRCq6GG6.js               0.24 kB │ gzip:  0.21 kB
2024-08-30T19:22:01.8450849Z #46 13.53 dist/assets/PlayGroundView-Cq6DmXlz.js         0.91 kB │ gzip:  0.53 kB
2024-08-30T19:22:01.8451798Z #46 13.53 dist/assets/ExcersiceView-C1eLbcoQ.js          1.57 kB │ gzip:  0.72 kB
2024-08-30T19:22:01.8452520Z #46 13.53 dist/assets/types-BPR80lJL.js                  2.75 kB │ gzip:  0.54 kB
2024-08-30T19:22:01.8453634Z #46 13.53 dist/assets/CreateView-BmX0Cw1U.js             2.80 kB │ gzip:  1.03 kB
2024-08-30T19:22:01.8454365Z #46 13.53 dist/assets/HomeView-By7B9iTS.js               3.14 kB │ gzip:  1.25 kB
2024-08-30T19:22:01.8455091Z #46 13.53 dist/assets/AccountView-Dsy0t4Sz.js            3.25 kB │ gzip:  1.51 kB
2024-08-30T19:22:01.8455809Z #46 13.53 dist/assets/ExcersicesView-3-dZmwYr.js         3.70 kB │ gzip:  1.82 kB
2024-08-30T19:22:01.8456517Z #46 13.53 dist/assets/ResultsView-FdtD-oOm.js            3.74 kB │ gzip:  1.23 kB
2024-08-30T19:22:01.8457241Z #46 13.53 dist/assets/RegisterView-DmzxbcAh.js          17.80 kB │ gzip:  6.37 kB
2024-08-30T19:22:01.8457968Z #46 13.53 dist/assets/controllers-DetOr74Y.js           40.58 kB │ gzip: 10.27 kB
2024-08-30T19:22:01.8458695Z #46 13.53 dist/assets/components-DHrE_Dzx.js           261.27 kB │ gzip: 91.17 kB
2024-08-30T19:22:01.8459407Z #46 13.53 dist/assets/index-CrVaDnBK.js                388.76 kB │ gzip: 96.74 kB
2024-08-30T19:22:01.8459933Z #46 13.53 ✓ built in 11.68s
2024-08-30T19:22:07.4756599Z #46 DONE 19.3s
2024-08-30T19:22:07.8919719Z 
2024-08-30T19:22:07.8921180Z #47 [frontend production-stage 4/4] COPY --from=build-stage /app/dist /usr/share/nginx/html
2024-08-30T19:22:08.0363059Z #47 DONE 0.0s
2024-08-30T19:22:08.0363475Z 
2024-08-30T19:22:08.0363744Z #48 [frontend] exporting to image
2024-08-30T19:22:08.0364504Z #48 exporting layers 0.1s done
2024-08-30T19:22:08.0652468Z #48 writing image sha256:e82cf77ae976a6f34d874a656e994130ed78275c58eece75d489e04939bd8f8b done
2024-08-30T19:22:08.0654197Z #48 naming to docker.io/library/projectsource-frontend done
2024-08-30T19:22:08.0655156Z #48 DONE 0.1s
2024-08-30T19:22:08.0655393Z 
2024-08-30T19:22:08.0656095Z #49 [frontend] resolving provenance for metadata file
2024-08-30T19:22:08.0656792Z #49 DONE 0.0s
2024-08-30T19:22:08.0665111Z  Network projectsource_frontend  Creating
2024-08-30T19:22:08.1115460Z  Network projectsource_frontend  Created
2024-08-30T19:22:08.1123764Z  Network projectsource_backend  Creating
2024-08-30T19:22:08.1572149Z  Network projectsource_backend  Created
2024-08-30T19:22:08.1581696Z  Network projectsource_docker_net  Creating
2024-08-30T19:22:08.2042305Z  Network projectsource_docker_net  Created
2024-08-30T19:22:08.2044279Z  Container dockerrunner  Creating
2024-08-30T19:22:08.2045224Z  Container projectsource-db-1  Creating
2024-08-30T19:22:08.2372695Z  Container dockerrunner  Created
2024-08-30T19:22:08.2375131Z  Container projectsource-db-1  Created
2024-08-30T19:22:08.2375902Z  Container projectsource-api-1  Creating
2024-08-30T19:22:08.2548304Z  Container projectsource-api-1  Created
2024-08-30T19:22:08.2549159Z  Container projectsource-frontend-1  Creating
2024-08-30T19:22:08.2704238Z  Container projectsource-frontend-1  Created
2024-08-30T19:22:08.2716865Z  Container dockerrunner  Starting
2024-08-30T19:22:08.5474061Z  Container projectsource-db-1  Starting
2024-08-30T19:22:08.5474874Z  Container projectsource-db-1  Started
2024-08-30T19:22:08.5675290Z  Container dockerrunner  Started
2024-08-30T19:22:08.5676325Z  Container projectsource-db-1  Waiting
2024-08-30T19:22:08.5676936Z  Container dockerrunner  Waiting
2024-08-30T19:22:14.0697155Z  Container dockerrunner  Healthy
2024-08-30T19:22:14.0698250Z  Container projectsource-db-1  Healthy
2024-08-30T19:22:14.0699005Z  Container projectsource-api-1  Starting
2024-08-30T19:22:14.4070711Z  Container projectsource-api-1  Started
2024-08-30T19:22:14.4071250Z  Container projectsource-api-1  Waiting
2024-08-30T19:22:56.9083191Z  Container projectsource-api-1  Healthy
2024-08-30T19:22:56.9084147Z  Container projectsource-frontend-1  Starting
2024-08-30T19:22:57.2020664Z  Container projectsource-frontend-1  Started
2024-08-30T19:22:57.2216096Z CONTAINER ID   IMAGE                        COMMAND                  CREATED          STATUS                    PORTS                                                 NAMES
2024-08-30T19:22:57.2231046Z 026b87e27e09   projectsource-frontend       "/docker-entrypoint.…"   49 seconds ago   Up Less than a second     0.0.0.0:80->80/tcp, :::80->80/tcp                     projectsource-frontend-1
2024-08-30T19:22:57.2279780Z 33985da28c43   projectsource-api            "/__cacert_entrypoin…"   49 seconds ago   Up 43 seconds (healthy)   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp, 9090/tcp   projectsource-api-1
2024-08-30T19:22:57.2281382Z 06dbc40367c0   postgres                     "docker-entrypoint.s…"   49 seconds ago   Up 48 seconds (healthy)   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp             projectsource-db-1
2024-08-30T19:22:57.2282964Z 8ebab56b589f   projectsource-dockerrunner   "/bin/sh /usr/local/…"   49 seconds ago   Up 48 seconds (healthy)   2375/tcp, 0.0.0.0:2376->2376/tcp, :::2376->2376/tcp   dockerrunner
2024-08-30T19:22:57.2370577Z ##[group]Run actions/setup-node@v3
2024-08-30T19:22:57.2370944Z with:
2024-08-30T19:22:57.2371439Z   node-version: 20
2024-08-30T19:22:57.2371706Z   always-auth: false
2024-08-30T19:22:57.2371976Z   check-latest: false
2024-08-30T19:22:57.2372414Z   token: ***
2024-08-30T19:22:57.2372649Z ##[endgroup]
2024-08-30T19:22:57.4563948Z Found in cache @ /opt/hostedtoolcache/node/20.17.0/x64
2024-08-30T19:22:57.4571269Z ##[group]Environment details
2024-08-30T19:22:59.6017262Z node: v20.17.0
2024-08-30T19:22:59.6017838Z npm: 10.8.2
2024-08-30T19:22:59.6018282Z yarn: 1.22.22
2024-08-30T19:22:59.6019330Z ##[endgroup]
2024-08-30T19:22:59.6140783Z ##[group]Run sudo apt-get update
2024-08-30T19:22:59.6141180Z [36;1msudo apt-get update[0m
2024-08-30T19:22:59.6141883Z [36;1msudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb -y[0m
2024-08-30T19:22:59.6142599Z [36;1mnpm install cypress[0m
2024-08-30T19:22:59.6143141Z [36;1mnpm install[0m
2024-08-30T19:22:59.6200794Z shell: /usr/bin/bash -e {0}
2024-08-30T19:22:59.6201112Z ##[endgroup]
2024-08-30T19:22:59.7213882Z Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [142 B]
2024-08-30T19:22:59.7612162Z Hit:6 https://packages.microsoft.com/repos/azure-cli focal InRelease
2024-08-30T19:22:59.7613982Z Hit:2 http://azure.archive.ubuntu.com/ubuntu focal InRelease
2024-08-30T19:22:59.7631580Z Hit:7 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease
2024-08-30T19:22:59.7642560Z Hit:3 http://azure.archive.ubuntu.com/ubuntu focal-updates InRelease
2024-08-30T19:22:59.7647489Z Hit:8 https://download.docker.com/linux/ubuntu focal InRelease
2024-08-30T19:22:59.7656843Z Hit:4 http://azure.archive.ubuntu.com/ubuntu focal-backports InRelease
2024-08-30T19:22:59.7670368Z Hit:5 http://azure.archive.ubuntu.com/ubuntu focal-security InRelease
2024-08-30T19:23:01.5328452Z Reading package lists...
2024-08-30T19:23:01.6098061Z Reading package lists...
2024-08-30T19:23:01.8441289Z Building dependency tree...
2024-08-30T19:23:01.8455546Z Reading state information...
2024-08-30T19:23:02.0526640Z libxss1 is already the newest version (1:1.2.3-1).
2024-08-30T19:23:02.0528269Z libxtst6 is already the newest version (2:1.2.3-1).
2024-08-30T19:23:02.0529427Z libxtst6 set to manually installed.
2024-08-30T19:23:02.0530442Z xauth is already the newest version (1:1.1-0ubuntu1).
2024-08-30T19:23:02.0531612Z xauth set to manually installed.
2024-08-30T19:23:02.0532859Z libasound2 is already the newest version (1.2.2-2.1ubuntu2.5).
2024-08-30T19:23:02.0534165Z libasound2 set to manually installed.
2024-08-30T19:23:02.0535753Z libgbm-dev is already the newest version (21.2.6-0ubuntu0.1~20.04.2).
2024-08-30T19:23:02.0537213Z libgtk-3-0 is already the newest version (3.24.20-0ubuntu1.2).
2024-08-30T19:23:02.0538816Z libnss3 is already the newest version (2:3.98-0ubuntu0.20.04.2).
2024-08-30T19:23:02.0539662Z libnss3 set to manually installed.
2024-08-30T19:23:02.0540617Z xvfb is already the newest version (2:1.20.13-1ubuntu1~20.04.17).
2024-08-30T19:23:02.0541547Z The following additional packages will be installed:
2024-08-30T19:23:02.0542642Z   gir1.2-notify-0.7 libgail-common libgail18 libgtk2.0-bin libgtk2.0-common
2024-08-30T19:23:02.0543614Z Suggested packages:
2024-08-30T19:23:02.0543995Z   gvfs
2024-08-30T19:23:02.0760036Z The following NEW packages will be installed:
2024-08-30T19:23:02.0762845Z   gir1.2-notify-0.7 libgail-common libgail18 libgtk2.0-0 libgtk2.0-bin
2024-08-30T19:23:02.0772850Z   libgtk2.0-common libnotify-dev
2024-08-30T19:23:02.0937157Z 0 upgraded, 7 newly installed, 0 to remove and 10 not upgraded.
2024-08-30T19:23:02.0938152Z Need to get 2065 kB of archives.
2024-08-30T19:23:02.0938996Z After this operation, 7088 kB of additional disk space will be used.
2024-08-30T19:23:02.0939929Z Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [142 B]
2024-08-30T19:23:02.1493638Z Get:2 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 gir1.2-notify-0.7 amd64 0.7.9-1ubuntu3.20.04.2 [3588 B]
2024-08-30T19:23:02.1858724Z Get:3 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgtk2.0-common all 2.24.32-4ubuntu4.1 [126 kB]
2024-08-30T19:23:02.2258759Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgtk2.0-0 amd64 2.24.32-4ubuntu4.1 [1789 kB]
2024-08-30T19:23:02.3289074Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgail18 amd64 2.24.32-4ubuntu4.1 [14.8 kB]
2024-08-30T19:23:02.3640574Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgail-common amd64 2.24.32-4ubuntu4.1 [115 kB]
2024-08-30T19:23:02.3994005Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgtk2.0-bin amd64 2.24.32-4ubuntu4.1 [7728 B]
2024-08-30T19:23:02.4339022Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libnotify-dev amd64 0.7.9-1ubuntu3.20.04.2 [8672 B]
2024-08-30T19:23:02.7896625Z Fetched 2065 kB in 0s (5879 kB/s)
2024-08-30T19:23:02.8144900Z Selecting previously unselected package gir1.2-notify-0.7:amd64.
2024-08-30T19:23:02.8226580Z (Reading database ... 
2024-08-30T19:23:02.8227215Z (Reading database ... 5%
2024-08-30T19:23:02.8227798Z (Reading database ... 10%
2024-08-30T19:23:02.8228367Z (Reading database ... 15%
2024-08-30T19:23:02.8228927Z (Reading database ... 20%
2024-08-30T19:23:02.8229478Z (Reading database ... 25%
2024-08-30T19:23:02.8230030Z (Reading database ... 30%
2024-08-30T19:23:02.8230578Z (Reading database ... 35%
2024-08-30T19:23:02.8231146Z (Reading database ... 40%
2024-08-30T19:23:02.8231699Z (Reading database ... 45%
2024-08-30T19:23:02.8232250Z (Reading database ... 50%
2024-08-30T19:23:02.8262612Z (Reading database ... 55%
2024-08-30T19:23:02.8304919Z (Reading database ... 60%
2024-08-30T19:23:02.8330348Z (Reading database ... 65%
2024-08-30T19:23:02.8609807Z (Reading database ... 70%
2024-08-30T19:23:02.8691806Z (Reading database ... 75%
2024-08-30T19:23:02.8790185Z (Reading database ... 80%
2024-08-30T19:23:02.8997833Z (Reading database ... 85%
2024-08-30T19:23:02.9034032Z (Reading database ... 90%
2024-08-30T19:23:02.9279835Z (Reading database ... 95%
2024-08-30T19:23:02.9280563Z (Reading database ... 100%
2024-08-30T19:23:02.9281442Z (Reading database ... 271103 files and directories currently installed.)
2024-08-30T19:23:02.9340148Z Preparing to unpack .../0-gir1.2-notify-0.7_0.7.9-1ubuntu3.20.04.2_amd64.deb ...
2024-08-30T19:23:02.9351898Z Unpacking gir1.2-notify-0.7:amd64 (0.7.9-1ubuntu3.20.04.2) ...
2024-08-30T19:23:02.9609983Z Selecting previously unselected package libgtk2.0-common.
2024-08-30T19:23:02.9774059Z Preparing to unpack .../1-libgtk2.0-common_2.24.32-4ubuntu4.1_all.deb ...
2024-08-30T19:23:02.9786711Z Unpacking libgtk2.0-common (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.0263319Z Selecting previously unselected package libgtk2.0-0:amd64.
2024-08-30T19:23:03.0427563Z Preparing to unpack .../2-libgtk2.0-0_2.24.32-4ubuntu4.1_amd64.deb ...
2024-08-30T19:23:03.0493782Z Unpacking libgtk2.0-0:amd64 (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.1933779Z Selecting previously unselected package libgail18:amd64.
2024-08-30T19:23:03.2112331Z Preparing to unpack .../3-libgail18_2.24.32-4ubuntu4.1_amd64.deb ...
2024-08-30T19:23:03.2121011Z Unpacking libgail18:amd64 (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.2383694Z Selecting previously unselected package libgail-common:amd64.
2024-08-30T19:23:03.2551098Z Preparing to unpack .../4-libgail-common_2.24.32-4ubuntu4.1_amd64.deb ...
2024-08-30T19:23:03.2559980Z Unpacking libgail-common:amd64 (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.2925687Z Selecting previously unselected package libgtk2.0-bin.
2024-08-30T19:23:03.3094291Z Preparing to unpack .../5-libgtk2.0-bin_2.24.32-4ubuntu4.1_amd64.deb ...
2024-08-30T19:23:03.3133733Z Unpacking libgtk2.0-bin (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.3392205Z Selecting previously unselected package libnotify-dev:amd64.
2024-08-30T19:23:03.3561057Z Preparing to unpack .../6-libnotify-dev_0.7.9-1ubuntu3.20.04.2_amd64.deb ...
2024-08-30T19:23:03.3573742Z Unpacking libnotify-dev:amd64 (0.7.9-1ubuntu3.20.04.2) ...
2024-08-30T19:23:03.4221849Z Setting up gir1.2-notify-0.7:amd64 (0.7.9-1ubuntu3.20.04.2) ...
2024-08-30T19:23:03.4253809Z Setting up libgtk2.0-common (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.4294022Z Setting up libnotify-dev:amd64 (0.7.9-1ubuntu3.20.04.2) ...
2024-08-30T19:23:03.4329558Z Setting up libgtk2.0-0:amd64 (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.6366588Z Setting up libgail18:amd64 (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.6399133Z Setting up libgtk2.0-bin (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.6431667Z Setting up libgail-common:amd64 (2.24.32-4ubuntu4.1) ...
2024-08-30T19:23:03.6472205Z Processing triggers for man-db (2.9.1-1) ...
2024-08-30T19:23:04.5460411Z Processing triggers for libc-bin (2.31-0ubuntu9.16) ...
2024-08-30T19:23:35.3875799Z 
2024-08-30T19:23:35.3878456Z added 779 packages, and audited 780 packages in 29s
2024-08-30T19:23:35.3879216Z 
2024-08-30T19:23:35.3879755Z 177 packages are looking for funding
2024-08-30T19:23:35.3880771Z   run `npm fund` for details
2024-08-30T19:23:35.3936464Z 
2024-08-30T19:23:35.3937360Z 5 vulnerabilities (4 moderate, 1 high)
2024-08-30T19:23:35.3937947Z 
2024-08-30T19:23:35.3938467Z To address issues that do not require attention, run:
2024-08-30T19:23:35.3939249Z   npm audit fix
2024-08-30T19:23:35.3939456Z 
2024-08-30T19:23:35.3952986Z To address all issues (including breaking changes), run:
2024-08-30T19:23:35.3954046Z   npm audit fix --force
2024-08-30T19:23:35.3954335Z 
2024-08-30T19:23:35.3954578Z Run `npm audit` for details.
2024-08-30T19:23:36.6690452Z 
2024-08-30T19:23:36.6691564Z up to date, audited 780 packages in 1s
2024-08-30T19:23:36.6692141Z 
2024-08-30T19:23:36.6692472Z 177 packages are looking for funding
2024-08-30T19:23:36.6693117Z   run `npm fund` for details
2024-08-30T19:23:36.6766568Z 
2024-08-30T19:23:36.6767396Z 5 vulnerabilities (4 moderate, 1 high)
2024-08-30T19:23:36.6768166Z 
2024-08-30T19:23:36.6769874Z To address issues that do not require attention, run:
2024-08-30T19:23:36.6770788Z   npm audit fix
2024-08-30T19:23:36.6782407Z 
2024-08-30T19:23:36.6783175Z To address all issues (including breaking changes), run:
2024-08-30T19:23:36.6784187Z   npm audit fix --force
2024-08-30T19:23:36.6784485Z 
2024-08-30T19:23:36.6784701Z Run `npm audit` for details.
2024-08-30T19:23:36.6957396Z ##[group]Run docker run --network="host" -v $PWD:/e2e -w /e2e --entrypoint cypress cypress/included:latest run --e2e -C config/cypress-prod.config.ts
2024-08-30T19:23:36.6959641Z [36;1mdocker run --network="host" -v $PWD:/e2e -w /e2e --entrypoint cypress cypress/included:latest run --e2e -C config/cypress-prod.config.ts[0m
2024-08-30T19:23:36.7024469Z shell: /usr/bin/bash -e {0}
2024-08-30T19:23:36.7024782Z ##[endgroup]
2024-08-30T19:23:36.7233603Z Unable to find image 'cypress/included:latest' locally
2024-08-30T19:23:37.1608622Z latest: Pulling from cypress/included
2024-08-30T19:23:37.2696306Z e4fff0779e6d: Already exists
2024-08-30T19:23:37.2735528Z 62e0fdbe5305: Pulling fs layer
2024-08-30T19:23:37.2738936Z eadcfb20679e: Pulling fs layer
2024-08-30T19:23:37.2742899Z 92e354ec81a5: Pulling fs layer
2024-08-30T19:23:37.2743514Z 87840b3dcede: Pulling fs layer
2024-08-30T19:23:37.2744074Z 13a9e1a62870: Pulling fs layer
2024-08-30T19:23:37.2744514Z 2c701d9a5d8a: Pulling fs layer
2024-08-30T19:23:37.2744965Z e041a568a041: Pulling fs layer
2024-08-30T19:23:37.2745323Z a7814c83964b: Pulling fs layer
2024-08-30T19:23:37.2745686Z 6b8b01107f3e: Pulling fs layer
2024-08-30T19:23:37.2746020Z e041a568a041: Waiting
2024-08-30T19:23:37.2746295Z 87840b3dcede: Waiting
2024-08-30T19:23:37.2746543Z a7814c83964b: Waiting
2024-08-30T19:23:37.2746798Z 13a9e1a62870: Waiting
2024-08-30T19:23:37.2747061Z 6b8b01107f3e: Waiting
2024-08-30T19:23:37.2747316Z 2c701d9a5d8a: Waiting
2024-08-30T19:23:37.4049239Z eadcfb20679e: Verifying Checksum
2024-08-30T19:23:37.4050082Z eadcfb20679e: Download complete
2024-08-30T19:23:37.5394463Z 87840b3dcede: Verifying Checksum
2024-08-30T19:23:37.5395354Z 87840b3dcede: Download complete
2024-08-30T19:23:37.7291754Z 92e354ec81a5: Verifying Checksum
2024-08-30T19:23:37.7292490Z 92e354ec81a5: Download complete
2024-08-30T19:23:39.2292217Z 62e0fdbe5305: Verifying Checksum
2024-08-30T19:23:39.2293166Z 62e0fdbe5305: Download complete
2024-08-30T19:23:39.2327187Z 13a9e1a62870: Verifying Checksum
2024-08-30T19:23:39.2338589Z 13a9e1a62870: Download complete
2024-08-30T19:23:40.7023491Z 2c701d9a5d8a: Verifying Checksum
2024-08-30T19:23:40.7050706Z 2c701d9a5d8a: Download complete
2024-08-30T19:23:40.8520621Z 6b8b01107f3e: Verifying Checksum
2024-08-30T19:23:40.8521378Z 6b8b01107f3e: Download complete
2024-08-30T19:23:40.8935315Z e041a568a041: Verifying Checksum
2024-08-30T19:23:40.8935823Z e041a568a041: Download complete
2024-08-30T19:23:41.9798071Z a7814c83964b: Verifying Checksum
2024-08-30T19:23:41.9798641Z a7814c83964b: Download complete
2024-08-30T19:23:47.2638522Z 62e0fdbe5305: Pull complete
2024-08-30T19:23:47.2788976Z eadcfb20679e: Pull complete
2024-08-30T19:23:49.0772534Z 92e354ec81a5: Pull complete
2024-08-30T19:23:49.2602123Z 87840b3dcede: Pull complete
2024-08-30T19:23:53.1073857Z 13a9e1a62870: Pull complete
2024-08-30T19:23:57.0202452Z 2c701d9a5d8a: Pull complete
2024-08-30T19:24:00.4147506Z e041a568a041: Pull complete
2024-08-30T19:24:11.9499522Z a7814c83964b: Pull complete
2024-08-30T19:24:12.1408892Z 6b8b01107f3e: Pull complete
2024-08-30T19:24:12.1455350Z Digest: sha256:b91314fbe68afb9777d06c13234ca28f0d0e055f4834a5eae962aec0c4857de6
2024-08-30T19:24:12.1471534Z Status: Downloaded newer image for cypress/included:latest
2024-08-30T19:24:12.4875557Z [STARTED] Task without title.
2024-08-30T19:24:13.9936396Z [SUCCESS] Task without title.
2024-08-30T19:24:14.7069471Z 
2024-08-30T19:24:14.7071102Z DevTools listening on ws://127.0.0.1:38213/devtools/browser/27656f4f-afc3-4770-9b93-7eb60e9c687c
2024-08-30T19:24:15.2929347Z (node:369) ExperimentalWarning: `--experimental-loader` may be removed in the future; instead use `register()`:
2024-08-30T19:24:15.2932894Z --import 'data:text/javascript,import { register } from "node:module"; import { pathToFileURL } from "node:url"; register("file%3A///root/.cache/Cypress/13.14.1/Cypress/resources/app/node_modules/ts-node/esm/transpile-only.mjs", pathToFileURL("./"));'
2024-08-30T19:24:15.2935865Z (Use `node --trace-warnings ...` to show where the warning was created)
2024-08-30T19:24:16.2969866Z 
2024-08-30T19:24:16.3211818Z [90m====================================================================================================[39m
2024-08-30T19:24:16.3212765Z 
2024-08-30T19:24:16.3213256Z [0m  ([4m[1mRun Starting[22m[24m)[0m
2024-08-30T19:24:16.3213735Z 
2024-08-30T19:24:16.3289053Z [90m  ┌[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m┐[39m
2024-08-30T19:24:16.3296805Z [90m  │[39m [90mCypress:[39m        13.14.1                                                                        [90m│[39m
2024-08-30T19:24:16.3298778Z [90m  │[39m [90mBrowser:[39m        Electron 118 [90m(headless)[39m                                                        [90m│[39m
2024-08-30T19:24:16.3301032Z [90m  │[39m [90mNode Version:[39m   [0mv20.17.0 [90m(/usr/local/bin/node)[39m[0m                                                 [90m│[39m
2024-08-30T19:24:16.3303374Z [90m  │[39m [90mSpecs:[39m          [0m7 found (CreateNewExercise.cy.ts, FibonachiExercise.cy.ts, HelloWorldCppRun.cy[0m [90m│[39m
2024-08-30T19:24:16.3307411Z [90m  │[39m                 [0m.ts, HelloWorldJsRun.cy.ts, RegisterAndSingIn.cy.ts, UnauthenticationSwitch.cy[0m [90m│[39m
2024-08-30T19:24:16.3309420Z [90m  │[39m                 [0m.ts, _ApiConnection.cy.ts)[0m                                                     [90m│[39m
2024-08-30T19:24:16.3311375Z [90m  │[39m [90mSearched:[39m       [0msrc/__tests__prod/**/*.{cy,spec}.{js,jsx,ts,tsx}[0m                               [90m│[39m
2024-08-30T19:24:16.3313382Z [90m  │[39m [90mExperiments:[39m    experimentalMemoryManagement=true                                              [90m│[39m
2024-08-30T19:24:16.3322862Z [90m  └[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m┘[39m
2024-08-30T19:24:16.3328735Z 
2024-08-30T19:24:16.3328745Z 
2024-08-30T19:24:16.3337283Z [90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m
2024-08-30T19:24:16.3343667Z                                                                                                     
2024-08-30T19:24:16.3345113Z   Running:  [90mCreateNewExercise.cy.ts[39m                                                         [90m(1 of 7)[39m
2024-08-30T19:24:19.1921587Z 
2024-08-30T19:24:19.1927528Z [0m[0m
2024-08-30T19:24:19.1941611Z [0m  Create new exercise[0m
2024-08-30T19:26:14.7788947Z error: XDG_RUNTIME_DIR is invalid or not set in the environment.
2024-08-30T19:26:14.7800099Z error: XDG_RUNTIME_DIR is invalid or not set in the environment.
2024-08-30T19:43:29.7899495Z [32m      cy:command ✔ [39m visit	/
2024-08-30T19:43:29.7901392Z [37m        cons:log ✱ [39m this._vmStatusSubscription intlize
2024-08-30T19:43:29.7902838Z [37m        cons:log ✱ [39m new subsciption on /user/public/topic/codeRunnerState
2024-08-30T19:43:29.7904113Z [37m        cons:log ✱ [39m this._CodeResultsSubscription intlize
2024-08-30T19:43:29.7905400Z [37m        cons:log ✱ [39m new subsciption on /user/public/topic/codeRunnerResults
2024-08-30T19:43:29.7906983Z [37m        cons:log ✱ [39m new subsciption on /user/public/topic/ExecutionResponses
2024-08-30T19:43:29.7921045Z [37m        cons:log ✱ [39m seted
2024-08-30T19:43:29.7922002Z [37m        cons:log ✱ [39m {}
2024-08-30T19:43:29.7922859Z [37m        cons:log ✱ [39m _VmStatusSubscriptions  
2024-08-30T19:43:29.7923919Z [37m        cons:log ✱ [39m method  function () { [native code] }
2024-08-30T19:43:29.7924853Z [37m        cons:log ✱ [39m method  function
2024-08-30T19:43:29.7926009Z [37m        cons:log ✱ [39m _VmStatusSubscriptions  function () { [native code] }
2024-08-30T19:43:29.7927356Z [37m        cons:log ✱ [39m {"codeRunnerType":"UNIDENTIFIED","state":"NONE"}
2024-08-30T19:43:29.7928849Z [37m        cons:log ✱ [39m creator reset
2024-08-30T19:43:29.7929720Z [37m        cons:log ✱ [39m this.languages: []
2024-08-30T19:43:29.7930547Z [37m        cons:log ✱ [39m creator reset
2024-08-30T19:43:29.7937921Z [37m        cons:log ✱ [39m this.languages: []
2024-08-30T19:43:29.7939480Z [32m      cy:command ✔ [39m visit	/
2024-08-30T19:43:29.7967402Z [37m        cons:log ✱ [39m this._vmStatusSubscription intlize
2024-08-30T19:43:29.7969752Z [37m        cons:log ✱ [39m new subsciption on /user/public/topic/codeRunnerState
2024-08-30T19:43:29.7970920Z [37m        cons:log ✱ [39m this._CodeResultsSubscription intlize
2024-08-30T19:43:29.7972140Z [37m        cons:log ✱ [39m new subsciption on /user/public/topic/codeRunnerResults
2024-08-30T19:43:29.7973162Z [37m        cons:log ✱ [39m new subsciption on /user/public/topic/ExecutionResponses
2024-08-30T19:43:29.7973875Z [37m        cons:log ✱ [39m seted
2024-08-30T19:43:29.7974361Z [37m        cons:log ✱ [39m {}
2024-08-30T19:43:29.7974934Z [37m        cons:log ✱ [39m _VmStatusSubscriptions  
2024-08-30T19:43:29.7975601Z [37m        cons:log ✱ [39m method  function () { [native code] }
2024-08-30T19:43:29.7976231Z [37m        cons:log ✱ [39m method  function
2024-08-30T19:43:29.7977237Z [37m        cons:log ✱ [39m _VmStatusSubscriptions  function () { [native code] }
2024-08-30T19:43:29.7978146Z [37m        cons:log ✱ [39m {"codeRunnerType":"UNIDENTIFIED","state":"NONE"}
2024-08-30T19:43:29.7978800Z [37m        cons:log ✱ [39m creator reset
2024-08-30T19:43:29.7979350Z [37m        cons:log ✱ [39m this.languages: []
2024-08-30T19:43:29.7979877Z [37m        cons:log ✱ [39m creator reset
2024-08-30T19:43:29.7980415Z [37m        cons:log ✱ [39m this.languages: []
2024-08-30T19:43:29.7980974Z [32m      cy:command ✔ [39m get	#login-email
2024-08-30T19:43:29.7981534Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.7982058Z [32m      cy:command ✔ [39m get	#login-email
2024-08-30T19:43:29.7982635Z [32m      cy:command ✔ [39m type	sunny@mail.com
2024-08-30T19:43:29.7983205Z [32m      cy:command ✔ [39m get	#login-password
2024-08-30T19:43:29.7983716Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.7984250Z [32m      cy:command ✔ [39m get	#login-password
2024-08-30T19:43:29.7984826Z [32m      cy:command ✔ [39m type	Password+123
2024-08-30T19:43:29.7985348Z [32m      cy:command ✔ [39m get	#login
2024-08-30T19:43:29.7985828Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.7986505Z [32m          cy:xhr ➟ [39m POST http://localhost:8080/public/auth/login
2024-08-30T19:43:29.7987053Z                     Status: 200
2024-08-30T19:43:29.7987560Z [32m      cy:command ✔ [39m get	.p-toast-detail
2024-08-30T19:43:29.7992623Z [37m        cons:log ✱ [39m Response: {"data":{"token":"***"},"status":200,"statusText":"OK","headers":{"cache-control":"no-cache, no-store, max-age=0, must-revalidate","content-type":"application/json","expires":"0","pragma":"no-cache"},"config":{"transitional":{"silentJSONParsing":true,"forcedJSONParsing":true,"clarifyTimeoutError":false},"adapter":["xhr","http","fetch"],"transformRequest":[null],"transformResponse":[null],"timeout":0,"xsrfCookieName":"XSRF-TOKEN","xsrfHeaderName":"X-XSRF-TOKEN","maxContentLength":-1,"maxBodyLength":-1,"env":{},"headers":{"Accept":"application/json, text/plain, */*","Content-Type":"application/json"},"baseURL":"http://local ...
2024-08-30T19:43:29.7995749Z [32m      cy:command ✔ [39m contains	Succesfully logged in
2024-08-30T19:43:29.7996573Z [32m      cy:command ✔ [39m assert	expected **<div.p-toast-detail>** to be **visible**
2024-08-30T19:43:29.7997342Z [32m      cy:command ✔ [39m new url	http://localhost/Home
2024-08-30T19:43:29.7997947Z [32m      cy:command ✔ [39m get	.p-toast-detail
2024-08-30T19:43:29.7998694Z [32m      cy:command ✔ [39m assert	expected **.p-toast-detail** not to exist in the DOM
2024-08-30T19:43:29.7999374Z                     Actual: 	".p-toast-detail"
2024-08-30T19:43:29.7999900Z                     Expected: 	".p-toast-detail"
2024-08-30T19:43:29.8000466Z [32m      cy:command ✔ [39m get	#switch-exercises
2024-08-30T19:43:29.8000993Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8001584Z [32m      cy:command ✔ [39m new url	http://localhost/Exercises
2024-08-30T19:43:29.8002621Z [37m        cons:log ✱ [39m load : count changed from undefined to {"page":1,"rowsPerPage":25,"sortBy":"name","sortType":"desc"}
2024-08-30T19:43:29.8003466Z [37m        cons:log ✱ [39m Getting exercises
2024-08-30T19:43:29.8004450Z [32m          cy:xhr ➟ [39m GET http://localhost:8080/public/exercises/list?sortBy=name&rowsPerPage=25&page=1&sortDirection=true
2024-08-30T19:43:29.8005207Z                     Status: 200
2024-08-30T19:43:29.8005650Z [32m      cy:command ✔ [39m url	
2024-08-30T19:43:29.8006506Z [32m      cy:command ✔ [39m assert	expected **http://localhost/Exercises** to equal **http://localhost/Exercises**
2024-08-30T19:43:29.8007261Z                     Actual: 	"http://localhost/Exercises"
2024-08-30T19:43:29.8007791Z                     Expected: 	"http://localhost/Exercises"
2024-08-30T19:43:29.8008363Z [32m      cy:command ✔ [39m get	#Create-button
2024-08-30T19:43:29.8008866Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8009592Z [32m      cy:command ✔ [39m new url	http://localhost/Create
2024-08-30T19:43:29.8010224Z [37m        cons:log ✱ [39m creator reset
2024-08-30T19:43:29.8010774Z [37m        cons:log ✱ [39m this.languages: []
2024-08-30T19:43:29.8024295Z [37m        cons:log ✱ [39m props: {"languageChoices":[],"exerciseInfo":{"_languages":[],"ram":128,"timeForTaskMin":15,"timeForExecutionMs":100,"inputType":"SINGLE_INTEGER","outputType":"SINGLE_INTEGER","amountOfAutoTests":1,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"","desc":"","lengthRange":{"min":1,"max":10},"spaceInupt":false,"solutionCodes":{},"manualTestsSolutions":{},"executionTime":100},"starting":""}
2024-08-30T19:43:29.8032756Z [37m        cons:log ✱ [39m token: ***
2024-08-30T19:43:29.8034830Z [37m        cons:log ✱ [39m ws://localhost:8080/public/web-socket beforeConnect
2024-08-30T19:43:29.8037322Z [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {}
2024-08-30T19:43:29.8039043Z [32m      cy:command ✔ [39m url	
2024-08-30T19:43:29.8041011Z [32m      cy:command ✔ [39m assert	expected **http://localhost/Create** to equal **http://localhost/Create**
2024-08-30T19:43:29.8042620Z                     Actual: 	"http://localhost/Create"
2024-08-30T19:43:29.8043622Z                     Expected: 	"http://localhost/Create"
2024-08-30T19:43:29.8045083Z [32m      cy:command ✔ [39m get	.p-toast-detail
2024-08-30T19:43:29.8046696Z [32m      cy:command ✔ [39m contains	successfully connected
2024-08-30T19:43:29.8048282Z [32m      cy:command ✔ [39m assert	expected **<div.p-toast-detail>** to be **visible**
2024-08-30T19:43:29.8050924Z [32m          cy:xhr ➟ [39m POST http://localhost:8080/public/coderunner/state
2024-08-30T19:43:29.8052332Z                     Status: 200
2024-08-30T19:43:29.8053827Z [37m        cons:log ✱ [39m updateCodeRunner Response:,
2024-08-30T19:43:29.8054559Z                     {
2024-08-30T19:43:29.8055037Z                       "data": "",
2024-08-30T19:43:29.8055599Z                       "status": 200,
2024-08-30T19:43:29.8056403Z                       "statusText": "OK",
2024-08-30T19:43:29.8057259Z                       "headers": {
2024-08-30T19:43:29.8058832Z                         "cache-control": "no-cache, no-store, max-age=0, must-revalidate",
2024-08-30T19:43:29.8059741Z                         "expires": "0",
2024-08-30T19:43:29.8060492Z                         "pragma": "no-cache"
2024-08-30T19:43:29.8061280Z                       },
2024-08-30T19:43:29.8062027Z                       "config": {
2024-08-30T19:43:29.8062882Z                         "transitional": {
2024-08-30T19:43:29.8064103Z                           "silentJSONParsing": true,
2024-08-30T19:43:29.8064863Z                           "forcedJSONParsing": true,
2024-08-30T19:43:29.8065577Z                           "clarifyTimeoutError": false
2024-08-30T19:43:29.8066397Z                         },
2024-08-30T19:43:29.8067152Z                         "adapter": [
2024-08-30T19:43:29.8067988Z                           "xhr",
2024-08-30T19:43:29.8068936Z                           "http",
2024-08-30T19:43:29.8069506Z                           "fetch"
2024-08-30T19:43:29.8070004Z                         ],
2024-08-30T19:43:29.8070545Z                         "transformRequest": [
2024-08-30T19:43:29.8071151Z                           null
2024-08-30T19:43:29.8071847Z                         ],
2024-08-30T19:43:29.8072636Z                         "transformResponse": [
2024-08-30T19:43:29.8073497Z                           null
2024-08-30T19:43:29.8074502Z                         ],
2024-08-30T19:43:29.8075040Z                         "timeout": 0,
2024-08-30T19:43:29.8075850Z                         "xsrfCookieName": "XSRF-TOKEN",
2024-08-30T19:43:29.8076919Z                         "xsrfHeaderName": "X-XSRF-TOKEN",
2024-08-30T19:43:29.8078577Z                         "maxContentLength": -1,
2024-08-30T19:43:29.8079851Z                         "maxBodyLength": -1,
2024-08-30T19:43:29.8080481Z                         "env": {},
2024-08-30T19:43:29.8081037Z                         "headers": {
2024-08-30T19:43:29.8081760Z                           "Accept": "application/json, text/plain, */*",
2024-08-30T19:43:29.8083284Z                           "Content-Type": "application/x-www-form-urlenco ...
2024-08-30T19:43:29.8085001Z [37m        cons:log ✱ [39m updateCodeRunner Error:,
2024-08-30T19:43:29.8085757Z                     no status codeRunenr
2024-08-30T19:43:29.8086693Z [37m        cons:log ✱ [39m update: [object Object]
2024-08-30T19:43:29.8096675Z [37m        cons:log ✱ [39m Exercises respones: {"data":[{"id":1,"name":"fibonachi sequance","languages":[{"name":"cpp"},{"name":"js"}],"difficulty":0,"popularity":0,"description":"Create funciton that returns number at point of fibocnahi squnace so 1->0 2->1 3->1 4->2 5->3 and do on"}],"status":200,"statusText":"OK","headers":{"cache-control":"no-cache, no-store, max-age=0, must-revalidate","content-type":"application/json","expires":"0","pragma":"no-cache"},"config":{"transitional":{"silentJSONParsing":true,"forcedJSONParsing":true,"clarifyTimeoutError":false},"adapter":["xhr","http","fetch"],"transformRequest":[null],"transformResponse":[null],"timeout":0,"xsrfCookieName":"XSRF-TOKEN","xsrfHeaderName":"X-XSRF-TOKEN","maxContentLength":-1,"maxBodyLength":-1,"env":{},"headers":{"Accept":"application/json, text/plain ...
2024-08-30T19:43:29.8106590Z [37m        cons:log ✱ [39m exerciseData.value: [{"id":1,"name":"fibonachi sequance","languages":[{"name":"cpp"},{"name":"js"}],"difficulty":0,"popularity":0,"description":"Create funciton that returns number at point of fibocnahi squnace so 1->0 2->1 3->1 4->2 5->3 and do on"}]
2024-08-30T19:43:29.8110274Z [37m        cons:log ✱ [39m ws://localhost:8080/public/web-socket on connect
2024-08-30T19:43:29.8111806Z [37m        cons:log ✱ [39m on connected evetn
2024-08-30T19:43:29.8115504Z [37m        cons:log ✱ [39m on connected userAuhtenticaton: "***"
2024-08-30T19:43:29.8117100Z [37m        cons:log ✱ [39m desitn: /public/app/tokenAuth
2024-08-30T19:43:29.8121574Z [37m        cons:log ✱ [39m published {"destination":"/public/app/tokenAuth","body":"{\"token\":\"***"}"}
2024-08-30T19:43:29.8125538Z [37m        cons:log ✱ [39m token: ***
2024-08-30T19:43:29.8126737Z [32m          cy:xhr ➟ [39m POST http://localhost:8080/public/coderunner/state
2024-08-30T19:43:29.8127603Z                     Status: 200
2024-08-30T19:43:29.8128496Z [37m        cons:log ✱ [39m updateCodeRunner Response:,
2024-08-30T19:43:29.8129155Z                     {
2024-08-30T19:43:29.8129658Z                       "data": "",
2024-08-30T19:43:29.8130215Z                       "status": 200,
2024-08-30T19:43:29.8130817Z                       "statusText": "OK",
2024-08-30T19:43:29.8131592Z                       "headers": {
2024-08-30T19:43:29.8132618Z                         "cache-control": "no-cache, no-store, max-age=0, must-revalidate",
2024-08-30T19:43:29.8134090Z                         "expires": "0",
2024-08-30T19:43:29.8134862Z                         "pragma": "no-cache"
2024-08-30T19:43:29.8135438Z                       },
2024-08-30T19:43:29.8135924Z                       "config": {
2024-08-30T19:43:29.8136483Z                         "transitional": {
2024-08-30T19:43:29.8137346Z                           "silentJSONParsing": true,
2024-08-30T19:43:29.8138458Z                           "forcedJSONParsing": true,
2024-08-30T19:43:29.8139425Z                           "clarifyTimeoutError": false
2024-08-30T19:43:29.8140056Z                         },
2024-08-30T19:43:29.8140594Z                         "adapter": [
2024-08-30T19:43:29.8141146Z                           "xhr",
2024-08-30T19:43:29.8141893Z                           "http",
2024-08-30T19:43:29.8142792Z                           "fetch"
2024-08-30T19:43:29.8143503Z                         ],
2024-08-30T19:43:29.8144368Z                         "transformRequest": [
2024-08-30T19:43:29.8145017Z                           null
2024-08-30T19:43:29.8145710Z                         ],
2024-08-30T19:43:29.8146519Z                         "transformResponse": [
2024-08-30T19:43:29.8147506Z                           null
2024-08-30T19:43:29.8148187Z                         ],
2024-08-30T19:43:29.8148708Z                         "timeout": 0,
2024-08-30T19:43:29.8149520Z                         "xsrfCookieName": "XSRF-TOKEN",
2024-08-30T19:43:29.8150548Z                         "xsrfHeaderName": "X-XSRF-TOKEN",
2024-08-30T19:43:29.8151667Z                         "maxContentLength": -1,
2024-08-30T19:43:29.8152878Z                         "maxBodyLength": -1,
2024-08-30T19:43:29.8153753Z                         "env": {},
2024-08-30T19:43:29.8154306Z                         "headers": {
2024-08-30T19:43:29.8155023Z                           "Accept": "application/json, text/plain, */*",
2024-08-30T19:43:29.8156553Z                           "Content-Type": "application/x-www-form-urlenco ...
2024-08-30T19:43:29.8158195Z [37m        cons:log ✱ [39m updateCodeRunner Error:,
2024-08-30T19:43:29.8159175Z                     no status codeRunenr
2024-08-30T19:43:29.8160097Z [37m        cons:log ✱ [39m update: [object Object]
2024-08-30T19:43:29.8161267Z [32m      cy:command ✔ [39m get	.p-toast-detail
2024-08-30T19:43:29.8163066Z [32m      cy:command ✔ [39m assert	expected **.p-toast-detail** not to exist in the DOM
2024-08-30T19:43:29.8164736Z                     Actual: 	".p-toast-detail"
2024-08-30T19:43:29.8165565Z                     Expected: 	".p-toast-detail"
2024-08-30T19:43:29.8166721Z [32m      cy:command ✔ [39m get	#Exercise-title-input
2024-08-30T19:43:29.8168458Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8169925Z [32m      cy:command ✔ [39m get	#Exercise-title-input
2024-08-30T19:43:29.8170821Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8172153Z [32m      cy:command ✔ [39m get	#Exercise-description-input
2024-08-30T19:43:29.8173354Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8174958Z [32m      cy:command ✔ [39m get	#Exercise-description-input
2024-08-30T19:43:29.8176109Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8177031Z [32m      cy:command ✔ [39m get	#ContentConatiner span
2024-08-30T19:43:29.8178168Z [32m      cy:command ✔ [39m contains	Setup
2024-08-30T19:43:29.8179643Z [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
2024-08-30T19:43:29.8182533Z [32m      cy:command ✔ [39m assert	expected **<a#pv_id_5_1_header_action.p-tabview-nav-link.p-tabview-header-action>** to have attribute **aria-disabled** with the value **true**
2024-08-30T19:43:29.8184636Z                     Actual: 	"true"
2024-08-30T19:43:29.8185843Z                     Expected: 	"true"
2024-08-30T19:43:29.8186813Z [32m      cy:command ✔ [39m get	#Exercise-title-input
2024-08-30T19:43:29.8187689Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8188805Z [32m      cy:command ✔ [39m get	#Exercise-title-input
2024-08-30T19:43:29.8190248Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8191728Z [32m      cy:command ✔ [39m get	#Exercise-title-input
2024-08-30T19:43:29.8192637Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8193503Z [32m      cy:command ✔ [39m get	#Exercise-title-input
2024-08-30T19:43:29.8194649Z [32m      cy:command ✔ [39m type	Cesar cipher
2024-08-30T19:43:29.8196180Z [32m      cy:command ✔ [39m get	#Exercise-description-input
2024-08-30T19:43:29.8197542Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8198485Z [32m      cy:command ✔ [39m get	#Exercise-description-input
2024-08-30T19:43:29.8199616Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8201085Z [32m      cy:command ✔ [39m get	#Exercise-description-input
2024-08-30T19:43:29.8202584Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8203568Z [32m      cy:command ✔ [39m get	#Exercise-description-input
2024-08-30T19:43:29.8206133Z [32m      cy:command ✔ [39m type	move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled
2024-08-30T19:43:29.8208562Z [32m      cy:command ✔ [39m get	#ContentConatiner span
2024-08-30T19:43:29.8209527Z [32m      cy:command ✔ [39m contains	Setup
2024-08-30T19:43:29.8210697Z [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
2024-08-30T19:43:29.8214009Z [32m      cy:command ✔ [39m assert	expected **<a#pv_id_5_1_header_action.p-tabview-nav-link.p-tabview-header-action>** to have attribute **aria-disabled** with the value **false**
2024-08-30T19:43:29.8215681Z                     Actual: 	"false"
2024-08-30T19:43:29.8216495Z                     Expected: 	"false"
2024-08-30T19:43:29.8217915Z [32m      cy:command ✔ [39m get	#ContentConatiner span
2024-08-30T19:43:29.8219290Z [32m      cy:command ✔ [39m contains	Setup
2024-08-30T19:43:29.8220275Z [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
2024-08-30T19:43:29.8221209Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8223014Z [37m        cons:log ✱ [39m event: {"originalEvent":{"isTrusted":false,"_vts":1725045872214},"index":1}
2024-08-30T19:43:29.8224930Z [32m      cy:command ✔ [39m get	#ContentConatiner span
2024-08-30T19:43:29.8226163Z [32m      cy:command ✔ [39m contains	Solution
2024-08-30T19:43:29.8227161Z [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
2024-08-30T19:43:29.8230357Z [32m      cy:command ✔ [39m assert	expected **<a#pv_id_5_2_header_action.p-tabview-nav-link.p-tabview-header-action>** to have attribute **aria-disabled** with the value **true**
2024-08-30T19:43:29.8232211Z                     Actual: 	"true"
2024-08-30T19:43:29.8232995Z                     Expected: 	"true"
2024-08-30T19:43:29.8234683Z [32m      cy:command ✔ [39m get	#language-selection
2024-08-30T19:43:29.8236060Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8236853Z [32m      cy:command ✔ [39m get	span
2024-08-30T19:43:29.8237703Z [32m      cy:command ✔ [39m contains	cpp
2024-08-30T19:43:29.8238716Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8240429Z [37m        cons:log ✱ [39m Update test fields: {"CPP_RUNNER":{"tests":[],"autoTests":[]}}
2024-08-30T19:43:29.8242523Z [37m        cons:log ✱ [39m starting function generator: SINGLE_INTEGER, SINGLE_INTEGER
2024-08-30T19:43:29.8245069Z [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {"CPP_RUNNER":"int solution(int x){\n //your solution \n}"}
2024-08-30T19:43:29.8247207Z [32m      cy:command ✔ [39m get	span
2024-08-30T19:43:29.8248018Z [32m      cy:command ✔ [39m contains	js
2024-08-30T19:43:29.8248830Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8250576Z [37m        cons:log ✱ [39m Update test fields: {"CPP_RUNNER":{"tests":[],"autoTests":[]},"JS_RUNNER":{"tests":[],"autoTests":[]}}
2024-08-30T19:43:29.8253007Z [37m        cons:log ✱ [39m starting function generator: SINGLE_INTEGER, SINGLE_INTEGER
2024-08-30T19:43:29.8254996Z [37m        cons:log ✱ [39m starting function generator: SINGLE_INTEGER, SINGLE_INTEGER
2024-08-30T19:43:29.8258171Z [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {"CPP_RUNNER":"int solution(int x){\n //your solution \n}","JS_RUNNER":"function solution(x){\n //your solution \n}"}
2024-08-30T19:43:29.8260272Z [32m      cy:command ✔ [39m get	#ms-number-input > input
2024-08-30T19:43:29.8261169Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8262107Z [32m      cy:command ✔ [39m get	#ms-number-input > input
2024-08-30T19:43:29.8263228Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8264612Z [32m      cy:command ✔ [39m type	2000
2024-08-30T19:43:29.8265628Z [32m      cy:command ✔ [39m get	#hour-number-input > input
2024-08-30T19:43:29.8266782Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8268226Z [32m      cy:command ✔ [39m get	#hour-number-input > input
2024-08-30T19:43:29.8269581Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8270650Z [32m      cy:command ✔ [39m type	1
2024-08-30T19:43:29.8271888Z [32m      cy:command ✔ [39m get	#minute-number-input > input
2024-08-30T19:43:29.8273365Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8274609Z [32m      cy:command ✔ [39m get	#minute-number-input > input
2024-08-30T19:43:29.8275535Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8276500Z [32m      cy:command ✔ [39m type	22
2024-08-30T19:43:29.8277718Z [32m      cy:command ✔ [39m get	#ram-number-input > input
2024-08-30T19:43:29.8279148Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8280317Z [32m      cy:command ✔ [39m get	#ram-number-input > input
2024-08-30T19:43:29.8281228Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8282218Z [32m      cy:command ✔ [39m type	512
2024-08-30T19:43:29.8283376Z [32m      cy:command ✔ [39m get	#radio-input-string
2024-08-30T19:43:29.8284842Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8286285Z [37m        cons:log ✱ [39m starting function generator: SINGLE_STRING, SINGLE_INTEGER
2024-08-30T19:43:29.8288216Z [37m        cons:log ✱ [39m starting function generator: SINGLE_STRING, SINGLE_INTEGER
2024-08-30T19:43:29.8292485Z [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {"CPP_RUNNER":"#include <string>\nint solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(x){\n //your solution \n}"}
2024-08-30T19:43:29.8295488Z [32m      cy:command ✔ [39m get	#radio-input-single
2024-08-30T19:43:29.8296974Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8297902Z [32m      cy:command ✔ [39m get	#radio-output-string
2024-08-30T19:43:29.8298767Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8301118Z [37m        cons:log ✱ [39m starting function generator: SINGLE_STRING, SINGLE_STRING
2024-08-30T19:43:29.8303215Z [37m        cons:log ✱ [39m starting function generator: SINGLE_STRING, SINGLE_STRING
2024-08-30T19:43:29.8309149Z [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(x){\n //your solution \n}"}
2024-08-30T19:43:29.8311484Z [32m      cy:command ✔ [39m get	#radio-output-single
2024-08-30T19:43:29.8312386Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8313280Z [32m      cy:command ✔ [39m get	#add-exercise-button
2024-08-30T19:43:29.8314155Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8315071Z [37m        cons:log ✱ [39m output type: SINGLE_STRING
2024-08-30T19:43:29.8316386Z [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
2024-08-30T19:43:29.8317651Z [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
2024-08-30T19:43:29.8319915Z [37m        cons:log ✱ [39m added: [{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1}]
2024-08-30T19:43:29.8322038Z [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
2024-08-30T19:43:29.8323438Z [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
2024-08-30T19:43:29.8325718Z [37m        cons:log ✱ [39m added: [{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"babab6e7-7c7b-47b1-9dcc-9648b8369198","executionTime":-1}]
2024-08-30T19:43:29.8327549Z [37m        cons:log ✱ [39m jsonInput.value: ""
2024-08-30T19:43:29.8328448Z [37m        cons:log ✱ [39m valie: ""
2024-08-30T19:43:29.8329421Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8330410Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8331624Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8332452Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8333321Z [37m        cons:log ✱ [39m jsonInput.value: ""
2024-08-30T19:43:29.8334202Z [37m        cons:log ✱ [39m valie: ""
2024-08-30T19:43:29.8335417Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8336457Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8337400Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8338204Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8339087Z [32m      cy:command ✔ [39m get	#test-input-0-input
2024-08-30T19:43:29.8339946Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8340815Z [32m      cy:command ✔ [39m get	#test-input-0-input
2024-08-30T19:43:29.8341631Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8342413Z [37m        cons:log ✱ [39m jsonInput.value: 
2024-08-30T19:43:29.8343202Z [37m        cons:log ✱ [39m valie: 
2024-08-30T19:43:29.8344052Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8344981Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8345835Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8346603Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8347442Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8348397Z [32m      cy:command ✔ [39m get	#test-input-0-input
2024-08-30T19:43:29.8349212Z [32m      cy:command ✔ [39m type	A
2024-08-30T19:43:29.8350001Z [37m        cons:log ✱ [39m jsonInput.value: A
2024-08-30T19:43:29.8350796Z [37m        cons:log ✱ [39m valie: A
2024-08-30T19:43:29.8351624Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8352555Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8353397Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8354159Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8355340Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8356322Z [32m      cy:command ✔ [39m get	#test-input-0-output
2024-08-30T19:43:29.8357148Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8357992Z [32m      cy:command ✔ [39m get	#test-input-0-output
2024-08-30T19:43:29.8358800Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8359605Z [37m        cons:log ✱ [39m jsonInput.value: 
2024-08-30T19:43:29.8360459Z [37m        cons:log ✱ [39m valie: 
2024-08-30T19:43:29.8361352Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8362357Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8363275Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8364085Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8364994Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8365906Z [37m        cons:log ✱ [39m set output: 
2024-08-30T19:43:29.8366767Z [37m        cons:log ✱ [39m set output: 
2024-08-30T19:43:29.8367690Z [32m      cy:command ✔ [39m get	#test-input-0-output
2024-08-30T19:43:29.8368564Z [32m      cy:command ✔ [39m type	H
2024-08-30T19:43:29.8369421Z [37m        cons:log ✱ [39m jsonInput.value: H
2024-08-30T19:43:29.8370515Z [37m        cons:log ✱ [39m valie: H
2024-08-30T19:43:29.8371651Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8372663Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8373562Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8374385Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8375291Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8376207Z [37m        cons:log ✱ [39m set output: H
2024-08-30T19:43:29.8377064Z [37m        cons:log ✱ [39m set output: H
2024-08-30T19:43:29.8378004Z [32m      cy:command ✔ [39m get	#add-exercise-button
2024-08-30T19:43:29.8378895Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8379829Z [37m        cons:log ✱ [39m output type: SINGLE_STRING
2024-08-30T19:43:29.8381133Z [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
2024-08-30T19:43:29.8382397Z [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
2024-08-30T19:43:29.8386123Z [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1}]
2024-08-30T19:43:29.8389313Z [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
2024-08-30T19:43:29.8390578Z [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
2024-08-30T19:43:29.8394313Z [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"babab6e7-7c7b-47b1-9dcc-9648b8369198","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"8edb87ab-537d-4f45-86dc-a30bb5aa731c","executionTime":-1}]
2024-08-30T19:43:29.8397241Z [37m        cons:log ✱ [39m jsonInput.value: ""
2024-08-30T19:43:29.8398116Z [37m        cons:log ✱ [39m valie: ""
2024-08-30T19:43:29.8399010Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8399994Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8400889Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8401705Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8402568Z [37m        cons:log ✱ [39m jsonInput.value: ""
2024-08-30T19:43:29.8403427Z [37m        cons:log ✱ [39m valie: ""
2024-08-30T19:43:29.8404308Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8405270Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8406547Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8407363Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8408277Z [32m      cy:command ✔ [39m get	#test-input-1-input
2024-08-30T19:43:29.8409159Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8410053Z [32m      cy:command ✔ [39m get	#test-input-1-input
2024-08-30T19:43:29.8410927Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8412433Z [37m        cons:log ✱ [39m jsonInput.value: 
2024-08-30T19:43:29.8413276Z [37m        cons:log ✱ [39m valie: 
2024-08-30T19:43:29.8414151Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8415138Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8416046Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8416858Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8417768Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8418752Z [32m      cy:command ✔ [39m get	#test-input-1-input
2024-08-30T19:43:29.8419639Z [32m      cy:command ✔ [39m type	a
2024-08-30T19:43:29.8420494Z [37m        cons:log ✱ [39m jsonInput.value: a
2024-08-30T19:43:29.8421336Z [37m        cons:log ✱ [39m valie: a
2024-08-30T19:43:29.8422591Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8423625Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8424542Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8425329Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8426436Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8427327Z [32m      cy:command ✔ [39m get	#test-input-1-output
2024-08-30T19:43:29.8427982Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8428632Z [32m      cy:command ✔ [39m get	#test-input-1-output
2024-08-30T19:43:29.8429428Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8430261Z [37m        cons:log ✱ [39m jsonInput.value: 
2024-08-30T19:43:29.8431111Z [37m        cons:log ✱ [39m valie: 
2024-08-30T19:43:29.8431988Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8432969Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8433877Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8434700Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8435594Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8436493Z [37m        cons:log ✱ [39m set output: 
2024-08-30T19:43:29.8437330Z [37m        cons:log ✱ [39m set output: 
2024-08-30T19:43:29.8438249Z [32m      cy:command ✔ [39m get	#test-input-1-output
2024-08-30T19:43:29.8439113Z [32m      cy:command ✔ [39m type	h
2024-08-30T19:43:29.8439976Z [37m        cons:log ✱ [39m jsonInput.value: h
2024-08-30T19:43:29.8441412Z [37m        cons:log ✱ [39m valie: h
2024-08-30T19:43:29.8495948Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8497045Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8498023Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8498897Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8499836Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8500794Z [37m        cons:log ✱ [39m set output: h
2024-08-30T19:43:29.8501655Z [37m        cons:log ✱ [39m set output: h
2024-08-30T19:43:29.8502593Z [32m      cy:command ✔ [39m get	#add-exercise-button
2024-08-30T19:43:29.8503466Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8504376Z [37m        cons:log ✱ [39m output type: SINGLE_STRING
2024-08-30T19:43:29.8505722Z [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
2024-08-30T19:43:29.8525712Z [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
2024-08-30T19:43:29.8537458Z [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":-1}]
2024-08-30T19:43:29.8543162Z [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
2024-08-30T19:43:29.8544445Z [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
2024-08-30T19:43:29.8550849Z [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"babab6e7-7c7b-47b1-9dcc-9648b8369198","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"8edb87ab-537d-4f45-86dc-a30bb5aa731c","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"f20386f6-ab67-428f-b809-5ff0c2db9016","executionTime":-1}]
2024-08-30T19:43:29.8554235Z [37m        cons:log ✱ [39m jsonInput.value: ""
2024-08-30T19:43:29.8554727Z [37m        cons:log ✱ [39m valie: ""
2024-08-30T19:43:29.8555475Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8556035Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8556536Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8556973Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8557452Z [37m        cons:log ✱ [39m jsonInput.value: ""
2024-08-30T19:43:29.8557906Z [37m        cons:log ✱ [39m valie: ""
2024-08-30T19:43:29.8558401Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8558925Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8559404Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8559827Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8560321Z [32m      cy:command ✔ [39m get	#test-input-2-input
2024-08-30T19:43:29.8560784Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8561250Z [32m      cy:command ✔ [39m get	#test-input-2-input
2024-08-30T19:43:29.8561700Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8562161Z [37m        cons:log ✱ [39m jsonInput.value: 
2024-08-30T19:43:29.8562607Z [37m        cons:log ✱ [39m valie: 
2024-08-30T19:43:29.8563067Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8563591Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8564065Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8564490Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8564965Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8565495Z [32m      cy:command ✔ [39m get	#test-input-2-input
2024-08-30T19:43:29.8566123Z [32m      cy:command ✔ [39m type	The quick brown fox jumps over a lazy dog
2024-08-30T19:43:29.8566728Z [37m        cons:log ✱ [39m jsonInput.value: T
2024-08-30T19:43:29.8567167Z [37m        cons:log ✱ [39m valie: T
2024-08-30T19:43:29.8567635Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8568153Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8568633Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8569051Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8569533Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8570044Z [37m        cons:log ✱ [39m jsonInput.value: Th
2024-08-30T19:43:29.8570494Z [37m        cons:log ✱ [39m valie: Th
2024-08-30T19:43:29.8571377Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8572032Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8572522Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8572955Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8573442Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8574250Z [37m        cons:log ✱ [39m jsonInput.value: The
2024-08-30T19:43:29.8574718Z [37m        cons:log ✱ [39m valie: The
2024-08-30T19:43:29.8575202Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8575725Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8576198Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8576621Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8577097Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8577601Z [37m        cons:log ✱ [39m jsonInput.value: The 
2024-08-30T19:43:29.8578060Z [37m        cons:log ✱ [39m valie: The 
2024-08-30T19:43:29.8578540Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8579050Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8579512Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8579934Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8580421Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8580943Z [37m        cons:log ✱ [39m jsonInput.value: The q
2024-08-30T19:43:29.8581421Z [37m        cons:log ✱ [39m valie: The q
2024-08-30T19:43:29.8582085Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8582626Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8583092Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8583507Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8583982Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8584502Z [37m        cons:log ✱ [39m jsonInput.value: The qu
2024-08-30T19:43:29.8584975Z [37m        cons:log ✱ [39m valie: The qu
2024-08-30T19:43:29.8585455Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8585964Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8586442Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8586885Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8587367Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8587901Z [37m        cons:log ✱ [39m jsonInput.value: The qui
2024-08-30T19:43:29.8588389Z [37m        cons:log ✱ [39m valie: The qui
2024-08-30T19:43:29.8588878Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8589383Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8589846Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8590269Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8590746Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8591260Z [37m        cons:log ✱ [39m jsonInput.value: The quic
2024-08-30T19:43:29.8591750Z [37m        cons:log ✱ [39m valie: The quic
2024-08-30T19:43:29.8592241Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8592744Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8593219Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8593638Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8594107Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8594637Z [37m        cons:log ✱ [39m jsonInput.value: The quick
2024-08-30T19:43:29.8595129Z [37m        cons:log ✱ [39m valie: The quick
2024-08-30T19:43:29.8595616Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8596121Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8596581Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8596989Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8597463Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8597993Z [37m        cons:log ✱ [39m jsonInput.value: The quick 
2024-08-30T19:43:29.8598499Z [37m        cons:log ✱ [39m valie: The quick 
2024-08-30T19:43:29.8598987Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8599667Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8600133Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8600544Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8601024Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8601564Z [37m        cons:log ✱ [39m jsonInput.value: The quick b
2024-08-30T19:43:29.8602083Z [37m        cons:log ✱ [39m valie: The quick b
2024-08-30T19:43:29.8602574Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8603084Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8603552Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8603963Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8604437Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8604978Z [37m        cons:log ✱ [39m jsonInput.value: The quick br
2024-08-30T19:43:29.8605520Z [37m        cons:log ✱ [39m valie: The quick br
2024-08-30T19:43:29.8606011Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8606525Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8606985Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8607536Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8608018Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8608575Z [37m        cons:log ✱ [39m jsonInput.value: The quick bro
2024-08-30T19:43:29.8609107Z [37m        cons:log ✱ [39m valie: The quick bro
2024-08-30T19:43:29.8609608Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8610107Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8610573Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8611168Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8612067Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8613120Z [37m        cons:log ✱ [39m jsonInput.value: The quick brow
2024-08-30T19:43:29.8614201Z [37m        cons:log ✱ [39m valie: The quick brow
2024-08-30T19:43:29.8615200Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8616233Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8617170Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8618017Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8618955Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8620054Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown
2024-08-30T19:43:29.8621102Z [37m        cons:log ✱ [39m valie: The quick brown
2024-08-30T19:43:29.8622115Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8623194Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8624108Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8624937Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8625874Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8626972Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown 
2024-08-30T19:43:29.8628024Z [37m        cons:log ✱ [39m valie: The quick brown 
2024-08-30T19:43:29.8629027Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8630055Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8630964Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8631800Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8691268Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8692554Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown f
2024-08-30T19:43:29.8693637Z [37m        cons:log ✱ [39m valie: The quick brown f
2024-08-30T19:43:29.8694630Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8695622Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8696948Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8697775Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8698705Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8699794Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fo
2024-08-30T19:43:29.8700875Z [37m        cons:log ✱ [39m valie: The quick brown fo
2024-08-30T19:43:29.8701866Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8702845Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8703752Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8704575Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8705492Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8706589Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox
2024-08-30T19:43:29.8707671Z [37m        cons:log ✱ [39m valie: The quick brown fox
2024-08-30T19:43:29.8708664Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8709666Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8710554Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8711370Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8712549Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8713699Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox 
2024-08-30T19:43:29.8714897Z [37m        cons:log ✱ [39m valie: The quick brown fox 
2024-08-30T19:43:29.8715894Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8716867Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8717743Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8718539Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8719430Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8720529Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox j
2024-08-30T19:43:29.8721645Z [37m        cons:log ✱ [39m valie: The quick brown fox j
2024-08-30T19:43:29.8722719Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8723721Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8724643Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8725481Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8726380Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8727486Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox ju
2024-08-30T19:43:29.8728599Z [37m        cons:log ✱ [39m valie: The quick brown fox ju
2024-08-30T19:43:29.8729617Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8730582Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8731643Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8732428Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8733309Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8734443Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jum
2024-08-30T19:43:29.8735820Z [37m        cons:log ✱ [39m valie: The quick brown fox jum
2024-08-30T19:43:29.8737037Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8738061Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8738957Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8739762Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8740651Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8741776Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jump
2024-08-30T19:43:29.8742928Z [37m        cons:log ✱ [39m valie: The quick brown fox jump
2024-08-30T19:43:29.8743948Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8744922Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8745801Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8746937Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8747840Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8748983Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps
2024-08-30T19:43:29.8750396Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps
2024-08-30T19:43:29.8751376Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8752330Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8753218Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8754013Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8754904Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8756074Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps 
2024-08-30T19:43:29.8757266Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps 
2024-08-30T19:43:29.8758280Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8759275Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8760157Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8760948Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8761839Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8763253Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps o
2024-08-30T19:43:29.8764572Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps o
2024-08-30T19:43:29.8765589Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8766566Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8767457Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8768249Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8769150Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8770325Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps ov
2024-08-30T19:43:29.8771729Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps ov
2024-08-30T19:43:29.8772769Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8773729Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8774605Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8775425Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8776304Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8777512Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps ove
2024-08-30T19:43:29.8778731Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps ove
2024-08-30T19:43:29.8779773Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8780737Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8781604Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8782397Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8783293Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8784797Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over
2024-08-30T19:43:29.8786033Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over
2024-08-30T19:43:29.8787117Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8788097Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8788987Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8789768Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8790654Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8791855Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over 
2024-08-30T19:43:29.8793125Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over 
2024-08-30T19:43:29.8794182Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8795160Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8796072Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8796899Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8797805Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8799023Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a
2024-08-30T19:43:29.8800507Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a
2024-08-30T19:43:29.8801618Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8802606Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8803500Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8804297Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8805341Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8806587Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a 
2024-08-30T19:43:29.8807877Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a 
2024-08-30T19:43:29.8808976Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8809947Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8810829Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8811804Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8813012Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8814292Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a l
2024-08-30T19:43:29.8815606Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a l
2024-08-30T19:43:29.8816688Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8817669Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8818557Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8819357Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8820250Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8821491Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a la
2024-08-30T19:43:29.8822902Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a la
2024-08-30T19:43:29.8824001Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8824984Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8825893Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8826707Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8827609Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8828882Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a laz
2024-08-30T19:43:29.8830246Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a laz
2024-08-30T19:43:29.8831348Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8832324Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8833217Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8834375Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8835300Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8836546Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy
2024-08-30T19:43:29.8837925Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy
2024-08-30T19:43:29.8839054Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8840070Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8841040Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8841835Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8842736Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8843995Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy 
2024-08-30T19:43:29.8845369Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy 
2024-08-30T19:43:29.8846477Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8847469Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8848364Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8849148Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8850063Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8854533Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy d
2024-08-30T19:43:29.8856061Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy d
2024-08-30T19:43:29.8857239Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8858323Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8859290Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8860144Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8861046Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8862336Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy do
2024-08-30T19:43:29.8863765Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy do
2024-08-30T19:43:29.8864890Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8866183Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8867141Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8867959Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8868848Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8870144Z [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy dog
2024-08-30T19:43:29.8871575Z [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy dog
2024-08-30T19:43:29.8872718Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8873730Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8874669Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8875516Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8876437Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8877429Z [32m      cy:command ✔ [39m get	#test-input-2-output
2024-08-30T19:43:29.8878291Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.8879199Z [32m      cy:command ✔ [39m get	#test-input-2-output
2024-08-30T19:43:29.8880056Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.8880897Z [37m        cons:log ✱ [39m jsonInput.value: 
2024-08-30T19:43:29.8881727Z [37m        cons:log ✱ [39m valie: 
2024-08-30T19:43:29.8882589Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8883561Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8884446Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8885251Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8886147Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8887050Z [37m        cons:log ✱ [39m set output: 
2024-08-30T19:43:29.8888162Z [37m        cons:log ✱ [39m set output: 
2024-08-30T19:43:29.8889095Z [32m      cy:command ✔ [39m get	#test-input-2-output
2024-08-30T19:43:29.8890298Z [32m      cy:command ✔ [39m type	Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
2024-08-30T19:43:29.8891617Z [37m        cons:log ✱ [39m jsonInput.value: A
2024-08-30T19:43:29.8892487Z [37m        cons:log ✱ [39m valie: A
2024-08-30T19:43:29.8893379Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8894352Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8895238Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8896023Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8896922Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8897818Z [37m        cons:log ✱ [39m set output: A
2024-08-30T19:43:29.8898645Z [37m        cons:log ✱ [39m set output: A
2024-08-30T19:43:29.8899511Z [37m        cons:log ✱ [39m jsonInput.value: Ao
2024-08-30T19:43:29.8900396Z [37m        cons:log ✱ [39m valie: Ao
2024-08-30T19:43:29.8901271Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8902232Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8903116Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8903908Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8904808Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8905715Z [37m        cons:log ✱ [39m set output: Ao
2024-08-30T19:43:29.8906562Z [37m        cons:log ✱ [39m set output: Ao
2024-08-30T19:43:29.8907444Z [37m        cons:log ✱ [39m jsonInput.value: Aol
2024-08-30T19:43:29.8908308Z [37m        cons:log ✱ [39m valie: Aol
2024-08-30T19:43:29.8909178Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8910143Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8911017Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8911835Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8912721Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8913632Z [37m        cons:log ✱ [39m set output: Aol
2024-08-30T19:43:29.8914483Z [37m        cons:log ✱ [39m set output: Aol
2024-08-30T19:43:29.8915633Z [37m        cons:log ✱ [39m jsonInput.value: Aol 
2024-08-30T19:43:29.8916550Z [37m        cons:log ✱ [39m valie: Aol 
2024-08-30T19:43:29.8917443Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8918393Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8919261Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8920073Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8921003Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8921929Z [37m        cons:log ✱ [39m set output: Aol 
2024-08-30T19:43:29.8922860Z [37m        cons:log ✱ [39m set output: Aol 
2024-08-30T19:43:29.8923806Z [37m        cons:log ✱ [39m jsonInput.value: Aol x
2024-08-30T19:43:29.8924685Z [37m        cons:log ✱ [39m valie: Aol x
2024-08-30T19:43:29.8925577Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8926534Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8927410Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8928204Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8929094Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8930037Z [37m        cons:log ✱ [39m set output: Aol x
2024-08-30T19:43:29.8930910Z [37m        cons:log ✱ [39m set output: Aol x
2024-08-30T19:43:29.8932025Z [37m        cons:log ✱ [39m jsonInput.value: Aol xb
2024-08-30T19:43:29.8932920Z [37m        cons:log ✱ [39m valie: Aol xb
2024-08-30T19:43:29.8933832Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8934786Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8935984Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8936792Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8937675Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8938612Z [37m        cons:log ✱ [39m set output: Aol xb
2024-08-30T19:43:29.8939533Z [37m        cons:log ✱ [39m set output: Aol xb
2024-08-30T19:43:29.8940482Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbp
2024-08-30T19:43:29.8941382Z [37m        cons:log ✱ [39m valie: Aol xbp
2024-08-30T19:43:29.8942286Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8943247Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8944112Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8944896Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8945792Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8946713Z [37m        cons:log ✱ [39m set output: Aol xbp
2024-08-30T19:43:29.8947624Z [37m        cons:log ✱ [39m set output: Aol xbp
2024-08-30T19:43:29.8948601Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpj
2024-08-30T19:43:29.8949511Z [37m        cons:log ✱ [39m valie: Aol xbpj
2024-08-30T19:43:29.8950433Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8951619Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8952547Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8953345Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8954251Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8955203Z [37m        cons:log ✱ [39m set output: Aol xbpj
2024-08-30T19:43:29.8956106Z [37m        cons:log ✱ [39m set output: Aol xbpj
2024-08-30T19:43:29.8956983Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr
2024-08-30T19:43:29.8957747Z [37m        cons:log ✱ [39m valie: Aol xbpjr
2024-08-30T19:43:29.8958531Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8959379Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8960259Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8960904Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8961603Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8962508Z [37m        cons:log ✱ [39m set output: Aol xbpjr
2024-08-30T19:43:29.8963243Z [37m        cons:log ✱ [39m set output: Aol xbpjr
2024-08-30T19:43:29.8964016Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr 
2024-08-30T19:43:29.8964763Z [37m        cons:log ✱ [39m valie: Aol xbpjr 
2024-08-30T19:43:29.8965593Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8966577Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8967328Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8968031Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8968801Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8969600Z [37m        cons:log ✱ [39m set output: Aol xbpjr 
2024-08-30T19:43:29.8970371Z [37m        cons:log ✱ [39m set output: Aol xbpjr 
2024-08-30T19:43:29.8971329Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr i
2024-08-30T19:43:29.8972112Z [37m        cons:log ✱ [39m valie: Aol xbpjr i
2024-08-30T19:43:29.8972884Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8973661Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8974361Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8975125Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8975845Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8976622Z [37m        cons:log ✱ [39m set output: Aol xbpjr i
2024-08-30T19:43:29.8977379Z [37m        cons:log ✱ [39m set output: Aol xbpjr i
2024-08-30T19:43:29.8978186Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iy
2024-08-30T19:43:29.8978969Z [37m        cons:log ✱ [39m valie: Aol xbpjr iy
2024-08-30T19:43:29.8980120Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8981061Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8981990Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8982812Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8983711Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8984687Z [37m        cons:log ✱ [39m set output: Aol xbpjr iy
2024-08-30T19:43:29.8985636Z [37m        cons:log ✱ [39m set output: Aol xbpjr iy
2024-08-30T19:43:29.8986672Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyv
2024-08-30T19:43:29.8987654Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyv
2024-08-30T19:43:29.8988586Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8989533Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8990413Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.8991199Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.8992091Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.8993080Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyv
2024-08-30T19:43:29.8994051Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyv
2024-08-30T19:43:29.8995409Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvd
2024-08-30T19:43:29.8996454Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvd
2024-08-30T19:43:29.8997424Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.8998389Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.8999272Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9000056Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9000942Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9001936Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvd
2024-08-30T19:43:29.9002941Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvd
2024-08-30T19:43:29.9004004Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu
2024-08-30T19:43:29.9005013Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu
2024-08-30T19:43:29.9005963Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9006928Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9007801Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9008591Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9009467Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9010473Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu
2024-08-30T19:43:29.9011868Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu
2024-08-30T19:43:29.9012959Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu 
2024-08-30T19:43:29.9013984Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu 
2024-08-30T19:43:29.9014936Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9015884Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9016784Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9017564Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9018458Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9019481Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu 
2024-08-30T19:43:29.9020520Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu 
2024-08-30T19:43:29.9021578Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu m
2024-08-30T19:43:29.9022652Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu m
2024-08-30T19:43:29.9023622Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9024590Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9025469Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9026266Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9027157Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9028468Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu m
2024-08-30T19:43:29.9029536Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu m
2024-08-30T19:43:29.9030645Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mv
2024-08-30T19:43:29.9031700Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mv
2024-08-30T19:43:29.9032675Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9033650Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9034527Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9035307Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9036196Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9037225Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mv
2024-08-30T19:43:29.9038288Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mv
2024-08-30T19:43:29.9039398Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve
2024-08-30T19:43:29.9040485Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve
2024-08-30T19:43:29.9041467Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9042429Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9043599Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9044450Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9045352Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9046404Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve
2024-08-30T19:43:29.9047484Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve
2024-08-30T19:43:29.9048612Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve 
2024-08-30T19:43:29.9049708Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve 
2024-08-30T19:43:29.9050691Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9051857Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9052773Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9053566Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9054465Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9055517Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve 
2024-08-30T19:43:29.9056626Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve 
2024-08-30T19:43:29.9057762Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve q
2024-08-30T19:43:29.9058874Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve q
2024-08-30T19:43:29.9059869Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9060845Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9061727Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9062519Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9063400Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9064449Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve q
2024-08-30T19:43:29.9065553Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve q
2024-08-30T19:43:29.9066708Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qb
2024-08-30T19:43:29.9067827Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qb
2024-08-30T19:43:29.9068834Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9069806Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9070682Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9071512Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9072418Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9073483Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qb
2024-08-30T19:43:29.9074716Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qb
2024-08-30T19:43:29.9075903Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbt
2024-08-30T19:43:29.9077481Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbt
2024-08-30T19:43:29.9078516Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9079512Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9080408Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9081230Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9082151Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9083247Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbt
2024-08-30T19:43:29.9084357Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbt
2024-08-30T19:43:29.9085562Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtw
2024-08-30T19:43:29.9086721Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtw
2024-08-30T19:43:29.9087743Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9088702Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9089628Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9090435Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9091518Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9092623Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtw
2024-08-30T19:43:29.9094033Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtw
2024-08-30T19:43:29.9095286Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz
2024-08-30T19:43:29.9096457Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz
2024-08-30T19:43:29.9097484Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9098458Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9099357Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9100151Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9101053Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9102152Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz
2024-08-30T19:43:29.9103321Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz
2024-08-30T19:43:29.9104556Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz 
2024-08-30T19:43:29.9105754Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz 
2024-08-30T19:43:29.9106776Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9107754Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9108645Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9109519Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9110425Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9111514Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz 
2024-08-30T19:43:29.9112697Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz 
2024-08-30T19:43:29.9113929Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz v
2024-08-30T19:43:29.9115180Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz v
2024-08-30T19:43:29.9116228Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9117199Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9118102Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9118905Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9119796Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9120920Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz v
2024-08-30T19:43:29.9122095Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz v
2024-08-30T19:43:29.9123405Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vc
2024-08-30T19:43:29.9124656Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vc
2024-08-30T19:43:29.9125713Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9126689Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9127882Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9128686Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9129580Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9130711Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vc
2024-08-30T19:43:29.9132102Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vc
2024-08-30T19:43:29.9133344Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcl
2024-08-30T19:43:29.9134620Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcl
2024-08-30T19:43:29.9135696Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9136692Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9137580Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9139710Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9140510Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9141579Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcl
2024-08-30T19:43:29.9142697Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcl
2024-08-30T19:43:29.9144228Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly
2024-08-30T19:43:29.9145541Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly
2024-08-30T19:43:29.9146632Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9147602Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9148524Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9149455Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9150369Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9151509Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly
2024-08-30T19:43:29.9152724Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly
2024-08-30T19:43:29.9154042Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly 
2024-08-30T19:43:29.9155298Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly 
2024-08-30T19:43:29.9156359Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9157334Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9158223Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9159016Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9159913Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9161063Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly 
2024-08-30T19:43:29.9162321Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly 
2024-08-30T19:43:29.9163673Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h
2024-08-30T19:43:29.9164934Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h
2024-08-30T19:43:29.9166015Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9167007Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9167885Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9168712Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9169599Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9170751Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h
2024-08-30T19:43:29.9171653Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h
2024-08-30T19:43:29.9172379Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h 
2024-08-30T19:43:29.9172987Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h 
2024-08-30T19:43:29.9173465Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9173945Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9174350Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9175040Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9175550Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9176223Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h 
2024-08-30T19:43:29.9176896Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h 
2024-08-30T19:43:29.9177643Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h s
2024-08-30T19:43:29.9178268Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h s
2024-08-30T19:43:29.9178755Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9179230Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9179627Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9179987Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9180489Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9181169Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h s
2024-08-30T19:43:29.9181843Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h s
2024-08-30T19:43:29.9182564Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h sh
2024-08-30T19:43:29.9183440Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h sh
2024-08-30T19:43:29.9183953Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9184448Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9184852Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9185225Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9185710Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9186400Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h sh
2024-08-30T19:43:29.9187087Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h sh
2024-08-30T19:43:29.9187863Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shg
2024-08-30T19:43:29.9188518Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shg
2024-08-30T19:43:29.9188988Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9189473Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9189869Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9190234Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9190720Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9191404Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shg
2024-08-30T19:43:29.9192087Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shg
2024-08-30T19:43:29.9192832Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf
2024-08-30T19:43:29.9193477Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf
2024-08-30T19:43:29.9193984Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9194459Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9194858Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9195218Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9195725Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9196375Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf
2024-08-30T19:43:29.9196949Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf
2024-08-30T19:43:29.9197552Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf 
2024-08-30T19:43:29.9198148Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf 
2024-08-30T19:43:29.9198620Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9199100Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9199716Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9200033Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9200454Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9201099Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf 
2024-08-30T19:43:29.9201723Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf 
2024-08-30T19:43:29.9202403Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf k
2024-08-30T19:43:29.9202922Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf k
2024-08-30T19:43:29.9203290Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9203650Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9203949Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9204236Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9204606Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9205184Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf k
2024-08-30T19:43:29.9205785Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf k
2024-08-30T19:43:29.9206639Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf kv
2024-08-30T19:43:29.9207209Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf kv
2024-08-30T19:43:29.9207596Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9207986Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9208293Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9208588Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9208974Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9209565Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf kv
2024-08-30T19:43:29.9210142Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf kv
2024-08-30T19:43:29.9210800Z [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
2024-08-30T19:43:29.9211548Z [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
2024-08-30T19:43:29.9211949Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9212332Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9212646Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9212935Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9213315Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9213896Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
2024-08-30T19:43:29.9214493Z [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
2024-08-30T19:43:29.9214867Z [32m      cy:command ✔ [39m get	#add-exercise-button
2024-08-30T19:43:29.9215144Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9215557Z [37m        cons:log ✱ [39m output type: SINGLE_STRING
2024-08-30T19:43:29.9216264Z [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
2024-08-30T19:43:29.9216737Z [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
2024-08-30T19:43:29.9223500Z [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"efd68762-a408-44fa-8378-675c74c56885","executionTime":-1}]
2024-08-30T19:43:29.9224520Z [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
2024-08-30T19:43:29.9225069Z [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
2024-08-30T19:43:29.9231994Z [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"babab6e7-7c7b-47b1-9dcc-9648b8369198","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"8edb87ab-537d-4f45-86dc-a30bb5aa731c","executionTime":-1},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"f20386f6-ab67-428f-b809-5ff0c2db9016","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"96cf7d3c-7d7c-402b-b487-acdfe146c13c","executionTime":-1}]
2024-08-30T19:43:29.9232661Z [37m        cons:log ✱ [39m jsonInput.value: ""
2024-08-30T19:43:29.9233061Z [37m        cons:log ✱ [39m valie: ""
2024-08-30T19:43:29.9233577Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9234361Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9234847Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9235231Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9235701Z [37m        cons:log ✱ [39m jsonInput.value: ""
2024-08-30T19:43:29.9236108Z [37m        cons:log ✱ [39m valie: ""
2024-08-30T19:43:29.9236594Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9237087Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9237499Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9237880Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9238358Z [32m      cy:command ✔ [39m get	#test-input-3-input
2024-08-30T19:43:29.9238748Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9239237Z [32m      cy:command ✔ [39m get	#test-input-3-input
2024-08-30T19:43:29.9239608Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.9240077Z [37m        cons:log ✱ [39m jsonInput.value: 
2024-08-30T19:43:29.9240457Z [37m        cons:log ✱ [39m valie: 
2024-08-30T19:43:29.9240934Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9241432Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9241847Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9242235Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9242726Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9243222Z [32m      cy:command ✔ [39m get	#test-input-3-input
2024-08-30T19:43:29.9243874Z [32m      cy:command ✔ [39m type	The five boxing wizards jump quickly
2024-08-30T19:43:29.9244342Z [37m        cons:log ✱ [39m jsonInput.value: T
2024-08-30T19:43:29.9244762Z [37m        cons:log ✱ [39m valie: T
2024-08-30T19:43:29.9245247Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9245735Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9246158Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9246559Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9247043Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9247502Z [37m        cons:log ✱ [39m jsonInput.value: Th
2024-08-30T19:43:29.9247895Z [37m        cons:log ✱ [39m valie: Th
2024-08-30T19:43:29.9248381Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9248875Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9249276Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9249653Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9250118Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9250873Z [37m        cons:log ✱ [39m jsonInput.value: The
2024-08-30T19:43:29.9251505Z [37m        cons:log ✱ [39m valie: The
2024-08-30T19:43:29.9252000Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9252511Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9252928Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9253302Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9253798Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9254459Z [37m        cons:log ✱ [39m jsonInput.value: The 
2024-08-30T19:43:29.9254910Z [37m        cons:log ✱ [39m valie: The 
2024-08-30T19:43:29.9255385Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9255870Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9256277Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9256642Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9257171Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9257663Z [37m        cons:log ✱ [39m jsonInput.value: The f
2024-08-30T19:43:29.9258070Z [37m        cons:log ✱ [39m valie: The f
2024-08-30T19:43:29.9258535Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9259316Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9259773Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9260152Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9260649Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9261138Z [37m        cons:log ✱ [39m jsonInput.value: The fi
2024-08-30T19:43:29.9261557Z [37m        cons:log ✱ [39m valie: The fi
2024-08-30T19:43:29.9262032Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9262531Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9262932Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9263319Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9263814Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9264298Z [37m        cons:log ✱ [39m jsonInput.value: The fiv
2024-08-30T19:43:29.9264728Z [37m        cons:log ✱ [39m valie: The fiv
2024-08-30T19:43:29.9265235Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9265762Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9266196Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9266561Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9267056Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9267561Z [37m        cons:log ✱ [39m jsonInput.value: The five
2024-08-30T19:43:29.9268002Z [37m        cons:log ✱ [39m valie: The five
2024-08-30T19:43:29.9268497Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9268975Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9269784Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9270149Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9270647Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9271160Z [37m        cons:log ✱ [39m jsonInput.value: The five 
2024-08-30T19:43:29.9271642Z [37m        cons:log ✱ [39m valie: The five 
2024-08-30T19:43:29.9272127Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9272613Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9272968Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9273264Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9273681Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9274161Z [37m        cons:log ✱ [39m jsonInput.value: The five b
2024-08-30T19:43:29.9274623Z [37m        cons:log ✱ [39m valie: The five b
2024-08-30T19:43:29.9275108Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9275611Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9276019Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9276398Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9276922Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9277470Z [37m        cons:log ✱ [39m jsonInput.value: The five bo
2024-08-30T19:43:29.9277914Z [37m        cons:log ✱ [39m valie: The five bo
2024-08-30T19:43:29.9278416Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9278917Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9279333Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9279707Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9280214Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9280750Z [37m        cons:log ✱ [39m jsonInput.value: The five box
2024-08-30T19:43:29.9281207Z [37m        cons:log ✱ [39m valie: The five box
2024-08-30T19:43:29.9281729Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9282215Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9282630Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9283002Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9283747Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9284349Z [37m        cons:log ✱ [39m jsonInput.value: The five boxi
2024-08-30T19:43:29.9284822Z [37m        cons:log ✱ [39m valie: The five boxi
2024-08-30T19:43:29.9285335Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9285823Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9286229Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9286606Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9287109Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9287661Z [37m        cons:log ✱ [39m jsonInput.value: The five boxin
2024-08-30T19:43:29.9288146Z [37m        cons:log ✱ [39m valie: The five boxin
2024-08-30T19:43:29.9288628Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9289114Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9289544Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9289921Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9290420Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9291162Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing
2024-08-30T19:43:29.9291669Z [37m        cons:log ✱ [39m valie: The five boxing
2024-08-30T19:43:29.9292158Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9292641Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9293061Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9293433Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9293928Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9294841Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing 
2024-08-30T19:43:29.9295322Z [37m        cons:log ✱ [39m valie: The five boxing 
2024-08-30T19:43:29.9295813Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9296319Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9296747Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9297119Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9297607Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9298202Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing w
2024-08-30T19:43:29.9298693Z [37m        cons:log ✱ [39m valie: The five boxing w
2024-08-30T19:43:29.9299199Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9299676Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9300083Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9300483Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9300955Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9301547Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wi
2024-08-30T19:43:29.9302056Z [37m        cons:log ✱ [39m valie: The five boxing wi
2024-08-30T19:43:29.9302558Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9303039Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9303454Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9303818Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9304301Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9304918Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wiz
2024-08-30T19:43:29.9305441Z [37m        cons:log ✱ [39m valie: The five boxing wiz
2024-08-30T19:43:29.9305924Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9306402Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9306837Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9307208Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9307690Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9308587Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wiza
2024-08-30T19:43:29.9309151Z [37m        cons:log ✱ [39m valie: The five boxing wiza
2024-08-30T19:43:29.9309647Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9310126Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9310534Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9310923Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9311402Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9312013Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizar
2024-08-30T19:43:29.9312541Z [37m        cons:log ✱ [39m valie: The five boxing wizar
2024-08-30T19:43:29.9313058Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9313549Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9313949Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9314344Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9314835Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9315426Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizard
2024-08-30T19:43:29.9315927Z [37m        cons:log ✱ [39m valie: The five boxing wizard
2024-08-30T19:43:29.9316423Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9318102Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9318558Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9318944Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9319444Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9320073Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards
2024-08-30T19:43:29.9320921Z [37m        cons:log ✱ [39m valie: The five boxing wizards
2024-08-30T19:43:29.9321429Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9321941Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9322345Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9322799Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9323300Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9323935Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards 
2024-08-30T19:43:29.9324499Z [37m        cons:log ✱ [39m valie: The five boxing wizards 
2024-08-30T19:43:29.9324984Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9325468Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9325872Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9326255Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9326755Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9327409Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards j
2024-08-30T19:43:29.9327970Z [37m        cons:log ✱ [39m valie: The five boxing wizards j
2024-08-30T19:43:29.9328477Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9328965Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9329384Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9329763Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9330243Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9330893Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards ju
2024-08-30T19:43:29.9333000Z [37m        cons:log ✱ [39m valie: The five boxing wizards ju
2024-08-30T19:43:29.9333514Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9334012Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9334432Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9334816Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9335317Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9336286Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jum
2024-08-30T19:43:29.9336910Z [37m        cons:log ✱ [39m valie: The five boxing wizards jum
2024-08-30T19:43:29.9337405Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9337890Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9338298Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9338665Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9339157Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9339843Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump
2024-08-30T19:43:29.9340434Z [37m        cons:log ✱ [39m valie: The five boxing wizards jump
2024-08-30T19:43:29.9340945Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9341442Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9341847Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9342248Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9342745Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9343408Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump 
2024-08-30T19:43:29.9344005Z [37m        cons:log ✱ [39m valie: The five boxing wizards jump 
2024-08-30T19:43:29.9344497Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9344990Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9345397Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9345787Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9346274Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9347297Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump q
2024-08-30T19:43:29.9347896Z [37m        cons:log ✱ [39m valie: The five boxing wizards jump q
2024-08-30T19:43:29.9348385Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9348888Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9349296Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9349676Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9350165Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9350868Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump qu
2024-08-30T19:43:29.9351477Z [37m        cons:log ✱ [39m valie: The five boxing wizards jump qu
2024-08-30T19:43:29.9351968Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9352459Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9352860Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9353257Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9353745Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9354467Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump qui
2024-08-30T19:43:29.9355358Z [37m        cons:log ✱ [39m valie: The five boxing wizards jump qui
2024-08-30T19:43:29.9355882Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9356386Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9356792Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9357150Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9357604Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9358301Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump quic
2024-08-30T19:43:29.9358932Z [37m        cons:log ✱ [39m valie: The five boxing wizards jump quic
2024-08-30T19:43:29.9359415Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9359922Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9360335Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9360721Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9361211Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9361959Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump quick
2024-08-30T19:43:29.9362590Z [37m        cons:log ✱ [39m valie: The five boxing wizards jump quick
2024-08-30T19:43:29.9363080Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9363557Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9363958Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9364334Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9364811Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9365554Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump quickl
2024-08-30T19:43:29.9366232Z [37m        cons:log ✱ [39m valie: The five boxing wizards jump quickl
2024-08-30T19:43:29.9366729Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9367223Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9367631Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9368023Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9368505Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9369253Z [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump quickly
2024-08-30T19:43:29.9369909Z [37m        cons:log ✱ [39m valie: The five boxing wizards jump quickly
2024-08-30T19:43:29.9370397Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9370884Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9371566Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9371956Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9372809Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9373320Z [32m      cy:command ✔ [39m get	#test-input-3-output
2024-08-30T19:43:29.9373680Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9374180Z [32m      cy:command ✔ [39m get	#test-input-3-output
2024-08-30T19:43:29.9374566Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.9375004Z [37m        cons:log ✱ [39m jsonInput.value: 
2024-08-30T19:43:29.9375370Z [37m        cons:log ✱ [39m valie: 
2024-08-30T19:43:29.9375858Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9376340Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9376745Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9377123Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9377629Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9378033Z [37m        cons:log ✱ [39m set output: 
2024-08-30T19:43:29.9378461Z [37m        cons:log ✱ [39m set output: 
2024-08-30T19:43:29.9378950Z [32m      cy:command ✔ [39m get	#test-input-3-output
2024-08-30T19:43:29.9379592Z [32m      cy:command ✔ [39m type	Aol mpcl ivepun dpghykz qbtw xbpjrsf
2024-08-30T19:43:29.9380341Z [37m        cons:log ✱ [39m jsonInput.value: A
2024-08-30T19:43:29.9380775Z [37m        cons:log ✱ [39m valie: A
2024-08-30T19:43:29.9381268Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9381749Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9382173Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9382546Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9383028Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9383451Z [37m        cons:log ✱ [39m set output: A
2024-08-30T19:43:29.9383857Z [37m        cons:log ✱ [39m set output: A
2024-08-30T19:43:29.9384321Z [37m        cons:log ✱ [39m jsonInput.value: Ao
2024-08-30T19:43:29.9384723Z [37m        cons:log ✱ [39m valie: Ao
2024-08-30T19:43:29.9385206Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9385700Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9386093Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9386497Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9386991Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9387424Z [37m        cons:log ✱ [39m set output: Ao
2024-08-30T19:43:29.9387831Z [37m        cons:log ✱ [39m set output: Ao
2024-08-30T19:43:29.9388292Z [37m        cons:log ✱ [39m jsonInput.value: Aol
2024-08-30T19:43:29.9388690Z [37m        cons:log ✱ [39m valie: Aol
2024-08-30T19:43:29.9389548Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9390083Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9390482Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9390867Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9391389Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9391805Z [37m        cons:log ✱ [39m set output: Aol
2024-08-30T19:43:29.9392230Z [37m        cons:log ✱ [39m set output: Aol
2024-08-30T19:43:29.9392708Z [37m        cons:log ✱ [39m jsonInput.value: Aol 
2024-08-30T19:43:29.9393117Z [37m        cons:log ✱ [39m valie: Aol 
2024-08-30T19:43:29.9393586Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9394084Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9394498Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9394871Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9395362Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9395794Z [37m        cons:log ✱ [39m set output: Aol 
2024-08-30T19:43:29.9396232Z [37m        cons:log ✱ [39m set output: Aol 
2024-08-30T19:43:29.9396702Z [37m        cons:log ✱ [39m jsonInput.value: Aol m
2024-08-30T19:43:29.9397398Z [37m        cons:log ✱ [39m valie: Aol m
2024-08-30T19:43:29.9397882Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9398368Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9398807Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9399167Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9399612Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9400008Z [37m        cons:log ✱ [39m set output: Aol m
2024-08-30T19:43:29.9400434Z [37m        cons:log ✱ [39m set output: Aol m
2024-08-30T19:43:29.9400936Z [37m        cons:log ✱ [39m jsonInput.value: Aol mp
2024-08-30T19:43:29.9401338Z [37m        cons:log ✱ [39m valie: Aol mp
2024-08-30T19:43:29.9401823Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9402310Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9402714Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9403098Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9403585Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9404042Z [37m        cons:log ✱ [39m set output: Aol mp
2024-08-30T19:43:29.9404468Z [37m        cons:log ✱ [39m set output: Aol mp
2024-08-30T19:43:29.9405197Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpc
2024-08-30T19:43:29.9405656Z [37m        cons:log ✱ [39m valie: Aol mpc
2024-08-30T19:43:29.9406146Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9406634Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9407034Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9407405Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9407886Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9408346Z [37m        cons:log ✱ [39m set output: Aol mpc
2024-08-30T19:43:29.9408776Z [37m        cons:log ✱ [39m set output: Aol mpc
2024-08-30T19:43:29.9409290Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl
2024-08-30T19:43:29.9409722Z [37m        cons:log ✱ [39m valie: Aol mpcl
2024-08-30T19:43:29.9410193Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9410702Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9411285Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9411687Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9412177Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9412637Z [37m        cons:log ✱ [39m set output: Aol mpcl
2024-08-30T19:43:29.9413109Z [37m        cons:log ✱ [39m set output: Aol mpcl
2024-08-30T19:43:29.9413628Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl 
2024-08-30T19:43:29.9414065Z [37m        cons:log ✱ [39m valie: Aol mpcl 
2024-08-30T19:43:29.9414530Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9415025Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9415463Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9415842Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9416343Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9416829Z [37m        cons:log ✱ [39m set output: Aol mpcl 
2024-08-30T19:43:29.9417295Z [37m        cons:log ✱ [39m set output: Aol mpcl 
2024-08-30T19:43:29.9417802Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl i
2024-08-30T19:43:29.9418245Z [37m        cons:log ✱ [39m valie: Aol mpcl i
2024-08-30T19:43:29.9418722Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9419196Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9419611Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9419990Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9420480Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9420948Z [37m        cons:log ✱ [39m set output: Aol mpcl i
2024-08-30T19:43:29.9421779Z [37m        cons:log ✱ [39m set output: Aol mpcl i
2024-08-30T19:43:29.9422371Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl iv
2024-08-30T19:43:29.9422881Z [37m        cons:log ✱ [39m valie: Aol mpcl iv
2024-08-30T19:43:29.9423391Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9423880Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9424299Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9424649Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9425134Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9425620Z [37m        cons:log ✱ [39m set output: Aol mpcl iv
2024-08-30T19:43:29.9426377Z [37m        cons:log ✱ [39m set output: Aol mpcl iv
2024-08-30T19:43:29.9428079Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ive
2024-08-30T19:43:29.9428781Z [37m        cons:log ✱ [39m valie: Aol mpcl ive
2024-08-30T19:43:29.9429311Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9429817Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9430211Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9430594Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9431534Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9432085Z [37m        cons:log ✱ [39m set output: Aol mpcl ive
2024-08-30T19:43:29.9432576Z [37m        cons:log ✱ [39m set output: Aol mpcl ive
2024-08-30T19:43:29.9433139Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivep
2024-08-30T19:43:29.9433609Z [37m        cons:log ✱ [39m valie: Aol mpcl ivep
2024-08-30T19:43:29.9434082Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9434572Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9434977Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9435367Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9435877Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9436386Z [37m        cons:log ✱ [39m set output: Aol mpcl ivep
2024-08-30T19:43:29.9436887Z [37m        cons:log ✱ [39m set output: Aol mpcl ivep
2024-08-30T19:43:29.9437452Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepu
2024-08-30T19:43:29.9437937Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepu
2024-08-30T19:43:29.9438421Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9438912Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9439318Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9439700Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9440169Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9440664Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepu
2024-08-30T19:43:29.9441166Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepu
2024-08-30T19:43:29.9441727Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun
2024-08-30T19:43:29.9451611Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun
2024-08-30T19:43:29.9452819Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9453377Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9453821Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9454199Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9454694Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9455217Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun
2024-08-30T19:43:29.9455743Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun
2024-08-30T19:43:29.9456317Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun 
2024-08-30T19:43:29.9456804Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun 
2024-08-30T19:43:29.9457282Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9457765Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9458545Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9459317Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9459857Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9460397Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun 
2024-08-30T19:43:29.9460935Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun 
2024-08-30T19:43:29.9461513Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun d
2024-08-30T19:43:29.9462003Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun d
2024-08-30T19:43:29.9462487Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9462959Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9463363Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9463736Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9464232Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9464766Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun d
2024-08-30T19:43:29.9465320Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun d
2024-08-30T19:43:29.9465912Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dp
2024-08-30T19:43:29.9466422Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dp
2024-08-30T19:43:29.9467191Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9467731Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9468143Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9468536Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9469013Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9469566Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dp
2024-08-30T19:43:29.9470095Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dp
2024-08-30T19:43:29.9470702Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpg
2024-08-30T19:43:29.9471219Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpg
2024-08-30T19:43:29.9471729Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9472223Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9472617Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9474075Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9475562Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9476398Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpg
2024-08-30T19:43:29.9476996Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpg
2024-08-30T19:43:29.9477599Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpgh
2024-08-30T19:43:29.9478133Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpgh
2024-08-30T19:43:29.9478617Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9479121Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9479729Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9480165Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9480646Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9481210Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpgh
2024-08-30T19:43:29.9481793Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpgh
2024-08-30T19:43:29.9482418Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghy
2024-08-30T19:43:29.9482966Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghy
2024-08-30T19:43:29.9483450Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9483964Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9484364Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9484731Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9485230Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9485769Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghy
2024-08-30T19:43:29.9486623Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghy
2024-08-30T19:43:29.9487267Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghyk
2024-08-30T19:43:29.9487821Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghyk
2024-08-30T19:43:29.9488325Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9488812Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9489226Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9489601Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9490089Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9490664Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghyk
2024-08-30T19:43:29.9491437Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghyk
2024-08-30T19:43:29.9492087Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz
2024-08-30T19:43:29.9492641Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz
2024-08-30T19:43:29.9493167Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9493655Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9494073Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9494740Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9495286Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9495868Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz
2024-08-30T19:43:29.9496440Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz
2024-08-30T19:43:29.9497101Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz 
2024-08-30T19:43:29.9497662Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz 
2024-08-30T19:43:29.9498162Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9498653Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9499061Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9499448Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9499933Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9500526Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz 
2024-08-30T19:43:29.9501141Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz 
2024-08-30T19:43:29.9501800Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz q
2024-08-30T19:43:29.9502360Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz q
2024-08-30T19:43:29.9502853Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9503337Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9503741Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9504117Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9504614Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9505225Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz q
2024-08-30T19:43:29.9505852Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz q
2024-08-30T19:43:29.9507705Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qb
2024-08-30T19:43:29.9508303Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qb
2024-08-30T19:43:29.9508805Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9509310Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9509729Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9510099Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9510586Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9511468Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qb
2024-08-30T19:43:29.9512351Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qb
2024-08-30T19:43:29.9513045Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbt
2024-08-30T19:43:29.9513995Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbt
2024-08-30T19:43:29.9514720Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9515547Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9515982Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9516383Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9516877Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9517496Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbt
2024-08-30T19:43:29.9518112Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbt
2024-08-30T19:43:29.9518789Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw
2024-08-30T19:43:29.9519388Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw
2024-08-30T19:43:29.9519872Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9520356Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9520775Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9521150Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9521649Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9522813Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw
2024-08-30T19:43:29.9523516Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw
2024-08-30T19:43:29.9524214Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw 
2024-08-30T19:43:29.9524835Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw 
2024-08-30T19:43:29.9525330Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9526049Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9526480Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9526863Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9527373Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9528002Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw 
2024-08-30T19:43:29.9528598Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw 
2024-08-30T19:43:29.9529281Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw x
2024-08-30T19:43:29.9529914Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw x
2024-08-30T19:43:29.9530407Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9530893Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9531520Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9531889Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9532384Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9533025Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw x
2024-08-30T19:43:29.9533679Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw x
2024-08-30T19:43:29.9534729Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xb
2024-08-30T19:43:29.9535344Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xb
2024-08-30T19:43:29.9535844Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9536349Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9536769Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9537141Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9537635Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9538289Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xb
2024-08-30T19:43:29.9538929Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xb
2024-08-30T19:43:29.9539650Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbp
2024-08-30T19:43:29.9540271Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbp
2024-08-30T19:43:29.9540770Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9541284Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9541693Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9542058Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9542564Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9543233Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbp
2024-08-30T19:43:29.9543893Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbp
2024-08-30T19:43:29.9544624Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbpj
2024-08-30T19:43:29.9545252Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbpj
2024-08-30T19:43:29.9545753Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9546239Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9549062Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9549474Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9549954Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9550633Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpj
2024-08-30T19:43:29.9551578Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpj
2024-08-30T19:43:29.9552351Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbpjr
2024-08-30T19:43:29.9552989Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbpjr
2024-08-30T19:43:29.9553472Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9553968Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9554374Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9554754Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9555245Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9555922Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjr
2024-08-30T19:43:29.9556630Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjr
2024-08-30T19:43:29.9557371Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbpjrs
2024-08-30T19:43:29.9558042Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbpjrs
2024-08-30T19:43:29.9558537Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9559026Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9559430Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9559811Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9560301Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9560979Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjrs
2024-08-30T19:43:29.9561683Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjrs
2024-08-30T19:43:29.9563529Z [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbpjrsf
2024-08-30T19:43:29.9564538Z [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbpjrsf
2024-08-30T19:43:29.9565040Z [37m        cons:log ✱ [39m isTypeString(type) true
2024-08-30T19:43:29.9565554Z [37m        cons:log ✱ [39m !isNumber(variable) true
2024-08-30T19:43:29.9565960Z [37m        cons:log ✱ [39m type: string
2024-08-30T19:43:29.9566338Z [37m        cons:log ✱ [39m validatea
2024-08-30T19:43:29.9566831Z [37m        cons:log ✱ [39m validationofData.value: 
2024-08-30T19:43:29.9567771Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjrsf
2024-08-30T19:43:29.9568740Z [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjrsf
2024-08-30T19:43:29.9569381Z [32m      cy:command ✔ [39m get	#amount-of-auto-test-input > input
2024-08-30T19:43:29.9569717Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9570540Z [32m      cy:command ✔ [39m get	#amount-of-auto-test-input > input
2024-08-30T19:43:29.9571276Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.9571684Z [32m      cy:command ✔ [39m type	6
2024-08-30T19:43:29.9572286Z [32m      cy:command ✔ [39m get	#string-range-low-input > input
2024-08-30T19:43:29.9572679Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9573277Z [32m      cy:command ✔ [39m get	#string-range-low-input > input
2024-08-30T19:43:29.9573653Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.9574249Z [32m      cy:command ✔ [39m get	#string-range-low-input > input
2024-08-30T19:43:29.9574619Z [32m      cy:command ✔ [39m type	1
2024-08-30T19:43:29.9575207Z [32m      cy:command ✔ [39m get	#string-range-up-input > input
2024-08-30T19:43:29.9575563Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9576133Z [32m      cy:command ✔ [39m get	#string-range-up-input > input
2024-08-30T19:43:29.9576499Z [32m      cy:command ✔ [39m clear	
2024-08-30T19:43:29.9577067Z [32m      cy:command ✔ [39m get	#string-range-up-input > input
2024-08-30T19:43:29.9577451Z [32m      cy:command ✔ [39m type	20
2024-08-30T19:43:29.9578082Z [32m      cy:command ✔ [39m get	#lower-case-checkbox > input
2024-08-30T19:43:29.9578461Z [32m      cy:command ✔ [39m check	
2024-08-30T19:43:29.9579291Z [32m      cy:command ✔ [39m get	#lower-case-checkbox > input
2024-08-30T19:43:29.9580198Z [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
2024-08-30T19:43:29.9580748Z [32m      cy:command ✔ [39m get	#number-checkbox > input
2024-08-30T19:43:29.9581125Z [32m      cy:command ✔ [39m check	
2024-08-30T19:43:29.9581656Z [32m      cy:command ✔ [39m get	#number-checkbox > input
2024-08-30T19:43:29.9582490Z [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
2024-08-30T19:43:29.9583103Z [32m      cy:command ✔ [39m get	#special-char-checkbox > input
2024-08-30T19:43:29.9583470Z [32m      cy:command ✔ [39m check	
2024-08-30T19:43:29.9584063Z [32m      cy:command ✔ [39m get	#special-char-checkbox > input
2024-08-30T19:43:29.9584920Z [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
2024-08-30T19:43:29.9585518Z [32m      cy:command ✔ [39m get	#upper-case-checkbox > input
2024-08-30T19:43:29.9585890Z [32m      cy:command ✔ [39m check	
2024-08-30T19:43:29.9586455Z [32m      cy:command ✔ [39m get	#upper-case-checkbox > input
2024-08-30T19:43:29.9587294Z [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
2024-08-30T19:43:29.9587940Z [32m      cy:command ✔ [39m get	#character-breaks-checkbox > input
2024-08-30T19:43:29.9588312Z [32m      cy:command ✔ [39m check	
2024-08-30T19:43:29.9588915Z [32m      cy:command ✔ [39m get	#character-breaks-checkbox > input
2024-08-30T19:43:29.9589778Z [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
2024-08-30T19:43:29.9590338Z [32m      cy:command ✔ [39m get	#space-char-checkbox > input
2024-08-30T19:43:29.9591059Z [32m      cy:command ✔ [39m uncheck	
2024-08-30T19:43:29.9591619Z [32m      cy:command ✔ [39m get	#space-char-checkbox > input
2024-08-30T19:43:29.9592502Z [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** not to be **checked**
2024-08-30T19:43:29.9593058Z [32m      cy:command ✔ [39m get	#ContentConatiner span
2024-08-30T19:43:29.9593514Z [32m      cy:command ✔ [39m contains	Solution
2024-08-30T19:43:29.9594037Z [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
2024-08-30T19:43:29.9595753Z [32m      cy:command ✔ [39m assert	expected **<a#pv_id_5_2_header_action.p-tabview-nav-link.p-tabview-header-action>** to have attribute **aria-disabled** with the value **false**
2024-08-30T19:43:29.9595993Z                     Actual: 	"false"
2024-08-30T19:43:29.9596221Z                     Expected: 	"false"
2024-08-30T19:43:29.9596741Z [32m      cy:command ✔ [39m get	#ContentConatiner span
2024-08-30T19:43:29.9597198Z [32m      cy:command ✔ [39m contains	Solution
2024-08-30T19:43:29.9597747Z [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
2024-08-30T19:43:29.9598122Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9599029Z [37m        cons:log ✱ [39m event: {"originalEvent":{"isTrusted":false,"_vts":1725045883469},"index":2}
2024-08-30T19:43:29.9599506Z [37m        cons:log ✱ [39m coderunner opened
2024-08-30T19:43:29.9600006Z [32m      cy:command ✔ [39m get	#coderunner-dropdown
2024-08-30T19:43:29.9600360Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9600835Z [32m      cy:command ✔ [39m get	.p-dropdown-item
2024-08-30T19:43:29.9601235Z [32m      cy:command ✔ [39m contains	js
2024-08-30T19:43:29.9601581Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9602031Z [32m      cy:command ✔ [39m get	#connect-button
2024-08-30T19:43:29.9602374Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:29.9602797Z [37m        cons:log ✱ [39m connect "JS_RUNNER"
2024-08-30T19:43:29.9603184Z [37m        cons:log ✱ [39m set awaitng
2024-08-30T19:43:29.9604876Z [37m        cons:log ✱ [39m {"__v_isShallow":false,"dep":{},"__v_isRef":true,"_rawValue":{"codeRunnerType":"UNIDENTIFIED","state":"NONE"},"_value":{"codeRunnerType":"UNIDENTIFIED","state":"NONE"}}
2024-08-30T19:43:29.9605882Z [37m        cons:log ✱ [39m {"codeRunnerType":"UNIDENTIFIED","state":"AWAITING"}
2024-08-30T19:43:29.9606455Z [37m        cons:log ✱ [39m codeRunnerName: "JS_RUNNER"
2024-08-30T19:43:29.9607152Z [37m        cons:log ✱ [39m requestCodeRunner: {"CodeRunnerType":"JS_RUNNER"}
2024-08-30T19:43:29.9607836Z [37m        cons:log ✱ [39m codeRunnerRequest: {"CodeRunnerType":"JS_RUNNER"}
2024-08-30T19:43:29.9608450Z [37m        cons:log ✱ [39m desitn: /public/app/codeRunnerRequest
2024-08-30T19:43:29.9609663Z [37m        cons:log ✱ [39m published {"destination":"/public/app/codeRunnerRequest","body":"{\"CodeRunnerType\":\"JS_RUNNER\"}"}
2024-08-30T19:43:29.9617920Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(x){\n //your solution \n}"},"manualTests ...
2024-08-30T19:43:29.9618634Z [37m        cons:log ✱ [39m CodeReults props: {"isDataResult":false}
2024-08-30T19:43:29.9619197Z [32m      cy:command ✔ [39m get	#coderunner-loading-dialog
2024-08-30T19:43:29.9620117Z [32m      cy:command ✔ [39m assert	expected **#coderunner-loading-dialog** not to exist in the DOM
2024-08-30T19:43:29.9620930Z                     Actual: 	"#coderunner-loading-dialog"
2024-08-30T19:43:29.9621375Z                     Expected: 	"#coderunner-loading-dialog"
2024-08-30T19:43:29.9622812Z [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
2024-08-30T19:43:29.9624267Z [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
2024-08-30T19:43:29.9625583Z [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
2024-08-30T19:43:29.9626705Z [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
2024-08-30T19:43:29.9627796Z [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
2024-08-30T19:43:29.9628875Z [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
2024-08-30T19:43:29.9631555Z [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
2024-08-30T19:43:29.9633538Z [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
2024-08-30T19:43:29.9634498Z [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:29.9635096Z [37m        cons:log ✱ [39m typeof this.eventHandlers  object
2024-08-30T19:43:29.9636868Z [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
2024-08-30T19:43:29.9644817Z [37m        cons:log ✱ [39m length  1
2024-08-30T19:43:29.9645270Z [37m        cons:log ✱ [39m |Test
2024-08-30T19:43:29.9646736Z [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:29.9647623Z [37m        cons:log ✱ [39m props chahned-----------------------:  -> function solution(x){
2024-08-30T19:43:29.9647893Z                      //your solution 
2024-08-30T19:43:29.9648061Z                     }
2024-08-30T19:43:29.9648983Z [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
2024-08-30T19:43:29.9650893Z [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:29.9651697Z [37m        cons:log ✱ [39m typeof this.eventHandlers  object
2024-08-30T19:43:29.9652486Z [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
2024-08-30T19:43:29.9656313Z [37m        cons:log ✱ [39m length  1
2024-08-30T19:43:29.9656726Z [37m        cons:log ✱ [39m |Test
2024-08-30T19:43:29.9657405Z [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:29.9657890Z [32m      cy:command ✔ [39m get	#exercise-title
2024-08-30T19:43:29.9658372Z [32m      cy:command ✔ [39m contains	Cesar cipher
2024-08-30T19:43:29.9658893Z [32m      cy:command ✔ [39m get	#exercise-description
2024-08-30T19:43:29.9660227Z [32m      cy:command ✔ [39m contains	move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled
2024-08-30T19:43:29.9660722Z [32m      cy:command ✔ [39m get	#code-preview
2024-08-30T19:43:29.9661143Z [32m      cy:command ✔ [39m invoke	.text()
2024-08-30T19:43:29.9662334Z [32m      cy:command ✔ [39m assert	expected **function solution(x){\n //your solution \n}** to include **function solution(x){**
2024-08-30T19:43:29.9662740Z [32m      cy:command ✔ [39m wait	1000
2024-08-30T19:43:29.9663370Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9663746Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9664124Z [32m      cy:command ✔ [39m wait	1000
2024-08-30T19:43:29.9664727Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9665375Z [32m      cy:command ✔ [39m type	{selectAll}{backspace}, {force: true}
2024-08-30T19:43:29.9666169Z [37m        cons:log ✱ [39m codee update: 
2024-08-30T19:43:29.9668357Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":""}
2024-08-30T19:43:29.9676573Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":""},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"input" ...
2024-08-30T19:43:29.9677431Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(x){
2024-08-30T19:43:29.9677996Z                      //your solution 
2024-08-30T19:43:29.9678286Z                     } -> 
2024-08-30T19:43:29.9678750Z [32m      cy:command ✔ [39m get	#code-preview
2024-08-30T19:43:29.9679211Z [32m      cy:command ✔ [39m invoke	.text()
2024-08-30T19:43:29.9679853Z [32m      cy:command ✔ [39m assert	expected **''** to be empty
2024-08-30T19:43:29.9680461Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9680833Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9681445Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9681928Z [32m      cy:command ✔ [39m type	f, {force: true}
2024-08-30T19:43:29.9682378Z [37m        cons:log ✱ [39m codee update: f
2024-08-30T19:43:29.9685104Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"f"}
2024-08-30T19:43:29.9695268Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"f"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"input ...
2024-08-30T19:43:29.9696005Z [37m        cons:log ✱ [39m props chahned-----------------------:  -> f
2024-08-30T19:43:29.9696649Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9697024Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9786471Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9792967Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:29.9793506Z [37m        cons:log ✱ [39m codee update: fu
2024-08-30T19:43:29.9795004Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"fu"}
2024-08-30T19:43:29.9802884Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"fu"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"inpu ...
2024-08-30T19:43:29.9803929Z [37m        cons:log ✱ [39m props chahned-----------------------: f -> fu
2024-08-30T19:43:29.9804581Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9804967Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9805594Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9806077Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:29.9806551Z [37m        cons:log ✱ [39m codee update: fun
2024-08-30T19:43:29.9807997Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"fun"}
2024-08-30T19:43:29.9817884Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"fun"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"inp ...
2024-08-30T19:43:29.9818829Z [37m        cons:log ✱ [39m props chahned-----------------------: fu -> fun
2024-08-30T19:43:29.9819742Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9820165Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9821155Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9821681Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:29.9822135Z [37m        cons:log ✱ [39m codee update: func
2024-08-30T19:43:29.9824487Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"func"}
2024-08-30T19:43:29.9834835Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"func"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"in ...
2024-08-30T19:43:29.9835775Z [37m        cons:log ✱ [39m props chahned-----------------------: fun -> func
2024-08-30T19:43:29.9839593Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9840038Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9841137Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9842006Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:29.9842479Z [37m        cons:log ✱ [39m codee update: funct
2024-08-30T19:43:29.9844151Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"funct"}
2024-08-30T19:43:29.9853172Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"funct"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"i ...
2024-08-30T19:43:29.9854310Z [37m        cons:log ✱ [39m props chahned-----------------------: func -> funct
2024-08-30T19:43:29.9855642Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9856099Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9856902Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9857650Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:29.9858178Z [37m        cons:log ✱ [39m codee update: functi
2024-08-30T19:43:29.9860119Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"functi"}
2024-08-30T19:43:29.9870202Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"functi"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{" ...
2024-08-30T19:43:29.9871251Z [37m        cons:log ✱ [39m props chahned-----------------------: funct -> functi
2024-08-30T19:43:29.9872203Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9872906Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9873584Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9874239Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:29.9874908Z [37m        cons:log ✱ [39m codee update: functio
2024-08-30T19:43:29.9876935Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"functio"}
2024-08-30T19:43:29.9886981Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"functio"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{ ...
2024-08-30T19:43:29.9888121Z [37m        cons:log ✱ [39m props chahned-----------------------: functi -> functio
2024-08-30T19:43:29.9889119Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9889542Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9890146Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9891215Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:29.9891753Z [37m        cons:log ✱ [39m codee update: function
2024-08-30T19:43:29.9893746Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function"}
2024-08-30T19:43:29.9903433Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[ ...
2024-08-30T19:43:29.9904672Z [37m        cons:log ✱ [39m props chahned-----------------------: functio -> function
2024-08-30T19:43:29.9905333Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9905726Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9906719Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9907373Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:29.9907913Z [37m        cons:log ✱ [39m codee update: function 
2024-08-30T19:43:29.9909930Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function "}
2024-08-30T19:43:29.9919726Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function "},"manualTestsSolutions":{"CPP_RUNNER":{"tests": ...
2024-08-30T19:43:29.9920921Z [37m        cons:log ✱ [39m props chahned-----------------------: function -> function 
2024-08-30T19:43:29.9921597Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9921978Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9922929Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9923746Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:29.9924431Z [37m        cons:log ✱ [39m codee update: function s
2024-08-30T19:43:29.9926418Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function s"}
2024-08-30T19:43:29.9937051Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function s"},"manualTestsSolutions":{"CPP_RUNNER":{"tests" ...
2024-08-30T19:43:29.9938074Z [37m        cons:log ✱ [39m props chahned-----------------------: function  -> function s
2024-08-30T19:43:29.9938921Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9939631Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9940387Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9941272Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:29.9942143Z [37m        cons:log ✱ [39m codee update: function so
2024-08-30T19:43:29.9944079Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function so"}
2024-08-30T19:43:29.9953872Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function so"},"manualTestsSolutions":{"CPP_RUNNER":{"tests ...
2024-08-30T19:43:29.9955130Z [37m        cons:log ✱ [39m props chahned-----------------------: function s -> function so
2024-08-30T19:43:29.9955818Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9956360Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9957233Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9957764Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:29.9958461Z [37m        cons:log ✱ [39m codee update: function sol
2024-08-30T19:43:29.9960648Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function sol"}
2024-08-30T19:43:29.9970116Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function sol"},"manualTestsSolutions":{"CPP_RUNNER":{"test ...
2024-08-30T19:43:29.9971693Z [37m        cons:log ✱ [39m props chahned-----------------------: function so -> function sol
2024-08-30T19:43:29.9972358Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9972761Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9973745Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9974559Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:29.9975121Z [37m        cons:log ✱ [39m codee update: function solu
2024-08-30T19:43:29.9977015Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solu"}
2024-08-30T19:43:29.9986942Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solu"},"manualTestsSolutions":{"CPP_RUNNER":{"tes ...
2024-08-30T19:43:29.9988234Z [37m        cons:log ✱ [39m props chahned-----------------------: function sol -> function solu
2024-08-30T19:43:29.9989195Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9989613Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:29.9990231Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:29.9990924Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:29.9991712Z [37m        cons:log ✱ [39m codee update: function solut
2024-08-30T19:43:29.9993639Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solut"}
2024-08-30T19:43:30.0003376Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solut"},"manualTestsSolutions":{"CPP_RUNNER":{"te ...
2024-08-30T19:43:30.0004346Z [37m        cons:log ✱ [39m props chahned-----------------------: function solu -> function solut
2024-08-30T19:43:30.0004978Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0005729Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0006376Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0006862Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.0007568Z [37m        cons:log ✱ [39m codee update: function soluti
2024-08-30T19:43:30.0009627Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function soluti"}
2024-08-30T19:43:30.0019778Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function soluti"},"manualTestsSolutions":{"CPP_RUNNER":{"t ...
2024-08-30T19:43:30.0021048Z [37m        cons:log ✱ [39m props chahned-----------------------: function solut -> function soluti
2024-08-30T19:43:30.0021666Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0022236Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0023109Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0023920Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.0024796Z [37m        cons:log ✱ [39m codee update: function solutio
2024-08-30T19:43:30.0027022Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solutio"}
2024-08-30T19:43:30.0036980Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solutio"},"manualTestsSolutions":{"CPP_RUNNER":{" ...
2024-08-30T19:43:30.0038105Z [37m        cons:log ✱ [39m props chahned-----------------------: function soluti -> function solutio
2024-08-30T19:43:30.0039011Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0039422Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0040205Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0040711Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.0041485Z [37m        cons:log ✱ [39m codee update: function solution
2024-08-30T19:43:30.0043408Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution"}
2024-08-30T19:43:30.0053625Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution"},"manualTestsSolutions":{"CPP_RUNNER":{ ...
2024-08-30T19:43:30.0054981Z [37m        cons:log ✱ [39m props chahned-----------------------: function solutio -> function solution
2024-08-30T19:43:30.0056266Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0056682Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0057935Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0058742Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.0059491Z [37m        cons:log ✱ [39m codee update: function solution(
2024-08-30T19:43:30.0061351Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution("}
2024-08-30T19:43:30.0070389Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution("},"manualTestsSolutions":{"CPP_RUNNER": ...
2024-08-30T19:43:30.0071395Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution -> function solution(
2024-08-30T19:43:30.0072208Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0072612Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0073221Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0073700Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.0074279Z [37m        cons:log ✱ [39m codee update: function solution(i
2024-08-30T19:43:30.0076593Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(i"}
2024-08-30T19:43:30.0087261Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(i"},"manualTestsSolutions":{"CPP_RUNNER" ...
2024-08-30T19:43:30.0088744Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution( -> function solution(i
2024-08-30T19:43:30.0089852Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0090296Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0090907Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0092144Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.0092765Z [37m        cons:log ✱ [39m codee update: function solution(in
2024-08-30T19:43:30.0094849Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(in"}
2024-08-30T19:43:30.0103539Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(in"},"manualTestsSolutions":{"CPP_RUNNER ...
2024-08-30T19:43:30.0104932Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(i -> function solution(in
2024-08-30T19:43:30.0105578Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0105964Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0106586Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0107093Z [32m      cy:command ✔ [39m type	p, {force: true}
2024-08-30T19:43:30.0108787Z [37m        cons:log ✱ [39m codee update: function solution(inp
2024-08-30T19:43:30.0110713Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(inp"}
2024-08-30T19:43:30.0119329Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(inp"},"manualTestsSolutions":{"CPP_RUNNE ...
2024-08-30T19:43:30.0120386Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(in -> function solution(inp
2024-08-30T19:43:30.0121039Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0121424Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0122034Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0122530Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.0123181Z [37m        cons:log ✱ [39m codee update: function solution(inpu
2024-08-30T19:43:30.0124808Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(inpu"}
2024-08-30T19:43:30.0132890Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(inpu"},"manualTestsSolutions":{"CPP_RUNN ...
2024-08-30T19:43:30.0133931Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(inp -> function solution(inpu
2024-08-30T19:43:30.0134903Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0135292Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0135921Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0136419Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.0137014Z [37m        cons:log ✱ [39m codee update: function solution(input
2024-08-30T19:43:30.0138664Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input"}
2024-08-30T19:43:30.0146852Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input"},"manualTestsSolutions":{"CPP_RUN ...
2024-08-30T19:43:30.0147943Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(inpu -> function solution(input
2024-08-30T19:43:30.0148572Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0148963Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0149567Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0150056Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.0150680Z [37m        cons:log ✱ [39m codee update: function solution(input)
2024-08-30T19:43:30.0152343Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input)"}
2024-08-30T19:43:30.0160216Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input)"},"manualTestsSolutions":{"CPP_RU ...
2024-08-30T19:43:30.0161286Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input -> function solution(input)
2024-08-30T19:43:30.0161935Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0162331Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0162924Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0163406Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0164022Z [37m        cons:log ✱ [39m codee update: function solution(input) 
2024-08-30T19:43:30.0165654Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) "}
2024-08-30T19:43:30.0173760Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) "},"manualTestsSolutions":{"CPP_R ...
2024-08-30T19:43:30.0175160Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) -> function solution(input) 
2024-08-30T19:43:30.0175792Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0176193Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0176797Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0177268Z [32m      cy:command ✔ [39m type	{, {force: true}
2024-08-30T19:43:30.0178153Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0179818Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {"}
2024-08-30T19:43:30.0187718Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {"},"manualTestsSolutions":{"CPP_ ...
2024-08-30T19:43:30.0188839Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input)  -> function solution(input) {
2024-08-30T19:43:30.0189469Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0189842Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0190455Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0190829Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.0191066Z                     , {force: true}
2024-08-30T19:43:30.0191697Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0191887Z                         
2024-08-30T19:43:30.0193618Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    "}
2024-08-30T19:43:30.0201560Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    "},"manualTestsSolutions": ...
2024-08-30T19:43:30.0202961Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) { -> function solution(input) {
2024-08-30T19:43:30.0203153Z                         
2024-08-30T19:43:30.0203796Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0204179Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0204800Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0205278Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0205909Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0206082Z                          
2024-08-30T19:43:30.0207793Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n     "}
2024-08-30T19:43:30.0216179Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n     "},"manualTestsSolutions" ...
2024-08-30T19:43:30.0217095Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0217513Z                          -> function solution(input) {
2024-08-30T19:43:30.0217706Z                          
2024-08-30T19:43:30.0218336Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0218709Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0219332Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0219809Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0220430Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0220602Z                           
2024-08-30T19:43:30.0222332Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n      "}
2024-08-30T19:43:30.0230324Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n      "},"manualTestsSolutions ...
2024-08-30T19:43:30.0231224Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0231642Z                           -> function solution(input) {
2024-08-30T19:43:30.0231816Z                           
2024-08-30T19:43:30.0232426Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0233117Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0233743Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0234220Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0234869Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0235050Z                            
2024-08-30T19:43:30.0236799Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n       "}
2024-08-30T19:43:30.0244905Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n       "},"manualTestsSolution ...
2024-08-30T19:43:30.0245819Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0246258Z                            -> function solution(input) {
2024-08-30T19:43:30.0246425Z                            
2024-08-30T19:43:30.0247046Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0247427Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0248028Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0248507Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0249159Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0249338Z                             
2024-08-30T19:43:30.0251253Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n        "}
2024-08-30T19:43:30.0259148Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n        "},"manualTestsSolutio ...
2024-08-30T19:43:30.0260065Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0260501Z                             -> function solution(input) {
2024-08-30T19:43:30.0260672Z                             
2024-08-30T19:43:30.0261303Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0261670Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0262287Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0262773Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0263410Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0263596Z                              
2024-08-30T19:43:30.0265660Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n         "}
2024-08-30T19:43:30.0273567Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n         "},"manualTestsSoluti ...
2024-08-30T19:43:30.0274460Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0274901Z                              -> function solution(input) {
2024-08-30T19:43:30.0275068Z                              
2024-08-30T19:43:30.0275972Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0276373Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0276981Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0277461Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0278104Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0278316Z                               
2024-08-30T19:43:30.0280056Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n          "}
2024-08-30T19:43:30.0287964Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n          "},"manualTestsSolut ...
2024-08-30T19:43:30.0288840Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0289291Z                               -> function solution(input) {
2024-08-30T19:43:30.0289498Z                               
2024-08-30T19:43:30.0290130Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0290509Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0291315Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0291821Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0292438Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0292664Z                                
2024-08-30T19:43:30.0294419Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n           "}
2024-08-30T19:43:30.0302317Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n           "},"manualTestsSolu ...
2024-08-30T19:43:30.0303498Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0303940Z                                -> function solution(input) {
2024-08-30T19:43:30.0304136Z                                
2024-08-30T19:43:30.0304761Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0305144Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0305742Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0306223Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0307126Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0307362Z                                 
2024-08-30T19:43:30.0309118Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n            "}
2024-08-30T19:43:30.0317015Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n            "},"manualTestsSol ...
2024-08-30T19:43:30.0317906Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0318352Z                                 -> function solution(input) {
2024-08-30T19:43:30.0318553Z                                 
2024-08-30T19:43:30.0319177Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0319564Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0320158Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0320617Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0321232Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0321441Z                                  
2024-08-30T19:43:30.0323294Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n             "}
2024-08-30T19:43:30.0331287Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n             "},"manualTestsSo ...
2024-08-30T19:43:30.0332501Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0332954Z                                  -> function solution(input) {
2024-08-30T19:43:30.0333155Z                                  
2024-08-30T19:43:30.0333786Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0334164Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0334768Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0335231Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0335854Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0336098Z                                   
2024-08-30T19:43:30.0337898Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              "}
2024-08-30T19:43:30.0346105Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              "},"manualTestsS ...
2024-08-30T19:43:30.0346990Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0347475Z                                   -> function solution(input) {
2024-08-30T19:43:30.0347684Z                                   
2024-08-30T19:43:30.0348312Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0348683Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0349288Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0349759Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.0350374Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0350600Z                                   l
2024-08-30T19:43:30.0352406Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              l"}
2024-08-30T19:43:30.0360277Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              l"},"manualTests ...
2024-08-30T19:43:30.0361155Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0361904Z                                    -> function solution(input) {
2024-08-30T19:43:30.0362110Z                                   l
2024-08-30T19:43:30.0362749Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0363140Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0363760Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0364256Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.0364890Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0365112Z                                   le
2024-08-30T19:43:30.0366906Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              le"}
2024-08-30T19:43:30.0375604Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              le"},"manualTest ...
2024-08-30T19:43:30.0376531Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0377008Z                                   l -> function solution(input) {
2024-08-30T19:43:30.0377221Z                                   le
2024-08-30T19:43:30.0377844Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0378226Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0378819Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0379326Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.0379951Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0380174Z                                   let
2024-08-30T19:43:30.0381958Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let"}
2024-08-30T19:43:30.0389823Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let"},"manualTes ...
2024-08-30T19:43:30.0390715Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0391188Z                                   le -> function solution(input) {
2024-08-30T19:43:30.0391396Z                                   let
2024-08-30T19:43:30.0392026Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0392400Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0393337Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0393831Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0394459Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0394684Z                                   let 
2024-08-30T19:43:30.0396505Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let "}
2024-08-30T19:43:30.0404617Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let "},"manualTe ...
2024-08-30T19:43:30.0405527Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0406002Z                                   let -> function solution(input) {
2024-08-30T19:43:30.0406203Z                                   let 
2024-08-30T19:43:30.0406815Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0407189Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0407788Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0408278Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.0408921Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0409157Z                                   let r
2024-08-30T19:43:30.0411227Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let r"}
2024-08-30T19:43:30.0419122Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let r"},"manualT ...
2024-08-30T19:43:30.0420305Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0420782Z                                   let  -> function solution(input) {
2024-08-30T19:43:30.0420997Z                                   let r
2024-08-30T19:43:30.0421613Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0421979Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0422574Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0423123Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.0423751Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0424011Z                                   let re
2024-08-30T19:43:30.0425846Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let re"}
2024-08-30T19:43:30.0433751Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let re"},"manual ...
2024-08-30T19:43:30.0434635Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0435405Z                                   let r -> function solution(input) {
2024-08-30T19:43:30.0435653Z                                   let re
2024-08-30T19:43:30.0436295Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0436658Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0437263Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0437758Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.0438379Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0438620Z                                   let res
2024-08-30T19:43:30.0440454Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let res"}
2024-08-30T19:43:30.0448372Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let res"},"manua ...
2024-08-30T19:43:30.0449524Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0450043Z                                   let re -> function solution(input) {
2024-08-30T19:43:30.0450267Z                                   let res
2024-08-30T19:43:30.0450916Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0451461Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0452066Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0452554Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.0453168Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0453419Z                                   let resu
2024-08-30T19:43:30.0455263Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let resu"}
2024-08-30T19:43:30.0463164Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let resu"},"manu ...
2024-08-30T19:43:30.0464031Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0464526Z                                   let res -> function solution(input) {
2024-08-30T19:43:30.0464764Z                                   let resu
2024-08-30T19:43:30.0465384Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0465762Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0466632Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0467176Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.0467808Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0468063Z                                   let resul
2024-08-30T19:43:30.0469920Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let resul"}
2024-08-30T19:43:30.0477843Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let resul"},"man ...
2024-08-30T19:43:30.0478733Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0479223Z                                   let resu -> function solution(input) {
2024-08-30T19:43:30.0479460Z                                   let resul
2024-08-30T19:43:30.0480401Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0480782Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0481376Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0481875Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.0482495Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0482749Z                                   let result
2024-08-30T19:43:30.0484636Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result"}
2024-08-30T19:43:30.0492752Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result"},"ma ...
2024-08-30T19:43:30.0493651Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0494158Z                                   let resul -> function solution(input) {
2024-08-30T19:43:30.0494401Z                                   let result
2024-08-30T19:43:30.0495028Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0495394Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0495996Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0496472Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0497094Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0497658Z                                   let result 
2024-08-30T19:43:30.0499574Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result "}
2024-08-30T19:43:30.0507421Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result "},"m ...
2024-08-30T19:43:30.0508300Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0508816Z                                   let result -> function solution(input) {
2024-08-30T19:43:30.0509061Z                                   let result 
2024-08-30T19:43:30.0509681Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0510057Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0510638Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0511087Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.0512011Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0512292Z                                   let result =
2024-08-30T19:43:30.0514196Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result ="}
2024-08-30T19:43:30.0522179Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result ="}," ...
2024-08-30T19:43:30.0523132Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0523659Z                                   let result  -> function solution(input) {
2024-08-30T19:43:30.0523927Z                                   let result =
2024-08-30T19:43:30.0524566Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0524940Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0525543Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0526020Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0526639Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0526924Z                                   let result = 
2024-08-30T19:43:30.0529142Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = "}
2024-08-30T19:43:30.0537204Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = "}, ...
2024-08-30T19:43:30.0538095Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0538643Z                                   let result = -> function solution(input) {
2024-08-30T19:43:30.0538901Z                                   let result = 
2024-08-30T19:43:30.0539537Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0539898Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0540493Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0540985Z [32m      cy:command ✔ [39m type	", {force: true}
2024-08-30T19:43:30.0541606Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0541887Z                                   let result = "
2024-08-30T19:43:30.0543800Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \""}
2024-08-30T19:43:30.0551975Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"" ...
2024-08-30T19:43:30.0552853Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0553380Z                                   let result =  -> function solution(input) {
2024-08-30T19:43:30.0553651Z                                   let result = "
2024-08-30T19:43:30.0554283Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0554663Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0555263Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0555755Z [32m      cy:command ✔ [39m type	", {force: true}
2024-08-30T19:43:30.0556378Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0556662Z                                   let result = ""
2024-08-30T19:43:30.0558625Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"\""}
2024-08-30T19:43:30.0566880Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"\ ...
2024-08-30T19:43:30.0567782Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0568316Z                                   let result = " -> function solution(input) {
2024-08-30T19:43:30.0568580Z                                   let result = ""
2024-08-30T19:43:30.0569226Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0569602Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0570206Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0570689Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.0571492Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0571774Z                                   let result = "";
2024-08-30T19:43:30.0573726Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"\";"}
2024-08-30T19:43:30.0581654Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"\ ...
2024-08-30T19:43:30.0582841Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0583383Z                                   let result = "" -> function solution(input) {
2024-08-30T19:43:30.0583659Z                                   let result = "";
2024-08-30T19:43:30.0584282Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0584512Z                         let result = "";
2024-08-30T19:43:30.0586348Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";"}
2024-08-30T19:43:30.0594536Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";"},"manu ...
2024-08-30T19:43:30.0595441Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0595974Z                                   let result = ""; -> function solution(input) {
2024-08-30T19:43:30.0596204Z                         let result = "";
2024-08-30T19:43:30.0596845Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0597210Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0597814Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0598178Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.0598399Z                     , {force: true}
2024-08-30T19:43:30.0599033Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0599280Z                         let result = "";
2024-08-30T19:43:30.0599442Z                         
2024-08-30T19:43:30.0601349Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    "}
2024-08-30T19:43:30.0609215Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    "} ...
2024-08-30T19:43:30.0610346Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0610867Z                         let result = ""; -> function solution(input) {
2024-08-30T19:43:30.0611277Z                         let result = "";
2024-08-30T19:43:30.0611452Z                         
2024-08-30T19:43:30.0612087Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0612453Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0613058Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0613541Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0614190Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0614435Z                         let result = "";
2024-08-30T19:43:30.0614587Z                          
2024-08-30T19:43:30.0616548Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n     "}
2024-08-30T19:43:30.0623445Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n     " ...
2024-08-30T19:43:30.0624401Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0624646Z                         let result = "";
2024-08-30T19:43:30.0624893Z                          -> function solution(input) {
2024-08-30T19:43:30.0625021Z                         let result = "";
2024-08-30T19:43:30.0625117Z                          
2024-08-30T19:43:30.0625457Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0625645Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0625969Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0626215Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0626562Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0626695Z                         let result = "";
2024-08-30T19:43:30.0626782Z                           
2024-08-30T19:43:30.0627858Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n      "}
2024-08-30T19:43:30.0632984Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0633638Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0633843Z                         let result = "";
2024-08-30T19:43:30.0634058Z                           -> function solution(input) {
2024-08-30T19:43:30.0634185Z                         let result = "";
2024-08-30T19:43:30.0634279Z                           
2024-08-30T19:43:30.0634602Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0634783Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0635098Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0635342Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0635681Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0635812Z                         let result = "";
2024-08-30T19:43:30.0635909Z                            
2024-08-30T19:43:30.0637088Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       "}
2024-08-30T19:43:30.0642151Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0642643Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0642784Z                         let result = "";
2024-08-30T19:43:30.0642999Z                            -> function solution(input) {
2024-08-30T19:43:30.0643125Z                         let result = "";
2024-08-30T19:43:30.0643221Z                            
2024-08-30T19:43:30.0643546Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0643732Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0644040Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0644290Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0644616Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0644747Z                         let result = "";
2024-08-30T19:43:30.0644842Z                             
2024-08-30T19:43:30.0645900Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n        "}
2024-08-30T19:43:30.0650232Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0650827Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0651175Z                         let result = "";
2024-08-30T19:43:30.0651427Z                             -> function solution(input) {
2024-08-30T19:43:30.0651557Z                         let result = "";
2024-08-30T19:43:30.0651653Z                             
2024-08-30T19:43:30.0651981Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0652170Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0652480Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0652742Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0653070Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0653202Z                         let result = "";
2024-08-30T19:43:30.0653305Z                              
2024-08-30T19:43:30.0654365Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n         "}
2024-08-30T19:43:30.0660593Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0661521Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0661780Z                         let result = "";
2024-08-30T19:43:30.0662204Z                              -> function solution(input) {
2024-08-30T19:43:30.0662458Z                         let result = "";
2024-08-30T19:43:30.0662623Z                              
2024-08-30T19:43:30.0663255Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0663639Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0664248Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0664756Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0665382Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0665624Z                         let result = "";
2024-08-30T19:43:30.0665845Z                               
2024-08-30T19:43:30.0667798Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n          "}
2024-08-30T19:43:30.0675699Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0676872Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0677135Z                         let result = "";
2024-08-30T19:43:30.0677555Z                               -> function solution(input) {
2024-08-30T19:43:30.0677787Z                         let result = "";
2024-08-30T19:43:30.0677975Z                               
2024-08-30T19:43:30.0678595Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0678985Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0679615Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0680105Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0680726Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0680975Z                         let result = "";
2024-08-30T19:43:30.0681177Z                                
2024-08-30T19:43:30.0683147Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n           "}
2024-08-30T19:43:30.0691438Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0692359Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0692615Z                         let result = "";
2024-08-30T19:43:30.0693034Z                                -> function solution(input) {
2024-08-30T19:43:30.0693273Z                         let result = "";
2024-08-30T19:43:30.0693455Z                                
2024-08-30T19:43:30.0694085Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0694469Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0695088Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0695586Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0696209Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0696457Z                         let result = "";
2024-08-30T19:43:30.0696636Z                                 
2024-08-30T19:43:30.0698627Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n            "}
2024-08-30T19:43:30.0706575Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0707765Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0708020Z                         let result = "";
2024-08-30T19:43:30.0708439Z                                 -> function solution(input) {
2024-08-30T19:43:30.0708680Z                         let result = "";
2024-08-30T19:43:30.0708864Z                                 
2024-08-30T19:43:30.0709491Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0709898Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0710486Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0710974Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0711818Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0712096Z                         let result = "";
2024-08-30T19:43:30.0712291Z                                  
2024-08-30T19:43:30.0714273Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n             "}
2024-08-30T19:43:30.0722232Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0723176Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0723425Z                         let result = "";
2024-08-30T19:43:30.0723861Z                                  -> function solution(input) {
2024-08-30T19:43:30.0724105Z                         let result = "";
2024-08-30T19:43:30.0724296Z                                  
2024-08-30T19:43:30.0724926Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0725309Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0725898Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0726379Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0727022Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0727274Z                         let result = "";
2024-08-30T19:43:30.0727466Z                                   
2024-08-30T19:43:30.0729460Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              "}
2024-08-30T19:43:30.0737603Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0738797Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0739044Z                         let result = "";
2024-08-30T19:43:30.0739498Z                                   -> function solution(input) {
2024-08-30T19:43:30.0739723Z                         let result = "";
2024-08-30T19:43:30.0739921Z                                   
2024-08-30T19:43:30.0740567Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0740931Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0741544Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0742310Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.0742976Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0743235Z                         let result = "";
2024-08-30T19:43:30.0743428Z                                   c
2024-08-30T19:43:30.0745471Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              c"}
2024-08-30T19:43:30.0753375Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0754276Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0754628Z                         let result = "";
2024-08-30T19:43:30.0755077Z                                    -> function solution(input) {
2024-08-30T19:43:30.0755302Z                         let result = "";
2024-08-30T19:43:30.0755519Z                                   c
2024-08-30T19:43:30.0756149Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0756519Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0757145Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0757623Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.0758246Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0758505Z                         let result = "";
2024-08-30T19:43:30.0758693Z                                   co
2024-08-30T19:43:30.0760714Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              co"}
2024-08-30T19:43:30.0768624Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0769768Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0770014Z                         let result = "";
2024-08-30T19:43:30.0770473Z                                   c -> function solution(input) {
2024-08-30T19:43:30.0770719Z                         let result = "";
2024-08-30T19:43:30.0770919Z                                   co
2024-08-30T19:43:30.0771740Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0772108Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0772986Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0773505Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.0774078Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0774319Z                         let result = "";
2024-08-30T19:43:30.0774529Z                                   con
2024-08-30T19:43:30.0776568Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              con"}
2024-08-30T19:43:30.0784439Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0785340Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0785589Z                         let result = "";
2024-08-30T19:43:30.0786067Z                                   co -> function solution(input) {
2024-08-30T19:43:30.0786297Z                         let result = "";
2024-08-30T19:43:30.0786508Z                                   con
2024-08-30T19:43:30.0787143Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0787521Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0788141Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0788621Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.0789255Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0789503Z                         let result = "";
2024-08-30T19:43:30.0789705Z                                   cons
2024-08-30T19:43:30.0791749Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              cons"}
2024-08-30T19:43:30.0799910Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0800788Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0801053Z                         let result = "";
2024-08-30T19:43:30.0801516Z                                   con -> function solution(input) {
2024-08-30T19:43:30.0801748Z                         let result = "";
2024-08-30T19:43:30.0801965Z                                   cons
2024-08-30T19:43:30.0802804Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0803214Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0803833Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0804320Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.0804943Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0805173Z                         let result = "";
2024-08-30T19:43:30.0805383Z                                   const
2024-08-30T19:43:30.0807437Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const"}
2024-08-30T19:43:30.0815459Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0816366Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0816631Z                         let result = "";
2024-08-30T19:43:30.0817101Z                                   cons -> function solution(input) {
2024-08-30T19:43:30.0817326Z                         let result = "";
2024-08-30T19:43:30.0817554Z                                   const
2024-08-30T19:43:30.0818169Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0818532Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0819157Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0819631Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0820268Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0820517Z                         let result = "";
2024-08-30T19:43:30.0820752Z                                   const 
2024-08-30T19:43:30.0822807Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const "}
2024-08-30T19:43:30.0831095Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0831990Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0832252Z                         let result = "";
2024-08-30T19:43:30.0832708Z                                   const -> function solution(input) {
2024-08-30T19:43:30.0833204Z                         let result = "";
2024-08-30T19:43:30.0833455Z                                   const 
2024-08-30T19:43:30.0834097Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0834484Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0835071Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0835587Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.0836267Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0836497Z                         let result = "";
2024-08-30T19:43:30.0836722Z                                   const s
2024-08-30T19:43:30.0838801Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const s"}
2024-08-30T19:43:30.0846711Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0847588Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0847848Z                         let result = "";
2024-08-30T19:43:30.0848331Z                                   const  -> function solution(input) {
2024-08-30T19:43:30.0848568Z                         let result = "";
2024-08-30T19:43:30.0848787Z                                   const s
2024-08-30T19:43:30.0849425Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0849812Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0850452Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0850903Z [32m      cy:command ✔ [39m type	h, {force: true}
2024-08-30T19:43:30.0851600Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0851835Z                         let result = "";
2024-08-30T19:43:30.0852381Z                                   const sh
2024-08-30T19:43:30.0854494Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const sh"}
2024-08-30T19:43:30.0862431Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0863330Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0863866Z                         let result = "";
2024-08-30T19:43:30.0864383Z                                   const s -> function solution(input) {
2024-08-30T19:43:30.0864628Z                         let result = "";
2024-08-30T19:43:30.0864859Z                                   const sh
2024-08-30T19:43:30.0865486Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0865868Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0866477Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0866967Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.0867589Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0867855Z                         let result = "";
2024-08-30T19:43:30.0868095Z                                   const shi
2024-08-30T19:43:30.0870180Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shi"}
2024-08-30T19:43:30.0878058Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0878973Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0879221Z                         let result = "";
2024-08-30T19:43:30.0879703Z                                   const sh -> function solution(input) {
2024-08-30T19:43:30.0879941Z                         let result = "";
2024-08-30T19:43:30.0880170Z                                   const shi
2024-08-30T19:43:30.0880794Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0881166Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0881770Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0882254Z [32m      cy:command ✔ [39m type	f, {force: true}
2024-08-30T19:43:30.0883194Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0883447Z                         let result = "";
2024-08-30T19:43:30.0883687Z                                   const shif
2024-08-30T19:43:30.0885780Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shif"}
2024-08-30T19:43:30.0894262Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0895196Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0895447Z                         let result = "";
2024-08-30T19:43:30.0895925Z                                   const shi -> function solution(input) {
2024-08-30T19:43:30.0896162Z                         let result = "";
2024-08-30T19:43:30.0896392Z                                   const shif
2024-08-30T19:43:30.0897029Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0898013Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0899003Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0900090Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.0901183Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0901984Z                         let result = "";
2024-08-30T19:43:30.0903005Z                                   const shift
2024-08-30T19:43:30.0905540Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift"}
2024-08-30T19:43:30.0914887Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0921291Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0922266Z                         let result = "";
2024-08-30T19:43:30.0923212Z                                   const shif -> function solution(input) {
2024-08-30T19:43:30.0923967Z                         let result = "";
2024-08-30T19:43:30.0924600Z                                   const shift
2024-08-30T19:43:30.0925635Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0926595Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0927993Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0929079Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0930180Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0931178Z                         let result = "";
2024-08-30T19:43:30.0931833Z                                   const shift 
2024-08-30T19:43:30.0934353Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift "}
2024-08-30T19:43:30.0944056Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0950329Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0951315Z                         let result = "";
2024-08-30T19:43:30.0952180Z                                   const shift -> function solution(input) {
2024-08-30T19:43:30.0952930Z                         let result = "";
2024-08-30T19:43:30.0953569Z                                   const shift 
2024-08-30T19:43:30.0954584Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0955560Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0956577Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0957622Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.0958728Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0959550Z                         let result = "";
2024-08-30T19:43:30.0960182Z                                   const shift =
2024-08-30T19:43:30.0962697Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift ="}
2024-08-30T19:43:30.0971367Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.0977667Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.0978647Z                         let result = "";
2024-08-30T19:43:30.0979560Z                                   const shift  -> function solution(input) {
2024-08-30T19:43:30.0980319Z                         let result = "";
2024-08-30T19:43:30.0981281Z                                   const shift =
2024-08-30T19:43:30.0982344Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0983321Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.0984325Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.0985397Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.0986522Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.0987354Z                         let result = "";
2024-08-30T19:43:30.0988003Z                                   const shift = 
2024-08-30T19:43:30.0990544Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift = "}
2024-08-30T19:43:30.1000240Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.1006581Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1007320Z                         let result = "";
2024-08-30T19:43:30.1007981Z                                   const shift = -> function solution(input) {
2024-08-30T19:43:30.1008505Z                         let result = "";
2024-08-30T19:43:30.1009019Z                                   const shift = 
2024-08-30T19:43:30.1009779Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1010464Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1011247Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1012015Z [32m      cy:command ✔ [39m type	7, {force: true}
2024-08-30T19:43:30.1012826Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1013397Z                         let result = "";
2024-08-30T19:43:30.1013884Z                                   const shift = 7
2024-08-30T19:43:30.1015720Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift = 7"}
2024-08-30T19:43:30.1022329Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.1028451Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1029845Z                         let result = "";
2024-08-30T19:43:30.1030764Z                                   const shift =  -> function solution(input) {
2024-08-30T19:43:30.1031526Z                         let result = "";
2024-08-30T19:43:30.1032165Z                                   const shift = 7
2024-08-30T19:43:30.1033243Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1034214Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1035232Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1036298Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.1037410Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1038237Z                         let result = "";
2024-08-30T19:43:30.1038881Z                                   const shift = 7;
2024-08-30T19:43:30.1041444Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift = 7;"}
2024-08-30T19:43:30.1051294Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
2024-08-30T19:43:30.1057613Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1058609Z                         let result = "";
2024-08-30T19:43:30.1059528Z                                   const shift = 7 -> function solution(input) {
2024-08-30T19:43:30.1060287Z                         let result = "";
2024-08-30T19:43:30.1060938Z                                   const shift = 7;
2024-08-30T19:43:30.1062025Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1062813Z                         let result = "";
2024-08-30T19:43:30.1063415Z                         const shift = 7;
2024-08-30T19:43:30.1065865Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;"}
2024-08-30T19:43:30.1075276Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1081546Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1082523Z                         let result = "";
2024-08-30T19:43:30.1083451Z                                   const shift = 7; -> function solution(input) {
2024-08-30T19:43:30.1084572Z                         let result = "";
2024-08-30T19:43:30.1085197Z                         const shift = 7;
2024-08-30T19:43:30.1086221Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1087184Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1088203Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1089162Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.1089768Z                     , {force: true}
2024-08-30T19:43:30.1090739Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1091752Z                         let result = "";
2024-08-30T19:43:30.1092382Z                         const shift = 7;
2024-08-30T19:43:30.1093259Z                         
2024-08-30T19:43:30.1095938Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n    "}
2024-08-30T19:43:30.1105699Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1112286Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1113387Z                         let result = "";
2024-08-30T19:43:30.1114305Z                         const shift = 7; -> function solution(input) {
2024-08-30T19:43:30.1115050Z                         let result = "";
2024-08-30T19:43:30.1115683Z                         const shift = 7;
2024-08-30T19:43:30.1116236Z                         
2024-08-30T19:43:30.1117238Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1118201Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1119217Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1120180Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.1120800Z                     , {force: true}
2024-08-30T19:43:30.1121854Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1122675Z                         let result = "";
2024-08-30T19:43:30.1123368Z                         const shift = 7;
2024-08-30T19:43:30.1123920Z                     
2024-08-30T19:43:30.1124344Z                         
2024-08-30T19:43:30.1126763Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    "}
2024-08-30T19:43:30.1136364Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1142964Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1143949Z                         let result = "";
2024-08-30T19:43:30.1144567Z                         const shift = 7;
2024-08-30T19:43:30.1145386Z                          -> function solution(input) {
2024-08-30T19:43:30.1146079Z                         let result = "";
2024-08-30T19:43:30.1146691Z                         const shift = 7;
2024-08-30T19:43:30.1147244Z                     
2024-08-30T19:43:30.1147670Z                         
2024-08-30T19:43:30.1148580Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1149559Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1150573Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1151672Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1152771Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1153586Z                         let result = "";
2024-08-30T19:43:30.1154489Z                         const shift = 7;
2024-08-30T19:43:30.1155072Z                     
2024-08-30T19:43:30.1155493Z                          
2024-08-30T19:43:30.1157922Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n     "}
2024-08-30T19:43:30.1167319Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1173832Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1174826Z                         let result = "";
2024-08-30T19:43:30.1175453Z                         const shift = 7;
2024-08-30T19:43:30.1175984Z                     
2024-08-30T19:43:30.1176674Z                          -> function solution(input) {
2024-08-30T19:43:30.1177368Z                         let result = "";
2024-08-30T19:43:30.1178001Z                         const shift = 7;
2024-08-30T19:43:30.1178550Z                     
2024-08-30T19:43:30.1178968Z                          
2024-08-30T19:43:30.1179882Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1180862Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1181861Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1182922Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1184028Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1184853Z                         let result = "";
2024-08-30T19:43:30.1185479Z                         const shift = 7;
2024-08-30T19:43:30.1186012Z                     
2024-08-30T19:43:30.1186434Z                           
2024-08-30T19:43:30.1188857Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n      "}
2024-08-30T19:43:30.1198590Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1204808Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1205806Z                         let result = "";
2024-08-30T19:43:30.1206431Z                         const shift = 7;
2024-08-30T19:43:30.1206987Z                     
2024-08-30T19:43:30.1207964Z                           -> function solution(input) {
2024-08-30T19:43:30.1208685Z                         let result = "";
2024-08-30T19:43:30.1209310Z                         const shift = 7;
2024-08-30T19:43:30.1209850Z                     
2024-08-30T19:43:30.1210282Z                           
2024-08-30T19:43:30.1211389Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1212378Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1213374Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1214422Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1215532Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1216372Z                         let result = "";
2024-08-30T19:43:30.1217003Z                         const shift = 7;
2024-08-30T19:43:30.1217535Z                     
2024-08-30T19:43:30.1217958Z                            
2024-08-30T19:43:30.1220425Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n       "}
2024-08-30T19:43:30.1229931Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1236232Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1237221Z                         let result = "";
2024-08-30T19:43:30.1237843Z                         const shift = 7;
2024-08-30T19:43:30.1238388Z                     
2024-08-30T19:43:30.1239078Z                            -> function solution(input) {
2024-08-30T19:43:30.1239764Z                         let result = "";
2024-08-30T19:43:30.1240393Z                         const shift = 7;
2024-08-30T19:43:30.1240937Z                     
2024-08-30T19:43:30.1241351Z                            
2024-08-30T19:43:30.1242623Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1243597Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1244633Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1245704Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1246813Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1247640Z                         let result = "";
2024-08-30T19:43:30.1248272Z                         const shift = 7;
2024-08-30T19:43:30.1248814Z                     
2024-08-30T19:43:30.1249242Z                             
2024-08-30T19:43:30.1251958Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n        "}
2024-08-30T19:43:30.1261758Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1268068Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1269045Z                         let result = "";
2024-08-30T19:43:30.1269670Z                         const shift = 7;
2024-08-30T19:43:30.1270230Z                     
2024-08-30T19:43:30.1270943Z                             -> function solution(input) {
2024-08-30T19:43:30.1271632Z                         let result = "";
2024-08-30T19:43:30.1272254Z                         const shift = 7;
2024-08-30T19:43:30.1272816Z                     
2024-08-30T19:43:30.1273229Z                             
2024-08-30T19:43:30.1274168Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1275146Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1276128Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1277203Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1278330Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1279153Z                         let result = "";
2024-08-30T19:43:30.1279769Z                         const shift = 7;
2024-08-30T19:43:30.1280319Z                     
2024-08-30T19:43:30.1280755Z                              
2024-08-30T19:43:30.1283354Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n         "}
2024-08-30T19:43:30.1293018Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1299599Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1300600Z                         let result = "";
2024-08-30T19:43:30.1301234Z                         const shift = 7;
2024-08-30T19:43:30.1301791Z                     
2024-08-30T19:43:30.1302469Z                              -> function solution(input) {
2024-08-30T19:43:30.1303165Z                         let result = "";
2024-08-30T19:43:30.1303791Z                         const shift = 7;
2024-08-30T19:43:30.1304328Z                     
2024-08-30T19:43:30.1304733Z                              
2024-08-30T19:43:30.1305681Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1306652Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1307660Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1308756Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1309865Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1310681Z                         let result = "";
2024-08-30T19:43:30.1311587Z                         const shift = 7;
2024-08-30T19:43:30.1312170Z                     
2024-08-30T19:43:30.1312626Z                               
2024-08-30T19:43:30.1315126Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n          "}
2024-08-30T19:43:30.1324684Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1331152Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1332144Z                         let result = "";
2024-08-30T19:43:30.1332874Z                         const shift = 7;
2024-08-30T19:43:30.1333431Z                     
2024-08-30T19:43:30.1334131Z                               -> function solution(input) {
2024-08-30T19:43:30.1334839Z                         let result = "";
2024-08-30T19:43:30.1335484Z                         const shift = 7;
2024-08-30T19:43:30.1336011Z                     
2024-08-30T19:43:30.1336465Z                               
2024-08-30T19:43:30.1337437Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1338428Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1339438Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1340508Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1341630Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1342460Z                         let result = "";
2024-08-30T19:43:30.1343084Z                         const shift = 7;
2024-08-30T19:43:30.1343632Z                     
2024-08-30T19:43:30.1344085Z                                
2024-08-30T19:43:30.1346590Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n           "}
2024-08-30T19:43:30.1356427Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1362722Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1363722Z                         let result = "";
2024-08-30T19:43:30.1364357Z                         const shift = 7;
2024-08-30T19:43:30.1364892Z                     
2024-08-30T19:43:30.1365857Z                                -> function solution(input) {
2024-08-30T19:43:30.1366605Z                         let result = "";
2024-08-30T19:43:30.1367226Z                         const shift = 7;
2024-08-30T19:43:30.1367764Z                     
2024-08-30T19:43:30.1368224Z                                
2024-08-30T19:43:30.1369220Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1370202Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1371416Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1372513Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1373632Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1374479Z                         let result = "";
2024-08-30T19:43:30.1375119Z                         const shift = 7;
2024-08-30T19:43:30.1375671Z                     
2024-08-30T19:43:30.1376125Z                                 
2024-08-30T19:43:30.1378674Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n            "}
2024-08-30T19:43:30.1388176Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1394504Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1395498Z                         let result = "";
2024-08-30T19:43:30.1396131Z                         const shift = 7;
2024-08-30T19:43:30.1396679Z                     
2024-08-30T19:43:30.1397387Z                                 -> function solution(input) {
2024-08-30T19:43:30.1398092Z                         let result = "";
2024-08-30T19:43:30.1398727Z                         const shift = 7;
2024-08-30T19:43:30.1399262Z                     
2024-08-30T19:43:30.1400045Z                                 
2024-08-30T19:43:30.1401037Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1402018Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1403030Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1404107Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1405233Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1406056Z                         let result = "";
2024-08-30T19:43:30.1406688Z                         const shift = 7;
2024-08-30T19:43:30.1407230Z                     
2024-08-30T19:43:30.1407678Z                                  
2024-08-30T19:43:30.1410231Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n             "}
2024-08-30T19:43:30.1420255Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1426642Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1427625Z                         let result = "";
2024-08-30T19:43:30.1428274Z                         const shift = 7;
2024-08-30T19:43:30.1428815Z                     
2024-08-30T19:43:30.1429528Z                                  -> function solution(input) {
2024-08-30T19:43:30.1430249Z                         let result = "";
2024-08-30T19:43:30.1430869Z                         const shift = 7;
2024-08-30T19:43:30.1431421Z                     
2024-08-30T19:43:30.1431877Z                                  
2024-08-30T19:43:30.1432839Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1433812Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1434816Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1435878Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1436980Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1437809Z                         let result = "";
2024-08-30T19:43:30.1438440Z                         const shift = 7;
2024-08-30T19:43:30.1439003Z                     
2024-08-30T19:43:30.1439446Z                                   
2024-08-30T19:43:30.1442023Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              "}
2024-08-30T19:43:30.1451720Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1458338Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1459331Z                         let result = "";
2024-08-30T19:43:30.1459963Z                         const shift = 7;
2024-08-30T19:43:30.1460501Z                     
2024-08-30T19:43:30.1461214Z                                   -> function solution(input) {
2024-08-30T19:43:30.1461936Z                         let result = "";
2024-08-30T19:43:30.1462548Z                         const shift = 7;
2024-08-30T19:43:30.1463096Z                     
2024-08-30T19:43:30.1463550Z                                   
2024-08-30T19:43:30.1464525Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1465515Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1466523Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1467583Z [32m      cy:command ✔ [39m type	f, {force: true}
2024-08-30T19:43:30.1468998Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1469862Z                         let result = "";
2024-08-30T19:43:30.1470491Z                         const shift = 7;
2024-08-30T19:43:30.1471027Z                     
2024-08-30T19:43:30.1471504Z                                   f
2024-08-30T19:43:30.1474067Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              f"}
2024-08-30T19:43:30.1483586Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1489896Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1490890Z                         let result = "";
2024-08-30T19:43:30.1492025Z                         const shift = 7;
2024-08-30T19:43:30.1492478Z                     
2024-08-30T19:43:30.1493089Z                                    -> function solution(input) {
2024-08-30T19:43:30.1493649Z                         let result = "";
2024-08-30T19:43:30.1494109Z                         const shift = 7;
2024-08-30T19:43:30.1494511Z                     
2024-08-30T19:43:30.1494873Z                                   f
2024-08-30T19:43:30.1495619Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1496335Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1497058Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1497808Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.1498599Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1499212Z                         let result = "";
2024-08-30T19:43:30.1499673Z                         const shift = 7;
2024-08-30T19:43:30.1500054Z                     
2024-08-30T19:43:30.1500391Z                                   fo
2024-08-30T19:43:30.1502632Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              fo"}
2024-08-30T19:43:30.1509796Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1513833Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1514551Z                         let result = "";
2024-08-30T19:43:30.1514921Z                         const shift = 7;
2024-08-30T19:43:30.1515235Z                     
2024-08-30T19:43:30.1515640Z                                   f -> function solution(input) {
2024-08-30T19:43:30.1516041Z                         let result = "";
2024-08-30T19:43:30.1516391Z                         const shift = 7;
2024-08-30T19:43:30.1516699Z                     
2024-08-30T19:43:30.1516965Z                                   fo
2024-08-30T19:43:30.1517512Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1518042Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1518576Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1519155Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.1519765Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1520247Z                         let result = "";
2024-08-30T19:43:30.1520615Z                         const shift = 7;
2024-08-30T19:43:30.1520916Z                     
2024-08-30T19:43:30.1521189Z                                   for
2024-08-30T19:43:30.1522617Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for"}
2024-08-30T19:43:30.1527891Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1531809Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1532371Z                         let result = "";
2024-08-30T19:43:30.1532726Z                         const shift = 7;
2024-08-30T19:43:30.1533043Z                     
2024-08-30T19:43:30.1533449Z                                   fo -> function solution(input) {
2024-08-30T19:43:30.1533858Z                         let result = "";
2024-08-30T19:43:30.1534404Z                         const shift = 7;
2024-08-30T19:43:30.1534709Z                     
2024-08-30T19:43:30.1534973Z                                   for
2024-08-30T19:43:30.1535543Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1536083Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1536622Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1537184Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1537790Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1538252Z                         let result = "";
2024-08-30T19:43:30.1538605Z                         const shift = 7;
2024-08-30T19:43:30.1538901Z                     
2024-08-30T19:43:30.1539169Z                                   for 
2024-08-30T19:43:30.1540626Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for "}
2024-08-30T19:43:30.1546066Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1549632Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1550188Z                         let result = "";
2024-08-30T19:43:30.1550541Z                         const shift = 7;
2024-08-30T19:43:30.1550862Z                     
2024-08-30T19:43:30.1551262Z                                   for -> function solution(input) {
2024-08-30T19:43:30.1551668Z                         let result = "";
2024-08-30T19:43:30.1552012Z                         const shift = 7;
2024-08-30T19:43:30.1552311Z                     
2024-08-30T19:43:30.1552573Z                                   for 
2024-08-30T19:43:30.1553117Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1553639Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1554176Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1554732Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.1555349Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1555944Z                         let result = "";
2024-08-30T19:43:30.1556337Z                         const shift = 7;
2024-08-30T19:43:30.1556640Z                     
2024-08-30T19:43:30.1556921Z                                   for (
2024-08-30T19:43:30.1558387Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for ("}
2024-08-30T19:43:30.1563833Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1567792Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1568350Z                         let result = "";
2024-08-30T19:43:30.1568714Z                         const shift = 7;
2024-08-30T19:43:30.1569025Z                     
2024-08-30T19:43:30.1569428Z                                   for  -> function solution(input) {
2024-08-30T19:43:30.1569840Z                         let result = "";
2024-08-30T19:43:30.1570188Z                         const shift = 7;
2024-08-30T19:43:30.1570497Z                     
2024-08-30T19:43:30.1570765Z                                   for (
2024-08-30T19:43:30.1571551Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1572090Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1572822Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1573418Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.1574023Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1574492Z                         let result = "";
2024-08-30T19:43:30.1574835Z                         const shift = 7;
2024-08-30T19:43:30.1575140Z                     
2024-08-30T19:43:30.1575408Z                                   for (l
2024-08-30T19:43:30.1576874Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (l"}
2024-08-30T19:43:30.1582159Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1585671Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1586230Z                         let result = "";
2024-08-30T19:43:30.1586584Z                         const shift = 7;
2024-08-30T19:43:30.1586892Z                     
2024-08-30T19:43:30.1587292Z                                   for ( -> function solution(input) {
2024-08-30T19:43:30.1587712Z                         let result = "";
2024-08-30T19:43:30.1588059Z                         const shift = 7;
2024-08-30T19:43:30.1588360Z                     
2024-08-30T19:43:30.1588621Z                                   for (l
2024-08-30T19:43:30.1589169Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1589690Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1590366Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1590962Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.1591571Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1592399Z                         let result = "";
2024-08-30T19:43:30.1592761Z                         const shift = 7;
2024-08-30T19:43:30.1593079Z                     
2024-08-30T19:43:30.1593357Z                                   for (le
2024-08-30T19:43:30.1594849Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (le"}
2024-08-30T19:43:30.1600386Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1604234Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1604781Z                         let result = "";
2024-08-30T19:43:30.1605138Z                         const shift = 7;
2024-08-30T19:43:30.1605442Z                     
2024-08-30T19:43:30.1605836Z                                   for (l -> function solution(input) {
2024-08-30T19:43:30.1606246Z                         let result = "";
2024-08-30T19:43:30.1606592Z                         const shift = 7;
2024-08-30T19:43:30.1606881Z                     
2024-08-30T19:43:30.1607155Z                                   for (le
2024-08-30T19:43:30.1607714Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1608236Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1608764Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1609372Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.1609987Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1610450Z                         let result = "";
2024-08-30T19:43:30.1610792Z                         const shift = 7;
2024-08-30T19:43:30.1611318Z                     
2024-08-30T19:43:30.1611607Z                                   for (let
2024-08-30T19:43:30.1613081Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let"}
2024-08-30T19:43:30.1618357Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1621862Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1622399Z                         let result = "";
2024-08-30T19:43:30.1622953Z                         const shift = 7;
2024-08-30T19:43:30.1623268Z                     
2024-08-30T19:43:30.1623668Z                                   for (le -> function solution(input) {
2024-08-30T19:43:30.1624086Z                         let result = "";
2024-08-30T19:43:30.1624441Z                         const shift = 7;
2024-08-30T19:43:30.1624733Z                     
2024-08-30T19:43:30.1625008Z                                   for (let
2024-08-30T19:43:30.1625569Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1626084Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1626618Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1627204Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1627806Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1628562Z                         let result = "";
2024-08-30T19:43:30.1628913Z                         const shift = 7;
2024-08-30T19:43:30.1629234Z                     
2024-08-30T19:43:30.1629518Z                                   for (let 
2024-08-30T19:43:30.1631159Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let "}
2024-08-30T19:43:30.1637874Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1638463Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1638609Z                         let result = "";
2024-08-30T19:43:30.1638762Z                         const shift = 7;
2024-08-30T19:43:30.1638918Z                     
2024-08-30T19:43:30.1639333Z                                   for (let -> function solution(input) {
2024-08-30T19:43:30.1639478Z                         let result = "";
2024-08-30T19:43:30.1639603Z                         const shift = 7;
2024-08-30T19:43:30.1639701Z                     
2024-08-30T19:43:30.1639829Z                                   for (let 
2024-08-30T19:43:30.1640175Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1640379Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1640696Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1640950Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.1641289Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1641421Z                         let result = "";
2024-08-30T19:43:30.1641553Z                         const shift = 7;
2024-08-30T19:43:30.1641638Z                     
2024-08-30T19:43:30.1641772Z                                   for (let i
2024-08-30T19:43:30.1643045Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i"}
2024-08-30T19:43:30.1647390Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1648048Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1648194Z                         let result = "";
2024-08-30T19:43:30.1648321Z                         const shift = 7;
2024-08-30T19:43:30.1648417Z                     
2024-08-30T19:43:30.1648684Z                                   for (let  -> function solution(input) {
2024-08-30T19:43:30.1648809Z                         let result = "";
2024-08-30T19:43:30.1648932Z                         const shift = 7;
2024-08-30T19:43:30.1649164Z                     
2024-08-30T19:43:30.1649303Z                                   for (let i
2024-08-30T19:43:30.1649645Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1649831Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1650144Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1650394Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1650716Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1650856Z                         let result = "";
2024-08-30T19:43:30.1651163Z                         const shift = 7;
2024-08-30T19:43:30.1651306Z                     
2024-08-30T19:43:30.1651467Z                                   for (let i 
2024-08-30T19:43:30.1652734Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i "}
2024-08-30T19:43:30.1657053Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1657507Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1657646Z                         let result = "";
2024-08-30T19:43:30.1657774Z                         const shift = 7;
2024-08-30T19:43:30.1657870Z                     
2024-08-30T19:43:30.1658127Z                                   for (let i -> function solution(input) {
2024-08-30T19:43:30.1658252Z                         let result = "";
2024-08-30T19:43:30.1658382Z                         const shift = 7;
2024-08-30T19:43:30.1658469Z                     
2024-08-30T19:43:30.1658603Z                                   for (let i 
2024-08-30T19:43:30.1658931Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1659116Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1659620Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1659864Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.1660195Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1660332Z                         let result = "";
2024-08-30T19:43:30.1660454Z                         const shift = 7;
2024-08-30T19:43:30.1660544Z                     
2024-08-30T19:43:30.1660680Z                                   for (let i =
2024-08-30T19:43:30.1661904Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i ="}
2024-08-30T19:43:30.1666422Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1666907Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1667041Z                         let result = "";
2024-08-30T19:43:30.1667165Z                         const shift = 7;
2024-08-30T19:43:30.1667258Z                     
2024-08-30T19:43:30.1667525Z                                   for (let i  -> function solution(input) {
2024-08-30T19:43:30.1667656Z                         let result = "";
2024-08-30T19:43:30.1667779Z                         const shift = 7;
2024-08-30T19:43:30.1667863Z                     
2024-08-30T19:43:30.1668013Z                                   for (let i =
2024-08-30T19:43:30.1668333Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1668520Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1668838Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1669081Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1669409Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1669537Z                         let result = "";
2024-08-30T19:43:30.1669665Z                         const shift = 7;
2024-08-30T19:43:30.1669755Z                     
2024-08-30T19:43:30.1669893Z                                   for (let i = 
2024-08-30T19:43:30.1671286Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i = "}
2024-08-30T19:43:30.1675599Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1676103Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1676239Z                         let result = "";
2024-08-30T19:43:30.1676374Z                         const shift = 7;
2024-08-30T19:43:30.1676458Z                     
2024-08-30T19:43:30.1676718Z                                   for (let i = -> function solution(input) {
2024-08-30T19:43:30.1676848Z                         let result = "";
2024-08-30T19:43:30.1676968Z                         const shift = 7;
2024-08-30T19:43:30.1677061Z                     
2024-08-30T19:43:30.1677197Z                                   for (let i = 
2024-08-30T19:43:30.1677533Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1677726Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1678048Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1678297Z [32m      cy:command ✔ [39m type	0, {force: true}
2024-08-30T19:43:30.1678626Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1678903Z                         let result = "";
2024-08-30T19:43:30.1679049Z                         const shift = 7;
2024-08-30T19:43:30.1679138Z                     
2024-08-30T19:43:30.1679287Z                                   for (let i = 0
2024-08-30T19:43:30.1680551Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i = 0"}
2024-08-30T19:43:30.1684899Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1685361Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1685502Z                         let result = "";
2024-08-30T19:43:30.1685628Z                         const shift = 7;
2024-08-30T19:43:30.1685712Z                     
2024-08-30T19:43:30.1685991Z                                   for (let i =  -> function solution(input) {
2024-08-30T19:43:30.1686239Z                         let result = "";
2024-08-30T19:43:30.1686364Z                         const shift = 7;
2024-08-30T19:43:30.1686455Z                     
2024-08-30T19:43:30.1686600Z                                   for (let i = 0
2024-08-30T19:43:30.1686940Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1687126Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1687437Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1687686Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.1688016Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1688154Z                         let result = "";
2024-08-30T19:43:30.1688280Z                         const shift = 7;
2024-08-30T19:43:30.1688366Z                     
2024-08-30T19:43:30.1688516Z                                   for (let i = 0;
2024-08-30T19:43:30.1689792Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i = 0;"}
2024-08-30T19:43:30.1694367Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1694856Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1695153Z                         let result = "";
2024-08-30T19:43:30.1695284Z                         const shift = 7;
2024-08-30T19:43:30.1695376Z                     
2024-08-30T19:43:30.1695653Z                                   for (let i = 0 -> function solution(input) {
2024-08-30T19:43:30.1695775Z                         let result = "";
2024-08-30T19:43:30.1695906Z                         const shift = 7;
2024-08-30T19:43:30.1695991Z                     
2024-08-30T19:43:30.1696134Z                                   for (let i = 0;
2024-08-30T19:43:30.1696471Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1696597Z                         let result = "";
2024-08-30T19:43:30.1696724Z                         const shift = 7;
2024-08-30T19:43:30.1696817Z                     
2024-08-30T19:43:30.1696938Z                         for (let i = 0;
2024-08-30T19:43:30.1698312Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0;"}
2024-08-30T19:43:30.1702681Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1703331Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1703463Z                         let result = "";
2024-08-30T19:43:30.1703594Z                         const shift = 7;
2024-08-30T19:43:30.1703678Z                     
2024-08-30T19:43:30.1703960Z                                   for (let i = 0; -> function solution(input) {
2024-08-30T19:43:30.1704082Z                         let result = "";
2024-08-30T19:43:30.1704205Z                         const shift = 7;
2024-08-30T19:43:30.1704294Z                     
2024-08-30T19:43:30.1704412Z                         for (let i = 0;
2024-08-30T19:43:30.1704737Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1704938Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1705248Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1705497Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1705826Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1705956Z                         let result = "";
2024-08-30T19:43:30.1706083Z                         const shift = 7;
2024-08-30T19:43:30.1706169Z                     
2024-08-30T19:43:30.1706296Z                         for (let i = 0; 
2024-08-30T19:43:30.1707513Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; "}
2024-08-30T19:43:30.1711965Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1712424Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1712565Z                         let result = "";
2024-08-30T19:43:30.1712694Z                         const shift = 7;
2024-08-30T19:43:30.1712789Z                     
2024-08-30T19:43:30.1713053Z                         for (let i = 0; -> function solution(input) {
2024-08-30T19:43:30.1713181Z                         let result = "";
2024-08-30T19:43:30.1713311Z                         const shift = 7;
2024-08-30T19:43:30.1713401Z                     
2024-08-30T19:43:30.1713521Z                         for (let i = 0; 
2024-08-30T19:43:30.1713850Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1714033Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1714342Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1714594Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.1714918Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1715052Z                         let result = "";
2024-08-30T19:43:30.1715174Z                         const shift = 7;
2024-08-30T19:43:30.1715258Z                     
2024-08-30T19:43:30.1715522Z                         for (let i = 0; i
2024-08-30T19:43:30.1716757Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i"}
2024-08-30T19:43:30.1721076Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1721538Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1721678Z                         let result = "";
2024-08-30T19:43:30.1721803Z                         const shift = 7;
2024-08-30T19:43:30.1721895Z                     
2024-08-30T19:43:30.1722154Z                         for (let i = 0;  -> function solution(input) {
2024-08-30T19:43:30.1722278Z                         let result = "";
2024-08-30T19:43:30.1722405Z                         const shift = 7;
2024-08-30T19:43:30.1722491Z                     
2024-08-30T19:43:30.1722616Z                         for (let i = 0; i
2024-08-30T19:43:30.1722945Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1723129Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1723451Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1723692Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1724020Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1724289Z                         let result = "";
2024-08-30T19:43:30.1724421Z                         const shift = 7;
2024-08-30T19:43:30.1724515Z                     
2024-08-30T19:43:30.1724650Z                         for (let i = 0; i 
2024-08-30T19:43:30.1725877Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i "}
2024-08-30T19:43:30.1730187Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1730650Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1730781Z                         let result = "";
2024-08-30T19:43:30.1730909Z                         const shift = 7;
2024-08-30T19:43:30.1731145Z                     
2024-08-30T19:43:30.1731474Z                         for (let i = 0; i -> function solution(input) {
2024-08-30T19:43:30.1731780Z                         let result = "";
2024-08-30T19:43:30.1731906Z                         const shift = 7;
2024-08-30T19:43:30.1731991Z                     
2024-08-30T19:43:30.1732130Z                         for (let i = 0; i 
2024-08-30T19:43:30.1732480Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1732677Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1732989Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1733232Z [32m      cy:command ✔ [39m type	<, {force: true}
2024-08-30T19:43:30.1733562Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1733688Z                         let result = "";
2024-08-30T19:43:30.1733817Z                         const shift = 7;
2024-08-30T19:43:30.1733904Z                     
2024-08-30T19:43:30.1734036Z                         for (let i = 0; i <
2024-08-30T19:43:30.1735290Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i <"}
2024-08-30T19:43:30.1739729Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1740213Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1740347Z                         let result = "";
2024-08-30T19:43:30.1740733Z                         const shift = 7;
2024-08-30T19:43:30.1740827Z                     
2024-08-30T19:43:30.1741115Z                         for (let i = 0; i  -> function solution(input) {
2024-08-30T19:43:30.1741239Z                         let result = "";
2024-08-30T19:43:30.1741359Z                         const shift = 7;
2024-08-30T19:43:30.1741451Z                     
2024-08-30T19:43:30.1741581Z                         for (let i = 0; i <
2024-08-30T19:43:30.1741905Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1742099Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1742411Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1742673Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1742997Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1743126Z                         let result = "";
2024-08-30T19:43:30.1743265Z                         const shift = 7;
2024-08-30T19:43:30.1743351Z                     
2024-08-30T19:43:30.1743492Z                         for (let i = 0; i < 
2024-08-30T19:43:30.1744730Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < "}
2024-08-30T19:43:30.1749060Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1749654Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1749795Z                         let result = "";
2024-08-30T19:43:30.1749922Z                         const shift = 7;
2024-08-30T19:43:30.1750011Z                     
2024-08-30T19:43:30.1750287Z                         for (let i = 0; i < -> function solution(input) {
2024-08-30T19:43:30.1750408Z                         let result = "";
2024-08-30T19:43:30.1750544Z                         const shift = 7;
2024-08-30T19:43:30.1750627Z                     
2024-08-30T19:43:30.1750762Z                         for (let i = 0; i < 
2024-08-30T19:43:30.1751101Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1751294Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1751600Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1751853Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.1752184Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1752318Z                         let result = "";
2024-08-30T19:43:30.1752443Z                         const shift = 7;
2024-08-30T19:43:30.1752528Z                     
2024-08-30T19:43:30.1752675Z                         for (let i = 0; i < i
2024-08-30T19:43:30.1753904Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < i"}
2024-08-30T19:43:30.1758365Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1758835Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1758967Z                         let result = "";
2024-08-30T19:43:30.1759090Z                         const shift = 7;
2024-08-30T19:43:30.1759193Z                     
2024-08-30T19:43:30.1759463Z                         for (let i = 0; i <  -> function solution(input) {
2024-08-30T19:43:30.1759588Z                         let result = "";
2024-08-30T19:43:30.1759715Z                         const shift = 7;
2024-08-30T19:43:30.1759805Z                     
2024-08-30T19:43:30.1759952Z                         for (let i = 0; i < i
2024-08-30T19:43:30.1760301Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1760485Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1760799Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1761040Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.1761504Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1761631Z                         let result = "";
2024-08-30T19:43:30.1761754Z                         const shift = 7;
2024-08-30T19:43:30.1761855Z                     
2024-08-30T19:43:30.1761997Z                         for (let i = 0; i < in
2024-08-30T19:43:30.1763242Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < in"}
2024-08-30T19:43:30.1767604Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1768061Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1768191Z                         let result = "";
2024-08-30T19:43:30.1768319Z                         const shift = 7;
2024-08-30T19:43:30.1768403Z                     
2024-08-30T19:43:30.1768678Z                         for (let i = 0; i < i -> function solution(input) {
2024-08-30T19:43:30.1768808Z                         let result = "";
2024-08-30T19:43:30.1768935Z                         const shift = 7;
2024-08-30T19:43:30.1769019Z                     
2024-08-30T19:43:30.1769165Z                         for (let i = 0; i < in
2024-08-30T19:43:30.1769486Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1769813Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1770128Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1770368Z [32m      cy:command ✔ [39m type	p, {force: true}
2024-08-30T19:43:30.1770700Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1770826Z                         let result = "";
2024-08-30T19:43:30.1771074Z                         const shift = 7;
2024-08-30T19:43:30.1771231Z                     
2024-08-30T19:43:30.1771397Z                         for (let i = 0; i < inp
2024-08-30T19:43:30.1772668Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < inp"}
2024-08-30T19:43:30.1777255Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1777955Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1778086Z                         let result = "";
2024-08-30T19:43:30.1778223Z                         const shift = 7;
2024-08-30T19:43:30.1778308Z                     
2024-08-30T19:43:30.1778610Z                         for (let i = 0; i < in -> function solution(input) {
2024-08-30T19:43:30.1778732Z                         let result = "";
2024-08-30T19:43:30.1778852Z                         const shift = 7;
2024-08-30T19:43:30.1778944Z                     
2024-08-30T19:43:30.1779085Z                         for (let i = 0; i < inp
2024-08-30T19:43:30.1779412Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1779606Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1779916Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1780162Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.1780494Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1780628Z                         let result = "";
2024-08-30T19:43:30.1780752Z                         const shift = 7;
2024-08-30T19:43:30.1780836Z                     
2024-08-30T19:43:30.1780993Z                         for (let i = 0; i < inpu
2024-08-30T19:43:30.1782244Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < inpu"}
2024-08-30T19:43:30.1786734Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1787199Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1787338Z                         let result = "";
2024-08-30T19:43:30.1787460Z                         const shift = 7;
2024-08-30T19:43:30.1787547Z                     
2024-08-30T19:43:30.1787841Z                         for (let i = 0; i < inp -> function solution(input) {
2024-08-30T19:43:30.1787961Z                         let result = "";
2024-08-30T19:43:30.1788087Z                         const shift = 7;
2024-08-30T19:43:30.1788179Z                     
2024-08-30T19:43:30.1788325Z                         for (let i = 0; i < inpu
2024-08-30T19:43:30.1788659Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1788849Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1789183Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1789427Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.1789753Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1789888Z                         let result = "";
2024-08-30T19:43:30.1790014Z                         const shift = 7;
2024-08-30T19:43:30.1790102Z                     
2024-08-30T19:43:30.1790255Z                         for (let i = 0; i < input
2024-08-30T19:43:30.1791842Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input"}
2024-08-30T19:43:30.1796436Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1796905Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1797048Z                         let result = "";
2024-08-30T19:43:30.1797175Z                         const shift = 7;
2024-08-30T19:43:30.1797270Z                     
2024-08-30T19:43:30.1797572Z                         for (let i = 0; i < inpu -> function solution(input) {
2024-08-30T19:43:30.1797697Z                         let result = "";
2024-08-30T19:43:30.1797832Z                         const shift = 7;
2024-08-30T19:43:30.1797914Z                     
2024-08-30T19:43:30.1798072Z                         for (let i = 0; i < input
2024-08-30T19:43:30.1798406Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1798592Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1798910Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1799153Z [32m      cy:command ✔ [39m type	., {force: true}
2024-08-30T19:43:30.1799651Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1799905Z                         let result = "";
2024-08-30T19:43:30.1800078Z                         const shift = 7;
2024-08-30T19:43:30.1800216Z                     
2024-08-30T19:43:30.1800709Z                         for (let i = 0; i < input.
2024-08-30T19:43:30.1802575Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input."}
2024-08-30T19:43:30.1806974Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1807448Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1807586Z                         let result = "";
2024-08-30T19:43:30.1807718Z                         const shift = 7;
2024-08-30T19:43:30.1807805Z                     
2024-08-30T19:43:30.1808102Z                         for (let i = 0; i < input -> function solution(input) {
2024-08-30T19:43:30.1808231Z                         let result = "";
2024-08-30T19:43:30.1808353Z                         const shift = 7;
2024-08-30T19:43:30.1808617Z                     
2024-08-30T19:43:30.1808778Z                         for (let i = 0; i < input.
2024-08-30T19:43:30.1809115Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1809310Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1809630Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1809875Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.1810209Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1810338Z                         let result = "";
2024-08-30T19:43:30.1810468Z                         const shift = 7;
2024-08-30T19:43:30.1810553Z                     
2024-08-30T19:43:30.1810700Z                         for (let i = 0; i < input.l
2024-08-30T19:43:30.1812230Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.l"}
2024-08-30T19:43:30.1816624Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1817094Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1817246Z                         let result = "";
2024-08-30T19:43:30.1817371Z                         const shift = 7;
2024-08-30T19:43:30.1817457Z                     
2024-08-30T19:43:30.1817938Z                         for (let i = 0; i < input. -> function solution(input) {
2024-08-30T19:43:30.1818069Z                         let result = "";
2024-08-30T19:43:30.1818194Z                         const shift = 7;
2024-08-30T19:43:30.1818284Z                     
2024-08-30T19:43:30.1818436Z                         for (let i = 0; i < input.l
2024-08-30T19:43:30.1818779Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1818972Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1819286Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1819539Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.1819865Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1820010Z                         let result = "";
2024-08-30T19:43:30.1820133Z                         const shift = 7;
2024-08-30T19:43:30.1820217Z                     
2024-08-30T19:43:30.1820381Z                         for (let i = 0; i < input.le
2024-08-30T19:43:30.1821661Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.le"}
2024-08-30T19:43:30.1825989Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1826596Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1826736Z                         let result = "";
2024-08-30T19:43:30.1826861Z                         const shift = 7;
2024-08-30T19:43:30.1826954Z                     
2024-08-30T19:43:30.1827251Z                         for (let i = 0; i < input.l -> function solution(input) {
2024-08-30T19:43:30.1827376Z                         let result = "";
2024-08-30T19:43:30.1827505Z                         const shift = 7;
2024-08-30T19:43:30.1827600Z                     
2024-08-30T19:43:30.1827757Z                         for (let i = 0; i < input.le
2024-08-30T19:43:30.1828103Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1828290Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1828620Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1828862Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.1829187Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1829324Z                         let result = "";
2024-08-30T19:43:30.1829446Z                         const shift = 7;
2024-08-30T19:43:30.1829537Z                     
2024-08-30T19:43:30.1829695Z                         for (let i = 0; i < input.len
2024-08-30T19:43:30.1830974Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.len"}
2024-08-30T19:43:30.1835438Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1835904Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1836047Z                         let result = "";
2024-08-30T19:43:30.1836174Z                         const shift = 7;
2024-08-30T19:43:30.1836272Z                     
2024-08-30T19:43:30.1836584Z                         for (let i = 0; i < input.le -> function solution(input) {
2024-08-30T19:43:30.1836722Z                         let result = "";
2024-08-30T19:43:30.1836845Z                         const shift = 7;
2024-08-30T19:43:30.1836931Z                     
2024-08-30T19:43:30.1837095Z                         for (let i = 0; i < input.len
2024-08-30T19:43:30.1837419Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1837603Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1837926Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1838167Z [32m      cy:command ✔ [39m type	g, {force: true}
2024-08-30T19:43:30.1838497Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1838778Z                         let result = "";
2024-08-30T19:43:30.1838902Z                         const shift = 7;
2024-08-30T19:43:30.1838993Z                     
2024-08-30T19:43:30.1839164Z                         for (let i = 0; i < input.leng
2024-08-30T19:43:30.1840452Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.leng"}
2024-08-30T19:43:30.1844761Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1845225Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1845359Z                         let result = "";
2024-08-30T19:43:30.1845495Z                         const shift = 7;
2024-08-30T19:43:30.1845579Z                     
2024-08-30T19:43:30.1845884Z                         for (let i = 0; i < input.len -> function solution(input) {
2024-08-30T19:43:30.1846017Z                         let result = "";
2024-08-30T19:43:30.1846143Z                         const shift = 7;
2024-08-30T19:43:30.1846244Z                     
2024-08-30T19:43:30.1846403Z                         for (let i = 0; i < input.leng
2024-08-30T19:43:30.1846721Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1846913Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1847352Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1847614Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.1847938Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1848070Z                         let result = "";
2024-08-30T19:43:30.1848200Z                         const shift = 7;
2024-08-30T19:43:30.1848286Z                     
2024-08-30T19:43:30.1848447Z                         for (let i = 0; i < input.lengt
2024-08-30T19:43:30.1849731Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.lengt"}
2024-08-30T19:43:30.1854257Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1854721Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1855036Z                         let result = "";
2024-08-30T19:43:30.1855165Z                         const shift = 7;
2024-08-30T19:43:30.1855253Z                     
2024-08-30T19:43:30.1855582Z                         for (let i = 0; i < input.leng -> function solution(input) {
2024-08-30T19:43:30.1855706Z                         let result = "";
2024-08-30T19:43:30.1855826Z                         const shift = 7;
2024-08-30T19:43:30.1855915Z                     
2024-08-30T19:43:30.1856078Z                         for (let i = 0; i < input.lengt
2024-08-30T19:43:30.1856407Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1856592Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1856900Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1857148Z [32m      cy:command ✔ [39m type	h, {force: true}
2024-08-30T19:43:30.1857471Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1857618Z                         let result = "";
2024-08-30T19:43:30.1857742Z                         const shift = 7;
2024-08-30T19:43:30.1857826Z                     
2024-08-30T19:43:30.1858006Z                         for (let i = 0; i < input.length
2024-08-30T19:43:30.1859302Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length"}
2024-08-30T19:43:30.1863821Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1864287Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1864426Z                         let result = "";
2024-08-30T19:43:30.1864554Z                         const shift = 7;
2024-08-30T19:43:30.1864646Z                     
2024-08-30T19:43:30.1864961Z                         for (let i = 0; i < input.lengt -> function solution(input) {
2024-08-30T19:43:30.1865084Z                         let result = "";
2024-08-30T19:43:30.1865212Z                         const shift = 7;
2024-08-30T19:43:30.1865303Z                     
2024-08-30T19:43:30.1865478Z                         for (let i = 0; i < input.length
2024-08-30T19:43:30.1865802Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1865984Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1866306Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1866549Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.1866882Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1867011Z                         let result = "";
2024-08-30T19:43:30.1867132Z                         const shift = 7;
2024-08-30T19:43:30.1867227Z                     
2024-08-30T19:43:30.1867393Z                         for (let i = 0; i < input.length;
2024-08-30T19:43:30.1868687Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length;"}
2024-08-30T19:43:30.1873127Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1873768Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1873909Z                         let result = "";
2024-08-30T19:43:30.1874041Z                         const shift = 7;
2024-08-30T19:43:30.1874127Z                     
2024-08-30T19:43:30.1874602Z                         for (let i = 0; i < input.length -> function solution(input) {
2024-08-30T19:43:30.1874740Z                         let result = "";
2024-08-30T19:43:30.1874859Z                         const shift = 7;
2024-08-30T19:43:30.1874948Z                     
2024-08-30T19:43:30.1875113Z                         for (let i = 0; i < input.length;
2024-08-30T19:43:30.1875444Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1875632Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1875943Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1876188Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1876521Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1876647Z                         let result = "";
2024-08-30T19:43:30.1876775Z                         const shift = 7;
2024-08-30T19:43:30.1876859Z                     
2024-08-30T19:43:30.1877042Z                         for (let i = 0; i < input.length; 
2024-08-30T19:43:30.1878365Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; "}
2024-08-30T19:43:30.1882851Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1883319Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1883461Z                         let result = "";
2024-08-30T19:43:30.1883587Z                         const shift = 7;
2024-08-30T19:43:30.1883671Z                     
2024-08-30T19:43:30.1884028Z                         for (let i = 0; i < input.length; -> function solution(input) {
2024-08-30T19:43:30.1884242Z                         let result = "";
2024-08-30T19:43:30.1884602Z                         const shift = 7;
2024-08-30T19:43:30.1884697Z                     
2024-08-30T19:43:30.1884870Z                         for (let i = 0; i < input.length; 
2024-08-30T19:43:30.1885233Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1885429Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1885744Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1885994Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.1886319Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1886458Z                         let result = "";
2024-08-30T19:43:30.1886583Z                         const shift = 7;
2024-08-30T19:43:30.1886668Z                     
2024-08-30T19:43:30.1886844Z                         for (let i = 0; i < input.length; i
2024-08-30T19:43:30.1888166Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i"}
2024-08-30T19:43:30.1893295Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1893832Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1893967Z                         let result = "";
2024-08-30T19:43:30.1894091Z                         const shift = 7;
2024-08-30T19:43:30.1894189Z                     
2024-08-30T19:43:30.1894522Z                         for (let i = 0; i < input.length;  -> function solution(input) {
2024-08-30T19:43:30.1894646Z                         let result = "";
2024-08-30T19:43:30.1894771Z                         const shift = 7;
2024-08-30T19:43:30.1894856Z                     
2024-08-30T19:43:30.1895028Z                         for (let i = 0; i < input.length; i
2024-08-30T19:43:30.1895363Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1895549Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1895867Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1896108Z [32m      cy:command ✔ [39m type	+, {force: true}
2024-08-30T19:43:30.1896449Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1896577Z                         let result = "";
2024-08-30T19:43:30.1896700Z                         const shift = 7;
2024-08-30T19:43:30.1896799Z                     
2024-08-30T19:43:30.1896972Z                         for (let i = 0; i < input.length; i+
2024-08-30T19:43:30.1898301Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i+"}
2024-08-30T19:43:30.1902627Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1903242Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1903373Z                         let result = "";
2024-08-30T19:43:30.1903504Z                         const shift = 7;
2024-08-30T19:43:30.1903589Z                     
2024-08-30T19:43:30.1903923Z                         for (let i = 0; i < input.length; i -> function solution(input) {
2024-08-30T19:43:30.1904051Z                         let result = "";
2024-08-30T19:43:30.1904183Z                         const shift = 7;
2024-08-30T19:43:30.1904266Z                     
2024-08-30T19:43:30.1904445Z                         for (let i = 0; i < input.length; i+
2024-08-30T19:43:30.1904890Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1905089Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1905404Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1905652Z [32m      cy:command ✔ [39m type	+, {force: true}
2024-08-30T19:43:30.1905986Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1906113Z                         let result = "";
2024-08-30T19:43:30.1906242Z                         const shift = 7;
2024-08-30T19:43:30.1906326Z                     
2024-08-30T19:43:30.1906502Z                         for (let i = 0; i < input.length; i++
2024-08-30T19:43:30.1907818Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++"}
2024-08-30T19:43:30.1912164Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1912623Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1912752Z                         let result = "";
2024-08-30T19:43:30.1912887Z                         const shift = 7;
2024-08-30T19:43:30.1912973Z                     
2024-08-30T19:43:30.1913315Z                         for (let i = 0; i < input.length; i+ -> function solution(input) {
2024-08-30T19:43:30.1913437Z                         let result = "";
2024-08-30T19:43:30.1913556Z                         const shift = 7;
2024-08-30T19:43:30.1913646Z                     
2024-08-30T19:43:30.1913816Z                         for (let i = 0; i < input.length; i++
2024-08-30T19:43:30.1914143Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1914333Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1914642Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1915026Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.1915351Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1915485Z                         let result = "";
2024-08-30T19:43:30.1915617Z                         const shift = 7;
2024-08-30T19:43:30.1915700Z                     
2024-08-30T19:43:30.1915880Z                         for (let i = 0; i < input.length; i++)
2024-08-30T19:43:30.1917191Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++)"}
2024-08-30T19:43:30.1921613Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1922072Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1922207Z                         let result = "";
2024-08-30T19:43:30.1922328Z                         const shift = 7;
2024-08-30T19:43:30.1922420Z                     
2024-08-30T19:43:30.1922761Z                         for (let i = 0; i < input.length; i++ -> function solution(input) {
2024-08-30T19:43:30.1922889Z                         let result = "";
2024-08-30T19:43:30.1923015Z                         const shift = 7;
2024-08-30T19:43:30.1923096Z                     
2024-08-30T19:43:30.1923275Z                         for (let i = 0; i < input.length; i++)
2024-08-30T19:43:30.1923595Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1923775Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1924085Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1924321Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1924641Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1924773Z                         let result = "";
2024-08-30T19:43:30.1924895Z                         const shift = 7;
2024-08-30T19:43:30.1924983Z                     
2024-08-30T19:43:30.1925166Z                         for (let i = 0; i < input.length; i++) 
2024-08-30T19:43:30.1926496Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) "}
2024-08-30T19:43:30.1930803Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1931856Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1932081Z                         let result = "";
2024-08-30T19:43:30.1932279Z                         const shift = 7;
2024-08-30T19:43:30.1932422Z                     
2024-08-30T19:43:30.1932983Z                         for (let i = 0; i < input.length; i++) -> function solution(input) {
2024-08-30T19:43:30.1933183Z                         let result = "";
2024-08-30T19:43:30.1933371Z                         const shift = 7;
2024-08-30T19:43:30.1933500Z                     
2024-08-30T19:43:30.1933790Z                         for (let i = 0; i < input.length; i++) 
2024-08-30T19:43:30.1934335Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1934650Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1935211Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1935653Z [32m      cy:command ✔ [39m type	{, {force: true}
2024-08-30T19:43:30.1936206Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1936689Z                         let result = "";
2024-08-30T19:43:30.1936909Z                         const shift = 7;
2024-08-30T19:43:30.1937048Z                     
2024-08-30T19:43:30.1937355Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1938793Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {"}
2024-08-30T19:43:30.1943724Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1944259Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1944399Z                         let result = "";
2024-08-30T19:43:30.1944532Z                         const shift = 7;
2024-08-30T19:43:30.1944620Z                     
2024-08-30T19:43:30.1944987Z                         for (let i = 0; i < input.length; i++)  -> function solution(input) {
2024-08-30T19:43:30.1945115Z                         let result = "";
2024-08-30T19:43:30.1945235Z                         const shift = 7;
2024-08-30T19:43:30.1945332Z                     
2024-08-30T19:43:30.1945518Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1945853Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1946044Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1946355Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1946542Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.1946661Z                     , {force: true}
2024-08-30T19:43:30.1946986Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1947123Z                         let result = "";
2024-08-30T19:43:30.1947246Z                         const shift = 7;
2024-08-30T19:43:30.1947539Z                     
2024-08-30T19:43:30.1947729Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1947819Z                             
2024-08-30T19:43:30.1949240Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        "}
2024-08-30T19:43:30.1953713Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1954197Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1954329Z                         let result = "";
2024-08-30T19:43:30.1954459Z                         const shift = 7;
2024-08-30T19:43:30.1954544Z                     
2024-08-30T19:43:30.1954898Z                         for (let i = 0; i < input.length; i++) { -> function solution(input) {
2024-08-30T19:43:30.1955031Z                         let result = "";
2024-08-30T19:43:30.1955154Z                         const shift = 7;
2024-08-30T19:43:30.1955247Z                     
2024-08-30T19:43:30.1955427Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1955524Z                             
2024-08-30T19:43:30.1955865Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1956051Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1956375Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1956619Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1957084Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1957318Z                         let result = "";
2024-08-30T19:43:30.1957516Z                         const shift = 7;
2024-08-30T19:43:30.1957662Z                     
2024-08-30T19:43:30.1957970Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1958123Z                              
2024-08-30T19:43:30.1960713Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n         "}
2024-08-30T19:43:30.1968682Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1969709Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1969863Z                         let result = "";
2024-08-30T19:43:30.1970003Z                         const shift = 7;
2024-08-30T19:43:30.1970105Z                     
2024-08-30T19:43:30.1970300Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1970539Z                              -> function solution(input) {
2024-08-30T19:43:30.1970666Z                         let result = "";
2024-08-30T19:43:30.1970796Z                         const shift = 7;
2024-08-30T19:43:30.1970883Z                     
2024-08-30T19:43:30.1971305Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1971475Z                              
2024-08-30T19:43:30.1971860Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1972051Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1972402Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1972660Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1973002Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1973336Z                         let result = "";
2024-08-30T19:43:30.1973476Z                         const shift = 7;
2024-08-30T19:43:30.1973564Z                     
2024-08-30T19:43:30.1973748Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1973861Z                               
2024-08-30T19:43:30.1975287Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n          "}
2024-08-30T19:43:30.1979727Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1980256Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1980402Z                         let result = "";
2024-08-30T19:43:30.1980528Z                         const shift = 7;
2024-08-30T19:43:30.1980621Z                     
2024-08-30T19:43:30.1980814Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1981036Z                               -> function solution(input) {
2024-08-30T19:43:30.1981176Z                         let result = "";
2024-08-30T19:43:30.1981298Z                         const shift = 7;
2024-08-30T19:43:30.1981385Z                     
2024-08-30T19:43:30.1981574Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1981681Z                               
2024-08-30T19:43:30.1982010Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1982203Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1982518Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1982777Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1983109Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1983519Z                         let result = "";
2024-08-30T19:43:30.1983644Z                         const shift = 7;
2024-08-30T19:43:30.1983729Z                     
2024-08-30T19:43:30.1983917Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1984028Z                                
2024-08-30T19:43:30.1985419Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n           "}
2024-08-30T19:43:30.1989846Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.1990315Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.1990443Z                         let result = "";
2024-08-30T19:43:30.1990564Z                         const shift = 7;
2024-08-30T19:43:30.1990655Z                     
2024-08-30T19:43:30.1990834Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1991062Z                                -> function solution(input) {
2024-08-30T19:43:30.1991193Z                         let result = "";
2024-08-30T19:43:30.1991312Z                         const shift = 7;
2024-08-30T19:43:30.1991403Z                     
2024-08-30T19:43:30.1991577Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1991691Z                                
2024-08-30T19:43:30.1992023Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1992209Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.1992525Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.1992768Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.1993101Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.1993234Z                         let result = "";
2024-08-30T19:43:30.1993358Z                         const shift = 7;
2024-08-30T19:43:30.1993452Z                     
2024-08-30T19:43:30.1993633Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.1993750Z                                 
2024-08-30T19:43:30.1995144Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n            "}
2024-08-30T19:43:30.1999438Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2000036Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2000174Z                         let result = "";
2024-08-30T19:43:30.2000297Z                         const shift = 7;
2024-08-30T19:43:30.2000380Z                     
2024-08-30T19:43:30.2000569Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2000793Z                                 -> function solution(input) {
2024-08-30T19:43:30.2000914Z                         let result = "";
2024-08-30T19:43:30.2001041Z                         const shift = 7;
2024-08-30T19:43:30.2001127Z                     
2024-08-30T19:43:30.2001304Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2001426Z                                 
2024-08-30T19:43:30.2001754Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2001943Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2002377Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2002626Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2002957Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2003090Z                         let result = "";
2024-08-30T19:43:30.2003223Z                         const shift = 7;
2024-08-30T19:43:30.2003307Z                     
2024-08-30T19:43:30.2003486Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2003600Z                                  
2024-08-30T19:43:30.2004981Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n             "}
2024-08-30T19:43:30.2010671Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2011717Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2011980Z                         let result = "";
2024-08-30T19:43:30.2012206Z                         const shift = 7;
2024-08-30T19:43:30.2012367Z                     
2024-08-30T19:43:30.2012698Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2013148Z                                  -> function solution(input) {
2024-08-30T19:43:30.2013388Z                         let result = "";
2024-08-30T19:43:30.2013605Z                         const shift = 7;
2024-08-30T19:43:30.2013761Z                     
2024-08-30T19:43:30.2014095Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2014293Z                                  
2024-08-30T19:43:30.2014939Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2015298Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2015844Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2016663Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2017293Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2017563Z                         let result = "";
2024-08-30T19:43:30.2017813Z                         const shift = 7;
2024-08-30T19:43:30.2017972Z                     
2024-08-30T19:43:30.2018316Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2018533Z                                   
2024-08-30T19:43:30.2020306Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n              "}
2024-08-30T19:43:30.2025410Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2025954Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2026096Z                         let result = "";
2024-08-30T19:43:30.2026230Z                         const shift = 7;
2024-08-30T19:43:30.2026325Z                     
2024-08-30T19:43:30.2026515Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2026752Z                                   -> function solution(input) {
2024-08-30T19:43:30.2026882Z                         let result = "";
2024-08-30T19:43:30.2027012Z                         const shift = 7;
2024-08-30T19:43:30.2027105Z                     
2024-08-30T19:43:30.2027283Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2027400Z                                   
2024-08-30T19:43:30.2027736Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2027921Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2028245Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2028489Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2028829Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2028974Z                         let result = "";
2024-08-30T19:43:30.2029098Z                         const shift = 7;
2024-08-30T19:43:30.2029187Z                     
2024-08-30T19:43:30.2029372Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2029491Z                                    
2024-08-30T19:43:30.2030925Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n               "}
2024-08-30T19:43:30.2035277Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2035878Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2036017Z                         let result = "";
2024-08-30T19:43:30.2036141Z                         const shift = 7;
2024-08-30T19:43:30.2036225Z                     
2024-08-30T19:43:30.2036413Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2036643Z                                    -> function solution(input) {
2024-08-30T19:43:30.2036769Z                         let result = "";
2024-08-30T19:43:30.2036908Z                         const shift = 7;
2024-08-30T19:43:30.2036996Z                     
2024-08-30T19:43:30.2037177Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2037424Z                                    
2024-08-30T19:43:30.2037761Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2037956Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2038263Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2038511Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2038838Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2038968Z                         let result = "";
2024-08-30T19:43:30.2039096Z                         const shift = 7;
2024-08-30T19:43:30.2039182Z                     
2024-08-30T19:43:30.2039359Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2039487Z                                     
2024-08-30T19:43:30.2040898Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                "}
2024-08-30T19:43:30.2045212Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2045673Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2045801Z                         let result = "";
2024-08-30T19:43:30.2045924Z                         const shift = 7;
2024-08-30T19:43:30.2046016Z                     
2024-08-30T19:43:30.2046190Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2046419Z                                     -> function solution(input) {
2024-08-30T19:43:30.2046548Z                         let result = "";
2024-08-30T19:43:30.2046667Z                         const shift = 7;
2024-08-30T19:43:30.2046756Z                     
2024-08-30T19:43:30.2046926Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2047174Z                                     
2024-08-30T19:43:30.2047503Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2047776Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2048424Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2048901Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2049517Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2049769Z                         let result = "";
2024-08-30T19:43:30.2049997Z                         const shift = 7;
2024-08-30T19:43:30.2050165Z                     
2024-08-30T19:43:30.2050508Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2050720Z                                      
2024-08-30T19:43:30.2052974Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                 "}
2024-08-30T19:43:30.2058140Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2058702Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2058846Z                         let result = "";
2024-08-30T19:43:30.2058978Z                         const shift = 7;
2024-08-30T19:43:30.2059064Z                     
2024-08-30T19:43:30.2059261Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2059508Z                                      -> function solution(input) {
2024-08-30T19:43:30.2059634Z                         let result = "";
2024-08-30T19:43:30.2059763Z                         const shift = 7;
2024-08-30T19:43:30.2059850Z                     
2024-08-30T19:43:30.2060027Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2060150Z                                      
2024-08-30T19:43:30.2060488Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2060680Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2061002Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2061248Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2061585Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2061726Z                         let result = "";
2024-08-30T19:43:30.2061856Z                         const shift = 7;
2024-08-30T19:43:30.2061942Z                     
2024-08-30T19:43:30.2062124Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2062242Z                                       
2024-08-30T19:43:30.2063913Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                  "}
2024-08-30T19:43:30.2070543Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2071315Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2071472Z                         let result = "";
2024-08-30T19:43:30.2071603Z                         const shift = 7;
2024-08-30T19:43:30.2071705Z                     
2024-08-30T19:43:30.2071898Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2072145Z                                       -> function solution(input) {
2024-08-30T19:43:30.2072410Z                         let result = "";
2024-08-30T19:43:30.2072542Z                         const shift = 7;
2024-08-30T19:43:30.2072632Z                     
2024-08-30T19:43:30.2072828Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2072944Z                                       
2024-08-30T19:43:30.2073285Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2073480Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2073794Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2074047Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2074383Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2074537Z                         let result = "";
2024-08-30T19:43:30.2074666Z                         const shift = 7;
2024-08-30T19:43:30.2074755Z                     
2024-08-30T19:43:30.2074951Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2075074Z                                        
2024-08-30T19:43:30.2076510Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                   "}
2024-08-30T19:43:30.2080879Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2081351Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2081490Z                         let result = "";
2024-08-30T19:43:30.2081622Z                         const shift = 7;
2024-08-30T19:43:30.2081709Z                     
2024-08-30T19:43:30.2081900Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2082145Z                                        -> function solution(input) {
2024-08-30T19:43:30.2082429Z                         let result = "";
2024-08-30T19:43:30.2082555Z                         const shift = 7;
2024-08-30T19:43:30.2082647Z                     
2024-08-30T19:43:30.2082829Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2082955Z                                        
2024-08-30T19:43:30.2083303Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2083490Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2083809Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2084052Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2084386Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2084517Z                         let result = "";
2024-08-30T19:43:30.2084643Z                         const shift = 7;
2024-08-30T19:43:30.2084735Z                     
2024-08-30T19:43:30.2084929Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2085043Z                                         
2024-08-30T19:43:30.2086596Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                    "}
2024-08-30T19:43:30.2091228Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2091739Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2091883Z                         let result = "";
2024-08-30T19:43:30.2092006Z                         const shift = 7;
2024-08-30T19:43:30.2092090Z                     
2024-08-30T19:43:30.2092283Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2092524Z                                         -> function solution(input) {
2024-08-30T19:43:30.2092645Z                         let result = "";
2024-08-30T19:43:30.2092774Z                         const shift = 7;
2024-08-30T19:43:30.2092858Z                     
2024-08-30T19:43:30.2093029Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2093160Z                                         
2024-08-30T19:43:30.2093491Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2093684Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2094000Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2094248Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2094576Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2094707Z                         let result = "";
2024-08-30T19:43:30.2094836Z                         const shift = 7;
2024-08-30T19:43:30.2094922Z                     
2024-08-30T19:43:30.2095108Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2095235Z                                          
2024-08-30T19:43:30.2096658Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                     "}
2024-08-30T19:43:30.2101207Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2101680Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2101811Z                         let result = "";
2024-08-30T19:43:30.2102076Z                         const shift = 7;
2024-08-30T19:43:30.2102174Z                     
2024-08-30T19:43:30.2102359Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2102607Z                                          -> function solution(input) {
2024-08-30T19:43:30.2102737Z                         let result = "";
2024-08-30T19:43:30.2102859Z                         const shift = 7;
2024-08-30T19:43:30.2102949Z                     
2024-08-30T19:43:30.2103127Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2103244Z                                          
2024-08-30T19:43:30.2103577Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2103768Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2104085Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2104330Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2104658Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2104792Z                         let result = "";
2024-08-30T19:43:30.2104914Z                         const shift = 7;
2024-08-30T19:43:30.2104998Z                     
2024-08-30T19:43:30.2105182Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2105301Z                                           
2024-08-30T19:43:30.2106732Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      "}
2024-08-30T19:43:30.2111066Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2111519Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2111651Z                         let result = "";
2024-08-30T19:43:30.2111922Z                         const shift = 7;
2024-08-30T19:43:30.2112004Z                     
2024-08-30T19:43:30.2112184Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2112442Z                                           -> function solution(input) {
2024-08-30T19:43:30.2112562Z                         let result = "";
2024-08-30T19:43:30.2112689Z                         const shift = 7;
2024-08-30T19:43:30.2112771Z                     
2024-08-30T19:43:30.2112948Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2113072Z                                           
2024-08-30T19:43:30.2113396Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2113577Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2113891Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2114129Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.2114466Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2114591Z                         let result = "";
2024-08-30T19:43:30.2114710Z                         const shift = 7;
2024-08-30T19:43:30.2114798Z                     
2024-08-30T19:43:30.2115104Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2115239Z                                           l
2024-08-30T19:43:30.2116676Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      l"}
2024-08-30T19:43:30.2120993Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2121441Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2121579Z                         let result = "";
2024-08-30T19:43:30.2121698Z                         const shift = 7;
2024-08-30T19:43:30.2121780Z                     
2024-08-30T19:43:30.2121960Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2122209Z                                            -> function solution(input) {
2024-08-30T19:43:30.2122337Z                         let result = "";
2024-08-30T19:43:30.2122457Z                         const shift = 7;
2024-08-30T19:43:30.2122547Z                     
2024-08-30T19:43:30.2122729Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2122852Z                                           l
2024-08-30T19:43:30.2123168Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2123358Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2123663Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2123904Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.2124223Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2124354Z                         let result = "";
2024-08-30T19:43:30.2124476Z                         const shift = 7;
2024-08-30T19:43:30.2124691Z                     
2024-08-30T19:43:30.2124871Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2125001Z                                           le
2024-08-30T19:43:30.2126441Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      le"}
2024-08-30T19:43:30.2130881Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2131626Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2131766Z                         let result = "";
2024-08-30T19:43:30.2131899Z                         const shift = 7;
2024-08-30T19:43:30.2131983Z                     
2024-08-30T19:43:30.2132170Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2132432Z                                           l -> function solution(input) {
2024-08-30T19:43:30.2132554Z                         let result = "";
2024-08-30T19:43:30.2132779Z                         const shift = 7;
2024-08-30T19:43:30.2132931Z                     
2024-08-30T19:43:30.2133241Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2133416Z                                           le
2024-08-30T19:43:30.2134000Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2134385Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2134989Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2135328Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.2135677Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2135809Z                         let result = "";
2024-08-30T19:43:30.2135933Z                         const shift = 7;
2024-08-30T19:43:30.2136022Z                     
2024-08-30T19:43:30.2136207Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2136342Z                                           let
2024-08-30T19:43:30.2137845Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let"}
2024-08-30T19:43:30.2142200Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2142887Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2143031Z                         let result = "";
2024-08-30T19:43:30.2143155Z                         const shift = 7;
2024-08-30T19:43:30.2143240Z                     
2024-08-30T19:43:30.2143431Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2143685Z                                           le -> function solution(input) {
2024-08-30T19:43:30.2143808Z                         let result = "";
2024-08-30T19:43:30.2143933Z                         const shift = 7;
2024-08-30T19:43:30.2144020Z                     
2024-08-30T19:43:30.2144210Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2144362Z                                           let
2024-08-30T19:43:30.2144685Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2144875Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2145180Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2145578Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2145913Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2146039Z                         let result = "";
2024-08-30T19:43:30.2146168Z                         const shift = 7;
2024-08-30T19:43:30.2146252Z                     
2024-08-30T19:43:30.2146437Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2146577Z                                           let 
2024-08-30T19:43:30.2148026Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let "}
2024-08-30T19:43:30.2152361Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2152819Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2152945Z                         let result = "";
2024-08-30T19:43:30.2153067Z                         const shift = 7;
2024-08-30T19:43:30.2153158Z                     
2024-08-30T19:43:30.2153343Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2153591Z                                           let -> function solution(input) {
2024-08-30T19:43:30.2153723Z                         let result = "";
2024-08-30T19:43:30.2153844Z                         const shift = 7;
2024-08-30T19:43:30.2153931Z                     
2024-08-30T19:43:30.2154113Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2154243Z                                           let 
2024-08-30T19:43:30.2154570Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2154750Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2155397Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2155664Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.2155994Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2156143Z                         let result = "";
2024-08-30T19:43:30.2156268Z                         const shift = 7;
2024-08-30T19:43:30.2156353Z                     
2024-08-30T19:43:30.2156543Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2156678Z                                           let c
2024-08-30T19:43:30.2158143Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c"}
2024-08-30T19:43:30.2162728Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2163237Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2163368Z                         let result = "";
2024-08-30T19:43:30.2163510Z                         const shift = 7;
2024-08-30T19:43:30.2163593Z                     
2024-08-30T19:43:30.2163825Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2164092Z                                           let  -> function solution(input) {
2024-08-30T19:43:30.2164222Z                         let result = "";
2024-08-30T19:43:30.2164349Z                         const shift = 7;
2024-08-30T19:43:30.2164433Z                     
2024-08-30T19:43:30.2164609Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2164748Z                                           let c
2024-08-30T19:43:30.2165075Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2165256Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2165570Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2165963Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2166381Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2166510Z                         let result = "";
2024-08-30T19:43:30.2166631Z                         const shift = 7;
2024-08-30T19:43:30.2166720Z                     
2024-08-30T19:43:30.2166904Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2167045Z                                           let c 
2024-08-30T19:43:30.2168501Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c "}
2024-08-30T19:43:30.2173072Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2173747Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2173885Z                         let result = "";
2024-08-30T19:43:30.2174009Z                         const shift = 7;
2024-08-30T19:43:30.2174091Z                     
2024-08-30T19:43:30.2174281Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2174550Z                                           let c -> function solution(input) {
2024-08-30T19:43:30.2174680Z                         let result = "";
2024-08-30T19:43:30.2174802Z                         const shift = 7;
2024-08-30T19:43:30.2174887Z                     
2024-08-30T19:43:30.2175215Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2175355Z                                           let c 
2024-08-30T19:43:30.2175686Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2175875Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2176188Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2176436Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.2176759Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2176895Z                         let result = "";
2024-08-30T19:43:30.2177016Z                         const shift = 7;
2024-08-30T19:43:30.2177108Z                     
2024-08-30T19:43:30.2177293Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2177427Z                                           let c =
2024-08-30T19:43:30.2178901Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c ="}
2024-08-30T19:43:30.2183257Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2183720Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2183851Z                         let result = "";
2024-08-30T19:43:30.2183980Z                         const shift = 7;
2024-08-30T19:43:30.2184064Z                     
2024-08-30T19:43:30.2184244Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2184511Z                                           let c  -> function solution(input) {
2024-08-30T19:43:30.2184631Z                         let result = "";
2024-08-30T19:43:30.2184884Z                         const shift = 7;
2024-08-30T19:43:30.2184977Z                     
2024-08-30T19:43:30.2185155Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2185289Z                                           let c =
2024-08-30T19:43:30.2185633Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2185816Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2186130Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2186368Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2186699Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2186827Z                         let result = "";
2024-08-30T19:43:30.2186947Z                         const shift = 7;
2024-08-30T19:43:30.2187037Z                     
2024-08-30T19:43:30.2187211Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2187350Z                                           let c = 
2024-08-30T19:43:30.2188983Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = "}
2024-08-30T19:43:30.2193326Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2193790Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2193929Z                         let result = "";
2024-08-30T19:43:30.2194052Z                         const shift = 7;
2024-08-30T19:43:30.2194134Z                     
2024-08-30T19:43:30.2194324Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2194585Z                                           let c = -> function solution(input) {
2024-08-30T19:43:30.2194706Z                         let result = "";
2024-08-30T19:43:30.2194832Z                         const shift = 7;
2024-08-30T19:43:30.2194913Z                     
2024-08-30T19:43:30.2195090Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2195242Z                                           let c = 
2024-08-30T19:43:30.2195570Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2195758Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2196074Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2196319Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.2196642Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2196770Z                         let result = "";
2024-08-30T19:43:30.2196901Z                         const shift = 7;
2024-08-30T19:43:30.2196985Z                     
2024-08-30T19:43:30.2197165Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2197315Z                                           let c = i
2024-08-30T19:43:30.2198789Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = i"}
2024-08-30T19:43:30.2203258Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2203720Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2203852Z                         let result = "";
2024-08-30T19:43:30.2203978Z                         const shift = 7;
2024-08-30T19:43:30.2204193Z                     
2024-08-30T19:43:30.2204385Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2204651Z                                           let c =  -> function solution(input) {
2024-08-30T19:43:30.2204785Z                         let result = "";
2024-08-30T19:43:30.2204907Z                         const shift = 7;
2024-08-30T19:43:30.2204996Z                     
2024-08-30T19:43:30.2205174Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2205314Z                                           let c = i
2024-08-30T19:43:30.2205650Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2205843Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2206160Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2206400Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.2206735Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2206868Z                         let result = "";
2024-08-30T19:43:30.2206990Z                         const shift = 7;
2024-08-30T19:43:30.2207074Z                     
2024-08-30T19:43:30.2207260Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2207406Z                                           let c = in
2024-08-30T19:43:30.2208878Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = in"}
2024-08-30T19:43:30.2213462Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2213939Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2214071Z                         let result = "";
2024-08-30T19:43:30.2214378Z                         const shift = 7;
2024-08-30T19:43:30.2214461Z                     
2024-08-30T19:43:30.2214643Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2214925Z                                           let c = i -> function solution(input) {
2024-08-30T19:43:30.2215048Z                         let result = "";
2024-08-30T19:43:30.2215176Z                         const shift = 7;
2024-08-30T19:43:30.2215257Z                     
2024-08-30T19:43:30.2215434Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2215588Z                                           let c = in
2024-08-30T19:43:30.2215913Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2216097Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2216407Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2216648Z [32m      cy:command ✔ [39m type	p, {force: true}
2024-08-30T19:43:30.2216985Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2217110Z                         let result = "";
2024-08-30T19:43:30.2217234Z                         const shift = 7;
2024-08-30T19:43:30.2217466Z                     
2024-08-30T19:43:30.2217651Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2217805Z                                           let c = inp
2024-08-30T19:43:30.2219283Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = inp"}
2024-08-30T19:43:30.2223800Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2224271Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2224405Z                         let result = "";
2024-08-30T19:43:30.2224526Z                         const shift = 7;
2024-08-30T19:43:30.2224614Z                     
2024-08-30T19:43:30.2224791Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2225068Z                                           let c = in -> function solution(input) {
2024-08-30T19:43:30.2225200Z                         let result = "";
2024-08-30T19:43:30.2225323Z                         const shift = 7;
2024-08-30T19:43:30.2225407Z                     
2024-08-30T19:43:30.2225588Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2225736Z                                           let c = inp
2024-08-30T19:43:30.2226063Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2226245Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2226552Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2226797Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.2227118Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2227250Z                         let result = "";
2024-08-30T19:43:30.2227600Z                         const shift = 7;
2024-08-30T19:43:30.2227683Z                     
2024-08-30T19:43:30.2227867Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2228026Z                                           let c = inpu
2024-08-30T19:43:30.2229513Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = inpu"}
2024-08-30T19:43:30.2233952Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2234424Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2234557Z                         let result = "";
2024-08-30T19:43:30.2234686Z                         const shift = 7;
2024-08-30T19:43:30.2234770Z                     
2024-08-30T19:43:30.2234953Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2235232Z                                           let c = inp -> function solution(input) {
2024-08-30T19:43:30.2235361Z                         let result = "";
2024-08-30T19:43:30.2235482Z                         const shift = 7;
2024-08-30T19:43:30.2235571Z                     
2024-08-30T19:43:30.2235748Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2235915Z                                           let c = inpu
2024-08-30T19:43:30.2236237Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2236417Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2236732Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2236970Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.2237300Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2237429Z                         let result = "";
2024-08-30T19:43:30.2237552Z                         const shift = 7;
2024-08-30T19:43:30.2237644Z                     
2024-08-30T19:43:30.2237829Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2237983Z                                           let c = input
2024-08-30T19:43:30.2239477Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input"}
2024-08-30T19:43:30.2243788Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2244396Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2244533Z                         let result = "";
2024-08-30T19:43:30.2244656Z                         const shift = 7;
2024-08-30T19:43:30.2244742Z                     
2024-08-30T19:43:30.2244927Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2245206Z                                           let c = inpu -> function solution(input) {
2024-08-30T19:43:30.2245329Z                         let result = "";
2024-08-30T19:43:30.2245458Z                         const shift = 7;
2024-08-30T19:43:30.2245542Z                     
2024-08-30T19:43:30.2245727Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2245877Z                                           let c = input
2024-08-30T19:43:30.2246197Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2246516Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2246841Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2247093Z [32m      cy:command ✔ [39m type	[, {force: true}
2024-08-30T19:43:30.2247417Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2247543Z                         let result = "";
2024-08-30T19:43:30.2247672Z                         const shift = 7;
2024-08-30T19:43:30.2247754Z                     
2024-08-30T19:43:30.2247936Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2248090Z                                           let c = input[
2024-08-30T19:43:30.2249574Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input["}
2024-08-30T19:43:30.2254093Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2254574Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2254713Z                         let result = "";
2024-08-30T19:43:30.2254834Z                         const shift = 7;
2024-08-30T19:43:30.2254923Z                     
2024-08-30T19:43:30.2255105Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2255391Z                                           let c = input -> function solution(input) {
2024-08-30T19:43:30.2255515Z                         let result = "";
2024-08-30T19:43:30.2255640Z                         const shift = 7;
2024-08-30T19:43:30.2255729Z                     
2024-08-30T19:43:30.2255904Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2256059Z                                           let c = input[
2024-08-30T19:43:30.2256580Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2256764Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2257084Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2257330Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.2257654Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2257789Z                         let result = "";
2024-08-30T19:43:30.2257911Z                         const shift = 7;
2024-08-30T19:43:30.2258006Z                     
2024-08-30T19:43:30.2258187Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2258343Z                                           let c = input[i
2024-08-30T19:43:30.2259848Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input[i"}
2024-08-30T19:43:30.2264548Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2265036Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2265170Z                         let result = "";
2024-08-30T19:43:30.2265296Z                         const shift = 7;
2024-08-30T19:43:30.2265379Z                     
2024-08-30T19:43:30.2265579Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2265860Z                                           let c = input[ -> function solution(input) {
2024-08-30T19:43:30.2265980Z                         let result = "";
2024-08-30T19:43:30.2266107Z                         const shift = 7;
2024-08-30T19:43:30.2266189Z                     
2024-08-30T19:43:30.2266364Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2266528Z                                           let c = input[i
2024-08-30T19:43:30.2266856Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2267044Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2267362Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2267601Z [32m      cy:command ✔ [39m type	], {force: true}
2024-08-30T19:43:30.2267935Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2268072Z                         let result = "";
2024-08-30T19:43:30.2268200Z                         const shift = 7;
2024-08-30T19:43:30.2268282Z                     
2024-08-30T19:43:30.2268465Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2268632Z                                           let c = input[i]
2024-08-30T19:43:30.2270137Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input[i]"}
2024-08-30T19:43:30.2274625Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2275082Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2275210Z                         let result = "";
2024-08-30T19:43:30.2275338Z                         const shift = 7;
2024-08-30T19:43:30.2275432Z                     
2024-08-30T19:43:30.2275618Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2276082Z                                           let c = input[i -> function solution(input) {
2024-08-30T19:43:30.2276299Z                         let result = "";
2024-08-30T19:43:30.2276456Z                         const shift = 7;
2024-08-30T19:43:30.2276544Z                     
2024-08-30T19:43:30.2276739Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2276902Z                                           let c = input[i]
2024-08-30T19:43:30.2277254Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2277437Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2277748Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2277992Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.2278327Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2278466Z                         let result = "";
2024-08-30T19:43:30.2278591Z                         const shift = 7;
2024-08-30T19:43:30.2278685Z                     
2024-08-30T19:43:30.2278877Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2279038Z                                           let c = input[i];
2024-08-30T19:43:30.2280561Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input[i];"}
2024-08-30T19:43:30.2284884Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2285345Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2285477Z                         let result = "";
2024-08-30T19:43:30.2285609Z                         const shift = 7;
2024-08-30T19:43:30.2285697Z                     
2024-08-30T19:43:30.2286027Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2286331Z                                           let c = input[i] -> function solution(input) {
2024-08-30T19:43:30.2286454Z                         let result = "";
2024-08-30T19:43:30.2286593Z                         const shift = 7;
2024-08-30T19:43:30.2286683Z                     
2024-08-30T19:43:30.2286865Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2287034Z                                           let c = input[i];
2024-08-30T19:43:30.2287360Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2287488Z                         let result = "";
2024-08-30T19:43:30.2287617Z                         const shift = 7;
2024-08-30T19:43:30.2287698Z                     
2024-08-30T19:43:30.2287876Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2288015Z                             let c = input[i];
2024-08-30T19:43:30.2289575Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];"}
2024-08-30T19:43:30.2294133Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2294613Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2294754Z                         let result = "";
2024-08-30T19:43:30.2294876Z                         const shift = 7;
2024-08-30T19:43:30.2294968Z                     
2024-08-30T19:43:30.2295152Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2295450Z                                           let c = input[i]; -> function solution(input) {
2024-08-30T19:43:30.2295573Z                         let result = "";
2024-08-30T19:43:30.2295693Z                         const shift = 7;
2024-08-30T19:43:30.2295782Z                     
2024-08-30T19:43:30.2295958Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2296096Z                             let c = input[i];
2024-08-30T19:43:30.2296437Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2296619Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2296934Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2297117Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.2297233Z                     , {force: true}
2024-08-30T19:43:30.2297561Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2297690Z                         let result = "";
2024-08-30T19:43:30.2297820Z                         const shift = 7;
2024-08-30T19:43:30.2297906Z                     
2024-08-30T19:43:30.2298086Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2298237Z                             let c = input[i];
2024-08-30T19:43:30.2298339Z                             
2024-08-30T19:43:30.2300236Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        "}
2024-08-30T19:43:30.2305550Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2306064Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2306204Z                         let result = "";
2024-08-30T19:43:30.2306534Z                         const shift = 7;
2024-08-30T19:43:30.2306628Z                     
2024-08-30T19:43:30.2306824Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2307109Z                             let c = input[i]; -> function solution(input) {
2024-08-30T19:43:30.2307241Z                         let result = "";
2024-08-30T19:43:30.2307368Z                         const shift = 7;
2024-08-30T19:43:30.2307461Z                     
2024-08-30T19:43:30.2307652Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2307791Z                             let c = input[i];
2024-08-30T19:43:30.2307888Z                             
2024-08-30T19:43:30.2308235Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2308429Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2308746Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2308999Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2309340Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2309479Z                         let result = "";
2024-08-30T19:43:30.2309610Z                         const shift = 7;
2024-08-30T19:43:30.2309695Z                     
2024-08-30T19:43:30.2309882Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2310025Z                             let c = input[i];
2024-08-30T19:43:30.2310113Z                              
2024-08-30T19:43:30.2311636Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n         "}
2024-08-30T19:43:30.2316001Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2316603Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2316741Z                         let result = "";
2024-08-30T19:43:30.2316874Z                         const shift = 7;
2024-08-30T19:43:30.2316962Z                     
2024-08-30T19:43:30.2317155Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2317302Z                             let c = input[i];
2024-08-30T19:43:30.2317527Z                              -> function solution(input) {
2024-08-30T19:43:30.2317652Z                         let result = "";
2024-08-30T19:43:30.2317777Z                         const shift = 7;
2024-08-30T19:43:30.2317859Z                     
2024-08-30T19:43:30.2318039Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2318173Z                             let c = input[i];
2024-08-30T19:43:30.2318262Z                              
2024-08-30T19:43:30.2318598Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2318789Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2319107Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2319352Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2319815Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2319960Z                         let result = "";
2024-08-30T19:43:30.2320086Z                         const shift = 7;
2024-08-30T19:43:30.2320175Z                     
2024-08-30T19:43:30.2320363Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2320505Z                             let c = input[i];
2024-08-30T19:43:30.2320617Z                               
2024-08-30T19:43:30.2322123Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n          "}
2024-08-30T19:43:30.2326462Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2327061Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2327200Z                         let result = "";
2024-08-30T19:43:30.2327327Z                         const shift = 7;
2024-08-30T19:43:30.2327420Z                     
2024-08-30T19:43:30.2327608Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2327745Z                             let c = input[i];
2024-08-30T19:43:30.2327971Z                               -> function solution(input) {
2024-08-30T19:43:30.2328094Z                         let result = "";
2024-08-30T19:43:30.2328213Z                         const shift = 7;
2024-08-30T19:43:30.2328303Z                     
2024-08-30T19:43:30.2328473Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2328605Z                             let c = input[i];
2024-08-30T19:43:30.2328716Z                               
2024-08-30T19:43:30.2329043Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2329239Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2329546Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2329785Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2330121Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2330249Z                         let result = "";
2024-08-30T19:43:30.2330381Z                         const shift = 7;
2024-08-30T19:43:30.2330467Z                     
2024-08-30T19:43:30.2330649Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2330792Z                             let c = input[i];
2024-08-30T19:43:30.2330895Z                                
2024-08-30T19:43:30.2332693Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n           "}
2024-08-30T19:43:30.2337217Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2337694Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2337836Z                         let result = "";
2024-08-30T19:43:30.2337968Z                         const shift = 7;
2024-08-30T19:43:30.2338052Z                     
2024-08-30T19:43:30.2338244Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2338388Z                             let c = input[i];
2024-08-30T19:43:30.2338610Z                                -> function solution(input) {
2024-08-30T19:43:30.2338732Z                         let result = "";
2024-08-30T19:43:30.2338862Z                         const shift = 7;
2024-08-30T19:43:30.2338945Z                     
2024-08-30T19:43:30.2339123Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2339255Z                             let c = input[i];
2024-08-30T19:43:30.2339359Z                                
2024-08-30T19:43:30.2339690Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2340025Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2340346Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2340587Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2340924Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2341058Z                         let result = "";
2024-08-30T19:43:30.2341182Z                         const shift = 7;
2024-08-30T19:43:30.2341266Z                     
2024-08-30T19:43:30.2341455Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2341795Z                             let c = input[i];
2024-08-30T19:43:30.2341970Z                                 
2024-08-30T19:43:30.2343582Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n            "}
2024-08-30T19:43:30.2347963Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2348414Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2348561Z                         let result = "";
2024-08-30T19:43:30.2348685Z                         const shift = 7;
2024-08-30T19:43:30.2348769Z                     
2024-08-30T19:43:30.2349136Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2349286Z                             let c = input[i];
2024-08-30T19:43:30.2349523Z                                 -> function solution(input) {
2024-08-30T19:43:30.2349646Z                         let result = "";
2024-08-30T19:43:30.2349766Z                         const shift = 7;
2024-08-30T19:43:30.2349856Z                     
2024-08-30T19:43:30.2350029Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2350162Z                             let c = input[i];
2024-08-30T19:43:30.2350274Z                                 
2024-08-30T19:43:30.2350602Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2350798Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2351107Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2351584Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2351956Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2352091Z                         let result = "";
2024-08-30T19:43:30.2352221Z                         const shift = 7;
2024-08-30T19:43:30.2352304Z                     
2024-08-30T19:43:30.2352484Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2352625Z                             let c = input[i];
2024-08-30T19:43:30.2352731Z                                  
2024-08-30T19:43:30.2354250Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n             "}
2024-08-30T19:43:30.2358754Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2359217Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2359361Z                         let result = "";
2024-08-30T19:43:30.2359493Z                         const shift = 7;
2024-08-30T19:43:30.2359577Z                     
2024-08-30T19:43:30.2359766Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2359910Z                             let c = input[i];
2024-08-30T19:43:30.2360137Z                                  -> function solution(input) {
2024-08-30T19:43:30.2360261Z                         let result = "";
2024-08-30T19:43:30.2360387Z                         const shift = 7;
2024-08-30T19:43:30.2360469Z                     
2024-08-30T19:43:30.2360653Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2360788Z                             let c = input[i];
2024-08-30T19:43:30.2360893Z                                  
2024-08-30T19:43:30.2361225Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2361415Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2361722Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2361966Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2362420Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2362562Z                         let result = "";
2024-08-30T19:43:30.2362685Z                         const shift = 7;
2024-08-30T19:43:30.2362767Z                     
2024-08-30T19:43:30.2362950Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2363086Z                             let c = input[i];
2024-08-30T19:43:30.2363198Z                                   
2024-08-30T19:43:30.2364763Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n              "}
2024-08-30T19:43:30.2369100Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2369548Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2369821Z                         let result = "";
2024-08-30T19:43:30.2369945Z                         const shift = 7;
2024-08-30T19:43:30.2370028Z                     
2024-08-30T19:43:30.2370225Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2370361Z                             let c = input[i];
2024-08-30T19:43:30.2370597Z                                   -> function solution(input) {
2024-08-30T19:43:30.2370719Z                         let result = "";
2024-08-30T19:43:30.2370837Z                         const shift = 7;
2024-08-30T19:43:30.2370929Z                     
2024-08-30T19:43:30.2371350Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2371498Z                             let c = input[i];
2024-08-30T19:43:30.2371612Z                                   
2024-08-30T19:43:30.2371955Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2372157Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2372467Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2372706Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2373042Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2373173Z                         let result = "";
2024-08-30T19:43:30.2373303Z                         const shift = 7;
2024-08-30T19:43:30.2373388Z                     
2024-08-30T19:43:30.2373569Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2373712Z                             let c = input[i];
2024-08-30T19:43:30.2373818Z                                    
2024-08-30T19:43:30.2375337Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n               "}
2024-08-30T19:43:30.2379815Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2380288Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2380426Z                         let result = "";
2024-08-30T19:43:30.2380555Z                         const shift = 7;
2024-08-30T19:43:30.2380640Z                     
2024-08-30T19:43:30.2380828Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2380974Z                             let c = input[i];
2024-08-30T19:43:30.2381200Z                                    -> function solution(input) {
2024-08-30T19:43:30.2381325Z                         let result = "";
2024-08-30T19:43:30.2381453Z                         const shift = 7;
2024-08-30T19:43:30.2381537Z                     
2024-08-30T19:43:30.2381713Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2381848Z                             let c = input[i];
2024-08-30T19:43:30.2381954Z                                    
2024-08-30T19:43:30.2382286Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2382625Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2382936Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2383182Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2383515Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2383653Z                         let result = "";
2024-08-30T19:43:30.2383775Z                         const shift = 7;
2024-08-30T19:43:30.2383857Z                     
2024-08-30T19:43:30.2384039Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2384172Z                             let c = input[i];
2024-08-30T19:43:30.2384285Z                                     
2024-08-30T19:43:30.2385805Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                "}
2024-08-30T19:43:30.2390121Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2390580Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2390718Z                         let result = "";
2024-08-30T19:43:30.2390841Z                         const shift = 7;
2024-08-30T19:43:30.2390923Z                     
2024-08-30T19:43:30.2391239Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2391378Z                             let c = input[i];
2024-08-30T19:43:30.2391616Z                                     -> function solution(input) {
2024-08-30T19:43:30.2391738Z                         let result = "";
2024-08-30T19:43:30.2391855Z                         const shift = 7;
2024-08-30T19:43:30.2391943Z                     
2024-08-30T19:43:30.2392117Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2392249Z                             let c = input[i];
2024-08-30T19:43:30.2392365Z                                     
2024-08-30T19:43:30.2392687Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2392878Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2393184Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2393420Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2393759Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2393886Z                         let result = "";
2024-08-30T19:43:30.2394011Z                         const shift = 7;
2024-08-30T19:43:30.2394093Z                     
2024-08-30T19:43:30.2394267Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2394406Z                             let c = input[i];
2024-08-30T19:43:30.2394518Z                                      
2024-08-30T19:43:30.2396034Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                 "}
2024-08-30T19:43:30.2400484Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2400935Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2401070Z                         let result = "";
2024-08-30T19:43:30.2401197Z                         const shift = 7;
2024-08-30T19:43:30.2401280Z                     
2024-08-30T19:43:30.2401461Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2401602Z                             let c = input[i];
2024-08-30T19:43:30.2401838Z                                      -> function solution(input) {
2024-08-30T19:43:30.2401962Z                         let result = "";
2024-08-30T19:43:30.2402089Z                         const shift = 7;
2024-08-30T19:43:30.2402174Z                     
2024-08-30T19:43:30.2402352Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2402492Z                             let c = input[i];
2024-08-30T19:43:30.2402607Z                                      
2024-08-30T19:43:30.2402935Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2403122Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2403428Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2403672Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2404143Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2404282Z                         let result = "";
2024-08-30T19:43:30.2404405Z                         const shift = 7;
2024-08-30T19:43:30.2404489Z                     
2024-08-30T19:43:30.2404671Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2404805Z                             let c = input[i];
2024-08-30T19:43:30.2404922Z                                       
2024-08-30T19:43:30.2406449Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                  "}
2024-08-30T19:43:30.2410764Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2411462Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2411783Z                         let result = "";
2024-08-30T19:43:30.2411907Z                         const shift = 7;
2024-08-30T19:43:30.2411991Z                     
2024-08-30T19:43:30.2412192Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2412331Z                             let c = input[i];
2024-08-30T19:43:30.2412588Z                                       -> function solution(input) {
2024-08-30T19:43:30.2412711Z                         let result = "";
2024-08-30T19:43:30.2412831Z                         const shift = 7;
2024-08-30T19:43:30.2412922Z                     
2024-08-30T19:43:30.2413101Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2413234Z                             let c = input[i];
2024-08-30T19:43:30.2413349Z                                       
2024-08-30T19:43:30.2413688Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2413888Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2414201Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2414444Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2414786Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2414915Z                         let result = "";
2024-08-30T19:43:30.2415041Z                         const shift = 7;
2024-08-30T19:43:30.2415122Z                     
2024-08-30T19:43:30.2415302Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2415444Z                             let c = input[i];
2024-08-30T19:43:30.2415555Z                                        
2024-08-30T19:43:30.2417098Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                   "}
2024-08-30T19:43:30.2421591Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2422058Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2422198Z                         let result = "";
2024-08-30T19:43:30.2422328Z                         const shift = 7;
2024-08-30T19:43:30.2422412Z                     
2024-08-30T19:43:30.2422598Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2422743Z                             let c = input[i];
2024-08-30T19:43:30.2422977Z                                        -> function solution(input) {
2024-08-30T19:43:30.2423100Z                         let result = "";
2024-08-30T19:43:30.2423225Z                         const shift = 7;
2024-08-30T19:43:30.2423308Z                     
2024-08-30T19:43:30.2423483Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2423624Z                             let c = input[i];
2024-08-30T19:43:30.2423738Z                                        
2024-08-30T19:43:30.2424064Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2424375Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2424682Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2424926Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2425255Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2425386Z                         let result = "";
2024-08-30T19:43:30.2425506Z                         const shift = 7;
2024-08-30T19:43:30.2425589Z                     
2024-08-30T19:43:30.2425769Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2425902Z                             let c = input[i];
2024-08-30T19:43:30.2426020Z                                         
2024-08-30T19:43:30.2427553Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                    "}
2024-08-30T19:43:30.2431882Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2432324Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2432466Z                         let result = "";
2024-08-30T19:43:30.2432597Z                         const shift = 7;
2024-08-30T19:43:30.2432681Z                     
2024-08-30T19:43:30.2432989Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2433128Z                             let c = input[i];
2024-08-30T19:43:30.2433373Z                                         -> function solution(input) {
2024-08-30T19:43:30.2433496Z                         let result = "";
2024-08-30T19:43:30.2433619Z                         const shift = 7;
2024-08-30T19:43:30.2433712Z                     
2024-08-30T19:43:30.2433892Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2434026Z                             let c = input[i];
2024-08-30T19:43:30.2434146Z                                         
2024-08-30T19:43:30.2434466Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2434666Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2434983Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2435223Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2435561Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2435692Z                         let result = "";
2024-08-30T19:43:30.2435820Z                         const shift = 7;
2024-08-30T19:43:30.2435903Z                     
2024-08-30T19:43:30.2436079Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2436219Z                             let c = input[i];
2024-08-30T19:43:30.2436335Z                                          
2024-08-30T19:43:30.2438092Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                     "}
2024-08-30T19:43:30.2442610Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2443076Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2443204Z                         let result = "";
2024-08-30T19:43:30.2443331Z                         const shift = 7;
2024-08-30T19:43:30.2443415Z                     
2024-08-30T19:43:30.2443600Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2443742Z                             let c = input[i];
2024-08-30T19:43:30.2443978Z                                          -> function solution(input) {
2024-08-30T19:43:30.2444098Z                         let result = "";
2024-08-30T19:43:30.2444220Z                         const shift = 7;
2024-08-30T19:43:30.2444302Z                     
2024-08-30T19:43:30.2444477Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2444618Z                             let c = input[i];
2024-08-30T19:43:30.2444732Z                                          
2024-08-30T19:43:30.2445068Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2445250Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2445559Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2446019Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2446354Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2446495Z                         let result = "";
2024-08-30T19:43:30.2446615Z                         const shift = 7;
2024-08-30T19:43:30.2446700Z                     
2024-08-30T19:43:30.2446885Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2447019Z                             let c = input[i];
2024-08-30T19:43:30.2447144Z                                           
2024-08-30T19:43:30.2448979Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      "}
2024-08-30T19:43:30.2453585Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2454291Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2454435Z                         let result = "";
2024-08-30T19:43:30.2454564Z                         const shift = 7;
2024-08-30T19:43:30.2454657Z                     
2024-08-30T19:43:30.2454848Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2454987Z                             let c = input[i];
2024-08-30T19:43:30.2455237Z                                           -> function solution(input) {
2024-08-30T19:43:30.2455362Z                         let result = "";
2024-08-30T19:43:30.2455481Z                         const shift = 7;
2024-08-30T19:43:30.2455572Z                     
2024-08-30T19:43:30.2455753Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2455889Z                             let c = input[i];
2024-08-30T19:43:30.2456016Z                                           
2024-08-30T19:43:30.2456358Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2456550Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2456862Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2457110Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.2457440Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2457572Z                         let result = "";
2024-08-30T19:43:30.2457702Z                         const shift = 7;
2024-08-30T19:43:30.2457785Z                     
2024-08-30T19:43:30.2457964Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2458105Z                             let c = input[i];
2024-08-30T19:43:30.2458230Z                                           i
2024-08-30T19:43:30.2459782Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      i"}
2024-08-30T19:43:30.2464323Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2464804Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2464938Z                         let result = "";
2024-08-30T19:43:30.2465069Z                         const shift = 7;
2024-08-30T19:43:30.2465160Z                     
2024-08-30T19:43:30.2465346Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2465489Z                             let c = input[i];
2024-08-30T19:43:30.2465733Z                                            -> function solution(input) {
2024-08-30T19:43:30.2465854Z                         let result = "";
2024-08-30T19:43:30.2466058Z                         const shift = 7;
2024-08-30T19:43:30.2466200Z                     
2024-08-30T19:43:30.2466509Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2466762Z                             let c = input[i];
2024-08-30T19:43:30.2466897Z                                           i
2024-08-30T19:43:30.2467765Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2468135Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2468736Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2469074Z [32m      cy:command ✔ [39m type	f, {force: true}
2024-08-30T19:43:30.2469414Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2469554Z                         let result = "";
2024-08-30T19:43:30.2469682Z                         const shift = 7;
2024-08-30T19:43:30.2469768Z                     
2024-08-30T19:43:30.2469958Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2470095Z                             let c = input[i];
2024-08-30T19:43:30.2470227Z                                           if
2024-08-30T19:43:30.2471797Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if"}
2024-08-30T19:43:30.2478002Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2478883Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2479117Z                         let result = "";
2024-08-30T19:43:30.2479588Z                         const shift = 7;
2024-08-30T19:43:30.2479755Z                     
2024-08-30T19:43:30.2480084Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2480328Z                             let c = input[i];
2024-08-30T19:43:30.2480788Z                                           i -> function solution(input) {
2024-08-30T19:43:30.2481018Z                         let result = "";
2024-08-30T19:43:30.2481238Z                         const shift = 7;
2024-08-30T19:43:30.2481395Z                     
2024-08-30T19:43:30.2481714Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2481953Z                             let c = input[i];
2024-08-30T19:43:30.2482198Z                                           if
2024-08-30T19:43:30.2482805Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2483162Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2483764Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2484229Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2484850Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2485094Z                         let result = "";
2024-08-30T19:43:30.2485321Z                         const shift = 7;
2024-08-30T19:43:30.2485458Z                     
2024-08-30T19:43:30.2485730Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2485948Z                             let c = input[i];
2024-08-30T19:43:30.2486147Z                                           if 
2024-08-30T19:43:30.2488960Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if "}
2024-08-30T19:43:30.2496284Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2496906Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2497150Z                         let result = "";
2024-08-30T19:43:30.2497406Z                         const shift = 7;
2024-08-30T19:43:30.2497574Z                     
2024-08-30T19:43:30.2497776Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2497921Z                             let c = input[i];
2024-08-30T19:43:30.2498195Z                                           if -> function solution(input) {
2024-08-30T19:43:30.2498321Z                         let result = "";
2024-08-30T19:43:30.2498447Z                         const shift = 7;
2024-08-30T19:43:30.2498530Z                     
2024-08-30T19:43:30.2498717Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2498852Z                             let c = input[i];
2024-08-30T19:43:30.2498990Z                                           if 
2024-08-30T19:43:30.2499353Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2499540Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2500096Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2500360Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.2500706Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2500849Z                         let result = "";
2024-08-30T19:43:30.2500980Z                         const shift = 7;
2024-08-30T19:43:30.2501067Z                     
2024-08-30T19:43:30.2501268Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2501410Z                             let c = input[i];
2024-08-30T19:43:30.2501549Z                                           if (
2024-08-30T19:43:30.2503137Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if ("}
2024-08-30T19:43:30.2507512Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2508153Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2508305Z                         let result = "";
2024-08-30T19:43:30.2508431Z                         const shift = 7;
2024-08-30T19:43:30.2508518Z                     
2024-08-30T19:43:30.2508712Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2508849Z                             let c = input[i];
2024-08-30T19:43:30.2509110Z                                           if  -> function solution(input) {
2024-08-30T19:43:30.2509237Z                         let result = "";
2024-08-30T19:43:30.2509357Z                         const shift = 7;
2024-08-30T19:43:30.2509446Z                     
2024-08-30T19:43:30.2509620Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2509761Z                             let c = input[i];
2024-08-30T19:43:30.2509899Z                                           if (
2024-08-30T19:43:30.2510229Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2510419Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2510733Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2510974Z [32m      cy:command ✔ [39m type	/, {force: true}
2024-08-30T19:43:30.2511351Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2511556Z                         let result = "";
2024-08-30T19:43:30.2511769Z                         const shift = 7;
2024-08-30T19:43:30.2511861Z                     
2024-08-30T19:43:30.2512043Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2512187Z                             let c = input[i];
2024-08-30T19:43:30.2512320Z                                           if (/
2024-08-30T19:43:30.2514073Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/"}
2024-08-30T19:43:30.2518414Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2518893Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2519025Z                         let result = "";
2024-08-30T19:43:30.2519157Z                         const shift = 7;
2024-08-30T19:43:30.2519242Z                     
2024-08-30T19:43:30.2519421Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2519561Z                             let c = input[i];
2024-08-30T19:43:30.2519813Z                                           if ( -> function solution(input) {
2024-08-30T19:43:30.2519939Z                         let result = "";
2024-08-30T19:43:30.2520069Z                         const shift = 7;
2024-08-30T19:43:30.2520157Z                     
2024-08-30T19:43:30.2520342Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2520634Z                             let c = input[i];
2024-08-30T19:43:30.2520769Z                                           if (/
2024-08-30T19:43:30.2521104Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2521294Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2521605Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2521844Z [32m      cy:command ✔ [39m type	[, {force: true}
2024-08-30T19:43:30.2522169Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2522306Z                         let result = "";
2024-08-30T19:43:30.2522430Z                         const shift = 7;
2024-08-30T19:43:30.2522521Z                     
2024-08-30T19:43:30.2522699Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2522836Z                             let c = input[i];
2024-08-30T19:43:30.2522988Z                                           if (/[
2024-08-30T19:43:30.2524544Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/["}
2024-08-30T19:43:30.2528856Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2529437Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2529578Z                         let result = "";
2024-08-30T19:43:30.2529700Z                         const shift = 7;
2024-08-30T19:43:30.2529790Z                     
2024-08-30T19:43:30.2529971Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2530106Z                             let c = input[i];
2024-08-30T19:43:30.2530368Z                                           if (/ -> function solution(input) {
2024-08-30T19:43:30.2530489Z                         let result = "";
2024-08-30T19:43:30.2530604Z                         const shift = 7;
2024-08-30T19:43:30.2530693Z                     
2024-08-30T19:43:30.2530871Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2531222Z                             let c = input[i];
2024-08-30T19:43:30.2531413Z                                           if (/[
2024-08-30T19:43:30.2531769Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2531961Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2532270Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2532507Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.2532833Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2532960Z                         let result = "";
2024-08-30T19:43:30.2533090Z                         const shift = 7;
2024-08-30T19:43:30.2533174Z                     
2024-08-30T19:43:30.2533353Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2533498Z                             let c = input[i];
2024-08-30T19:43:30.2533804Z                                           if (/[a
2024-08-30T19:43:30.2535388Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a"}
2024-08-30T19:43:30.2539693Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2540190Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2540323Z                         let result = "";
2024-08-30T19:43:30.2540453Z                         const shift = 7;
2024-08-30T19:43:30.2540539Z                     
2024-08-30T19:43:30.2540717Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2540860Z                             let c = input[i];
2024-08-30T19:43:30.2541126Z                                           if (/[ -> function solution(input) {
2024-08-30T19:43:30.2541255Z                         let result = "";
2024-08-30T19:43:30.2541376Z                         const shift = 7;
2024-08-30T19:43:30.2541466Z                     
2024-08-30T19:43:30.2541646Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2541778Z                             let c = input[i];
2024-08-30T19:43:30.2541910Z                                           if (/[a
2024-08-30T19:43:30.2542939Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2543345Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2544000Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2544355Z [32m      cy:command ✔ [39m type	-, {force: true}
2024-08-30T19:43:30.2544704Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2544848Z                         let result = "";
2024-08-30T19:43:30.2544976Z                         const shift = 7;
2024-08-30T19:43:30.2545074Z                     
2024-08-30T19:43:30.2545266Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2545430Z                             let c = input[i];
2024-08-30T19:43:30.2545578Z                                           if (/[a-
2024-08-30T19:43:30.2547938Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-"}
2024-08-30T19:43:30.2555769Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2556828Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2557068Z                         let result = "";
2024-08-30T19:43:30.2557274Z                         const shift = 7;
2024-08-30T19:43:30.2557422Z                     
2024-08-30T19:43:30.2557724Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2557950Z                             let c = input[i];
2024-08-30T19:43:30.2558411Z                                           if (/[a -> function solution(input) {
2024-08-30T19:43:30.2558620Z                         let result = "";
2024-08-30T19:43:30.2558840Z                         const shift = 7;
2024-08-30T19:43:30.2558988Z                     
2024-08-30T19:43:30.2559288Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2559511Z                             let c = input[i];
2024-08-30T19:43:30.2559754Z                                           if (/[a-
2024-08-30T19:43:30.2560322Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2560649Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2561192Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2561621Z [32m      cy:command ✔ [39m type	z, {force: true}
2024-08-30T19:43:30.2562191Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2562408Z                         let result = "";
2024-08-30T19:43:30.2562618Z                         const shift = 7;
2024-08-30T19:43:30.2562758Z                     
2024-08-30T19:43:30.2563054Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2563305Z                             let c = input[i];
2024-08-30T19:43:30.2563585Z                                           if (/[a-z
2024-08-30T19:43:30.2566658Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-z"}
2024-08-30T19:43:30.2574533Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2575427Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2575656Z                         let result = "";
2024-08-30T19:43:30.2575799Z                         const shift = 7;
2024-08-30T19:43:30.2575886Z                     
2024-08-30T19:43:30.2576073Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2576217Z                             let c = input[i];
2024-08-30T19:43:30.2576501Z                                           if (/[a- -> function solution(input) {
2024-08-30T19:43:30.2577054Z                         let result = "";
2024-08-30T19:43:30.2577257Z                         const shift = 7;
2024-08-30T19:43:30.2577610Z                     
2024-08-30T19:43:30.2577965Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2578216Z                             let c = input[i];
2024-08-30T19:43:30.2578539Z                                           if (/[a-z
2024-08-30T19:43:30.2579045Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2579258Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2579588Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2579844Z [32m      cy:command ✔ [39m type	A, {force: true}
2024-08-30T19:43:30.2580187Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2580334Z                         let result = "";
2024-08-30T19:43:30.2580464Z                         const shift = 7;
2024-08-30T19:43:30.2580572Z                     
2024-08-30T19:43:30.2580765Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2580906Z                             let c = input[i];
2024-08-30T19:43:30.2581113Z                                           if (/[a-zA
2024-08-30T19:43:30.2582977Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA"}
2024-08-30T19:43:30.2587367Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2587843Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2587989Z                         let result = "";
2024-08-30T19:43:30.2588117Z                         const shift = 7;
2024-08-30T19:43:30.2588212Z                     
2024-08-30T19:43:30.2588400Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2588542Z                             let c = input[i];
2024-08-30T19:43:30.2588821Z                                           if (/[a-z -> function solution(input) {
2024-08-30T19:43:30.2588954Z                         let result = "";
2024-08-30T19:43:30.2589079Z                         const shift = 7;
2024-08-30T19:43:30.2589173Z                     
2024-08-30T19:43:30.2589365Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2589512Z                             let c = input[i];
2024-08-30T19:43:30.2589718Z                                           if (/[a-zA
2024-08-30T19:43:30.2590063Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2590257Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2590571Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2590824Z [32m      cy:command ✔ [39m type	-, {force: true}
2024-08-30T19:43:30.2591152Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2591286Z                         let result = "";
2024-08-30T19:43:30.2591573Z                         const shift = 7;
2024-08-30T19:43:30.2591661Z                     
2024-08-30T19:43:30.2591851Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2591997Z                             let c = input[i];
2024-08-30T19:43:30.2592212Z                                           if (/[a-zA-
2024-08-30T19:43:30.2593810Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-"}
2024-08-30T19:43:30.2598400Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2599158Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2599363Z                         let result = "";
2024-08-30T19:43:30.2599557Z                         const shift = 7;
2024-08-30T19:43:30.2599684Z                     
2024-08-30T19:43:30.2599975Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2600196Z                             let c = input[i];
2024-08-30T19:43:30.2600653Z                                           if (/[a-zA -> function solution(input) {
2024-08-30T19:43:30.2600883Z                         let result = "";
2024-08-30T19:43:30.2601012Z                         const shift = 7;
2024-08-30T19:43:30.2601098Z                     
2024-08-30T19:43:30.2601309Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2601453Z                             let c = input[i];
2024-08-30T19:43:30.2601670Z                                           if (/[a-zA-
2024-08-30T19:43:30.2602021Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2602210Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2602669Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2603078Z [32m      cy:command ✔ [39m type	Z, {force: true}
2024-08-30T19:43:30.2603596Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2603822Z                         let result = "";
2024-08-30T19:43:30.2604005Z                         const shift = 7;
2024-08-30T19:43:30.2604142Z                     
2024-08-30T19:43:30.2604428Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2604645Z                             let c = input[i];
2024-08-30T19:43:30.2604980Z                                           if (/[a-zA-Z
2024-08-30T19:43:30.2607565Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z"}
2024-08-30T19:43:30.2613304Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2614338Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2614556Z                         let result = "";
2024-08-30T19:43:30.2614759Z                         const shift = 7;
2024-08-30T19:43:30.2614900Z                     
2024-08-30T19:43:30.2615190Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2615424Z                             let c = input[i];
2024-08-30T19:43:30.2615871Z                                           if (/[a-zA- -> function solution(input) {
2024-08-30T19:43:30.2616073Z                         let result = "";
2024-08-30T19:43:30.2616475Z                         const shift = 7;
2024-08-30T19:43:30.2616622Z                     
2024-08-30T19:43:30.2616916Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2617139Z                             let c = input[i];
2024-08-30T19:43:30.2617473Z                                           if (/[a-zA-Z
2024-08-30T19:43:30.2618007Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2618327Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2618862Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2619280Z [32m      cy:command ✔ [39m type	], {force: true}
2024-08-30T19:43:30.2619827Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2620052Z                         let result = "";
2024-08-30T19:43:30.2620265Z                         const shift = 7;
2024-08-30T19:43:30.2620405Z                     
2024-08-30T19:43:30.2620722Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2620947Z                             let c = input[i];
2024-08-30T19:43:30.2621294Z                                           if (/[a-zA-Z]
2024-08-30T19:43:30.2622939Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]"}
2024-08-30T19:43:30.2627281Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2627756Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2627893Z                         let result = "";
2024-08-30T19:43:30.2628033Z                         const shift = 7;
2024-08-30T19:43:30.2628123Z                     
2024-08-30T19:43:30.2628477Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2628621Z                             let c = input[i];
2024-08-30T19:43:30.2628907Z                                           if (/[a-zA-Z -> function solution(input) {
2024-08-30T19:43:30.2629050Z                         let result = "";
2024-08-30T19:43:30.2629173Z                         const shift = 7;
2024-08-30T19:43:30.2629260Z                     
2024-08-30T19:43:30.2629451Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2629591Z                             let c = input[i];
2024-08-30T19:43:30.2629803Z                                           if (/[a-zA-Z]
2024-08-30T19:43:30.2630135Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2630322Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2630638Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2630880Z [32m      cy:command ✔ [39m type	/, {force: true}
2024-08-30T19:43:30.2631224Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2631356Z                         let result = "";
2024-08-30T19:43:30.2631481Z                         const shift = 7;
2024-08-30T19:43:30.2631708Z                     
2024-08-30T19:43:30.2631898Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2632038Z                             let c = input[i];
2024-08-30T19:43:30.2632257Z                                           if (/[a-zA-Z]/
2024-08-30T19:43:30.2633862Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/"}
2024-08-30T19:43:30.2639851Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2640440Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2640585Z                         let result = "";
2024-08-30T19:43:30.2640715Z                         const shift = 7;
2024-08-30T19:43:30.2640816Z                     
2024-08-30T19:43:30.2641003Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2641141Z                             let c = input[i];
2024-08-30T19:43:30.2641437Z                                           if (/[a-zA-Z] -> function solution(input) {
2024-08-30T19:43:30.2641565Z                         let result = "";
2024-08-30T19:43:30.2641698Z                         const shift = 7;
2024-08-30T19:43:30.2641785Z                     
2024-08-30T19:43:30.2641964Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2642110Z                             let c = input[i];
2024-08-30T19:43:30.2642315Z                                           if (/[a-zA-Z]/
2024-08-30T19:43:30.2642643Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2642835Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2643143Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2643630Z [32m      cy:command ✔ [39m type	., {force: true}
2024-08-30T19:43:30.2643963Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2644103Z                         let result = "";
2024-08-30T19:43:30.2644236Z                         const shift = 7;
2024-08-30T19:43:30.2644325Z                     
2024-08-30T19:43:30.2644513Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2644651Z                             let c = input[i];
2024-08-30T19:43:30.2644856Z                                           if (/[a-zA-Z]/.
2024-08-30T19:43:30.2646483Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/."}
2024-08-30T19:43:30.2651191Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2651726Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2651870Z                         let result = "";
2024-08-30T19:43:30.2652007Z                         const shift = 7;
2024-08-30T19:43:30.2652094Z                     
2024-08-30T19:43:30.2652288Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2652437Z                             let c = input[i];
2024-08-30T19:43:30.2652719Z                                           if (/[a-zA-Z]/ -> function solution(input) {
2024-08-30T19:43:30.2652852Z                         let result = "";
2024-08-30T19:43:30.2652974Z                         const shift = 7;
2024-08-30T19:43:30.2653059Z                     
2024-08-30T19:43:30.2653245Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2653381Z                             let c = input[i];
2024-08-30T19:43:30.2653593Z                                           if (/[a-zA-Z]/.
2024-08-30T19:43:30.2653918Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2654105Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2654431Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2654676Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.2655006Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2655149Z                         let result = "";
2024-08-30T19:43:30.2655274Z                         const shift = 7;
2024-08-30T19:43:30.2655366Z                     
2024-08-30T19:43:30.2655545Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2655687Z                             let c = input[i];
2024-08-30T19:43:30.2655894Z                                           if (/[a-zA-Z]/.t
2024-08-30T19:43:30.2657502Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.t"}
2024-08-30T19:43:30.2665947Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2666827Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2667066Z                         let result = "";
2024-08-30T19:43:30.2667275Z                         const shift = 7;
2024-08-30T19:43:30.2667426Z                     
2024-08-30T19:43:30.2667950Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2668195Z                             let c = input[i];
2024-08-30T19:43:30.2668700Z                                           if (/[a-zA-Z]/. -> function solution(input) {
2024-08-30T19:43:30.2668917Z                         let result = "";
2024-08-30T19:43:30.2669124Z                         const shift = 7;
2024-08-30T19:43:30.2669276Z                     
2024-08-30T19:43:30.2669531Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2669681Z                             let c = input[i];
2024-08-30T19:43:30.2669913Z                                           if (/[a-zA-Z]/.t
2024-08-30T19:43:30.2670267Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2670466Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2670778Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2671083Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.2671683Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2671902Z                         let result = "";
2024-08-30T19:43:30.2672092Z                         const shift = 7;
2024-08-30T19:43:30.2672226Z                     
2024-08-30T19:43:30.2672506Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2672720Z                             let c = input[i];
2024-08-30T19:43:30.2673109Z                                           if (/[a-zA-Z]/.te
2024-08-30T19:43:30.2676044Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.te"}
2024-08-30T19:43:30.2683761Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2684853Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2685093Z                         let result = "";
2024-08-30T19:43:30.2685303Z                         const shift = 7;
2024-08-30T19:43:30.2685449Z                     
2024-08-30T19:43:30.2685763Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2685985Z                             let c = input[i];
2024-08-30T19:43:30.2686480Z                                           if (/[a-zA-Z]/.t -> function solution(input) {
2024-08-30T19:43:30.2686695Z                         let result = "";
2024-08-30T19:43:30.2686897Z                         const shift = 7;
2024-08-30T19:43:30.2687043Z                     
2024-08-30T19:43:30.2687331Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2687554Z                             let c = input[i];
2024-08-30T19:43:30.2687925Z                                           if (/[a-zA-Z]/.te
2024-08-30T19:43:30.2688506Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2688820Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2689381Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2689984Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.2690568Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2690782Z                         let result = "";
2024-08-30T19:43:30.2691156Z                         const shift = 7;
2024-08-30T19:43:30.2691309Z                     
2024-08-30T19:43:30.2691612Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2691837Z                             let c = input[i];
2024-08-30T19:43:30.2692208Z                                           if (/[a-zA-Z]/.tes
2024-08-30T19:43:30.2695088Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.tes"}
2024-08-30T19:43:30.2703039Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2703873Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2704101Z                         let result = "";
2024-08-30T19:43:30.2704311Z                         const shift = 7;
2024-08-30T19:43:30.2704445Z                     
2024-08-30T19:43:30.2704745Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2704974Z                             let c = input[i];
2024-08-30T19:43:30.2705477Z                                           if (/[a-zA-Z]/.te -> function solution(input) {
2024-08-30T19:43:30.2705679Z                         let result = "";
2024-08-30T19:43:30.2705911Z                         const shift = 7;
2024-08-30T19:43:30.2706061Z                     
2024-08-30T19:43:30.2706365Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2706835Z                             let c = input[i];
2024-08-30T19:43:30.2707203Z                                           if (/[a-zA-Z]/.tes
2024-08-30T19:43:30.2707777Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2708089Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2708653Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2709084Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.2709654Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2709876Z                         let result = "";
2024-08-30T19:43:30.2710083Z                         const shift = 7;
2024-08-30T19:43:30.2710221Z                     
2024-08-30T19:43:30.2710526Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2710743Z                             let c = input[i];
2024-08-30T19:43:30.2711137Z                                           if (/[a-zA-Z]/.test
2024-08-30T19:43:30.2714214Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test"}
2024-08-30T19:43:30.2722385Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2723307Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2723550Z                         let result = "";
2024-08-30T19:43:30.2723753Z                         const shift = 7;
2024-08-30T19:43:30.2723890Z                     
2024-08-30T19:43:30.2724208Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2724439Z                             let c = input[i];
2024-08-30T19:43:30.2724964Z                                           if (/[a-zA-Z]/.tes -> function solution(input) {
2024-08-30T19:43:30.2725172Z                         let result = "";
2024-08-30T19:43:30.2725376Z                         const shift = 7;
2024-08-30T19:43:30.2725517Z                     
2024-08-30T19:43:30.2725830Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2726054Z                             let c = input[i];
2024-08-30T19:43:30.2726432Z                                           if (/[a-zA-Z]/.test
2024-08-30T19:43:30.2727011Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2727338Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2727880Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2728285Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.2728851Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2729628Z                         let result = "";
2024-08-30T19:43:30.2729892Z                         const shift = 7;
2024-08-30T19:43:30.2730035Z                     
2024-08-30T19:43:30.2730351Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2730588Z                             let c = input[i];
2024-08-30T19:43:30.2731380Z                                           if (/[a-zA-Z]/.test(
2024-08-30T19:43:30.2734477Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test("}
2024-08-30T19:43:30.2742646Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2743536Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2743768Z                         let result = "";
2024-08-30T19:43:30.2743989Z                         const shift = 7;
2024-08-30T19:43:30.2744132Z                     
2024-08-30T19:43:30.2744447Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2744689Z                             let c = input[i];
2024-08-30T19:43:30.2745221Z                                           if (/[a-zA-Z]/.test -> function solution(input) {
2024-08-30T19:43:30.2745431Z                         let result = "";
2024-08-30T19:43:30.2745653Z                         const shift = 7;
2024-08-30T19:43:30.2745788Z                     
2024-08-30T19:43:30.2746093Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2746319Z                             let c = input[i];
2024-08-30T19:43:30.2746703Z                                           if (/[a-zA-Z]/.test(
2024-08-30T19:43:30.2747278Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2747595Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2748152Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2748570Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.2749133Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2749355Z                         let result = "";
2024-08-30T19:43:30.2749556Z                         const shift = 7;
2024-08-30T19:43:30.2749697Z                     
2024-08-30T19:43:30.2749997Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2750234Z                             let c = input[i];
2024-08-30T19:43:30.2750622Z                                           if (/[a-zA-Z]/.test(c
2024-08-30T19:43:30.2753573Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c"}
2024-08-30T19:43:30.2761498Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2762541Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2762771Z                         let result = "";
2024-08-30T19:43:30.2762980Z                         const shift = 7;
2024-08-30T19:43:30.2763125Z                     
2024-08-30T19:43:30.2763429Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2763656Z                             let c = input[i];
2024-08-30T19:43:30.2764244Z                                           if (/[a-zA-Z]/.test( -> function solution(input) {
2024-08-30T19:43:30.2764465Z                         let result = "";
2024-08-30T19:43:30.2764671Z                         const shift = 7;
2024-08-30T19:43:30.2764822Z                     
2024-08-30T19:43:30.2765124Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2765521Z                             let c = input[i];
2024-08-30T19:43:30.2765921Z                                           if (/[a-zA-Z]/.test(c
2024-08-30T19:43:30.2766492Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2766816Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2767381Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2767814Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.2768387Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2768609Z                         let result = "";
2024-08-30T19:43:30.2768823Z                         const shift = 7;
2024-08-30T19:43:30.2768976Z                     
2024-08-30T19:43:30.2769281Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2769517Z                             let c = input[i];
2024-08-30T19:43:30.2769911Z                                           if (/[a-zA-Z]/.test(c)
2024-08-30T19:43:30.2773024Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c)"}
2024-08-30T19:43:30.2781454Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2782301Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2782523Z                         let result = "";
2024-08-30T19:43:30.2782739Z                         const shift = 7;
2024-08-30T19:43:30.2782878Z                     
2024-08-30T19:43:30.2783183Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2783421Z                             let c = input[i];
2024-08-30T19:43:30.2784228Z                                           if (/[a-zA-Z]/.test(c -> function solution(input) {
2024-08-30T19:43:30.2784445Z                         let result = "";
2024-08-30T19:43:30.2784660Z                         const shift = 7;
2024-08-30T19:43:30.2784816Z                     
2024-08-30T19:43:30.2785121Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2785341Z                             let c = input[i];
2024-08-30T19:43:30.2785721Z                                           if (/[a-zA-Z]/.test(c)
2024-08-30T19:43:30.2786266Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2786586Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2787169Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2787564Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.2788086Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2788318Z                         let result = "";
2024-08-30T19:43:30.2788540Z                         const shift = 7;
2024-08-30T19:43:30.2788693Z                     
2024-08-30T19:43:30.2788978Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2789474Z                             let c = input[i];
2024-08-30T19:43:30.2789930Z                                           if (/[a-zA-Z]/.test(c))
2024-08-30T19:43:30.2792885Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c))"}
2024-08-30T19:43:30.2800882Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2801705Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2801939Z                         let result = "";
2024-08-30T19:43:30.2802141Z                         const shift = 7;
2024-08-30T19:43:30.2802291Z                     
2024-08-30T19:43:30.2802590Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2802815Z                             let c = input[i];
2024-08-30T19:43:30.2803349Z                                           if (/[a-zA-Z]/.test(c) -> function solution(input) {
2024-08-30T19:43:30.2803569Z                         let result = "";
2024-08-30T19:43:30.2803760Z                         const shift = 7;
2024-08-30T19:43:30.2803912Z                     
2024-08-30T19:43:30.2804203Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2804441Z                             let c = input[i];
2024-08-30T19:43:30.2804881Z                                           if (/[a-zA-Z]/.test(c))
2024-08-30T19:43:30.2805484Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2805820Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2806373Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2806798Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2807618Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2807838Z                         let result = "";
2024-08-30T19:43:30.2808051Z                         const shift = 7;
2024-08-30T19:43:30.2808188Z                     
2024-08-30T19:43:30.2808514Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2808740Z                             let c = input[i];
2024-08-30T19:43:30.2809135Z                                           if (/[a-zA-Z]/.test(c)) 
2024-08-30T19:43:30.2812504Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c)) "}
2024-08-30T19:43:30.2820812Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2821661Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2821890Z                         let result = "";
2024-08-30T19:43:30.2822106Z                         const shift = 7;
2024-08-30T19:43:30.2822254Z                     
2024-08-30T19:43:30.2822566Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2822792Z                             let c = input[i];
2024-08-30T19:43:30.2823355Z                                           if (/[a-zA-Z]/.test(c)) -> function solution(input) {
2024-08-30T19:43:30.2823563Z                         let result = "";
2024-08-30T19:43:30.2823760Z                         const shift = 7;
2024-08-30T19:43:30.2823897Z                     
2024-08-30T19:43:30.2824206Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2824426Z                             let c = input[i];
2024-08-30T19:43:30.2824807Z                                           if (/[a-zA-Z]/.test(c)) 
2024-08-30T19:43:30.2825387Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2825725Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2826331Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2826821Z [32m      cy:command ✔ [39m type	{, {force: true}
2024-08-30T19:43:30.2827455Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2827693Z                         let result = "";
2024-08-30T19:43:30.2827937Z                         const shift = 7;
2024-08-30T19:43:30.2828106Z                     
2024-08-30T19:43:30.2828427Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2828677Z                             let c = input[i];
2024-08-30T19:43:30.2829135Z                                           if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2832017Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c)) {"}
2024-08-30T19:43:30.2840189Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2841119Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2841384Z                         let result = "";
2024-08-30T19:43:30.2841612Z                         const shift = 7;
2024-08-30T19:43:30.2841771Z                     
2024-08-30T19:43:30.2842097Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2842581Z                             let c = input[i];
2024-08-30T19:43:30.2843214Z                                           if (/[a-zA-Z]/.test(c))  -> function solution(input) {
2024-08-30T19:43:30.2843431Z                         let result = "";
2024-08-30T19:43:30.2843650Z                         const shift = 7;
2024-08-30T19:43:30.2843806Z                     
2024-08-30T19:43:30.2844129Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2844365Z                             let c = input[i];
2024-08-30T19:43:30.2844781Z                                           if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2845379Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2845756Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2846318Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2846654Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.2846886Z                     , {force: true}
2024-08-30T19:43:30.2847463Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2847690Z                         let result = "";
2024-08-30T19:43:30.2847910Z                         const shift = 7;
2024-08-30T19:43:30.2848062Z                     
2024-08-30T19:43:30.2848376Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2848610Z                             let c = input[i];
2024-08-30T19:43:30.2849031Z                                           if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2849240Z                                             
2024-08-30T19:43:30.2852762Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c)) {\n                        "}
2024-08-30T19:43:30.2860784Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2862005Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2862249Z                         let result = "";
2024-08-30T19:43:30.2862473Z                         const shift = 7;
2024-08-30T19:43:30.2862614Z                     
2024-08-30T19:43:30.2862916Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2863153Z                             let c = input[i];
2024-08-30T19:43:30.2863716Z                                           if (/[a-zA-Z]/.test(c)) { -> function solution(input) {
2024-08-30T19:43:30.2863983Z                         let result = "";
2024-08-30T19:43:30.2864188Z                         const shift = 7;
2024-08-30T19:43:30.2864324Z                     
2024-08-30T19:43:30.2864636Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2864873Z                             let c = input[i];
2024-08-30T19:43:30.2865271Z                                           if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2865487Z                                             
2024-08-30T19:43:30.2866267Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2866493Z                         let result = "";
2024-08-30T19:43:30.2866705Z                         const shift = 7;
2024-08-30T19:43:30.2866841Z                     
2024-08-30T19:43:30.2867149Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2867374Z                             let c = input[i];
2024-08-30T19:43:30.2867728Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2867943Z                                             
2024-08-30T19:43:30.2871021Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                        "}
2024-08-30T19:43:30.2879015Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2879846Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2880074Z                         let result = "";
2024-08-30T19:43:30.2880291Z                         const shift = 7;
2024-08-30T19:43:30.2880436Z                     
2024-08-30T19:43:30.2880742Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2880971Z                             let c = input[i];
2024-08-30T19:43:30.2881379Z                                           if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2881801Z                                              -> function solution(input) {
2024-08-30T19:43:30.2882003Z                         let result = "";
2024-08-30T19:43:30.2882215Z                         const shift = 7;
2024-08-30T19:43:30.2882351Z                     
2024-08-30T19:43:30.2882654Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2883068Z                             let c = input[i];
2024-08-30T19:43:30.2883415Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2883629Z                                             
2024-08-30T19:43:30.2884206Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2884525Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2885092Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2885502Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2886078Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2886300Z                         let result = "";
2024-08-30T19:43:30.2886514Z                         const shift = 7;
2024-08-30T19:43:30.2886656Z                     
2024-08-30T19:43:30.2886962Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2887205Z                             let c = input[i];
2024-08-30T19:43:30.2887547Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2887755Z                                              
2024-08-30T19:43:30.2891164Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                         "}
2024-08-30T19:43:30.2899155Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2899989Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2900222Z                         let result = "";
2024-08-30T19:43:30.2900431Z                         const shift = 7;
2024-08-30T19:43:30.2900569Z                     
2024-08-30T19:43:30.2900880Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2901110Z                             let c = input[i];
2024-08-30T19:43:30.2901458Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2901897Z                                              -> function solution(input) {
2024-08-30T19:43:30.2902103Z                         let result = "";
2024-08-30T19:43:30.2902310Z                         const shift = 7;
2024-08-30T19:43:30.2902457Z                     
2024-08-30T19:43:30.2902769Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2902997Z                             let c = input[i];
2024-08-30T19:43:30.2903336Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2903543Z                                              
2024-08-30T19:43:30.2904119Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2904436Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2904996Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2905411Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2905985Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2906489Z                         let result = "";
2024-08-30T19:43:30.2906694Z                         const shift = 7;
2024-08-30T19:43:30.2906841Z                     
2024-08-30T19:43:30.2907149Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2907392Z                             let c = input[i];
2024-08-30T19:43:30.2907750Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2907953Z                                               
2024-08-30T19:43:30.2911020Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                          "}
2024-08-30T19:43:30.2919204Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2920043Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2920260Z                         let result = "";
2024-08-30T19:43:30.2920470Z                         const shift = 7;
2024-08-30T19:43:30.2920617Z                     
2024-08-30T19:43:30.2920921Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2921153Z                             let c = input[i];
2024-08-30T19:43:30.2921497Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2921926Z                                               -> function solution(input) {
2024-08-30T19:43:30.2922139Z                         let result = "";
2024-08-30T19:43:30.2922342Z                         const shift = 7;
2024-08-30T19:43:30.2922477Z                     
2024-08-30T19:43:30.2922789Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2923014Z                             let c = input[i];
2024-08-30T19:43:30.2923365Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2923580Z                                               
2024-08-30T19:43:30.2924139Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2924471Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2925021Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2925435Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2926006Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2926222Z                         let result = "";
2024-08-30T19:43:30.2926433Z                         const shift = 7;
2024-08-30T19:43:30.2926572Z                     
2024-08-30T19:43:30.2926884Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2927107Z                             let c = input[i];
2024-08-30T19:43:30.2927449Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2927669Z                                                
2024-08-30T19:43:30.2930748Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                           "}
2024-08-30T19:43:30.2939035Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2939862Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2940089Z                         let result = "";
2024-08-30T19:43:30.2940528Z                         const shift = 7;
2024-08-30T19:43:30.2940681Z                     
2024-08-30T19:43:30.2940986Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2941211Z                             let c = input[i];
2024-08-30T19:43:30.2941568Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2941988Z                                                -> function solution(input) {
2024-08-30T19:43:30.2942186Z                         let result = "";
2024-08-30T19:43:30.2942389Z                         const shift = 7;
2024-08-30T19:43:30.2942524Z                     
2024-08-30T19:43:30.2942823Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2943069Z                             let c = input[i];
2024-08-30T19:43:30.2943407Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2943626Z                                                
2024-08-30T19:43:30.2944201Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2944520Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2945090Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2945506Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2946080Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2946297Z                         let result = "";
2024-08-30T19:43:30.2946507Z                         const shift = 7;
2024-08-30T19:43:30.2946648Z                     
2024-08-30T19:43:30.2946958Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2947194Z                             let c = input[i];
2024-08-30T19:43:30.2947552Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2947762Z                                                 
2024-08-30T19:43:30.2950860Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                            "}
2024-08-30T19:43:30.2958835Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2959871Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2960096Z                         let result = "";
2024-08-30T19:43:30.2960311Z                         const shift = 7;
2024-08-30T19:43:30.2960448Z                     
2024-08-30T19:43:30.2960761Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2960985Z                             let c = input[i];
2024-08-30T19:43:30.2961330Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2961760Z                                                 -> function solution(input) {
2024-08-30T19:43:30.2961971Z                         let result = "";
2024-08-30T19:43:30.2962171Z                         const shift = 7;
2024-08-30T19:43:30.2962314Z                     
2024-08-30T19:43:30.2962777Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2963008Z                             let c = input[i];
2024-08-30T19:43:30.2963361Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2963576Z                                                 
2024-08-30T19:43:30.2964209Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2964530Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2965090Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2965507Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2966078Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2966318Z                         let result = "";
2024-08-30T19:43:30.2966524Z                         const shift = 7;
2024-08-30T19:43:30.2966661Z                     
2024-08-30T19:43:30.2966979Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2967220Z                             let c = input[i];
2024-08-30T19:43:30.2967573Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2967791Z                                                  
2024-08-30T19:43:30.2970904Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                             "}
2024-08-30T19:43:30.2978250Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.2979146Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.2979378Z                         let result = "";
2024-08-30T19:43:30.2979577Z                         const shift = 7;
2024-08-30T19:43:30.2980014Z                     
2024-08-30T19:43:30.2980322Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2980562Z                             let c = input[i];
2024-08-30T19:43:30.2980935Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2981377Z                                                  -> function solution(input) {
2024-08-30T19:43:30.2981595Z                         let result = "";
2024-08-30T19:43:30.2981808Z                         const shift = 7;
2024-08-30T19:43:30.2981950Z                     
2024-08-30T19:43:30.2982257Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2982492Z                             let c = input[i];
2024-08-30T19:43:30.2982847Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2983074Z                                                  
2024-08-30T19:43:30.2983649Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2983997Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.2984547Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.2985014Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.2985851Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.2986109Z                         let result = "";
2024-08-30T19:43:30.2986346Z                         const shift = 7;
2024-08-30T19:43:30.2986503Z                     
2024-08-30T19:43:30.2986830Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.2987074Z                             let c = input[i];
2024-08-30T19:43:30.2987479Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.2987730Z                                                   
2024-08-30T19:43:30.2990946Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                              "}
2024-08-30T19:43:30.2999176Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3000031Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3000269Z                         let result = "";
2024-08-30T19:43:30.3000479Z                         const shift = 7;
2024-08-30T19:43:30.3000626Z                     
2024-08-30T19:43:30.3000945Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3001176Z                             let c = input[i];
2024-08-30T19:43:30.3001532Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3001971Z                                                   -> function solution(input) {
2024-08-30T19:43:30.3002173Z                         let result = "";
2024-08-30T19:43:30.3002384Z                         const shift = 7;
2024-08-30T19:43:30.3002520Z                     
2024-08-30T19:43:30.3002821Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3003331Z                             let c = input[i];
2024-08-30T19:43:30.3003680Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3003907Z                                                   
2024-08-30T19:43:30.3004498Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3004820Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3005382Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3005787Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3006358Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3006576Z                         let result = "";
2024-08-30T19:43:30.3006780Z                         const shift = 7;
2024-08-30T19:43:30.3006924Z                     
2024-08-30T19:43:30.3007231Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3007461Z                             let c = input[i];
2024-08-30T19:43:30.3007831Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3008054Z                                                    
2024-08-30T19:43:30.3011563Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                               "}
2024-08-30T19:43:30.3019539Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3020345Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3020563Z                         let result = "";
2024-08-30T19:43:30.3020780Z                         const shift = 7;
2024-08-30T19:43:30.3020918Z                     
2024-08-30T19:43:30.3021226Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3021456Z                             let c = input[i];
2024-08-30T19:43:30.3021805Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3022252Z                                                    -> function solution(input) {
2024-08-30T19:43:30.3022469Z                         let result = "";
2024-08-30T19:43:30.3022675Z                         const shift = 7;
2024-08-30T19:43:30.3022816Z                     
2024-08-30T19:43:30.3023129Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3023350Z                             let c = input[i];
2024-08-30T19:43:30.3023694Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3023930Z                                                    
2024-08-30T19:43:30.3024524Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3024848Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3025401Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3025824Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3026414Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3026952Z                         let result = "";
2024-08-30T19:43:30.3027183Z                         const shift = 7;
2024-08-30T19:43:30.3027338Z                     
2024-08-30T19:43:30.3027689Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3027963Z                             let c = input[i];
2024-08-30T19:43:30.3028370Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3028625Z                                                     
2024-08-30T19:43:30.3031842Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                "}
2024-08-30T19:43:30.3039783Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3040744Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3040970Z                         let result = "";
2024-08-30T19:43:30.3041166Z                         const shift = 7;
2024-08-30T19:43:30.3041316Z                     
2024-08-30T19:43:30.3041587Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3041799Z                             let c = input[i];
2024-08-30T19:43:30.3042142Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3042558Z                                                     -> function solution(input) {
2024-08-30T19:43:30.3042768Z                         let result = "";
2024-08-30T19:43:30.3042962Z                         const shift = 7;
2024-08-30T19:43:30.3043091Z                     
2024-08-30T19:43:30.3043373Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3043582Z                             let c = input[i];
2024-08-30T19:43:30.3043940Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3044175Z                                                     
2024-08-30T19:43:30.3044756Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3045101Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3045641Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3046086Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3046728Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3046989Z                         let result = "";
2024-08-30T19:43:30.3047224Z                         const shift = 7;
2024-08-30T19:43:30.3047379Z                     
2024-08-30T19:43:30.3047716Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3047979Z                             let c = input[i];
2024-08-30T19:43:30.3048368Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3048617Z                                                      
2024-08-30T19:43:30.3051812Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                 "}
2024-08-30T19:43:30.3059678Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3060471Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3060693Z                         let result = "";
2024-08-30T19:43:30.3061103Z                         const shift = 7;
2024-08-30T19:43:30.3061243Z                     
2024-08-30T19:43:30.3061530Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3061748Z                             let c = input[i];
2024-08-30T19:43:30.3062074Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3062497Z                                                      -> function solution(input) {
2024-08-30T19:43:30.3062699Z                         let result = "";
2024-08-30T19:43:30.3062903Z                         const shift = 7;
2024-08-30T19:43:30.3063030Z                     
2024-08-30T19:43:30.3063302Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3063539Z                             let c = input[i];
2024-08-30T19:43:30.3063942Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3064171Z                                                      
2024-08-30T19:43:30.3064767Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3065083Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3065642Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3066052Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3066621Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3066837Z                         let result = "";
2024-08-30T19:43:30.3067041Z                         const shift = 7;
2024-08-30T19:43:30.3067183Z                     
2024-08-30T19:43:30.3067482Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3067707Z                             let c = input[i];
2024-08-30T19:43:30.3068067Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3068301Z                                                       
2024-08-30T19:43:30.3071448Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                  "}
2024-08-30T19:43:30.3079618Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3080654Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3080886Z                         let result = "";
2024-08-30T19:43:30.3081100Z                         const shift = 7;
2024-08-30T19:43:30.3081242Z                     
2024-08-30T19:43:30.3081560Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3081805Z                             let c = input[i];
2024-08-30T19:43:30.3082157Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3082633Z                                                       -> function solution(input) {
2024-08-30T19:43:30.3082848Z                         let result = "";
2024-08-30T19:43:30.3083057Z                         const shift = 7;
2024-08-30T19:43:30.3083208Z                     
2024-08-30T19:43:30.3083722Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3083967Z                             let c = input[i];
2024-08-30T19:43:30.3084323Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3084563Z                                                       
2024-08-30T19:43:30.3085155Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3085474Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3086042Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3086472Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3087049Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3087293Z                         let result = "";
2024-08-30T19:43:30.3087507Z                         const shift = 7;
2024-08-30T19:43:30.3087649Z                     
2024-08-30T19:43:30.3087964Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3088205Z                             let c = input[i];
2024-08-30T19:43:30.3088556Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3088800Z                                                        
2024-08-30T19:43:30.3100146Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                   "}
2024-08-30T19:43:30.3108651Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3109516Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3109756Z                         let result = "";
2024-08-30T19:43:30.3109974Z                         const shift = 7;
2024-08-30T19:43:30.3110407Z                     
2024-08-30T19:43:30.3110732Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3110967Z                             let c = input[i];
2024-08-30T19:43:30.3111355Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3111818Z                                                        -> function solution(input) {
2024-08-30T19:43:30.3112035Z                         let result = "";
2024-08-30T19:43:30.3112244Z                         const shift = 7;
2024-08-30T19:43:30.3112381Z                     
2024-08-30T19:43:30.3112697Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3112925Z                             let c = input[i];
2024-08-30T19:43:30.3113272Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3113518Z                                                        
2024-08-30T19:43:30.3114101Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3114442Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3115006Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3115420Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3116203Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3116433Z                         let result = "";
2024-08-30T19:43:30.3116656Z                         const shift = 7;
2024-08-30T19:43:30.3116793Z                     
2024-08-30T19:43:30.3117098Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3117337Z                             let c = input[i];
2024-08-30T19:43:30.3117689Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3117928Z                                                         
2024-08-30T19:43:30.3121194Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                    "}
2024-08-30T19:43:30.3129425Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3130260Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3130497Z                         let result = "";
2024-08-30T19:43:30.3130709Z                         const shift = 7;
2024-08-30T19:43:30.3130848Z                     
2024-08-30T19:43:30.3131473Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3131713Z                             let c = input[i];
2024-08-30T19:43:30.3132083Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3132540Z                                                         -> function solution(input) {
2024-08-30T19:43:30.3132758Z                         let result = "";
2024-08-30T19:43:30.3132977Z                         const shift = 7;
2024-08-30T19:43:30.3133115Z                     
2024-08-30T19:43:30.3133659Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3133899Z                             let c = input[i];
2024-08-30T19:43:30.3134248Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3134505Z                                                         
2024-08-30T19:43:30.3135096Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3135425Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3136002Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3136423Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3137005Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3137220Z                         let result = "";
2024-08-30T19:43:30.3137428Z                         const shift = 7;
2024-08-30T19:43:30.3137577Z                     
2024-08-30T19:43:30.3137882Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3138126Z                             let c = input[i];
2024-08-30T19:43:30.3138483Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3138724Z                                                          
2024-08-30T19:43:30.3142150Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                     "}
2024-08-30T19:43:30.3150425Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3151261Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3151483Z                         let result = "";
2024-08-30T19:43:30.3151698Z                         const shift = 7;
2024-08-30T19:43:30.3151837Z                     
2024-08-30T19:43:30.3152139Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3152376Z                             let c = input[i];
2024-08-30T19:43:30.3152719Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3153191Z                                                          -> function solution(input) {
2024-08-30T19:43:30.3153401Z                         let result = "";
2024-08-30T19:43:30.3153604Z                         const shift = 7;
2024-08-30T19:43:30.3153764Z                     
2024-08-30T19:43:30.3154072Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3154298Z                             let c = input[i];
2024-08-30T19:43:30.3154638Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3155873Z                                                          
2024-08-30T19:43:30.3156497Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3156819Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3157383Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3157807Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3158589Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3158816Z                         let result = "";
2024-08-30T19:43:30.3159022Z                         const shift = 7;
2024-08-30T19:43:30.3159164Z                     
2024-08-30T19:43:30.3159490Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3159717Z                             let c = input[i];
2024-08-30T19:43:30.3160061Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3160318Z                                                           
2024-08-30T19:43:30.3163498Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                      "}
2024-08-30T19:43:30.3171877Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3172720Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3172960Z                         let result = "";
2024-08-30T19:43:30.3173166Z                         const shift = 7;
2024-08-30T19:43:30.3173309Z                     
2024-08-30T19:43:30.3173615Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3173855Z                             let c = input[i];
2024-08-30T19:43:30.3174209Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3174675Z                                                           -> function solution(input) {
2024-08-30T19:43:30.3174888Z                         let result = "";
2024-08-30T19:43:30.3175092Z                         const shift = 7;
2024-08-30T19:43:30.3175228Z                     
2024-08-30T19:43:30.3175543Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3175769Z                             let c = input[i];
2024-08-30T19:43:30.3176109Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3176363Z                                                           
2024-08-30T19:43:30.3176938Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3177260Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3177807Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3178226Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3178814Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3179027Z                         let result = "";
2024-08-30T19:43:30.3179237Z                         const shift = 7;
2024-08-30T19:43:30.3179373Z                     
2024-08-30T19:43:30.3179677Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3179908Z                             let c = input[i];
2024-08-30T19:43:30.3180256Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3180503Z                                                            
2024-08-30T19:43:30.3183864Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                       "}
2024-08-30T19:43:30.3191851Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3192888Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3193127Z                         let result = "";
2024-08-30T19:43:30.3193334Z                         const shift = 7;
2024-08-30T19:43:30.3193472Z                     
2024-08-30T19:43:30.3193779Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3194028Z                             let c = input[i];
2024-08-30T19:43:30.3194387Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3194852Z                                                            -> function solution(input) {
2024-08-30T19:43:30.3195056Z                         let result = "";
2024-08-30T19:43:30.3195268Z                         const shift = 7;
2024-08-30T19:43:30.3195418Z                     
2024-08-30T19:43:30.3195720Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3195954Z                             let c = input[i];
2024-08-30T19:43:30.3196306Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3196549Z                                                            
2024-08-30T19:43:30.3197118Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3197431Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3197992Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3198408Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3198974Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3199185Z                         let result = "";
2024-08-30T19:43:30.3199388Z                         const shift = 7;
2024-08-30T19:43:30.3199542Z                     
2024-08-30T19:43:30.3199839Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3200062Z                             let c = input[i];
2024-08-30T19:43:30.3200443Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3200704Z                                                             
2024-08-30T19:43:30.3203847Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                        "}
2024-08-30T19:43:30.3212117Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3213161Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3213380Z                         let result = "";
2024-08-30T19:43:30.3213592Z                         const shift = 7;
2024-08-30T19:43:30.3213728Z                     
2024-08-30T19:43:30.3214034Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3214279Z                             let c = input[i];
2024-08-30T19:43:30.3214623Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3215098Z                                                             -> function solution(input) {
2024-08-30T19:43:30.3215511Z                         let result = "";
2024-08-30T19:43:30.3215722Z                         const shift = 7;
2024-08-30T19:43:30.3215865Z                     
2024-08-30T19:43:30.3216164Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3216390Z                             let c = input[i];
2024-08-30T19:43:30.3216736Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3216990Z                                                             
2024-08-30T19:43:30.3217567Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3217884Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3218440Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3218873Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3219439Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3219684Z                         let result = "";
2024-08-30T19:43:30.3219914Z                         const shift = 7;
2024-08-30T19:43:30.3220051Z                     
2024-08-30T19:43:30.3220361Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3220585Z                             let c = input[i];
2024-08-30T19:43:30.3220929Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3221187Z                                                              
2024-08-30T19:43:30.3224351Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                         "}
2024-08-30T19:43:30.3232323Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3233141Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3233548Z                         let result = "";
2024-08-30T19:43:30.3233756Z                         const shift = 7;
2024-08-30T19:43:30.3233898Z                     
2024-08-30T19:43:30.3234209Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3234431Z                             let c = input[i];
2024-08-30T19:43:30.3234794Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3235262Z                                                              -> function solution(input) {
2024-08-30T19:43:30.3235478Z                         let result = "";
2024-08-30T19:43:30.3235682Z                         const shift = 7;
2024-08-30T19:43:30.3235815Z                     
2024-08-30T19:43:30.3236119Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3236338Z                             let c = input[i];
2024-08-30T19:43:30.3236695Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3236943Z                                                              
2024-08-30T19:43:30.3237503Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3237997Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3238563Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3238965Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3239537Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3239753Z                         let result = "";
2024-08-30T19:43:30.3239965Z                         const shift = 7;
2024-08-30T19:43:30.3240095Z                     
2024-08-30T19:43:30.3240397Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3240625Z                             let c = input[i];
2024-08-30T19:43:30.3240968Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3241234Z                                                               
2024-08-30T19:43:30.3244437Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          "}
2024-08-30T19:43:30.3252538Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3253365Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3253592Z                         let result = "";
2024-08-30T19:43:30.3253799Z                         const shift = 7;
2024-08-30T19:43:30.3253933Z                     
2024-08-30T19:43:30.3254246Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3254471Z                             let c = input[i];
2024-08-30T19:43:30.3254823Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3255291Z                                                               -> function solution(input) {
2024-08-30T19:43:30.3255727Z                         let result = "";
2024-08-30T19:43:30.3255943Z                         const shift = 7;
2024-08-30T19:43:30.3256076Z                     
2024-08-30T19:43:30.3256375Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3256609Z                             let c = input[i];
2024-08-30T19:43:30.3256949Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3257200Z                                                               
2024-08-30T19:43:30.3257776Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3258087Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3258641Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3259052Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.3259623Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3259853Z                         let result = "";
2024-08-30T19:43:30.3260058Z                         const shift = 7;
2024-08-30T19:43:30.3260198Z                     
2024-08-30T19:43:30.3260498Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3260923Z                             let c = input[i];
2024-08-30T19:43:30.3261286Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3261553Z                                                               l
2024-08-30T19:43:30.3264807Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          l"}
2024-08-30T19:43:30.3272798Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3273609Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3273826Z                         let result = "";
2024-08-30T19:43:30.3274040Z                         const shift = 7;
2024-08-30T19:43:30.3274186Z                     
2024-08-30T19:43:30.3274488Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3274721Z                             let c = input[i];
2024-08-30T19:43:30.3275066Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3275560Z                                                                -> function solution(input) {
2024-08-30T19:43:30.3275768Z                         let result = "";
2024-08-30T19:43:30.3275972Z                         const shift = 7;
2024-08-30T19:43:30.3276115Z                     
2024-08-30T19:43:30.3276410Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3276632Z                             let c = input[i];
2024-08-30T19:43:30.3276977Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3277239Z                                                               l
2024-08-30T19:43:30.3278191Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3278757Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3279327Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3279746Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.3280330Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3280554Z                         let result = "";
2024-08-30T19:43:30.3280751Z                         const shift = 7;
2024-08-30T19:43:30.3280878Z                     
2024-08-30T19:43:30.3281187Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3281412Z                             let c = input[i];
2024-08-30T19:43:30.3281755Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3282023Z                                                               le
2024-08-30T19:43:30.3285248Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          le"}
2024-08-30T19:43:30.3293610Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3294447Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3294680Z                         let result = "";
2024-08-30T19:43:30.3294892Z                         const shift = 7;
2024-08-30T19:43:30.3295039Z                     
2024-08-30T19:43:30.3295344Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3295570Z                             let c = input[i];
2024-08-30T19:43:30.3295924Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3296407Z                                                               l -> function solution(input) {
2024-08-30T19:43:30.3296621Z                         let result = "";
2024-08-30T19:43:30.3296824Z                         const shift = 7;
2024-08-30T19:43:30.3296959Z                     
2024-08-30T19:43:30.3297277Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3297498Z                             let c = input[i];
2024-08-30T19:43:30.3297837Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3298123Z                                                               le
2024-08-30T19:43:30.3298669Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3298984Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3299540Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3299943Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.3300517Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3300727Z                         let result = "";
2024-08-30T19:43:30.3300940Z                         const shift = 7;
2024-08-30T19:43:30.3301075Z                     
2024-08-30T19:43:30.3301379Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3301824Z                             let c = input[i];
2024-08-30T19:43:30.3302168Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3302452Z                                                               let
2024-08-30T19:43:30.3305735Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let"}
2024-08-30T19:43:30.3313901Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3314725Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3314956Z                         let result = "";
2024-08-30T19:43:30.3315163Z                         const shift = 7;
2024-08-30T19:43:30.3315298Z                     
2024-08-30T19:43:30.3315608Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3315834Z                             let c = input[i];
2024-08-30T19:43:30.3316194Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3317042Z                                                               le -> function solution(input) {
2024-08-30T19:43:30.3317259Z                         let result = "";
2024-08-30T19:43:30.3317487Z                         const shift = 7;
2024-08-30T19:43:30.3317624Z                     
2024-08-30T19:43:30.3317928Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3318155Z                             let c = input[i];
2024-08-30T19:43:30.3318501Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3318773Z                                                               let
2024-08-30T19:43:30.3319355Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3319665Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3320229Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3320630Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3321188Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3321401Z                         let result = "";
2024-08-30T19:43:30.3321597Z                         const shift = 7;
2024-08-30T19:43:30.3321753Z                     
2024-08-30T19:43:30.3322057Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3322283Z                             let c = input[i];
2024-08-30T19:43:30.3322632Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3322905Z                                                               let 
2024-08-30T19:43:30.3326106Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let "}
2024-08-30T19:43:30.3334402Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3335194Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3335417Z                         let result = "";
2024-08-30T19:43:30.3335623Z                         const shift = 7;
2024-08-30T19:43:30.3335757Z                     
2024-08-30T19:43:30.3336061Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3336505Z                             let c = input[i];
2024-08-30T19:43:30.3336855Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3337306Z                                                               let -> function solution(input) {
2024-08-30T19:43:30.3337504Z                         let result = "";
2024-08-30T19:43:30.3337708Z                         const shift = 7;
2024-08-30T19:43:30.3337848Z                     
2024-08-30T19:43:30.3338144Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3338367Z                             let c = input[i];
2024-08-30T19:43:30.3338708Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3338988Z                                                               let 
2024-08-30T19:43:30.3339559Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3339864Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3340408Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3340816Z [32m      cy:command ✔ [39m type	b, {force: true}
2024-08-30T19:43:30.3341364Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3341590Z                         let result = "";
2024-08-30T19:43:30.3341791Z                         const shift = 7;
2024-08-30T19:43:30.3341923Z                     
2024-08-30T19:43:30.3342225Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3342466Z                             let c = input[i];
2024-08-30T19:43:30.3342825Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3343101Z                                                               let b
2024-08-30T19:43:30.3346352Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let b"}
2024-08-30T19:43:30.3354198Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3355316Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3355538Z                         let result = "";
2024-08-30T19:43:30.3355748Z                         const shift = 7;
2024-08-30T19:43:30.3355890Z                     
2024-08-30T19:43:30.3356206Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3356444Z                             let c = input[i];
2024-08-30T19:43:30.3356796Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3357300Z                                                               let  -> function solution(input) {
2024-08-30T19:43:30.3357541Z                         let result = "";
2024-08-30T19:43:30.3357759Z                         const shift = 7;
2024-08-30T19:43:30.3357905Z                     
2024-08-30T19:43:30.3358204Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3358610Z                             let c = input[i];
2024-08-30T19:43:30.3358986Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3359277Z                                                               let b
2024-08-30T19:43:30.3359862Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3360190Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3360748Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3361193Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.3361781Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3362009Z                         let result = "";
2024-08-30T19:43:30.3362242Z                         const shift = 7;
2024-08-30T19:43:30.3362382Z                     
2024-08-30T19:43:30.3362691Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3362932Z                             let c = input[i];
2024-08-30T19:43:30.3363295Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3363585Z                                                               let ba
2024-08-30T19:43:30.3366913Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let ba"}
2024-08-30T19:43:30.3375227Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3376078Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3376321Z                         let result = "";
2024-08-30T19:43:30.3376540Z                         const shift = 7;
2024-08-30T19:43:30.3376685Z                     
2024-08-30T19:43:30.3377302Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3377546Z                             let c = input[i];
2024-08-30T19:43:30.3377919Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3378452Z                                                               let b -> function solution(input) {
2024-08-30T19:43:30.3378675Z                         let result = "";
2024-08-30T19:43:30.3378899Z                         const shift = 7;
2024-08-30T19:43:30.3379043Z                     
2024-08-30T19:43:30.3379359Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3379602Z                             let c = input[i];
2024-08-30T19:43:30.3379941Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3380215Z                                                               let ba
2024-08-30T19:43:30.3380757Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3381092Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3381656Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3382074Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.3382903Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3383146Z                         let result = "";
2024-08-30T19:43:30.3383363Z                         const shift = 7;
2024-08-30T19:43:30.3383513Z                     
2024-08-30T19:43:30.3383824Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3384069Z                             let c = input[i];
2024-08-30T19:43:30.3384426Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3384712Z                                                               let bas
2024-08-30T19:43:30.3388039Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let bas"}
2024-08-30T19:43:30.3396182Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3397225Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3397473Z                         let result = "";
2024-08-30T19:43:30.3397700Z                         const shift = 7;
2024-08-30T19:43:30.3397852Z                     
2024-08-30T19:43:30.3398177Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3398420Z                             let c = input[i];
2024-08-30T19:43:30.3398782Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3399301Z                                                               let ba -> function solution(input) {
2024-08-30T19:43:30.3399513Z                         let result = "";
2024-08-30T19:43:30.3399728Z                         const shift = 7;
2024-08-30T19:43:30.3399876Z                     
2024-08-30T19:43:30.3400199Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3400433Z                             let c = input[i];
2024-08-30T19:43:30.3400791Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3401090Z                                                               let bas
2024-08-30T19:43:30.3401674Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3402002Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3402580Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3403014Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.3403602Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3403837Z                         let result = "";
2024-08-30T19:43:30.3404053Z                         const shift = 7;
2024-08-30T19:43:30.3404197Z                     
2024-08-30T19:43:30.3404514Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3404760Z                             let c = input[i];
2024-08-30T19:43:30.3405120Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3405408Z                                                               let base
2024-08-30T19:43:30.3408882Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base"}
2024-08-30T19:43:30.3417399Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3418248Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3418472Z                         let result = "";
2024-08-30T19:43:30.3418691Z                         const shift = 7;
2024-08-30T19:43:30.3418828Z                     
2024-08-30T19:43:30.3419135Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3419375Z                             let c = input[i];
2024-08-30T19:43:30.3420029Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3420563Z                                                               let bas -> function solution(input) {
2024-08-30T19:43:30.3420793Z                         let result = "";
2024-08-30T19:43:30.3421020Z                         const shift = 7;
2024-08-30T19:43:30.3421165Z                     
2024-08-30T19:43:30.3421506Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3421747Z                             let c = input[i];
2024-08-30T19:43:30.3422114Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3422413Z                                                               let base
2024-08-30T19:43:30.3423024Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3423378Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3423968Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3424435Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3425021Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3425254Z                         let result = "";
2024-08-30T19:43:30.3425472Z                         const shift = 7;
2024-08-30T19:43:30.3425636Z                     
2024-08-30T19:43:30.3425962Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3426197Z                             let c = input[i];
2024-08-30T19:43:30.3426552Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3426854Z                                                               let base 
2024-08-30T19:43:30.3430169Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base "}
2024-08-30T19:43:30.3438519Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3439366Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3439631Z                         let result = "";
2024-08-30T19:43:30.3439849Z                         const shift = 7;
2024-08-30T19:43:30.3440005Z                     
2024-08-30T19:43:30.3440338Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3440581Z                             let c = input[i];
2024-08-30T19:43:30.3440947Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3441493Z                                                               let base -> function solution(input) {
2024-08-30T19:43:30.3441713Z                         let result = "";
2024-08-30T19:43:30.3441938Z                         const shift = 7;
2024-08-30T19:43:30.3442078Z                     
2024-08-30T19:43:30.3442396Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3442634Z                             let c = input[i];
2024-08-30T19:43:30.3443184Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3443495Z                                                               let base 
2024-08-30T19:43:30.3444096Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3444447Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3445036Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3445483Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.3446085Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3446313Z                         let result = "";
2024-08-30T19:43:30.3446534Z                         const shift = 7;
2024-08-30T19:43:30.3446680Z                     
2024-08-30T19:43:30.3446987Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3447238Z                             let c = input[i];
2024-08-30T19:43:30.3447594Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3447907Z                                                               let base =
2024-08-30T19:43:30.3451359Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base ="}
2024-08-30T19:43:30.3459695Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3460574Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3460828Z                         let result = "";
2024-08-30T19:43:30.3461051Z                         const shift = 7;
2024-08-30T19:43:30.3461203Z                     
2024-08-30T19:43:30.3461535Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3461780Z                             let c = input[i];
2024-08-30T19:43:30.3462146Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3462699Z                                                               let base  -> function solution(input) {
2024-08-30T19:43:30.3462934Z                         let result = "";
2024-08-30T19:43:30.3463150Z                         const shift = 7;
2024-08-30T19:43:30.3463303Z                     
2024-08-30T19:43:30.3463625Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3463873Z                             let c = input[i];
2024-08-30T19:43:30.3464304Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3464614Z                                                               let base =
2024-08-30T19:43:30.3465225Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3465573Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3466170Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3466618Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3467230Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3467709Z                         let result = "";
2024-08-30T19:43:30.3467933Z                         const shift = 7;
2024-08-30T19:43:30.3468084Z                     
2024-08-30T19:43:30.3468395Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3468657Z                             let c = input[i];
2024-08-30T19:43:30.3469046Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3469354Z                                                               let base = 
2024-08-30T19:43:30.3472737Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = "}
2024-08-30T19:43:30.3480997Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3481863Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3482105Z                         let result = "";
2024-08-30T19:43:30.3482347Z                         const shift = 7;
2024-08-30T19:43:30.3482493Z                     
2024-08-30T19:43:30.3482810Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3483060Z                             let c = input[i];
2024-08-30T19:43:30.3483652Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3484325Z                                                               let base = -> function solution(input) {
2024-08-30T19:43:30.3484555Z                         let result = "";
2024-08-30T19:43:30.3484769Z                         const shift = 7;
2024-08-30T19:43:30.3484919Z                     
2024-08-30T19:43:30.3485237Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3485479Z                             let c = input[i];
2024-08-30T19:43:30.3485849Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3486166Z                                                               let base = 
2024-08-30T19:43:30.3486782Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3487138Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3487736Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3488203Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.3488813Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3489058Z                         let result = "";
2024-08-30T19:43:30.3489271Z                         const shift = 7;
2024-08-30T19:43:30.3489412Z                     
2024-08-30T19:43:30.3489735Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3489972Z                             let c = input[i];
2024-08-30T19:43:30.3490334Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3490660Z                                                               let base = c
2024-08-30T19:43:30.3494191Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c"}
2024-08-30T19:43:30.3502676Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3503588Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3503844Z                         let result = "";
2024-08-30T19:43:30.3504063Z                         const shift = 7;
2024-08-30T19:43:30.3504219Z                     
2024-08-30T19:43:30.3504545Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3504791Z                             let c = input[i];
2024-08-30T19:43:30.3505184Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3505742Z                                                               let base =  -> function solution(input) {
2024-08-30T19:43:30.3505980Z                         let result = "";
2024-08-30T19:43:30.3506202Z                         const shift = 7;
2024-08-30T19:43:30.3506361Z                     
2024-08-30T19:43:30.3506683Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3506929Z                             let c = input[i];
2024-08-30T19:43:30.3507537Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3507877Z                                                               let base = c
2024-08-30T19:43:30.3508480Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3508844Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3509424Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3509878Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3510489Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3510721Z                         let result = "";
2024-08-30T19:43:30.3510953Z                         const shift = 7;
2024-08-30T19:43:30.3511110Z                     
2024-08-30T19:43:30.3511430Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3511675Z                             let c = input[i];
2024-08-30T19:43:30.3512044Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3512378Z                                                               let base = c 
2024-08-30T19:43:30.3515730Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c "}
2024-08-30T19:43:30.3524368Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3525415Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3525639Z                         let result = "";
2024-08-30T19:43:30.3525846Z                         const shift = 7;
2024-08-30T19:43:30.3525975Z                     
2024-08-30T19:43:30.3526280Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3526511Z                             let c = input[i];
2024-08-30T19:43:30.3526850Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3527397Z                                                               let base = c -> function solution(input) {
2024-08-30T19:43:30.3527592Z                         let result = "";
2024-08-30T19:43:30.3527801Z                         const shift = 7;
2024-08-30T19:43:30.3527931Z                     
2024-08-30T19:43:30.3528234Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3528455Z                             let c = input[i];
2024-08-30T19:43:30.3528791Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3529077Z                                                               let base = c 
2024-08-30T19:43:30.3529633Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3529942Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3530500Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3530903Z [32m      cy:command ✔ [39m type	>, {force: true}
2024-08-30T19:43:30.3531640Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3532119Z                         let result = "";
2024-08-30T19:43:30.3532343Z                         const shift = 7;
2024-08-30T19:43:30.3532483Z                     
2024-08-30T19:43:30.3532774Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3532989Z                             let c = input[i];
2024-08-30T19:43:30.3533318Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3533598Z                                                               let base = c >
2024-08-30T19:43:30.3536671Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >"}
2024-08-30T19:43:30.3544259Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3545239Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3545440Z                         let result = "";
2024-08-30T19:43:30.3545642Z                         const shift = 7;
2024-08-30T19:43:30.3545769Z                     
2024-08-30T19:43:30.3546041Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3546252Z                             let c = input[i];
2024-08-30T19:43:30.3546568Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3547051Z                                                               let base = c  -> function solution(input) {
2024-08-30T19:43:30.3547239Z                         let result = "";
2024-08-30T19:43:30.3547420Z                         const shift = 7;
2024-08-30T19:43:30.3547545Z                     
2024-08-30T19:43:30.3547817Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3548035Z                             let c = input[i];
2024-08-30T19:43:30.3548347Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3548614Z                                                               let base = c >
2024-08-30T19:43:30.3549134Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3549430Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3549921Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3550299Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.3550805Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3551010Z                         let result = "";
2024-08-30T19:43:30.3551190Z                         const shift = 7;
2024-08-30T19:43:30.3551313Z                     
2024-08-30T19:43:30.3551584Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3551797Z                             let c = input[i];
2024-08-30T19:43:30.3552104Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3552387Z                                                               let base = c >=
2024-08-30T19:43:30.3555499Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >="}
2024-08-30T19:43:30.3562992Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3563786Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3564043Z                         let result = "";
2024-08-30T19:43:30.3564228Z                         const shift = 7;
2024-08-30T19:43:30.3564357Z                     
2024-08-30T19:43:30.3564624Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3564825Z                             let c = input[i];
2024-08-30T19:43:30.3565406Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3565891Z                                                               let base = c > -> function solution(input) {
2024-08-30T19:43:30.3566085Z                         let result = "";
2024-08-30T19:43:30.3566282Z                         const shift = 7;
2024-08-30T19:43:30.3566403Z                     
2024-08-30T19:43:30.3566674Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3566872Z                             let c = input[i];
2024-08-30T19:43:30.3567177Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3567461Z                                                               let base = c >=
2024-08-30T19:43:30.3567975Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3568276Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3568810Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3569258Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3570450Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3570700Z                         let result = "";
2024-08-30T19:43:30.3570892Z                         const shift = 7;
2024-08-30T19:43:30.3571160Z                     
2024-08-30T19:43:30.3571448Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3571664Z                             let c = input[i];
2024-08-30T19:43:30.3572086Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3572367Z                                                               let base = c >= 
2024-08-30T19:43:30.3575359Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= "}
2024-08-30T19:43:30.3582790Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3583552Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3583773Z                         let result = "";
2024-08-30T19:43:30.3583958Z                         const shift = 7;
2024-08-30T19:43:30.3584083Z                     
2024-08-30T19:43:30.3584372Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3584577Z                             let c = input[i];
2024-08-30T19:43:30.3584908Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3585386Z                                                               let base = c >= -> function solution(input) {
2024-08-30T19:43:30.3585578Z                         let result = "";
2024-08-30T19:43:30.3585780Z                         const shift = 7;
2024-08-30T19:43:30.3585909Z                     
2024-08-30T19:43:30.3586187Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3586403Z                             let c = input[i];
2024-08-30T19:43:30.3586991Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3587292Z                                                               let base = c >= 
2024-08-30T19:43:30.3587827Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3588158Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3588679Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3589086Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.3589617Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3589812Z                         let result = "";
2024-08-30T19:43:30.3590009Z                         const shift = 7;
2024-08-30T19:43:30.3590146Z                     
2024-08-30T19:43:30.3590444Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3590664Z                             let c = input[i];
2024-08-30T19:43:30.3591005Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3591331Z                                                               let base = c >= '
2024-08-30T19:43:30.3594505Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= '"}
2024-08-30T19:43:30.3602374Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3603208Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3603415Z                         let result = "";
2024-08-30T19:43:30.3603612Z                         const shift = 7;
2024-08-30T19:43:30.3603740Z                     
2024-08-30T19:43:30.3604045Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3604263Z                             let c = input[i];
2024-08-30T19:43:30.3604599Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3605128Z                                                               let base = c >=  -> function solution(input) {
2024-08-30T19:43:30.3605340Z                         let result = "";
2024-08-30T19:43:30.3605534Z                         const shift = 7;
2024-08-30T19:43:30.3605674Z                     
2024-08-30T19:43:30.3605969Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3606195Z                             let c = input[i];
2024-08-30T19:43:30.3606531Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3606836Z                                                               let base = c >= '
2024-08-30T19:43:30.3607395Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3607708Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3608261Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3608666Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.3609210Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3609661Z                         let result = "";
2024-08-30T19:43:30.3609862Z                         const shift = 7;
2024-08-30T19:43:30.3609992Z                     
2024-08-30T19:43:30.3610300Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3610515Z                             let c = input[i];
2024-08-30T19:43:30.3610847Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3611375Z                                                               let base = c >= 'a
2024-08-30T19:43:30.3614526Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a"}
2024-08-30T19:43:30.3622122Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3622915Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3623136Z                         let result = "";
2024-08-30T19:43:30.3623340Z                         const shift = 7;
2024-08-30T19:43:30.3623468Z                     
2024-08-30T19:43:30.3623765Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3624254Z                             let c = input[i];
2024-08-30T19:43:30.3624606Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3625139Z                                                               let base = c >= ' -> function solution(input) {
2024-08-30T19:43:30.3625335Z                         let result = "";
2024-08-30T19:43:30.3625522Z                         const shift = 7;
2024-08-30T19:43:30.3625651Z                     
2024-08-30T19:43:30.3625941Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3626145Z                             let c = input[i];
2024-08-30T19:43:30.3626471Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3626829Z                                                               let base = c >= 'a
2024-08-30T19:43:30.3627373Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3627673Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3628193Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3628585Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.3629124Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3629328Z                         let result = "";
2024-08-30T19:43:30.3629521Z                         const shift = 7;
2024-08-30T19:43:30.3629653Z                     
2024-08-30T19:43:30.3629951Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3630169Z                             let c = input[i];
2024-08-30T19:43:30.3630501Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3630909Z                                                               let base = c >= 'a'
2024-08-30T19:43:30.3634267Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a'"}
2024-08-30T19:43:30.3641744Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3642540Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3642758Z                         let result = "";
2024-08-30T19:43:30.3642944Z                         const shift = 7;
2024-08-30T19:43:30.3643078Z                     
2024-08-30T19:43:30.3643361Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3643568Z                             let c = input[i];
2024-08-30T19:43:30.3643902Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3644440Z                                                               let base = c >= 'a -> function solution(input) {
2024-08-30T19:43:30.3644649Z                         let result = "";
2024-08-30T19:43:30.3644846Z                         const shift = 7;
2024-08-30T19:43:30.3644976Z                     
2024-08-30T19:43:30.3645281Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3645716Z                             let c = input[i];
2024-08-30T19:43:30.3646058Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3646477Z                                                               let base = c >= 'a'
2024-08-30T19:43:30.3647007Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3647311Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3647867Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3648330Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3648905Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3649118Z                         let result = "";
2024-08-30T19:43:30.3649342Z                         const shift = 7;
2024-08-30T19:43:30.3649483Z                     
2024-08-30T19:43:30.3649786Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3650025Z                             let c = input[i];
2024-08-30T19:43:30.3650366Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3650796Z                                                               let base = c >= 'a' 
2024-08-30T19:43:30.3654190Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' "}
2024-08-30T19:43:30.3661600Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3662655Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3662868Z                         let result = "";
2024-08-30T19:43:30.3663066Z                         const shift = 7;
2024-08-30T19:43:30.3663217Z                     
2024-08-30T19:43:30.3663513Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3663725Z                             let c = input[i];
2024-08-30T19:43:30.3664119Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3664668Z                                                               let base = c >= 'a' -> function solution(input) {
2024-08-30T19:43:30.3664854Z                         let result = "";
2024-08-30T19:43:30.3665047Z                         const shift = 7;
2024-08-30T19:43:30.3665174Z                     
2024-08-30T19:43:30.3665452Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3665677Z                             let c = input[i];
2024-08-30T19:43:30.3665997Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3666402Z                                                               let base = c >= 'a' 
2024-08-30T19:43:30.3666950Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3667249Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3667775Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3668419Z [32m      cy:command ✔ [39m type	&, {force: true}
2024-08-30T19:43:30.3668972Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3669177Z                         let result = "";
2024-08-30T19:43:30.3669363Z                         const shift = 7;
2024-08-30T19:43:30.3669505Z                     
2024-08-30T19:43:30.3669781Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3670003Z                             let c = input[i];
2024-08-30T19:43:30.3670327Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3670748Z                                                               let base = c >= 'a' &
2024-08-30T19:43:30.3673860Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' &"}
2024-08-30T19:43:30.3681107Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3682201Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3682423Z                         let result = "";
2024-08-30T19:43:30.3682639Z                         const shift = 7;
2024-08-30T19:43:30.3682779Z                     
2024-08-30T19:43:30.3683084Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3683318Z                             let c = input[i];
2024-08-30T19:43:30.3683679Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3684289Z                                                               let base = c >= 'a'  -> function solution(input) {
2024-08-30T19:43:30.3684504Z                         let result = "";
2024-08-30T19:43:30.3684702Z                         const shift = 7;
2024-08-30T19:43:30.3684846Z                     
2024-08-30T19:43:30.3685138Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3685349Z                             let c = input[i];
2024-08-30T19:43:30.3685714Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3686125Z                                                               let base = c >= 'a' &
2024-08-30T19:43:30.3686661Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3686984Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3687522Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3687925Z [32m      cy:command ✔ [39m type	&, {force: true}
2024-08-30T19:43:30.3688443Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3688648Z                         let result = "";
2024-08-30T19:43:30.3688870Z                         const shift = 7;
2024-08-30T19:43:30.3689035Z                     
2024-08-30T19:43:30.3689366Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3689585Z                             let c = input[i];
2024-08-30T19:43:30.3690193Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3690656Z                                                               let base = c >= 'a' &&
2024-08-30T19:43:30.3693850Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' &&"}
2024-08-30T19:43:30.3698352Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3699129Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3699387Z                         let result = "";
2024-08-30T19:43:30.3699608Z                         const shift = 7;
2024-08-30T19:43:30.3699767Z                     
2024-08-30T19:43:30.3700290Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3700518Z                             let c = input[i];
2024-08-30T19:43:30.3700944Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3701521Z                                                               let base = c >= 'a' & -> function solution(input) {
2024-08-30T19:43:30.3701760Z                         let result = "";
2024-08-30T19:43:30.3701979Z                         const shift = 7;
2024-08-30T19:43:30.3702131Z                     
2024-08-30T19:43:30.3702446Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3702698Z                             let c = input[i];
2024-08-30T19:43:30.3703116Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3703406Z                                                               let base = c >= 'a' &&
2024-08-30T19:43:30.3703762Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3703971Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3704300Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3704541Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3704883Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3705019Z                         let result = "";
2024-08-30T19:43:30.3705149Z                         const shift = 7;
2024-08-30T19:43:30.3705233Z                     
2024-08-30T19:43:30.3705416Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3705604Z                             let c = input[i];
2024-08-30T19:43:30.3705951Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3706372Z                                                               let base = c >= 'a' && 
2024-08-30T19:43:30.3709810Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && "}
2024-08-30T19:43:30.3716975Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3717568Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3717722Z                         let result = "";
2024-08-30T19:43:30.3717850Z                         const shift = 7;
2024-08-30T19:43:30.3717942Z                     
2024-08-30T19:43:30.3718139Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3718280Z                             let c = input[i];
2024-08-30T19:43:30.3718498Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3718841Z                                                               let base = c >= 'a' && -> function solution(input) {
2024-08-30T19:43:30.3718968Z                         let result = "";
2024-08-30T19:43:30.3719101Z                         const shift = 7;
2024-08-30T19:43:30.3719382Z                     
2024-08-30T19:43:30.3719564Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3719708Z                             let c = input[i];
2024-08-30T19:43:30.3719909Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3720171Z                                                               let base = c >= 'a' && 
2024-08-30T19:43:30.3720511Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3720701Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3721027Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3721268Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.3721600Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3721733Z                         let result = "";
2024-08-30T19:43:30.3721856Z                         const shift = 7;
2024-08-30T19:43:30.3721947Z                     
2024-08-30T19:43:30.3722142Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3722277Z                             let c = input[i];
2024-08-30T19:43:30.3722482Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3722747Z                                                               let base = c >= 'a' && c
2024-08-30T19:43:30.3724587Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c"}
2024-08-30T19:43:30.3729032Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3729503Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3729635Z                         let result = "";
2024-08-30T19:43:30.3729772Z                         const shift = 7;
2024-08-30T19:43:30.3729857Z                     
2024-08-30T19:43:30.3730045Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3730191Z                             let c = input[i];
2024-08-30T19:43:30.3730393Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3730743Z                                                               let base = c >= 'a' &&  -> function solution(input) {
2024-08-30T19:43:30.3730868Z                         let result = "";
2024-08-30T19:43:30.3731207Z                         const shift = 7;
2024-08-30T19:43:30.3731331Z                     
2024-08-30T19:43:30.3731516Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3731650Z                             let c = input[i];
2024-08-30T19:43:30.3731862Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3732121Z                                                               let base = c >= 'a' && c
2024-08-30T19:43:30.3732461Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3732826Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3733144Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3733389Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3733718Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3733854Z                         let result = "";
2024-08-30T19:43:30.3733975Z                         const shift = 7;
2024-08-30T19:43:30.3734060Z                     
2024-08-30T19:43:30.3734244Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3734379Z                             let c = input[i];
2024-08-30T19:43:30.3734583Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3734844Z                                                               let base = c >= 'a' && c 
2024-08-30T19:43:30.3736670Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c "}
2024-08-30T19:43:30.3740995Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3741463Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3741595Z                         let result = "";
2024-08-30T19:43:30.3741884Z                         const shift = 7;
2024-08-30T19:43:30.3741978Z                     
2024-08-30T19:43:30.3742160Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3742356Z                             let c = input[i];
2024-08-30T19:43:30.3742713Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3743065Z                                                               let base = c >= 'a' && c -> function solution(input) {
2024-08-30T19:43:30.3743198Z                         let result = "";
2024-08-30T19:43:30.3743327Z                         const shift = 7;
2024-08-30T19:43:30.3743413Z                     
2024-08-30T19:43:30.3743607Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3743743Z                             let c = input[i];
2024-08-30T19:43:30.3743947Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3744215Z                                                               let base = c >= 'a' && c 
2024-08-30T19:43:30.3744544Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3744733Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3745048Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3745291Z [32m      cy:command ✔ [39m type	<, {force: true}
2024-08-30T19:43:30.3745616Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3745743Z                         let result = "";
2024-08-30T19:43:30.3745874Z                         const shift = 7;
2024-08-30T19:43:30.3745958Z                     
2024-08-30T19:43:30.3746291Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3746428Z                             let c = input[i];
2024-08-30T19:43:30.3746630Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3746906Z                                                               let base = c >= 'a' && c <
2024-08-30T19:43:30.3748723Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <"}
2024-08-30T19:43:30.3753040Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3753489Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3753629Z                         let result = "";
2024-08-30T19:43:30.3753750Z                         const shift = 7;
2024-08-30T19:43:30.3753839Z                     
2024-08-30T19:43:30.3754021Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3754162Z                             let c = input[i];
2024-08-30T19:43:30.3754367Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3754714Z                                                               let base = c >= 'a' && c  -> function solution(input) {
2024-08-30T19:43:30.3754964Z                         let result = "";
2024-08-30T19:43:30.3755098Z                         const shift = 7;
2024-08-30T19:43:30.3755183Z                     
2024-08-30T19:43:30.3755369Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3755508Z                             let c = input[i];
2024-08-30T19:43:30.3755713Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3755982Z                                                               let base = c >= 'a' && c <
2024-08-30T19:43:30.3756308Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3756493Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3756822Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3757070Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.3757408Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3757552Z                         let result = "";
2024-08-30T19:43:30.3757684Z                         const shift = 7;
2024-08-30T19:43:30.3757771Z                     
2024-08-30T19:43:30.3757954Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3758100Z                             let c = input[i];
2024-08-30T19:43:30.3758306Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3758576Z                                                               let base = c >= 'a' && c <=
2024-08-30T19:43:30.3760410Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <="}
2024-08-30T19:43:30.3764936Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3765395Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3765530Z                         let result = "";
2024-08-30T19:43:30.3765658Z                         const shift = 7;
2024-08-30T19:43:30.3765742Z                     
2024-08-30T19:43:30.3765928Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3766066Z                             let c = input[i];
2024-08-30T19:43:30.3766265Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3766625Z                                                               let base = c >= 'a' && c < -> function solution(input) {
2024-08-30T19:43:30.3766752Z                         let result = "";
2024-08-30T19:43:30.3766879Z                         const shift = 7;
2024-08-30T19:43:30.3766963Z                     
2024-08-30T19:43:30.3767141Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3767289Z                             let c = input[i];
2024-08-30T19:43:30.3767485Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3767895Z                                                               let base = c >= 'a' && c <=
2024-08-30T19:43:30.3768235Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3768420Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3768741Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3768978Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3769305Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3769434Z                         let result = "";
2024-08-30T19:43:30.3769555Z                         const shift = 7;
2024-08-30T19:43:30.3769644Z                     
2024-08-30T19:43:30.3769821Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3769963Z                             let c = input[i];
2024-08-30T19:43:30.3770163Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3770437Z                                                               let base = c >= 'a' && c <= 
2024-08-30T19:43:30.3772495Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= "}
2024-08-30T19:43:30.3776832Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3777469Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3777601Z                         let result = "";
2024-08-30T19:43:30.3777731Z                         const shift = 7;
2024-08-30T19:43:30.3777817Z                     
2024-08-30T19:43:30.3777999Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3778145Z                             let c = input[i];
2024-08-30T19:43:30.3778357Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3779033Z                                                               let base = c >= 'a' && c <= -> function solution(input) {
2024-08-30T19:43:30.3779347Z                         let result = "";
2024-08-30T19:43:30.3779479Z                         const shift = 7;
2024-08-30T19:43:30.3779569Z                     
2024-08-30T19:43:30.3779753Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3779891Z                             let c = input[i];
2024-08-30T19:43:30.3780109Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3780382Z                                                               let base = c >= 'a' && c <= 
2024-08-30T19:43:30.3780724Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3780911Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3781237Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3781485Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.3781811Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3781959Z                         let result = "";
2024-08-30T19:43:30.3782082Z                         const shift = 7;
2024-08-30T19:43:30.3782168Z                     
2024-08-30T19:43:30.3782356Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3782497Z                             let c = input[i];
2024-08-30T19:43:30.3782698Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3782972Z                                                               let base = c >= 'a' && c <= '
2024-08-30T19:43:30.3784804Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= '"}
2024-08-30T19:43:30.3789135Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3789726Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3789856Z                         let result = "";
2024-08-30T19:43:30.3789988Z                         const shift = 7;
2024-08-30T19:43:30.3790081Z                     
2024-08-30T19:43:30.3790262Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3790405Z                             let c = input[i];
2024-08-30T19:43:30.3790608Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3790964Z                                                               let base = c >= 'a' && c <=  -> function solution(input) {
2024-08-30T19:43:30.3791093Z                         let result = "";
2024-08-30T19:43:30.3791213Z                         const shift = 7;
2024-08-30T19:43:30.3791296Z                     
2024-08-30T19:43:30.3791479Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3791621Z                             let c = input[i];
2024-08-30T19:43:30.3791816Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3792209Z                                                               let base = c >= 'a' && c <= '
2024-08-30T19:43:30.3792537Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3792727Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3793047Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3793291Z [32m      cy:command ✔ [39m type	z, {force: true}
2024-08-30T19:43:30.3793611Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3793738Z                         let result = "";
2024-08-30T19:43:30.3793870Z                         const shift = 7;
2024-08-30T19:43:30.3793953Z                     
2024-08-30T19:43:30.3794130Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3794284Z                             let c = input[i];
2024-08-30T19:43:30.3794477Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3794749Z                                                               let base = c >= 'a' && c <= 'z
2024-08-30T19:43:30.3796574Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z"}
2024-08-30T19:43:30.3801109Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3801596Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3801732Z                         let result = "";
2024-08-30T19:43:30.3801855Z                         const shift = 7;
2024-08-30T19:43:30.3801948Z                     
2024-08-30T19:43:30.3802131Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3802266Z                             let c = input[i];
2024-08-30T19:43:30.3802641Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3802998Z                                                               let base = c >= 'a' && c <= ' -> function solution(input) {
2024-08-30T19:43:30.3803128Z                         let result = "";
2024-08-30T19:43:30.3803257Z                         const shift = 7;
2024-08-30T19:43:30.3803341Z                     
2024-08-30T19:43:30.3803517Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3803658Z                             let c = input[i];
2024-08-30T19:43:30.3803853Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3804130Z                                                               let base = c >= 'a' && c <= 'z
2024-08-30T19:43:30.3804450Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3804630Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3804956Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3805192Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.3805527Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3805780Z                         let result = "";
2024-08-30T19:43:30.3805907Z                         const shift = 7;
2024-08-30T19:43:30.3805999Z                     
2024-08-30T19:43:30.3806176Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3806314Z                             let c = input[i];
2024-08-30T19:43:30.3806511Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3806788Z                                                               let base = c >= 'a' && c <= 'z'
2024-08-30T19:43:30.3808627Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z'"}
2024-08-30T19:43:30.3813200Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3813684Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3813820Z                         let result = "";
2024-08-30T19:43:30.3813949Z                         const shift = 7;
2024-08-30T19:43:30.3814033Z                     
2024-08-30T19:43:30.3814222Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3814363Z                             let c = input[i];
2024-08-30T19:43:30.3814565Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3814941Z                                                               let base = c >= 'a' && c <= 'z -> function solution(input) {
2024-08-30T19:43:30.3815064Z                         let result = "";
2024-08-30T19:43:30.3815186Z                         const shift = 7;
2024-08-30T19:43:30.3815276Z                     
2024-08-30T19:43:30.3815451Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3815769Z                             let c = input[i];
2024-08-30T19:43:30.3815970Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3816254Z                                                               let base = c >= 'a' && c <= 'z'
2024-08-30T19:43:30.3816589Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3816775Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3817100Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3817337Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.3817658Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3817796Z                         let result = "";
2024-08-30T19:43:30.3817918Z                         const shift = 7;
2024-08-30T19:43:30.3818007Z                     
2024-08-30T19:43:30.3818188Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3818337Z                             let c = input[i];
2024-08-30T19:43:30.3818542Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3818821Z                                                               let base = c >= 'a' && c <= 'z' 
2024-08-30T19:43:30.3821443Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' "}
2024-08-30T19:43:30.3827915Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3828906Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3829089Z                         let result = "";
2024-08-30T19:43:30.3829229Z                         const shift = 7;
2024-08-30T19:43:30.3829318Z                     
2024-08-30T19:43:30.3829509Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3829656Z                             let c = input[i];
2024-08-30T19:43:30.3829897Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3830269Z                                                               let base = c >= 'a' && c <= 'z' -> function solution(input) {
2024-08-30T19:43:30.3830418Z                         let result = "";
2024-08-30T19:43:30.3830543Z                         const shift = 7;
2024-08-30T19:43:30.3830637Z                     
2024-08-30T19:43:30.3830820Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3830956Z                             let c = input[i];
2024-08-30T19:43:30.3831159Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3831433Z                                                               let base = c >= 'a' && c <= 'z' 
2024-08-30T19:43:30.3831798Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3832165Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3832792Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3833056Z [32m      cy:command ✔ [39m type	?, {force: true}
2024-08-30T19:43:30.3833393Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.3833579Z                         let result = "";
2024-08-30T19:43:30.3833704Z                         const shift = 7;
2024-08-30T19:43:30.3833790Z                     
2024-08-30T19:43:30.3833980Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3834118Z                             let c = input[i];
2024-08-30T19:43:30.3834322Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3834609Z                                                               let base = c >= 'a' && c <= 'z' ?
2024-08-30T19:43:30.3836747Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.3843541Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3844524Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3844786Z                         let result = "";
2024-08-30T19:43:30.3845012Z                         const shift = 7;
2024-08-30T19:43:30.3845158Z                     
2024-08-30T19:43:30.3845463Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3845690Z                             let c = input[i];
2024-08-30T19:43:30.3846093Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3846729Z                                                               let base = c >= 'a' && c <= 'z'  -> function solution(input) {
2024-08-30T19:43:30.3846959Z                         let result = "";
2024-08-30T19:43:30.3847175Z                         const shift = 7;
2024-08-30T19:43:30.3847321Z                     
2024-08-30T19:43:30.3847621Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3847850Z                             let c = input[i];
2024-08-30T19:43:30.3848221Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3848734Z                                                               let base = c >= 'a' && c <= 'z' ?
2024-08-30T19:43:30.3849234Z [32m      cy:command ✔ [39m get	#coderunner-run-button
2024-08-30T19:43:30.3850427Z [32m      cy:command ✔ [39m assert	expected **<button#coderunner-run-button.p-button.p-component>** to be **enabled**
2024-08-30T19:43:30.3850953Z [32m      cy:command ✔ [39m get	#coderunner-run-button
2024-08-30T19:43:30.3852300Z [32m      cy:command ✔ [39m assert	expected **<button#coderunner-run-button.p-button.p-component>** to be **visible**
2024-08-30T19:43:30.3852858Z [32m      cy:command ✔ [39m get	#coderunner-run-button
2024-08-30T19:43:30.3853197Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.3853607Z [37m        cons:log ✱ [39m On run code
2024-08-30T19:43:30.3862082Z [37m        cons:log ✱ [39m exerciseCreatorController: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n   ...
2024-08-30T19:43:30.3869162Z [37m        cons:log ✱ [39m runSignleExerciseCreationTest: {"code":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?","manualTests":[{"input":"\"A\"","output":null,"expectedOutput":"\"H\"","errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"","executionTime":-1},{"input":"\"a\"","output":null,"expectedOutput":"\"h\"","errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"","executionTime":-1},{"input":"\"The quick brown fox jumps over a lazy dog\"","output":null,"expectedOutput":"\"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn\"","errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"","execution ...
2024-08-30T19:43:30.3869944Z [37m        cons:log ✱ [39m desitn: /public/app/CodeRun/ExerciseCodeTests
2024-08-30T19:43:30.3876986Z [37m        cons:log ✱ [39m published {"destination":"/public/app/CodeRun/ExerciseCodeTests","body":"{\"code\":\"function solution(input) {\\n    let result = \\\"\\\";\\n    const shift = 7;\\n\\n    for (let i = 0; i < input.length; i++) {\\n        let c = input[i];\\n        if (/[a-zA-Z]/.test(c)) {\\n                                          let base = c >= 'a' && c <= 'z' ?\",\"manualTests\":[{\"input\":\"\\\"A\\\"\",\"output\":null,\"expectedOutput\":\"\\\"H\\\"\",\"errorOutput\":\"\",\"consoleOutput\":\"\",\"isSolved\":null,\"uuid\":\"\",\"executionTime\":-1},{\"input\":\"\\\"a\\\"\",\"output\":null,\"expectedOutput\":\"\\\"h\\\"\",\"errorOutput\":\"\",\"consoleOutput\":\"\",\"isSolved\":null,\"uuid\":\"\",\"executionTime\":-1},{\"input\":\"\\\"The quick brown fox jumps over a lazy dog\\\"\",\"output\":null, ...
2024-08-30T19:43:30.3877559Z [32m      cy:command ✔ [39m get	#testResultStatus_0
2024-08-30T19:43:30.3878549Z [32m      cy:command ✔ [39m assert	expected **<div#testResultStatus_0.statusSector>** to have text **Failed**
2024-08-30T19:43:30.3878773Z                     Actual: 	"Failed"
2024-08-30T19:43:30.3878978Z                     Expected: 	"Failed"
2024-08-30T19:43:30.3879905Z [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerResults
2024-08-30T19:43:30.3887480Z [37m        cons:log ✱ [39m _CodeResultsCallBack recived  {"results":[{"consoleOutput":{"exitCode":0,"output":null,"errorOutput":"/app/8de5c8d8-14e9-4417-82ab-41203584d60c.js:16\n const outputGenerator_9350093b6d1e4d10aaa8c6f1de65b50c_fs = require('fs');\n ^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at internalCompileFunction (node:internal/vm:77:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1290:20)\n    at Module._compile (node:internal/modules/cjs/loader:1342:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:4 ...
2024-08-30T19:43:30.3888231Z [37m        cons:log ✱ [39m ---------------------------------------------------
2024-08-30T19:43:30.3888725Z                     
2024-08-30T19:43:30.3889382Z [37m        cons:log ✱ [39m create test langauge update: "JS_RUNNER"
2024-08-30T19:43:30.3897418Z [37m        cons:log ✱ [39m create test rtesult update: [{"consoleOutput":{"exitCode":0,"output":null,"errorOutput":"/app/8de5c8d8-14e9-4417-82ab-41203584d60c.js:16\n const outputGenerator_9350093b6d1e4d10aaa8c6f1de65b50c_fs = require('fs');\n ^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at internalCompileFunction (node:internal/vm:77:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1290:20)\n    at Module._compile (node:internal/modules/cjs/loader:1342:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js  ...
2024-08-30T19:43:30.3898144Z [37m        cons:log ✱ [39m ---------------------------------------------------
2024-08-30T19:43:30.3898300Z                     
2024-08-30T19:43:30.3905782Z [37m        cons:log ✱ [39m ---isSolved values: {"CPP_RUNNER":{"tests":[{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":-1},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":" ...
2024-08-30T19:43:30.3913008Z [37m        cons:log ✱ [39m ---isSolved values amont: : 2 : [{"tests":[{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":-1},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"e ...
2024-08-30T19:43:30.3914864Z [37m        cons:log ✱ [39m test: {"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1}
2024-08-30T19:43:30.3915316Z [37m        cons:log ✱ [39m false
2024-08-30T19:43:30.3923230Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.3924048Z [32m      cy:command ✔ [39m get	#testResultStatus_1
2024-08-30T19:43:30.3924951Z [32m      cy:command ✔ [39m assert	expected **<div#testResultStatus_1.statusSector>** to be **empty**
2024-08-30T19:43:30.3925430Z [32m      cy:command ✔ [39m get	#testResultStatus_2
2024-08-30T19:43:30.3926297Z [32m      cy:command ✔ [39m assert	expected **<div#testResultStatus_2.statusSector>** to be **empty**
2024-08-30T19:43:30.3926717Z [32m      cy:command ✔ [39m get	#testResultStatus_3
2024-08-30T19:43:30.3927586Z [32m      cy:command ✔ [39m assert	expected **<div#testResultStatus_3.statusSector>** to be **empty**
2024-08-30T19:43:30.3928126Z [32m      cy:command ✔ [39m get	#coderunner-langage-dropdown
2024-08-30T19:43:30.3928460Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.3928923Z [32m      cy:command ✔ [39m get	.p-dropdown-item
2024-08-30T19:43:30.3929278Z [32m      cy:command ✔ [39m contains	cpp
2024-08-30T19:43:30.3929616Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.3930082Z [37m        cons:log ✱ [39m test change: CPP_RUNNER
2024-08-30T19:43:30.3930445Z [32m      cy:command ✔ [39m get	.p-button
2024-08-30T19:43:30.3930853Z [32m      cy:command ✔ [39m contains	span, Change
2024-08-30T19:43:30.3932416Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.3932974Z [37m        cons:log ✱ [39m  confirm change: CPP_RUNNER
2024-08-30T19:43:30.3933348Z [37m        cons:log ✱ [39m set awaitng
2024-08-30T19:43:30.3934975Z [37m        cons:log ✱ [39m {"__v_isShallow":false,"dep":{},"__v_isRef":true,"_rawValue":{"codeRunnerType":"JS_RUNNER","state":"ACTIVE"},"_value":{"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}}
2024-08-30T19:43:30.3935692Z [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"AWAITING"}
2024-08-30T19:43:30.3936202Z [37m        cons:log ✱ [39m codeRunnerName: "CPP_RUNNER"
2024-08-30T19:43:30.3936896Z [37m        cons:log ✱ [39m requestCodeRunner: {"CodeRunnerType":"CPP_RUNNER"}
2024-08-30T19:43:30.3937584Z [37m        cons:log ✱ [39m codeRunnerRequest: {"CodeRunnerType":"CPP_RUNNER"}
2024-08-30T19:43:30.3938169Z [37m        cons:log ✱ [39m desitn: /public/app/codeRunnerRequest
2024-08-30T19:43:30.3939303Z [37m        cons:log ✱ [39m published {"destination":"/public/app/codeRunnerRequest","body":"{\"CodeRunnerType\":\"CPP_RUNNER\"}"}
2024-08-30T19:43:30.3939820Z [32m      cy:command ✔ [39m get	#coderunner-loading-dialog
2024-08-30T19:43:30.3940661Z [32m      cy:command ✔ [39m assert	expected **#coderunner-loading-dialog** not to exist in the DOM
2024-08-30T19:43:30.3941069Z                     Actual: 	"#coderunner-loading-dialog"
2024-08-30T19:43:30.3941461Z                     Expected: 	"#coderunner-loading-dialog"
2024-08-30T19:43:30.3942299Z [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
2024-08-30T19:43:30.3943239Z [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:30.3943763Z [37m        cons:log ✱ [39m typeof this.eventHandlers  object
2024-08-30T19:43:30.3944449Z [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
2024-08-30T19:43:30.3944781Z [37m        cons:log ✱ [39m length  1
2024-08-30T19:43:30.3945091Z [37m        cons:log ✱ [39m |Test
2024-08-30T19:43:30.3945648Z [37m        cons:log ✱ [39m {"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:30.3946307Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.3946527Z                         let result = "";
2024-08-30T19:43:30.3946721Z                         const shift = 7;
2024-08-30T19:43:30.3946850Z                     
2024-08-30T19:43:30.3947143Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.3947358Z                             let c = input[i];
2024-08-30T19:43:30.3947684Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.3948521Z                                                               let base = c >= 'a' && c <= 'z' ? -> #include <string>
2024-08-30T19:43:30.3948799Z                     std::string solution(std::string x){
2024-08-30T19:43:30.3948991Z                      //your solution 
2024-08-30T19:43:30.3949125Z                     }
2024-08-30T19:43:30.3949878Z [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
2024-08-30T19:43:30.3950628Z [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:30.3951087Z [37m        cons:log ✱ [39m typeof this.eventHandlers  object
2024-08-30T19:43:30.3951768Z [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
2024-08-30T19:43:30.3952092Z [37m        cons:log ✱ [39m length  1
2024-08-30T19:43:30.3952395Z [37m        cons:log ✱ [39m |Test
2024-08-30T19:43:30.3952992Z [37m        cons:log ✱ [39m {"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:30.3953389Z [32m      cy:command ✔ [39m get	#code-preview
2024-08-30T19:43:30.3953773Z [32m      cy:command ✔ [39m invoke	.text()
2024-08-30T19:43:30.3955632Z [32m      cy:command ✔ [39m assert	expected **#include <string>\nstd::string solution(std::string x){\n //your solution \n}** to include **std::string solution(std::string x)**
2024-08-30T19:43:30.3955985Z [32m      cy:command ✔ [39m wait	1000
2024-08-30T19:43:30.3956506Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3956788Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3957079Z [32m      cy:command ✔ [39m wait	1000
2024-08-30T19:43:30.3957622Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3958213Z [32m      cy:command ✔ [39m type	{selectAll}{backspace}, {force: true}
2024-08-30T19:43:30.3958598Z [37m        cons:log ✱ [39m codee update: 
2024-08-30T19:43:30.3961002Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.3968216Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c ...
2024-08-30T19:43:30.3968985Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <string>
2024-08-30T19:43:30.3969357Z                     std::string solution(std::string x){
2024-08-30T19:43:30.3969591Z                      //your solution 
2024-08-30T19:43:30.3969810Z                     } -> 
2024-08-30T19:43:30.3970214Z [32m      cy:command ✔ [39m get	#code-preview
2024-08-30T19:43:30.3970593Z [32m      cy:command ✔ [39m invoke	.text()
2024-08-30T19:43:30.3971298Z [32m      cy:command ✔ [39m assert	expected **''** to be empty
2024-08-30T19:43:30.3971901Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3972227Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3972793Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3973212Z [32m      cy:command ✔ [39m type	#, {force: true}
2024-08-30T19:43:30.3973880Z [37m        cons:log ✱ [39m codee update: #
2024-08-30T19:43:30.3976417Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.3983994Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let  ...
2024-08-30T19:43:30.3984630Z [37m        cons:log ✱ [39m props chahned-----------------------:  -> #
2024-08-30T19:43:30.3985275Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3985780Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3986588Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3987179Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.3987566Z [37m        cons:log ✱ [39m codee update: #i
2024-08-30T19:43:30.3990176Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.3997385Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let ...
2024-08-30T19:43:30.3998138Z [37m        cons:log ✱ [39m props chahned-----------------------: # -> #i
2024-08-30T19:43:30.3998707Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3998996Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.3999520Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.3999941Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.4000329Z [37m        cons:log ✱ [39m codee update: #in
2024-08-30T19:43:30.4002831Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4010107Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        le ...
2024-08-30T19:43:30.4011409Z [37m        cons:log ✱ [39m props chahned-----------------------: #i -> #in
2024-08-30T19:43:30.4012071Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4012425Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4013013Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4013447Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.4013858Z [37m        cons:log ✱ [39m codee update: #inc
2024-08-30T19:43:30.4016716Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#inc","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4024350Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#inc","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        l ...
2024-08-30T19:43:30.4025045Z [37m        cons:log ✱ [39m props chahned-----------------------: #in -> #inc
2024-08-30T19:43:30.4025606Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4025954Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4026490Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4026947Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.4027383Z [37m        cons:log ✱ [39m codee update: #incl
2024-08-30T19:43:30.4029965Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#incl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4037507Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#incl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n         ...
2024-08-30T19:43:30.4038637Z [37m        cons:log ✱ [39m props chahned-----------------------: #inc -> #incl
2024-08-30T19:43:30.4039271Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4039624Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4040193Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4040651Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.4041078Z [37m        cons:log ✱ [39m codee update: #inclu
2024-08-30T19:43:30.4043609Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#inclu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4051636Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#inclu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        ...
2024-08-30T19:43:30.4052428Z [37m        cons:log ✱ [39m props chahned-----------------------: #incl -> #inclu
2024-08-30T19:43:30.4053045Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4053375Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4053944Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4054406Z [32m      cy:command ✔ [39m type	d, {force: true}
2024-08-30T19:43:30.4054838Z [37m        cons:log ✱ [39m codee update: #includ
2024-08-30T19:43:30.4057476Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#includ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4065037Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#includ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n       ...
2024-08-30T19:43:30.4065971Z [37m        cons:log ✱ [39m props chahned-----------------------: #inclu -> #includ
2024-08-30T19:43:30.4066551Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4066879Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4067391Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4067865Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.4068603Z [37m        cons:log ✱ [39m codee update: #include
2024-08-30T19:43:30.4071304Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4079050Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n      ...
2024-08-30T19:43:30.4079882Z [37m        cons:log ✱ [39m props chahned-----------------------: #includ -> #include
2024-08-30T19:43:30.4080514Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4080902Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4081514Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4082394Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.4082881Z [37m        cons:log ✱ [39m codee update: #include 
2024-08-30T19:43:30.4085565Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4094137Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n     ...
2024-08-30T19:43:30.4094994Z [37m        cons:log ✱ [39m props chahned-----------------------: #include -> #include 
2024-08-30T19:43:30.4095593Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4095947Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4096518Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4096963Z [32m      cy:command ✔ [39m type	<, {force: true}
2024-08-30T19:43:30.4097422Z [37m        cons:log ✱ [39m codee update: #include <
2024-08-30T19:43:30.4099914Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4107215Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n    ...
2024-08-30T19:43:30.4108306Z [37m        cons:log ✱ [39m props chahned-----------------------: #include  -> #include <
2024-08-30T19:43:30.4108895Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4109283Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4109855Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4110281Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.4111019Z [37m        cons:log ✱ [39m codee update: #include <i
2024-08-30T19:43:30.4113733Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4121301Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n   ...
2024-08-30T19:43:30.4122133Z [37m        cons:log ✱ [39m props chahned-----------------------: #include < -> #include <i
2024-08-30T19:43:30.4122723Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4123082Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4123627Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4124040Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.4124544Z [37m        cons:log ✱ [39m codee update: #include <io
2024-08-30T19:43:30.4127267Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <io","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4134884Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <io","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n  ...
2024-08-30T19:43:30.4136136Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <i -> #include <io
2024-08-30T19:43:30.4136724Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4137052Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4137564Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4137970Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.4138426Z [37m        cons:log ✱ [39m codee update: #include <ios
2024-08-30T19:43:30.4141088Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <ios","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4148799Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <ios","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n ...
2024-08-30T19:43:30.4149758Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <io -> #include <ios
2024-08-30T19:43:30.4150370Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4150769Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4151383Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4151820Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4152374Z [37m        cons:log ✱ [39m codee update: #include <iost
2024-08-30T19:43:30.4155003Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iost","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4162370Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iost","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\ ...
2024-08-30T19:43:30.4163280Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <ios -> #include <iost
2024-08-30T19:43:30.4163831Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4164489Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4165011Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4165444Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.4165911Z [37m        cons:log ✱ [39m codee update: #include <iostr
2024-08-30T19:43:30.4168478Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostr","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4176071Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostr","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) { ...
2024-08-30T19:43:30.4176955Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iost -> #include <iostr
2024-08-30T19:43:30.4177523Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4177841Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4178393Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4178812Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.4179320Z [37m        cons:log ✱ [39m codee update: #include <iostre
2024-08-30T19:43:30.4181966Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostre","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4189556Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostre","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++)  ...
2024-08-30T19:43:30.4190752Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostr -> #include <iostre
2024-08-30T19:43:30.4191356Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4191691Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4192247Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4192671Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.4193176Z [37m        cons:log ✱ [39m codee update: #include <iostrea
2024-08-30T19:43:30.4195867Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostrea","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4203723Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostrea","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) ...
2024-08-30T19:43:30.4204745Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostre -> #include <iostrea
2024-08-30T19:43:30.4205368Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4205953Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4206587Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4207064Z [32m      cy:command ✔ [39m type	m, {force: true}
2024-08-30T19:43:30.4207591Z [37m        cons:log ✱ [39m codee update: #include <iostream
2024-08-30T19:43:30.4210214Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4218103Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++ ...
2024-08-30T19:43:30.4219118Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostrea -> #include <iostream
2024-08-30T19:43:30.4219806Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4220214Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4220816Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4221256Z [32m      cy:command ✔ [39m type	>, {force: true}
2024-08-30T19:43:30.4221808Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4224530Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4231821Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i+ ...
2024-08-30T19:43:30.4233169Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream -> #include <iostream>
2024-08-30T19:43:30.4233838Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4234217Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4234810Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4235180Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.4235404Z                     , {force: true}
2024-08-30T19:43:30.4235964Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4236142Z                     
2024-08-30T19:43:30.4239164Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4244244Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length;  ...
2024-08-30T19:43:30.4244849Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream> -> #include <iostream>
2024-08-30T19:43:30.4244946Z                     
2024-08-30T19:43:30.4245289Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4245480Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4245807Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4246051Z [32m      cy:command ✔ [39m type	#, {force: true}
2024-08-30T19:43:30.4246369Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4246469Z                     #
2024-08-30T19:43:30.4248001Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4252520Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; ...
2024-08-30T19:43:30.4253212Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4253405Z                      -> #include <iostream>
2024-08-30T19:43:30.4253504Z                     #
2024-08-30T19:43:30.4253834Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4254019Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4254334Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4254579Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.4254874Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4254980Z                     #i
2024-08-30T19:43:30.4256667Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4260751Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length ...
2024-08-30T19:43:30.4261185Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4261374Z                     # -> #include <iostream>
2024-08-30T19:43:30.4261467Z                     #i
2024-08-30T19:43:30.4261788Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4261968Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4262279Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4262523Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.4262815Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4262907Z                     #in
2024-08-30T19:43:30.4264493Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4268590Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.lengt ...
2024-08-30T19:43:30.4269152Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4269352Z                     #i -> #include <iostream>
2024-08-30T19:43:30.4269447Z                     #in
2024-08-30T19:43:30.4269772Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4269954Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4270271Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4270512Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.4270807Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4270904Z                     #inc
2024-08-30T19:43:30.4272437Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#inc","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4276643Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#inc","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.leng ...
2024-08-30T19:43:30.4277080Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4277287Z                     #in -> #include <iostream>
2024-08-30T19:43:30.4277383Z                     #inc
2024-08-30T19:43:30.4277701Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4277882Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4278199Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4278436Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.4278728Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4278827Z                     #incl
2024-08-30T19:43:30.4280556Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#incl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4284680Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#incl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.len ...
2024-08-30T19:43:30.4285265Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4285466Z                     #inc -> #include <iostream>
2024-08-30T19:43:30.4285561Z                     #incl
2024-08-30T19:43:30.4285889Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4286071Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4286387Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4286628Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.4286923Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4287018Z                     #inclu
2024-08-30T19:43:30.4288551Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#inclu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4293001Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#inclu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.le ...
2024-08-30T19:43:30.4293478Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4293683Z                     #incl -> #include <iostream>
2024-08-30T19:43:30.4293784Z                     #inclu
2024-08-30T19:43:30.4294109Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4294508Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4294946Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4295194Z [32m      cy:command ✔ [39m type	d, {force: true}
2024-08-30T19:43:30.4295487Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4295581Z                     #includ
2024-08-30T19:43:30.4297127Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#includ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4302294Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#includ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.l ...
2024-08-30T19:43:30.4302838Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4303295Z                     #inclu -> #include <iostream>
2024-08-30T19:43:30.4303401Z                     #includ
2024-08-30T19:43:30.4303739Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4303937Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4304253Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4304494Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.4304793Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4304893Z                     #include
2024-08-30T19:43:30.4306454Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4310670Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input. ...
2024-08-30T19:43:30.4311104Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4311318Z                     #includ -> #include <iostream>
2024-08-30T19:43:30.4311418Z                     #include
2024-08-30T19:43:30.4311744Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4311945Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4312261Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4312507Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.4312809Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4312912Z                     #include 
2024-08-30T19:43:30.4314481Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4318731Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input ...
2024-08-30T19:43:30.4319147Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4319355Z                     #include -> #include <iostream>
2024-08-30T19:43:30.4319466Z                     #include 
2024-08-30T19:43:30.4319786Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4319977Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4320292Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4320530Z [32m      cy:command ✔ [39m type	<, {force: true}
2024-08-30T19:43:30.4320822Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4320936Z                     #include <
2024-08-30T19:43:30.4322478Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4326642Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < inpu ...
2024-08-30T19:43:30.4327072Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4327282Z                     #include  -> #include <iostream>
2024-08-30T19:43:30.4327402Z                     #include <
2024-08-30T19:43:30.4327719Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4327905Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4328217Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4328456Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.4328744Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4328855Z                     #include <s
2024-08-30T19:43:30.4330427Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4334781Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < inp ...
2024-08-30T19:43:30.4335414Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4335636Z                     #include < -> #include <iostream>
2024-08-30T19:43:30.4335745Z                     #include <s
2024-08-30T19:43:30.4336075Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4336270Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4336576Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4336824Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4337110Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4337224Z                     #include <st
2024-08-30T19:43:30.4338787Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4343000Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < in ...
2024-08-30T19:43:30.4343436Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4343662Z                     #include <s -> #include <iostream>
2024-08-30T19:43:30.4343772Z                     #include <st
2024-08-30T19:43:30.4344093Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4344280Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4344584Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4344836Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.4345121Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4345237Z                     #include <str
2024-08-30T19:43:30.4346842Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4350942Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < i ...
2024-08-30T19:43:30.4351494Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4351721Z                     #include <st -> #include <iostream>
2024-08-30T19:43:30.4351834Z                     #include <str
2024-08-30T19:43:30.4352154Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4352348Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4352655Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4352897Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.4353190Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4353307Z                     #include <stri
2024-08-30T19:43:30.4354887Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4359080Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i <  ...
2024-08-30T19:43:30.4359501Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4359730Z                     #include <str -> #include <iostream>
2024-08-30T19:43:30.4359845Z                     #include <stri
2024-08-30T19:43:30.4360165Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4360359Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4360665Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4360912Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.4361207Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4361331Z                     #include <strin
2024-08-30T19:43:30.4362910Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4367006Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < ...
﻿2024-08-30T19:43:30.4371232Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4371651Z                     #include <stri -> #include <iostream>
2024-08-30T19:43:30.4371850Z                     #include <strin
2024-08-30T19:43:30.4372443Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4372810Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4373418Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4373915Z [32m      cy:command ✔ [39m type	g, {force: true}
2024-08-30T19:43:30.4374487Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4374719Z                     #include <string
2024-08-30T19:43:30.4377073Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4381549Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i  ...
2024-08-30T19:43:30.4382013Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4382258Z                     #include <strin -> #include <iostream>
2024-08-30T19:43:30.4382386Z                     #include <string
2024-08-30T19:43:30.4382716Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4382909Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4383220Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4383465Z [32m      cy:command ✔ [39m type	>, {force: true}
2024-08-30T19:43:30.4383765Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4383893Z                     #include <string>
2024-08-30T19:43:30.4385499Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4389594Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i ...
2024-08-30T19:43:30.4390100Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4390485Z                     #include <string -> #include <iostream>
2024-08-30T19:43:30.4390607Z                     #include <string>
2024-08-30T19:43:30.4390929Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4391122Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4391429Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4391614Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.4391730Z                     , {force: true}
2024-08-30T19:43:30.4392030Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4392158Z                     #include <string>
2024-08-30T19:43:30.4392245Z                     
2024-08-30T19:43:30.4393859Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4398070Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; ...
2024-08-30T19:43:30.4398500Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4398734Z                     #include <string> -> #include <iostream>
2024-08-30T19:43:30.4398859Z                     #include <string>
2024-08-30T19:43:30.4398948Z                     
2024-08-30T19:43:30.4399267Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4399452Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4399757Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4399947Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.4400065Z                     , {force: true}
2024-08-30T19:43:30.4400350Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4400476Z                     #include <string>
2024-08-30T19:43:30.4400559Z                     
2024-08-30T19:43:30.4400651Z                     
2024-08-30T19:43:30.4402263Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4406458Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i =  ...
2024-08-30T19:43:30.4406948Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4407090Z                     #include <string>
2024-08-30T19:43:30.4407269Z                      -> #include <iostream>
2024-08-30T19:43:30.4407391Z                     #include <string>
2024-08-30T19:43:30.4407484Z                     
2024-08-30T19:43:30.4407573Z                     
2024-08-30T19:43:30.4407910Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4408094Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4408405Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4408652Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.4408940Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4409079Z                     #include <string>
2024-08-30T19:43:30.4409165Z                     
2024-08-30T19:43:30.4409253Z                     s
2024-08-30T19:43:30.4410890Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\ns","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4415478Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\ns","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = ...
2024-08-30T19:43:30.4415930Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4416074Z                     #include <string>
2024-08-30T19:43:30.4416160Z                     
2024-08-30T19:43:30.4416346Z                      -> #include <iostream>
2024-08-30T19:43:30.4416473Z                     #include <string>
2024-08-30T19:43:30.4416557Z                     
2024-08-30T19:43:30.4416641Z                     s
2024-08-30T19:43:30.4416971Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4417157Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4417470Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4417713Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4418008Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4418225Z                     #include <string>
2024-08-30T19:43:30.4418310Z                     
2024-08-30T19:43:30.4418402Z                     st
2024-08-30T19:43:30.4420039Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nst","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4424117Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nst","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i  ...
2024-08-30T19:43:30.4424614Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4424742Z                     #include <string>
2024-08-30T19:43:30.4424825Z                     
2024-08-30T19:43:30.4425007Z                     s -> #include <iostream>
2024-08-30T19:43:30.4425138Z                     #include <string>
2024-08-30T19:43:30.4425221Z                     
2024-08-30T19:43:30.4425311Z                     st
2024-08-30T19:43:30.4425629Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4425813Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4426131Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4426370Z [32m      cy:command ✔ [39m type	d, {force: true}
2024-08-30T19:43:30.4426788Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4426912Z                     #include <string>
2024-08-30T19:43:30.4426995Z                     
2024-08-30T19:43:30.4427088Z                     std
2024-08-30T19:43:30.4428739Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4432854Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i ...
2024-08-30T19:43:30.4433279Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4433404Z                     #include <string>
2024-08-30T19:43:30.4433487Z                     
2024-08-30T19:43:30.4433677Z                     st -> #include <iostream>
2024-08-30T19:43:30.4433865Z                     #include <string>
2024-08-30T19:43:30.4433949Z                     
2024-08-30T19:43:30.4434041Z                     std
2024-08-30T19:43:30.4434364Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4434562Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4444125Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4444374Z [32m      cy:command ✔ [39m type	:, {force: true}
2024-08-30T19:43:30.4444672Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4444805Z                     #include <string>
2024-08-30T19:43:30.4444988Z                     
2024-08-30T19:43:30.4445078Z                     std:
2024-08-30T19:43:30.4446741Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4450854Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let  ...
2024-08-30T19:43:30.4451543Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4451672Z                     #include <string>
2024-08-30T19:43:30.4451762Z                     
2024-08-30T19:43:30.4452152Z                     std -> #include <iostream>
2024-08-30T19:43:30.4452279Z                     #include <string>
2024-08-30T19:43:30.4452368Z                     
2024-08-30T19:43:30.4452455Z                     std:
2024-08-30T19:43:30.4452787Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4452979Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4453294Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4453544Z [32m      cy:command ✔ [39m type	:, {force: true}
2024-08-30T19:43:30.4453832Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4453954Z                     #include <string>
2024-08-30T19:43:30.4454055Z                     
2024-08-30T19:43:30.4454162Z                     std::
2024-08-30T19:43:30.4455945Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4460260Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let ...
2024-08-30T19:43:30.4460776Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4460900Z                     #include <string>
2024-08-30T19:43:30.4460992Z                     
2024-08-30T19:43:30.4461187Z                     std: -> #include <iostream>
2024-08-30T19:43:30.4461305Z                     #include <string>
2024-08-30T19:43:30.4461478Z                     
2024-08-30T19:43:30.4461571Z                     std::
2024-08-30T19:43:30.4461896Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4462078Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4462385Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4462637Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.4462923Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4463049Z                     #include <string>
2024-08-30T19:43:30.4463144Z                     
2024-08-30T19:43:30.4463237Z                     std::s
2024-08-30T19:43:30.4464980Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4470590Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (le ...
2024-08-30T19:43:30.4471138Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4471289Z                     #include <string>
2024-08-30T19:43:30.4471378Z                     
2024-08-30T19:43:30.4471591Z                     std:: -> #include <iostream>
2024-08-30T19:43:30.4471719Z                     #include <string>
2024-08-30T19:43:30.4471808Z                     
2024-08-30T19:43:30.4471902Z                     std::s
2024-08-30T19:43:30.4472242Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4472428Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4472760Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4473006Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4473301Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4473428Z                     #include <string>
2024-08-30T19:43:30.4473513Z                     
2024-08-30T19:43:30.4473610Z                     std::st
2024-08-30T19:43:30.4475353Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4479802Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (l ...
2024-08-30T19:43:30.4480292Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4480433Z                     #include <string>
2024-08-30T19:43:30.4480519Z                     
2024-08-30T19:43:30.4480726Z                     std::s -> #include <iostream>
2024-08-30T19:43:30.4480852Z                     #include <string>
2024-08-30T19:43:30.4480936Z                     
2024-08-30T19:43:30.4481033Z                     std::st
2024-08-30T19:43:30.4481358Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4481541Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4481866Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4482115Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.4482409Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4482535Z                     #include <string>
2024-08-30T19:43:30.4482620Z                     
2024-08-30T19:43:30.4482720Z                     std::str
2024-08-30T19:43:30.4484561Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4488895Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for ( ...
2024-08-30T19:43:30.4489328Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4489454Z                     #include <string>
2024-08-30T19:43:30.4489539Z                     
2024-08-30T19:43:30.4489748Z                     std::st -> #include <iostream>
2024-08-30T19:43:30.4489866Z                     #include <string>
2024-08-30T19:43:30.4489952Z                     
2024-08-30T19:43:30.4490057Z                     std::str
2024-08-30T19:43:30.4490378Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4490564Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4490880Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4491516Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.4491819Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4491944Z                     #include <string>
2024-08-30T19:43:30.4492035Z                     
2024-08-30T19:43:30.4492146Z                     std::stri
2024-08-30T19:43:30.4493877Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4498322Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for  ...
2024-08-30T19:43:30.4498746Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4498877Z                     #include <string>
2024-08-30T19:43:30.4498965Z                     
2024-08-30T19:43:30.4499167Z                     std::str -> #include <iostream>
2024-08-30T19:43:30.4499283Z                     #include <string>
2024-08-30T19:43:30.4499372Z                     
2024-08-30T19:43:30.4499470Z                     std::stri
2024-08-30T19:43:30.4499793Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4499981Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4500293Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4500692Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.4500991Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4501116Z                     #include <string>
2024-08-30T19:43:30.4501198Z                     
2024-08-30T19:43:30.4501308Z                     std::strin
2024-08-30T19:43:30.4503032Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4507353Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for ...
2024-08-30T19:43:30.4507766Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4507976Z                     #include <string>
2024-08-30T19:43:30.4508067Z                     
2024-08-30T19:43:30.4508281Z                     std::stri -> #include <iostream>
2024-08-30T19:43:30.4508402Z                     #include <string>
2024-08-30T19:43:30.4508491Z                     
2024-08-30T19:43:30.4508598Z                     std::strin
2024-08-30T19:43:30.4508925Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4509104Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4509420Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4509661Z [32m      cy:command ✔ [39m type	g, {force: true}
2024-08-30T19:43:30.4510052Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4510179Z                     #include <string>
2024-08-30T19:43:30.4510261Z                     
2024-08-30T19:43:30.4510373Z                     std::string
2024-08-30T19:43:30.4512219Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4516549Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    fo ...
2024-08-30T19:43:30.4516974Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4517105Z                     #include <string>
2024-08-30T19:43:30.4517188Z                     
2024-08-30T19:43:30.4517398Z                     std::strin -> #include <iostream>
2024-08-30T19:43:30.4517521Z                     #include <string>
2024-08-30T19:43:30.4517603Z                     
2024-08-30T19:43:30.4517719Z                     std::string
2024-08-30T19:43:30.4518040Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4518222Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4518543Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4518781Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.4519078Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4519201Z                     #include <string>
2024-08-30T19:43:30.4519285Z                     
2024-08-30T19:43:30.4519402Z                     std::string 
2024-08-30T19:43:30.4521127Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4525442Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    f ...
2024-08-30T19:43:30.4525936Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4526058Z                     #include <string>
2024-08-30T19:43:30.4526209Z                     
2024-08-30T19:43:30.4526435Z                     std::string -> #include <iostream>
2024-08-30T19:43:30.4526552Z                     #include <string>
2024-08-30T19:43:30.4526634Z                     
2024-08-30T19:43:30.4526748Z                     std::string 
2024-08-30T19:43:30.4527072Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4527257Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4527566Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4527927Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.4528229Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4528351Z                     #include <string>
2024-08-30T19:43:30.4528442Z                     
2024-08-30T19:43:30.4528558Z                     std::string s
2024-08-30T19:43:30.4530302Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4534897Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n     ...
2024-08-30T19:43:30.4535341Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4535470Z                     #include <string>
2024-08-30T19:43:30.4535560Z                     
2024-08-30T19:43:30.4535778Z                     std::string  -> #include <iostream>
2024-08-30T19:43:30.4535896Z                     #include <string>
2024-08-30T19:43:30.4535983Z                     
2024-08-30T19:43:30.4536100Z                     std::string s
2024-08-30T19:43:30.4536419Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4536613Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4536926Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4537168Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.4537463Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4537583Z                     #include <string>
2024-08-30T19:43:30.4537669Z                     
2024-08-30T19:43:30.4537784Z                     std::string so
2024-08-30T19:43:30.4539530Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string so","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4543941Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string so","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    ...
2024-08-30T19:43:30.4544590Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4544719Z                     #include <string>
2024-08-30T19:43:30.4544808Z                     
2024-08-30T19:43:30.4545029Z                     std::string s -> #include <iostream>
2024-08-30T19:43:30.4545146Z                     #include <string>
2024-08-30T19:43:30.4545235Z                     
2024-08-30T19:43:30.4545348Z                     std::string so
2024-08-30T19:43:30.4545678Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4545856Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4546164Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4546407Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.4546697Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4546823Z                     #include <string>
2024-08-30T19:43:30.4546907Z                     
2024-08-30T19:43:30.4547024Z                     std::string sol
2024-08-30T19:43:30.4548786Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string sol","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4553106Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string sol","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n   ...
2024-08-30T19:43:30.4553519Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4553650Z                     #include <string>
2024-08-30T19:43:30.4553733Z                     
2024-08-30T19:43:30.4553954Z                     std::string so -> #include <iostream>
2024-08-30T19:43:30.4554076Z                     #include <string>
2024-08-30T19:43:30.4554157Z                     
2024-08-30T19:43:30.4554358Z                     std::string sol
2024-08-30T19:43:30.4554693Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4554874Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4555197Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4555445Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.4555740Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4555861Z                     #include <string>
2024-08-30T19:43:30.4555945Z                     
2024-08-30T19:43:30.4556069Z                     std::string solu
2024-08-30T19:43:30.4557815Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4562335Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n  ...
2024-08-30T19:43:30.4562755Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4562888Z                     #include <string>
2024-08-30T19:43:30.4562970Z                     
2024-08-30T19:43:30.4563202Z                     std::string sol -> #include <iostream>
2024-08-30T19:43:30.4563317Z                     #include <string>
2024-08-30T19:43:30.4563405Z                     
2024-08-30T19:43:30.4563525Z                     std::string solu
2024-08-30T19:43:30.4563840Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4564016Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4564378Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4564619Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4564913Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4565031Z                     #include <string>
2024-08-30T19:43:30.4565123Z                     
2024-08-30T19:43:30.4565240Z                     std::string solut
2024-08-30T19:43:30.4567000Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solut","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4571532Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solut","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n ...
2024-08-30T19:43:30.4572134Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4572260Z                     #include <string>
2024-08-30T19:43:30.4572344Z                     
2024-08-30T19:43:30.4572583Z                     std::string solu -> #include <iostream>
2024-08-30T19:43:30.4572701Z                     #include <string>
2024-08-30T19:43:30.4572788Z                     
2024-08-30T19:43:30.4572991Z                     std::string solut
2024-08-30T19:43:30.4573362Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4573547Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4573859Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4574106Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.4574387Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4574506Z                     #include <string>
2024-08-30T19:43:30.4574594Z                     
2024-08-30T19:43:30.4574860Z                     std::string soluti
2024-08-30T19:43:30.4576633Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string soluti","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4580962Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string soluti","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\ ...
2024-08-30T19:43:30.4581373Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4581498Z                     #include <string>
2024-08-30T19:43:30.4581655Z                     
2024-08-30T19:43:30.4581926Z                     std::string solut -> #include <iostream>
2024-08-30T19:43:30.4582075Z                     #include <string>
2024-08-30T19:43:30.4582231Z                     
2024-08-30T19:43:30.4582408Z                     std::string soluti
2024-08-30T19:43:30.4582781Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4583126Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4583482Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4583787Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.4584103Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4584303Z                     #include <string>
2024-08-30T19:43:30.4584451Z                     
2024-08-30T19:43:30.4584606Z                     std::string solutio
2024-08-30T19:43:30.4586436Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solutio","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4590882Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solutio","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n ...
2024-08-30T19:43:30.4591453Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4591613Z                     #include <string>
2024-08-30T19:43:30.4591800Z                     
2024-08-30T19:43:30.4592072Z                     std::string soluti -> #include <iostream>
2024-08-30T19:43:30.4592392Z                     #include <string>
2024-08-30T19:43:30.4592511Z                     
2024-08-30T19:43:30.4592666Z                     std::string solutio
2024-08-30T19:43:30.4593091Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4593309Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4593704Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4593989Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.4594317Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4594505Z                     #include <string>
2024-08-30T19:43:30.4594647Z                     
2024-08-30T19:43:30.4594860Z                     std::string solution
2024-08-30T19:43:30.4596666Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4601051Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\ ...
2024-08-30T19:43:30.4601493Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4601715Z                     #include <string>
2024-08-30T19:43:30.4601832Z                     
2024-08-30T19:43:30.4602117Z                     std::string solutio -> #include <iostream>
2024-08-30T19:43:30.4602304Z                     #include <string>
2024-08-30T19:43:30.4602421Z                     
2024-08-30T19:43:30.4602609Z                     std::string solution
2024-08-30T19:43:30.4602989Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4603219Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4603688Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4603961Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.4604315Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4604479Z                     #include <string>
2024-08-30T19:43:30.4604642Z                     
2024-08-30T19:43:30.4604844Z                     std::string solution(
2024-08-30T19:43:30.4606658Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4611567Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7; ...
2024-08-30T19:43:30.4612140Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4612348Z                     #include <string>
2024-08-30T19:43:30.4612468Z                     
2024-08-30T19:43:30.4612788Z                     std::string solution -> #include <iostream>
2024-08-30T19:43:30.4612948Z                     #include <string>
2024-08-30T19:43:30.4613062Z                     
2024-08-30T19:43:30.4613274Z                     std::string solution(
2024-08-30T19:43:30.4613666Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4613930Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4614280Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4614550Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.4614925Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4615081Z                     #include <string>
2024-08-30T19:43:30.4615269Z                     
2024-08-30T19:43:30.4615434Z                     std::string solution(s
2024-08-30T19:43:30.4617310Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4621689Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7 ...
2024-08-30T19:43:30.4622274Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4622464Z                     #include <string>
2024-08-30T19:43:30.4622615Z                     
2024-08-30T19:43:30.4622902Z                     std::string solution( -> #include <iostream>
2024-08-30T19:43:30.4623069Z                     #include <string>
2024-08-30T19:43:30.4623215Z                     
2024-08-30T19:43:30.4623377Z                     std::string solution(s
2024-08-30T19:43:30.4623764Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4624013Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4624482Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4624794Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4625117Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4625348Z                     #include <string>
2024-08-30T19:43:30.4625465Z                     
2024-08-30T19:43:30.4625651Z                     std::string solution(st
2024-08-30T19:43:30.4627657Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4632033Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift =  ...
2024-08-30T19:43:30.4632573Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4632986Z                     #include <string>
2024-08-30T19:43:30.4633203Z                     
2024-08-30T19:43:30.4633775Z                     std::string solution(s -> #include <iostream>
2024-08-30T19:43:30.4634130Z                     #include <string>
2024-08-30T19:43:30.4634338Z                     
2024-08-30T19:43:30.4634646Z                     std::string solution(st
2024-08-30T19:43:30.4635232Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4635474Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4635871Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4636145Z [32m      cy:command ✔ [39m type	d, {force: true}
2024-08-30T19:43:30.4636477Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4636731Z                     #include <string>
2024-08-30T19:43:30.4636849Z                     
2024-08-30T19:43:30.4637064Z                     std::string solution(std
2024-08-30T19:43:30.4638918Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4643335Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = ...
2024-08-30T19:43:30.4643987Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4644222Z                     #include <string>
2024-08-30T19:43:30.4644346Z                     
2024-08-30T19:43:30.4644671Z                     std::string solution(st -> #include <iostream>
2024-08-30T19:43:30.4644845Z                     #include <string>
2024-08-30T19:43:30.4644974Z                     
2024-08-30T19:43:30.4645204Z                     std::string solution(std
2024-08-30T19:43:30.4645687Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4645915Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4646318Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4646592Z [32m      cy:command ✔ [39m type	:, {force: true}
2024-08-30T19:43:30.4646951Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4647152Z                     #include <string>
2024-08-30T19:43:30.4647267Z                     
2024-08-30T19:43:30.4647483Z                     std::string solution(std:
2024-08-30T19:43:30.4649339Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4654038Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift  ...
2024-08-30T19:43:30.4654610Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4654784Z                     #include <string>
2024-08-30T19:43:30.4654901Z                     
2024-08-30T19:43:30.4655248Z                     std::string solution(std -> #include <iostream>
2024-08-30T19:43:30.4655395Z                     #include <string>
2024-08-30T19:43:30.4655514Z                     
2024-08-30T19:43:30.4655817Z                     std::string solution(std:
2024-08-30T19:43:30.4656177Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4656438Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4656783Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4657094Z [32m      cy:command ✔ [39m type	:, {force: true}
2024-08-30T19:43:30.4657534Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4657725Z                     #include <string>
2024-08-30T19:43:30.4657892Z                     
2024-08-30T19:43:30.4658071Z                     std::string solution(std::
2024-08-30T19:43:30.4659963Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4664601Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift ...
2024-08-30T19:43:30.4665153Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4665317Z                     #include <string>
2024-08-30T19:43:30.4665465Z                     
2024-08-30T19:43:30.4665762Z                     std::string solution(std: -> #include <iostream>
2024-08-30T19:43:30.4665914Z                     #include <string>
2024-08-30T19:43:30.4666077Z                     
2024-08-30T19:43:30.4666285Z                     std::string solution(std::
2024-08-30T19:43:30.4666678Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4666892Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4667254Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4667569Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.4667906Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4668121Z                     #include <string>
2024-08-30T19:43:30.4668235Z                     
2024-08-30T19:43:30.4668413Z                     std::string solution(std::s
2024-08-30T19:43:30.4670306Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4674735Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shif ...
2024-08-30T19:43:30.4675211Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4675481Z                     #include <string>
2024-08-30T19:43:30.4675600Z                     
2024-08-30T19:43:30.4675897Z                     std::string solution(std:: -> #include <iostream>
2024-08-30T19:43:30.4676103Z                     #include <string>
2024-08-30T19:43:30.4676216Z                     
2024-08-30T19:43:30.4676426Z                     std::string solution(std::s
2024-08-30T19:43:30.4676819Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4677033Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4677433Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4677784Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4678102Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4678327Z                     #include <string>
2024-08-30T19:43:30.4678440Z                     
2024-08-30T19:43:30.4678679Z                     std::string solution(std::st
2024-08-30T19:43:30.4680655Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4685059Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shi ...
2024-08-30T19:43:30.4685543Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4685754Z                     #include <string>
2024-08-30T19:43:30.4685870Z                     
2024-08-30T19:43:30.4686200Z                     std::string solution(std::s -> #include <iostream>
2024-08-30T19:43:30.4686356Z                     #include <string>
2024-08-30T19:43:30.4686471Z                     
2024-08-30T19:43:30.4686711Z                     std::string solution(std::st
2024-08-30T19:43:30.4687090Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4687305Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4687689Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4687964Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.4688341Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4688519Z                     #include <string>
2024-08-30T19:43:30.4688667Z                     
2024-08-30T19:43:30.4688851Z                     std::string solution(std::str
2024-08-30T19:43:30.4690705Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4695384Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const sh ...
2024-08-30T19:43:30.4696122Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4696281Z                     #include <string>
2024-08-30T19:43:30.4696394Z                     
2024-08-30T19:43:30.4696744Z                     std::string solution(std::st -> #include <iostream>
2024-08-30T19:43:30.4696902Z                     #include <string>
2024-08-30T19:43:30.4697102Z                     
2024-08-30T19:43:30.4697286Z                     std::string solution(std::str
2024-08-30T19:43:30.4697800Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4698055Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4698404Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4698724Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.4699078Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4699241Z                     #include <string>
2024-08-30T19:43:30.4699391Z                     
2024-08-30T19:43:30.4699577Z                     std::string solution(std::stri
2024-08-30T19:43:30.4701487Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4706068Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const s ...
2024-08-30T19:43:30.4706611Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4706776Z                     #include <string>
2024-08-30T19:43:30.4706926Z                     
2024-08-30T19:43:30.4707251Z                     std::string solution(std::str -> #include <iostream>
2024-08-30T19:43:30.4707399Z                     #include <string>
2024-08-30T19:43:30.4707579Z                     
2024-08-30T19:43:30.4707765Z                     std::string solution(std::stri
2024-08-30T19:43:30.4708150Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4708386Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4708734Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4709041Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.4709501Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4709694Z                     #include <string>
2024-08-30T19:43:30.4709825Z                     
2024-08-30T19:43:30.4710012Z                     std::string solution(std::strin
2024-08-30T19:43:30.4711925Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4716538Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const  ...
2024-08-30T19:43:30.4717020Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4717213Z                     #include <string>
2024-08-30T19:43:30.4717333Z                     
2024-08-30T19:43:30.4717641Z                     std::string solution(std::stri -> #include <iostream>
2024-08-30T19:43:30.4717827Z                     #include <string>
2024-08-30T19:43:30.4717979Z                     
2024-08-30T19:43:30.4718184Z                     std::string solution(std::strin
2024-08-30T19:43:30.4718572Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4718785Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4719184Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4719454Z [32m      cy:command ✔ [39m type	g, {force: true}
2024-08-30T19:43:30.4719857Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4720018Z                     #include <string>
2024-08-30T19:43:30.4720132Z                     
2024-08-30T19:43:30.4720358Z                     std::string solution(std::string
2024-08-30T19:43:30.4722226Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4726675Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const ...
2024-08-30T19:43:30.4727156Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4727398Z                     #include <string>
2024-08-30T19:43:30.4727514Z                     
2024-08-30T19:43:30.4727864Z                     std::string solution(std::strin -> #include <iostream>
2024-08-30T19:43:30.4728036Z                     #include <string>
2024-08-30T19:43:30.4728182Z                     
2024-08-30T19:43:30.4728407Z                     std::string solution(std::string
2024-08-30T19:43:30.4728761Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4729009Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4729372Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4729729Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.4730120Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4730273Z                     #include <string>
2024-08-30T19:43:30.4730422Z                     
2024-08-30T19:43:30.4730643Z                     std::string solution(std::string 
2024-08-30T19:43:30.4732960Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4737461Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    cons ...
2024-08-30T19:43:30.4737960Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4738117Z                     #include <string>
2024-08-30T19:43:30.4738284Z                     
2024-08-30T19:43:30.4738607Z                     std::string solution(std::string -> #include <iostream>
2024-08-30T19:43:30.4738838Z                     #include <string>
2024-08-30T19:43:30.4739087Z                     
2024-08-30T19:43:30.4739300Z                     std::string solution(std::string 
2024-08-30T19:43:30.4739654Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4739913Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4740260Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4740594Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.4740922Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4741123Z                     #include <string>
2024-08-30T19:43:30.4741240Z                     
2024-08-30T19:43:30.4741439Z                     std::string solution(std::string i
2024-08-30T19:43:30.4743366Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4747791Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    con ...
2024-08-30T19:43:30.4748472Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4748632Z                     #include <string>
2024-08-30T19:43:30.4748783Z                     
2024-08-30T19:43:30.4749116Z                     std::string solution(std::string  -> #include <iostream>
2024-08-30T19:43:30.4749351Z                     #include <string>
2024-08-30T19:43:30.4749468Z                     
2024-08-30T19:43:30.4749663Z                     std::string solution(std::string i
2024-08-30T19:43:30.4750175Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4750399Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4750862Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4751207Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.4751528Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4751723Z                     #include <string>
2024-08-30T19:43:30.4751838Z                     
2024-08-30T19:43:30.4752089Z                     std::string solution(std::string in
2024-08-30T19:43:30.4753989Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4758421Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
2024-08-30T19:43:30.4758871Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4759067Z                     #include <string>
2024-08-30T19:43:30.4759197Z                     
2024-08-30T19:43:30.4759563Z                     std::string solution(std::string i -> #include <iostream>
2024-08-30T19:43:30.4759744Z                     #include <string>
2024-08-30T19:43:30.4759858Z                     
2024-08-30T19:43:30.4760084Z                     std::string solution(std::string in
2024-08-30T19:43:30.4760442Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4760671Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4761052Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4761451Z [32m      cy:command ✔ [39m type	p, {force: true}
2024-08-30T19:43:30.4761808Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4761963Z                     #include <string>
2024-08-30T19:43:30.4762096Z                     
2024-08-30T19:43:30.4762408Z                     std::string solution(std::string inp
2024-08-30T19:43:30.4764343Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string inp","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4768999Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string inp","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    c ...
2024-08-30T19:43:30.4769510Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4769671Z                     #include <string>
2024-08-30T19:43:30.4769785Z                     
2024-08-30T19:43:30.4770159Z                     std::string solution(std::string in -> #include <iostream>
2024-08-30T19:43:30.4770341Z                     #include <string>
2024-08-30T19:43:30.4770510Z                     
2024-08-30T19:43:30.4770704Z                     std::string solution(std::string inp
2024-08-30T19:43:30.4771270Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4771553Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4771912Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4772271Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.4772593Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4772744Z                     #include <string>
2024-08-30T19:43:30.4772890Z                     
2024-08-30T19:43:30.4773099Z                     std::string solution(std::string inpu
2024-08-30T19:43:30.4775075Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string inpu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4779448Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string inpu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n     ...
2024-08-30T19:43:30.4780110Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4780359Z                     #include <string>
2024-08-30T19:43:30.4780594Z                     
2024-08-30T19:43:30.4780991Z                     std::string solution(std::string inp -> #include <iostream>
2024-08-30T19:43:30.4781185Z                     #include <string>
2024-08-30T19:43:30.4781333Z                     
2024-08-30T19:43:30.4781536Z                     std::string solution(std::string inpu
2024-08-30T19:43:30.4781934Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4782274Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4782624Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4782967Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4783290Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4783483Z                     #include <string>
2024-08-30T19:43:30.4783601Z                     
2024-08-30T19:43:30.4783826Z                     std::string solution(std::string input
2024-08-30T19:43:30.4785962Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4790382Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    ...
2024-08-30T19:43:30.4790837Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4791044Z                     #include <string>
2024-08-30T19:43:30.4791161Z                     
2024-08-30T19:43:30.4791506Z                     std::string solution(std::string inpu -> #include <iostream>
2024-08-30T19:43:30.4791790Z                     #include <string>
2024-08-30T19:43:30.4791903Z                     
2024-08-30T19:43:30.4792159Z                     std::string solution(std::string input
2024-08-30T19:43:30.4792519Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4792732Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4793138Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4793423Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.4793824Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4793978Z                     #include <string>
2024-08-30T19:43:30.4794092Z                     
2024-08-30T19:43:30.4830199Z                     std::string solution(std::string input)
2024-08-30T19:43:30.4832302Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4836937Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n   ...
2024-08-30T19:43:30.4837465Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4837616Z                     #include <string>
2024-08-30T19:43:30.4837708Z                     
2024-08-30T19:43:30.4838044Z                     std::string solution(std::string input -> #include <iostream>
2024-08-30T19:43:30.4838315Z                     #include <string>
2024-08-30T19:43:30.4838408Z                     
2024-08-30T19:43:30.4838598Z                     std::string solution(std::string input)
2024-08-30T19:43:30.4838940Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4839131Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4839463Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4839712Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.4840011Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4840139Z                     #include <string>
2024-08-30T19:43:30.4840229Z                     
2024-08-30T19:43:30.4840429Z                     std::string solution(std::string input) 
2024-08-30T19:43:30.4842325Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4846691Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n  ...
2024-08-30T19:43:30.4847125Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4847255Z                     #include <string>
2024-08-30T19:43:30.4847345Z                     
2024-08-30T19:43:30.4847677Z                     std::string solution(std::string input) -> #include <iostream>
2024-08-30T19:43:30.4847799Z                     #include <string>
2024-08-30T19:43:30.4847892Z                     
2024-08-30T19:43:30.4848074Z                     std::string solution(std::string input) 
2024-08-30T19:43:30.4848407Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4848874Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4849444Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4849866Z [32m      cy:command ✔ [39m type	{, {force: true}
2024-08-30T19:43:30.4850370Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4850605Z                     #include <string>
2024-08-30T19:43:30.4850756Z                     
2024-08-30T19:43:30.4850954Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4853176Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4857844Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n ...
2024-08-30T19:43:30.4858288Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4858421Z                     #include <string>
2024-08-30T19:43:30.4858515Z                     
2024-08-30T19:43:30.4858847Z                     std::string solution(std::string input)  -> #include <iostream>
2024-08-30T19:43:30.4858965Z                     #include <string>
2024-08-30T19:43:30.4859056Z                     
2024-08-30T19:43:30.4859245Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4859576Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4859758Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4860072Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4860259Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.4860379Z                     , {force: true}
2024-08-30T19:43:30.4860686Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4860810Z                     #include <string>
2024-08-30T19:43:30.4860894Z                     
2024-08-30T19:43:30.4861081Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4861175Z                         
2024-08-30T19:43:30.4863099Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4867484Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n    ","JS_RUNNER":"function solution(input) {\n    let result = \ ...
2024-08-30T19:43:30.4868021Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4868153Z                     #include <string>
2024-08-30T19:43:30.4868246Z                     
2024-08-30T19:43:30.4868581Z                     std::string solution(std::string input) { -> #include <iostream>
2024-08-30T19:43:30.4868771Z                     #include <string>
2024-08-30T19:43:30.4868867Z                     
2024-08-30T19:43:30.4869051Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4869146Z                         
2024-08-30T19:43:30.4869474Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4869665Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4869992Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4870233Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.4870647Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4870776Z                     #include <string>
2024-08-30T19:43:30.4870862Z                     
2024-08-30T19:43:30.4871054Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4871149Z                          
2024-08-30T19:43:30.4873059Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4877385Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n     ","JS_RUNNER":"function solution(input) {\n    let result =  ...
2024-08-30T19:43:30.4877808Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4877938Z                     #include <string>
2024-08-30T19:43:30.4878031Z                     
2024-08-30T19:43:30.4878211Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4878401Z                          -> #include <iostream>
2024-08-30T19:43:30.4878522Z                     #include <string>
2024-08-30T19:43:30.4878604Z                     
2024-08-30T19:43:30.4878786Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4878874Z                          
2024-08-30T19:43:30.4879192Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4879376Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4879685Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4879924Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.4880207Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4880329Z                     #include <string>
2024-08-30T19:43:30.4880505Z                     
2024-08-30T19:43:30.4880683Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4880779Z                           
2024-08-30T19:43:30.4882677Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4887168Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n      ","JS_RUNNER":"function solution(input) {\n    let result = ...
2024-08-30T19:43:30.4887587Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4887714Z                     #include <string>
2024-08-30T19:43:30.4887802Z                     
2024-08-30T19:43:30.4887981Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4888169Z                           -> #include <iostream>
2024-08-30T19:43:30.4888284Z                     #include <string>
2024-08-30T19:43:30.4888368Z                     
2024-08-30T19:43:30.4888549Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4888638Z                           
2024-08-30T19:43:30.4888968Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4889158Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4889468Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4889706Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.4889995Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4890119Z                     #include <string>
2024-08-30T19:43:30.4890201Z                     
2024-08-30T19:43:30.4890418Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4890506Z                            
2024-08-30T19:43:30.4892658Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4897009Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n       ","JS_RUNNER":"function solution(input) {\n    let result  ...
2024-08-30T19:43:30.4897541Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4897675Z                     #include <string>
2024-08-30T19:43:30.4897766Z                     
2024-08-30T19:43:30.4897947Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4898136Z                            -> #include <iostream>
2024-08-30T19:43:30.4898257Z                     #include <string>
2024-08-30T19:43:30.4898340Z                     
2024-08-30T19:43:30.4898511Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4898684Z                            
2024-08-30T19:43:30.4899006Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4899191Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4899494Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4899737Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.4900028Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4900146Z                     #include <string>
2024-08-30T19:43:30.4900375Z                     
2024-08-30T19:43:30.4900554Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4900643Z                             
2024-08-30T19:43:30.4902539Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4906872Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        ","JS_RUNNER":"function solution(input) {\n    let result ...
2024-08-30T19:43:30.4907298Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4907423Z                     #include <string>
2024-08-30T19:43:30.4907506Z                     
2024-08-30T19:43:30.4907687Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4907882Z                             -> #include <iostream>
2024-08-30T19:43:30.4907996Z                     #include <string>
2024-08-30T19:43:30.4908075Z                     
2024-08-30T19:43:30.4908256Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4908343Z                             
2024-08-30T19:43:30.4908659Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4908838Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4909143Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4909380Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.4909668Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4909789Z                     #include <string>
2024-08-30T19:43:30.4909868Z                     
2024-08-30T19:43:30.4910035Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4910203Z                             s
2024-08-30T19:43:30.4912131Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4916561Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        s","JS_RUNNER":"function solution(input) {\n    let resul ...
2024-08-30T19:43:30.4917040Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4917163Z                     #include <string>
2024-08-30T19:43:30.4917245Z                     
2024-08-30T19:43:30.4917422Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4917616Z                              -> #include <iostream>
2024-08-30T19:43:30.4917729Z                     #include <string>
2024-08-30T19:43:30.4917819Z                     
2024-08-30T19:43:30.4917993Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4918088Z                             s
2024-08-30T19:43:30.4918414Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4918593Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4918901Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4919146Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4919435Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4919555Z                     #include <string>
2024-08-30T19:43:30.4919637Z                     
2024-08-30T19:43:30.4919814Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4919918Z                             st
2024-08-30T19:43:30.4921862Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4926163Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        st","JS_RUNNER":"function solution(input) {\n    let resu ...
2024-08-30T19:43:30.4926659Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4926784Z                     #include <string>
2024-08-30T19:43:30.4926874Z                     
2024-08-30T19:43:30.4927061Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4927264Z                             s -> #include <iostream>
2024-08-30T19:43:30.4927381Z                     #include <string>
2024-08-30T19:43:30.4927461Z                     
2024-08-30T19:43:30.4927635Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4927739Z                             st
2024-08-30T19:43:30.4928134Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4928318Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4928624Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4928863Z [32m      cy:command ✔ [39m type	d, {force: true}
2024-08-30T19:43:30.4929182Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4929301Z                     #include <string>
2024-08-30T19:43:30.4929386Z                     
2024-08-30T19:43:30.4929563Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4929786Z                             std
2024-08-30T19:43:30.4932017Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4936388Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std","JS_RUNNER":"function solution(input) {\n    let res ...
2024-08-30T19:43:30.4936806Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4936938Z                     #include <string>
2024-08-30T19:43:30.4937020Z                     
2024-08-30T19:43:30.4937199Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4937402Z                             st -> #include <iostream>
2024-08-30T19:43:30.4937520Z                     #include <string>
2024-08-30T19:43:30.4937600Z                     
2024-08-30T19:43:30.4937776Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4937879Z                             std
2024-08-30T19:43:30.4938205Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4938385Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4938694Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4938932Z [32m      cy:command ✔ [39m type	:, {force: true}
2024-08-30T19:43:30.4939214Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4939340Z                     #include <string>
2024-08-30T19:43:30.4939421Z                     
2024-08-30T19:43:30.4939592Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4939701Z                             std:
2024-08-30T19:43:30.4941736Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4946053Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std:","JS_RUNNER":"function solution(input) {\n    let re ...
2024-08-30T19:43:30.4946685Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4946811Z                     #include <string>
2024-08-30T19:43:30.4946894Z                     
2024-08-30T19:43:30.4947071Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4947280Z                             std -> #include <iostream>
2024-08-30T19:43:30.4947418Z                     #include <string>
2024-08-30T19:43:30.4947506Z                     
2024-08-30T19:43:30.4947679Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4947788Z                             std:
2024-08-30T19:43:30.4948104Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4948287Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4948595Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4948830Z [32m      cy:command ✔ [39m type	:, {force: true}
2024-08-30T19:43:30.4949125Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4949246Z                     #include <string>
2024-08-30T19:43:30.4949330Z                     
2024-08-30T19:43:30.4949507Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4949616Z                             std::
2024-08-30T19:43:30.4951538Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4955825Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::","JS_RUNNER":"function solution(input) {\n    let r ...
2024-08-30T19:43:30.4956234Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4956438Z                     #include <string>
2024-08-30T19:43:30.4956529Z                     
2024-08-30T19:43:30.4956708Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4956926Z                             std: -> #include <iostream>
2024-08-30T19:43:30.4957044Z                     #include <string>
2024-08-30T19:43:30.4957127Z                     
2024-08-30T19:43:30.4957305Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4957411Z                             std::
2024-08-30T19:43:30.4957731Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4958060Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4958365Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4958610Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.4958895Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4959029Z                     #include <string>
2024-08-30T19:43:30.4959113Z                     
2024-08-30T19:43:30.4959288Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4959410Z                             std::s
2024-08-30T19:43:30.4961466Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4965819Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::s","JS_RUNNER":"function solution(input) {\n    let  ...
2024-08-30T19:43:30.4966597Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4966869Z                     #include <string>
2024-08-30T19:43:30.4967035Z                     
2024-08-30T19:43:30.4967389Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4967846Z                             std:: -> #include <iostream>
2024-08-30T19:43:30.4968014Z                     #include <string>
2024-08-30T19:43:30.4968116Z                     
2024-08-30T19:43:30.4968305Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4968417Z                             std::s
2024-08-30T19:43:30.4968796Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4968983Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4969306Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4969548Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.4969843Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4969971Z                     #include <string>
2024-08-30T19:43:30.4970064Z                     
2024-08-30T19:43:30.4970252Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4970367Z                             std::st
2024-08-30T19:43:30.4972612Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4977170Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::st","JS_RUNNER":"function solution(input) {\n    let ...
2024-08-30T19:43:30.4977850Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4977985Z                     #include <string>
2024-08-30T19:43:30.4978077Z                     
2024-08-30T19:43:30.4978261Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4978483Z                             std::s -> #include <iostream>
2024-08-30T19:43:30.4978607Z                     #include <string>
2024-08-30T19:43:30.4978695Z                     
2024-08-30T19:43:30.4978872Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4978991Z                             std::st
2024-08-30T19:43:30.4979317Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4979513Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4979821Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4980067Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.4980363Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4980488Z                     #include <string>
2024-08-30T19:43:30.4980578Z                     
2024-08-30T19:43:30.4980753Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4980866Z                             std::str
2024-08-30T19:43:30.4982825Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4987469Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::str","JS_RUNNER":"function solution(input) {\n    le ...
2024-08-30T19:43:30.4987899Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4988038Z                     #include <string>
2024-08-30T19:43:30.4988123Z                     
2024-08-30T19:43:30.4988306Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4988534Z                             std::st -> #include <iostream>
2024-08-30T19:43:30.4988662Z                     #include <string>
2024-08-30T19:43:30.4988755Z                     
2024-08-30T19:43:30.4988927Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4989040Z                             std::str
2024-08-30T19:43:30.4989371Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4989551Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4989964Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4990209Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.4990500Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.4990627Z                     #include <string>
2024-08-30T19:43:30.4990717Z                     
2024-08-30T19:43:30.4990890Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4991012Z                             std::stri
2024-08-30T19:43:30.4993091Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.4997431Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::stri","JS_RUNNER":"function solution(input) {\n    l ...
2024-08-30T19:43:30.4997856Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.4997980Z                     #include <string>
2024-08-30T19:43:30.4998067Z                     
2024-08-30T19:43:30.4998252Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4998472Z                             std::str -> #include <iostream>
2024-08-30T19:43:30.4998595Z                     #include <string>
2024-08-30T19:43:30.4998756Z                     
2024-08-30T19:43:30.4998928Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.4999048Z                             std::stri
2024-08-30T19:43:30.4999373Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.4999563Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.4999877Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5000114Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.5000407Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5000529Z                     #include <string>
2024-08-30T19:43:30.5000623Z                     
2024-08-30T19:43:30.5000793Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5000913Z                             std::strin
2024-08-30T19:43:30.5002879Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5007161Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::strin","JS_RUNNER":"function solution(input) {\n     ...
2024-08-30T19:43:30.5007653Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5007890Z                     #include <string>
2024-08-30T19:43:30.5007987Z                     
2024-08-30T19:43:30.5008161Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5008399Z                             std::stri -> #include <iostream>
2024-08-30T19:43:30.5008514Z                     #include <string>
2024-08-30T19:43:30.5008597Z                     
2024-08-30T19:43:30.5008775Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5008893Z                             std::strin
2024-08-30T19:43:30.5009212Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5009399Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5009710Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5009955Z [32m      cy:command ✔ [39m type	g, {force: true}
2024-08-30T19:43:30.5010243Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5010381Z                     #include <string>
2024-08-30T19:43:30.5010465Z                     
2024-08-30T19:43:30.5010644Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5010773Z                             std::string
2024-08-30T19:43:30.5012994Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5017476Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string","JS_RUNNER":"function solution(input) {\n    ...
2024-08-30T19:43:30.5017900Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5018024Z                     #include <string>
2024-08-30T19:43:30.5018115Z                     
2024-08-30T19:43:30.5018300Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5018527Z                             std::strin -> #include <iostream>
2024-08-30T19:43:30.5018647Z                     #include <string>
2024-08-30T19:43:30.5018743Z                     
2024-08-30T19:43:30.5018911Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5019038Z                             std::string
2024-08-30T19:43:30.5019355Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5019538Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5019951Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5020191Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5020483Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5020606Z                     #include <string>
2024-08-30T19:43:30.5020698Z                     
2024-08-30T19:43:30.5020885Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5021009Z                             std::string 
2024-08-30T19:43:30.5023135Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5027492Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string ","JS_RUNNER":"function solution(input) {\n   ...
2024-08-30T19:43:30.5027917Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5028042Z                     #include <string>
2024-08-30T19:43:30.5028139Z                     
2024-08-30T19:43:30.5028321Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5028552Z                             std::string -> #include <iostream>
2024-08-30T19:43:30.5028685Z                     #include <string>
2024-08-30T19:43:30.5028863Z                     
2024-08-30T19:43:30.5029052Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5029177Z                             std::string 
2024-08-30T19:43:30.5029504Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5029707Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5030014Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5030258Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.5030545Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5030673Z                     #include <string>
2024-08-30T19:43:30.5030770Z                     
2024-08-30T19:43:30.5030949Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5031080Z                             std::string r
2024-08-30T19:43:30.5033066Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5037409Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string r","JS_RUNNER":"function solution(input) {\n  ...
2024-08-30T19:43:30.5038019Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5038154Z                     #include <string>
2024-08-30T19:43:30.5038239Z                     
2024-08-30T19:43:30.5038423Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5038656Z                             std::string  -> #include <iostream>
2024-08-30T19:43:30.5038774Z                     #include <string>
2024-08-30T19:43:30.5038870Z                     
2024-08-30T19:43:30.5039047Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5039172Z                             std::string r
2024-08-30T19:43:30.5039503Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5039684Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5040005Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5040243Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.5040528Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5040663Z                     #include <string>
2024-08-30T19:43:30.5040747Z                     
2024-08-30T19:43:30.5040931Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5041060Z                             std::string re
2024-08-30T19:43:30.5043036Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5047467Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string re","JS_RUNNER":"function solution(input) {\n ...
2024-08-30T19:43:30.5047954Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5048083Z                     #include <string>
2024-08-30T19:43:30.5048174Z                     
2024-08-30T19:43:30.5048349Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5048585Z                             std::string r -> #include <iostream>
2024-08-30T19:43:30.5048713Z                     #include <string>
2024-08-30T19:43:30.5048797Z                     
2024-08-30T19:43:30.5048972Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5049105Z                             std::string re
2024-08-30T19:43:30.5049427Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5049614Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5049923Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5050160Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.5050449Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5050574Z                     #include <string>
2024-08-30T19:43:30.5050660Z                     
2024-08-30T19:43:30.5050837Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5051111Z                             std::string res
2024-08-30T19:43:30.5053389Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string res","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5057754Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string res","JS_RUNNER":"function solution(input) {\ ...
2024-08-30T19:43:30.5058168Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5058298Z                     #include <string>
2024-08-30T19:43:30.5058382Z                     
2024-08-30T19:43:30.5058558Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5058800Z                             std::string re -> #include <iostream>
2024-08-30T19:43:30.5058918Z                     #include <string>
2024-08-30T19:43:30.5059088Z                     
2024-08-30T19:43:30.5059267Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5059395Z                             std::string res
2024-08-30T19:43:30.5059730Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5059912Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5060217Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5060459Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.5060746Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5060873Z                     #include <string>
2024-08-30T19:43:30.5061041Z                     
2024-08-30T19:43:30.5061219Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5061363Z                             std::string resu
2024-08-30T19:43:30.5063359Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string resu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5067741Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string resu","JS_RUNNER":"function solution(input) { ...
2024-08-30T19:43:30.5068293Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5068420Z                     #include <string>
2024-08-30T19:43:30.5068503Z                     
2024-08-30T19:43:30.5068693Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5068960Z                             std::string res -> #include <iostream>
2024-08-30T19:43:30.5069086Z                     #include <string>
2024-08-30T19:43:30.5069174Z                     
2024-08-30T19:43:30.5069352Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5069492Z                             std::string resu
2024-08-30T19:43:30.5069819Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5070006Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5070318Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5070556Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.5070855Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5070979Z                     #include <string>
2024-08-30T19:43:30.5071067Z                     
2024-08-30T19:43:30.5071244Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5071383Z                             std::string resul
2024-08-30T19:43:30.5073386Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string resul","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5077807Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string resul","JS_RUNNER":"function solution(input)  ...
2024-08-30T19:43:30.5078295Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5078429Z                     #include <string>
2024-08-30T19:43:30.5078515Z                     
2024-08-30T19:43:30.5078693Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5078944Z                             std::string resu -> #include <iostream>
2024-08-30T19:43:30.5079064Z                     #include <string>
2024-08-30T19:43:30.5079147Z                     
2024-08-30T19:43:30.5079324Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5079464Z                             std::string resul
2024-08-30T19:43:30.5079790Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5079975Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5080282Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5080526Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.5080811Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5080944Z                     #include <string>
2024-08-30T19:43:30.5081028Z                     
2024-08-30T19:43:30.5081204Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5081492Z                             std::string result
2024-08-30T19:43:30.5083497Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5087833Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result","JS_RUNNER":"function solution(input) ...
2024-08-30T19:43:30.5088247Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5088372Z                     #include <string>
2024-08-30T19:43:30.5088457Z                     
2024-08-30T19:43:30.5088641Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5088886Z                             std::string resul -> #include <iostream>
2024-08-30T19:43:30.5089080Z                     #include <string>
2024-08-30T19:43:30.5089170Z                     
2024-08-30T19:43:30.5089341Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5089487Z                             std::string result
2024-08-30T19:43:30.5089810Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5089991Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5090301Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5090538Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5090830Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5091228Z                     #include <string>
2024-08-30T19:43:30.5091346Z                     
2024-08-30T19:43:30.5091542Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5091684Z                             std::string result 
2024-08-30T19:43:30.5093736Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5098238Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result ","JS_RUNNER":"function solution(input ...
2024-08-30T19:43:30.5098683Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5098809Z                     #include <string>
2024-08-30T19:43:30.5098901Z                     
2024-08-30T19:43:30.5099086Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5099344Z                             std::string result -> #include <iostream>
2024-08-30T19:43:30.5099468Z                     #include <string>
2024-08-30T19:43:30.5099551Z                     
2024-08-30T19:43:30.5099734Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5099876Z                             std::string result 
2024-08-30T19:43:30.5100208Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5100397Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5100702Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5100957Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.5101247Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5101368Z                     #include <string>
2024-08-30T19:43:30.5101457Z                     
2024-08-30T19:43:30.5101633Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5101785Z                             std::string result =
2024-08-30T19:43:30.5103795Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result =","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5108241Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result =","JS_RUNNER":"function solution(inpu ...
2024-08-30T19:43:30.5108736Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5108869Z                     #include <string>
2024-08-30T19:43:30.5108953Z                     
2024-08-30T19:43:30.5109149Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5109405Z                             std::string result  -> #include <iostream>
2024-08-30T19:43:30.5109523Z                     #include <string>
2024-08-30T19:43:30.5109612Z                     
2024-08-30T19:43:30.5109787Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5109932Z                             std::string result =
2024-08-30T19:43:30.5110259Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5110441Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5110751Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5110987Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5111284Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5111405Z                     #include <string>
2024-08-30T19:43:30.5111488Z                     
2024-08-30T19:43:30.5111795Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5111948Z                             std::string result = 
2024-08-30T19:43:30.5113971Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5118308Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = ","JS_RUNNER":"function solution(inp ...
2024-08-30T19:43:30.5118735Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5118860Z                     #include <string>
2024-08-30T19:43:30.5118948Z                     
2024-08-30T19:43:30.5119124Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5119452Z                             std::string result = -> #include <iostream>
2024-08-30T19:43:30.5119576Z                     #include <string>
2024-08-30T19:43:30.5119658Z                     
2024-08-30T19:43:30.5119853Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5120004Z                             std::string result = 
2024-08-30T19:43:30.5120331Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5120525Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5120839Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5121165Z [32m      cy:command ✔ [39m type	", {force: true}
2024-08-30T19:43:30.5121457Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5121579Z                     #include <string>
2024-08-30T19:43:30.5121666Z                     
2024-08-30T19:43:30.5121844Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5121997Z                             std::string result = "
2024-08-30T19:43:30.5124032Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5128473Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"","JS_RUNNER":"function solution(i ...
2024-08-30T19:43:30.5128897Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5129025Z                     #include <string>
2024-08-30T19:43:30.5129109Z                     
2024-08-30T19:43:30.5129285Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5129555Z                             std::string result =  -> #include <iostream>
2024-08-30T19:43:30.5129671Z                     #include <string>
2024-08-30T19:43:30.5129758Z                     
2024-08-30T19:43:30.5129934Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5130083Z                             std::string result = "
2024-08-30T19:43:30.5130409Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5130589Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5130907Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5131384Z [32m      cy:command ✔ [39m type	", {force: true}
2024-08-30T19:43:30.5131686Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5131817Z                     #include <string>
2024-08-30T19:43:30.5131900Z                     
2024-08-30T19:43:30.5132090Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5132235Z                             std::string result = ""
2024-08-30T19:43:30.5135213Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\"","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5139842Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\"","JS_RUNNER":"function solution ...
2024-08-30T19:43:30.5140380Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5140519Z                     #include <string>
2024-08-30T19:43:30.5140614Z                     
2024-08-30T19:43:30.5140804Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5141074Z                             std::string result = " -> #include <iostream>
2024-08-30T19:43:30.5141200Z                     #include <string>
2024-08-30T19:43:30.5141286Z                     
2024-08-30T19:43:30.5141470Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5141625Z                             std::string result = ""
2024-08-30T19:43:30.5141953Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5142145Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5142460Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5142698Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.5142993Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5143290Z                     #include <string>
2024-08-30T19:43:30.5143390Z                     
2024-08-30T19:43:30.5143570Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5143728Z                             std::string result = "";
2024-08-30T19:43:30.5145765Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5150110Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";","JS_RUNNER":"function solutio ...
2024-08-30T19:43:30.5150526Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5150663Z                     #include <string>
2024-08-30T19:43:30.5150827Z                     
2024-08-30T19:43:30.5151015Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5151292Z                             std::string result = "" -> #include <iostream>
2024-08-30T19:43:30.5151421Z                     #include <string>
2024-08-30T19:43:30.5151506Z                     
2024-08-30T19:43:30.5151687Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5151845Z                             std::string result = "";
2024-08-30T19:43:30.5152181Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5152368Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5152765Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5152952Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.5153069Z                     , {force: true}
2024-08-30T19:43:30.5153367Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5153495Z                     #include <string>
2024-08-30T19:43:30.5153579Z                     
2024-08-30T19:43:30.5153764Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5153925Z                             std::string result = "";
2024-08-30T19:43:30.5154020Z                             
2024-08-30T19:43:30.5156079Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5160546Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n        ","JS_RUNNER":"functi ...
2024-08-30T19:43:30.5160972Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5161103Z                     #include <string>
2024-08-30T19:43:30.5161188Z                     
2024-08-30T19:43:30.5161377Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5161649Z                             std::string result = ""; -> #include <iostream>
2024-08-30T19:43:30.5161770Z                     #include <string>
2024-08-30T19:43:30.5161859Z                     
2024-08-30T19:43:30.5162038Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5162194Z                             std::string result = "";
2024-08-30T19:43:30.5162289Z                             
2024-08-30T19:43:30.5162615Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5162803Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5163112Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5163359Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5163658Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5163783Z                     #include <string>
2024-08-30T19:43:30.5163873Z                     
2024-08-30T19:43:30.5164136Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5164291Z                             std::string result = "";
2024-08-30T19:43:30.5164432Z                              
2024-08-30T19:43:30.5166504Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5170915Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n         ","JS_RUNNER":"funct ...
2024-08-30T19:43:30.5171624Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5171755Z                     #include <string>
2024-08-30T19:43:30.5171846Z                     
2024-08-30T19:43:30.5172035Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5172194Z                             std::string result = "";
2024-08-30T19:43:30.5172389Z                              -> #include <iostream>
2024-08-30T19:43:30.5172517Z                     #include <string>
2024-08-30T19:43:30.5172599Z                     
2024-08-30T19:43:30.5172783Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5172934Z                             std::string result = "";
2024-08-30T19:43:30.5173187Z                              
2024-08-30T19:43:30.5173533Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5173716Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5174034Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5174273Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5174564Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5174691Z                     #include <string>
2024-08-30T19:43:30.5174775Z                     
2024-08-30T19:43:30.5174960Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5175117Z                             std::string result = "";
2024-08-30T19:43:30.5175219Z                               
2024-08-30T19:43:30.5177284Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5181604Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n          ","JS_RUNNER":"func ...
2024-08-30T19:43:30.5182115Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5182247Z                     #include <string>
2024-08-30T19:43:30.5182333Z                     
2024-08-30T19:43:30.5182593Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5182755Z                             std::string result = "";
2024-08-30T19:43:30.5182950Z                               -> #include <iostream>
2024-08-30T19:43:30.5183071Z                     #include <string>
2024-08-30T19:43:30.5183167Z                     
2024-08-30T19:43:30.5183344Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5183493Z                             std::string result = "";
2024-08-30T19:43:30.5183604Z                               
2024-08-30T19:43:30.5183937Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5184126Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5184434Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5184680Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5184971Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5185101Z                     #include <string>
2024-08-30T19:43:30.5185191Z                     
2024-08-30T19:43:30.5185370Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5185522Z                             std::string result = "";
2024-08-30T19:43:30.5185632Z                                
2024-08-30T19:43:30.5187822Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5192166Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n           ","JS_RUNNER":"fun ...
2024-08-30T19:43:30.5192591Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5192715Z                     #include <string>
2024-08-30T19:43:30.5192799Z                     
2024-08-30T19:43:30.5192982Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5193140Z                             std::string result = "";
2024-08-30T19:43:30.5193344Z                                -> #include <iostream>
2024-08-30T19:43:30.5193463Z                     #include <string>
2024-08-30T19:43:30.5193545Z                     
2024-08-30T19:43:30.5193724Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5194017Z                             std::string result = "";
2024-08-30T19:43:30.5194122Z                                
2024-08-30T19:43:30.5194457Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5194648Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5194962Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5195202Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5195490Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5195618Z                     #include <string>
2024-08-30T19:43:30.5195789Z                     
2024-08-30T19:43:30.5195970Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5196121Z                             std::string result = "";
2024-08-30T19:43:30.5196226Z                                 
2024-08-30T19:43:30.5198411Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5202736Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            ","JS_RUNNER":"fu ...
2024-08-30T19:43:30.5203161Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5203288Z                     #include <string>
2024-08-30T19:43:30.5203373Z                     
2024-08-30T19:43:30.5203554Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5203711Z                             std::string result = "";
2024-08-30T19:43:30.5203917Z                                 -> #include <iostream>
2024-08-30T19:43:30.5204035Z                     #include <string>
2024-08-30T19:43:30.5204127Z                     
2024-08-30T19:43:30.5204304Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5204458Z                             std::string result = "";
2024-08-30T19:43:30.5204568Z                                 
2024-08-30T19:43:30.5204888Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5205073Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5205390Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5205633Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.5205919Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5206041Z                     #include <string>
2024-08-30T19:43:30.5206130Z                     
2024-08-30T19:43:30.5206304Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5206462Z                             std::string result = "";
2024-08-30T19:43:30.5206572Z                                 i
2024-08-30T19:43:30.5208632Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5213305Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            i","JS_RUNNER":"f ...
2024-08-30T19:43:30.5213866Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5214141Z                     #include <string>
2024-08-30T19:43:30.5214232Z                     
2024-08-30T19:43:30.5214422Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5214575Z                             std::string result = "";
2024-08-30T19:43:30.5214788Z                                  -> #include <iostream>
2024-08-30T19:43:30.5214910Z                     #include <string>
2024-08-30T19:43:30.5214994Z                     
2024-08-30T19:43:30.5215174Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5215322Z                             std::string result = "";
2024-08-30T19:43:30.5215431Z                                 i
2024-08-30T19:43:30.5215768Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5215951Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5216264Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5216511Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.5216804Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5216925Z                     #include <string>
2024-08-30T19:43:30.5217008Z                     
2024-08-30T19:43:30.5217190Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5217339Z                             std::string result = "";
2024-08-30T19:43:30.5217454Z                                 in
2024-08-30T19:43:30.5219543Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5223879Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            in","JS_RUNNER":" ...
2024-08-30T19:43:30.5224389Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5224520Z                     #include <string>
2024-08-30T19:43:30.5224610Z                     
2024-08-30T19:43:30.5224789Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5224946Z                             std::string result = "";
2024-08-30T19:43:30.5225155Z                                 i -> #include <iostream>
2024-08-30T19:43:30.5225281Z                     #include <string>
2024-08-30T19:43:30.5225365Z                     
2024-08-30T19:43:30.5225610Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5225770Z                             std::string result = "";
2024-08-30T19:43:30.5225878Z                                 in
2024-08-30T19:43:30.5226203Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5226395Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5226704Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5226948Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.5227354Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5227480Z                     #include <string>
2024-08-30T19:43:30.5227571Z                     
2024-08-30T19:43:30.5227749Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5227904Z                             std::string result = "";
2024-08-30T19:43:30.5228014Z                                 int
2024-08-30T19:43:30.5230106Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5234452Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int","JS_RUNNER": ...
2024-08-30T19:43:30.5234872Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5234998Z                     #include <string>
2024-08-30T19:43:30.5235112Z                     
2024-08-30T19:43:30.5235296Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5235447Z                             std::string result = "";
2024-08-30T19:43:30.5235662Z                                 in -> #include <iostream>
2024-08-30T19:43:30.5235785Z                     #include <string>
2024-08-30T19:43:30.5235868Z                     
2024-08-30T19:43:30.5236046Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5236201Z                             std::string result = "";
2024-08-30T19:43:30.5236313Z                                 int
2024-08-30T19:43:30.5236632Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5236815Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5237212Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5237449Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5237741Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5237869Z                     #include <string>
2024-08-30T19:43:30.5237955Z                     
2024-08-30T19:43:30.5238141Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5238291Z                             std::string result = "";
2024-08-30T19:43:30.5238397Z                                 int 
2024-08-30T19:43:30.5240473Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5244998Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int ","JS_RUNNER" ...
2024-08-30T19:43:30.5245427Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5245562Z                     #include <string>
2024-08-30T19:43:30.5245645Z                     
2024-08-30T19:43:30.5245822Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5245988Z                             std::string result = "";
2024-08-30T19:43:30.5246200Z                                 int -> #include <iostream>
2024-08-30T19:43:30.5246321Z                     #include <string>
2024-08-30T19:43:30.5246404Z                     
2024-08-30T19:43:30.5246574Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5246728Z                             std::string result = "";
2024-08-30T19:43:30.5246840Z                                 int 
2024-08-30T19:43:30.5247155Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5247340Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5247647Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5247892Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.5248174Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5248299Z                     #include <string>
2024-08-30T19:43:30.5248390Z                     
2024-08-30T19:43:30.5248566Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5248718Z                             std::string result = "";
2024-08-30T19:43:30.5248831Z                                 int s
2024-08-30T19:43:30.5250915Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5255584Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int s","JS_RUNNER ...
2024-08-30T19:43:30.5256105Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5256241Z                     #include <string>
2024-08-30T19:43:30.5256333Z                     
2024-08-30T19:43:30.5256517Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5256674Z                             std::string result = "";
2024-08-30T19:43:30.5257036Z                                 int  -> #include <iostream>
2024-08-30T19:43:30.5257160Z                     #include <string>
2024-08-30T19:43:30.5257245Z                     
2024-08-30T19:43:30.5257425Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5257577Z                             std::string result = "";
2024-08-30T19:43:30.5257696Z                                 int s
2024-08-30T19:43:30.5258034Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5258216Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5258532Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5258779Z [32m      cy:command ✔ [39m type	h, {force: true}
2024-08-30T19:43:30.5259073Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5259194Z                     #include <string>
2024-08-30T19:43:30.5259280Z                     
2024-08-30T19:43:30.5259471Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5259628Z                             std::string result = "";
2024-08-30T19:43:30.5259749Z                                 int sh
2024-08-30T19:43:30.5261838Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int sh","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5266339Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int sh","JS_RUNNE ...
2024-08-30T19:43:30.5266775Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5266909Z                     #include <string>
2024-08-30T19:43:30.5267103Z                     
2024-08-30T19:43:30.5267298Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5267456Z                             std::string result = "";
2024-08-30T19:43:30.5267690Z                                 int s -> #include <iostream>
2024-08-30T19:43:30.5267815Z                     #include <string>
2024-08-30T19:43:30.5267901Z                     
2024-08-30T19:43:30.5268083Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5268244Z                             std::string result = "";
2024-08-30T19:43:30.5268358Z                                 int sh
2024-08-30T19:43:30.5268690Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5268959Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5269273Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5269519Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.5269811Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5269938Z                     #include <string>
2024-08-30T19:43:30.5270021Z                     
2024-08-30T19:43:30.5270198Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5270476Z                             std::string result = "";
2024-08-30T19:43:30.5270596Z                                 int shi
2024-08-30T19:43:30.5272706Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shi","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5277025Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shi","JS_RUNN ...
2024-08-30T19:43:30.5277452Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5277575Z                     #include <string>
2024-08-30T19:43:30.5277669Z                     
2024-08-30T19:43:30.5277854Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5278008Z                             std::string result = "";
2024-08-30T19:43:30.5278241Z                                 int sh -> #include <iostream>
2024-08-30T19:43:30.5278363Z                     #include <string>
2024-08-30T19:43:30.5278452Z                     
2024-08-30T19:43:30.5278620Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5278767Z                             std::string result = "";
2024-08-30T19:43:30.5278885Z                                 int shi
2024-08-30T19:43:30.5279210Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5279402Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5279714Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5279952Z [32m      cy:command ✔ [39m type	f, {force: true}
2024-08-30T19:43:30.5280246Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5280444Z                     #include <string>
2024-08-30T19:43:30.5280531Z                     
2024-08-30T19:43:30.5280703Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5280862Z                             std::string result = "";
2024-08-30T19:43:30.5281012Z                                 int shif
2024-08-30T19:43:30.5283335Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shif","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5287876Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shif","JS_RUN ...
2024-08-30T19:43:30.5288316Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5288445Z                     #include <string>
2024-08-30T19:43:30.5288531Z                     
2024-08-30T19:43:30.5288722Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5288880Z                             std::string result = "";
2024-08-30T19:43:30.5289104Z                                 int shi -> #include <iostream>
2024-08-30T19:43:30.5289231Z                     #include <string>
2024-08-30T19:43:30.5289322Z                     
2024-08-30T19:43:30.5289505Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5289654Z                             std::string result = "";
2024-08-30T19:43:30.5289774Z                                 int shif
2024-08-30T19:43:30.5290102Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5290284Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5290602Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5290840Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.5291362Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5291507Z                     #include <string>
2024-08-30T19:43:30.5291593Z                     
2024-08-30T19:43:30.5291778Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5291937Z                             std::string result = "";
2024-08-30T19:43:30.5292067Z                                 int shift
2024-08-30T19:43:30.5294193Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5298497Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift","JS_RU ...
2024-08-30T19:43:30.5299025Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5299332Z                     #include <string>
2024-08-30T19:43:30.5299501Z                     
2024-08-30T19:43:30.5299785Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5300014Z                             std::string result = "";
2024-08-30T19:43:30.5300482Z                                 int shif -> #include <iostream>
2024-08-30T19:43:30.5300703Z                     #include <string>
2024-08-30T19:43:30.5300855Z                     
2024-08-30T19:43:30.5301437Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5301632Z                             std::string result = "";
2024-08-30T19:43:30.5301768Z                                 int shift
2024-08-30T19:43:30.5302163Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5302359Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5302676Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5302926Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5303227Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5303351Z                     #include <string>
2024-08-30T19:43:30.5303450Z                     
2024-08-30T19:43:30.5303632Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5303787Z                             std::string result = "";
2024-08-30T19:43:30.5303922Z                                 int shift 
2024-08-30T19:43:30.5306069Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5310410Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift ","JS_R ...
2024-08-30T19:43:30.5310828Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5310957Z                     #include <string>
2024-08-30T19:43:30.5311042Z                     
2024-08-30T19:43:30.5311231Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5311387Z                             std::string result = "";
2024-08-30T19:43:30.5311706Z                                 int shift -> #include <iostream>
2024-08-30T19:43:30.5311828Z                     #include <string>
2024-08-30T19:43:30.5311913Z                     
2024-08-30T19:43:30.5312098Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5312259Z                             std::string result = "";
2024-08-30T19:43:30.5312389Z                                 int shift 
2024-08-30T19:43:30.5312729Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5312912Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5313228Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5313538Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.5313830Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5313959Z                     #include <string>
2024-08-30T19:43:30.5314044Z                     
2024-08-30T19:43:30.5314233Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5314384Z                             std::string result = "";
2024-08-30T19:43:30.5314509Z                                 int shift =
2024-08-30T19:43:30.5316756Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift =","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5321108Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift =","JS_ ...
2024-08-30T19:43:30.5321530Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5321663Z                     #include <string>
2024-08-30T19:43:30.5321748Z                     
2024-08-30T19:43:30.5321926Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5322084Z                             std::string result = "";
2024-08-30T19:43:30.5322314Z                                 int shift  -> #include <iostream>
2024-08-30T19:43:30.5322435Z                     #include <string>
2024-08-30T19:43:30.5322525Z                     
2024-08-30T19:43:30.5322701Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5322860Z                             std::string result = "";
2024-08-30T19:43:30.5322987Z                                 int shift =
2024-08-30T19:43:30.5323309Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5323498Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5323807Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5324059Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5324347Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5324470Z                     #include <string>
2024-08-30T19:43:30.5324559Z                     
2024-08-30T19:43:30.5324735Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5324971Z                             std::string result = "";
2024-08-30T19:43:30.5325106Z                                 int shift = 
2024-08-30T19:43:30.5327232Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5332030Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = ","JS ...
2024-08-30T19:43:30.5332502Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5332627Z                     #include <string>
2024-08-30T19:43:30.5332717Z                     
2024-08-30T19:43:30.5332904Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5333056Z                             std::string result = "";
2024-08-30T19:43:30.5333294Z                                 int shift = -> #include <iostream>
2024-08-30T19:43:30.5333416Z                     #include <string>
2024-08-30T19:43:30.5333500Z                     
2024-08-30T19:43:30.5333685Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5333837Z                             std::string result = "";
2024-08-30T19:43:30.5333975Z                                 int shift = 
2024-08-30T19:43:30.5334301Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5334483Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5334796Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5335034Z [32m      cy:command ✔ [39m type	7, {force: true}
2024-08-30T19:43:30.5335330Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5335452Z                     #include <string>
2024-08-30T19:43:30.5335537Z                     
2024-08-30T19:43:30.5335719Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5335876Z                             std::string result = "";
2024-08-30T19:43:30.5336009Z                                 int shift = 7
2024-08-30T19:43:30.5338137Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5342444Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7","J ...
2024-08-30T19:43:30.5342952Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5343081Z                     #include <string>
2024-08-30T19:43:30.5343243Z                     
2024-08-30T19:43:30.5343426Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5343595Z                             std::string result = "";
2024-08-30T19:43:30.5343829Z                                 int shift =  -> #include <iostream>
2024-08-30T19:43:30.5343959Z                     #include <string>
2024-08-30T19:43:30.5344042Z                     
2024-08-30T19:43:30.5344218Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5344378Z                             std::string result = "";
2024-08-30T19:43:30.5344624Z                                 int shift = 7
2024-08-30T19:43:30.5344951Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5345142Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5345455Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5345704Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.5345996Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5346124Z                     #include <string>
2024-08-30T19:43:30.5346207Z                     
2024-08-30T19:43:30.5346385Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5346544Z                             std::string result = "";
2024-08-30T19:43:30.5346688Z                                 int shift = 7;
2024-08-30T19:43:30.5348814Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5353130Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;"," ...
2024-08-30T19:43:30.5353549Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5353672Z                     #include <string>
2024-08-30T19:43:30.5353761Z                     
2024-08-30T19:43:30.5353944Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5354097Z                             std::string result = "";
2024-08-30T19:43:30.5354338Z                                 int shift = 7 -> #include <iostream>
2024-08-30T19:43:30.5354453Z                     #include <string>
2024-08-30T19:43:30.5354620Z                     
2024-08-30T19:43:30.5354803Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5354954Z                             std::string result = "";
2024-08-30T19:43:30.5355104Z                                 int shift = 7;
2024-08-30T19:43:30.5355428Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5355607Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5355923Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5356098Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.5356218Z                     , {force: true}
2024-08-30T19:43:30.5356576Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5356696Z                     #include <string>
2024-08-30T19:43:30.5356783Z                     
2024-08-30T19:43:30.5356959Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5357122Z                             std::string result = "";
2024-08-30T19:43:30.5357257Z                                 int shift = 7;
2024-08-30T19:43:30.5357361Z                                 
2024-08-30T19:43:30.5359671Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5364021Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n  ...
2024-08-30T19:43:30.5364481Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5364619Z                     #include <string>
2024-08-30T19:43:30.5364704Z                     
2024-08-30T19:43:30.5364885Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5365046Z                             std::string result = "";
2024-08-30T19:43:30.5365282Z                                 int shift = 7; -> #include <iostream>
2024-08-30T19:43:30.5365406Z                     #include <string>
2024-08-30T19:43:30.5365495Z                     
2024-08-30T19:43:30.5365668Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5365831Z                             std::string result = "";
2024-08-30T19:43:30.5365969Z                                 int shift = 7;
2024-08-30T19:43:30.5366074Z                                 
2024-08-30T19:43:30.5366402Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5366584Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5366894Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5367083Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.5367200Z                     , {force: true}
2024-08-30T19:43:30.5367491Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5367613Z                     #include <string>
2024-08-30T19:43:30.5367778Z                     
2024-08-30T19:43:30.5367964Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5368118Z                             std::string result = "";
2024-08-30T19:43:30.5368259Z                                 int shift = 7;
2024-08-30T19:43:30.5368349Z                     
2024-08-30T19:43:30.5368452Z                                 
2024-08-30T19:43:30.5370627Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5375463Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5375910Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5376044Z                     #include <string>
2024-08-30T19:43:30.5376131Z                     
2024-08-30T19:43:30.5376320Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5376481Z                             std::string result = "";
2024-08-30T19:43:30.5376617Z                                 int shift = 7;
2024-08-30T19:43:30.5376835Z                                  -> #include <iostream>
2024-08-30T19:43:30.5376961Z                     #include <string>
2024-08-30T19:43:30.5377045Z                     
2024-08-30T19:43:30.5377222Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5377381Z                             std::string result = "";
2024-08-30T19:43:30.5377515Z                                 int shift = 7;
2024-08-30T19:43:30.5377609Z                     
2024-08-30T19:43:30.5377715Z                                 
2024-08-30T19:43:30.5378037Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5378227Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5378534Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5378785Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5379072Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5379197Z                     #include <string>
2024-08-30T19:43:30.5379296Z                     
2024-08-30T19:43:30.5379474Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5379632Z                             std::string result = "";
2024-08-30T19:43:30.5379767Z                                 int shift = 7;
2024-08-30T19:43:30.5379851Z                     
2024-08-30T19:43:30.5379965Z                                  
2024-08-30T19:43:30.5382141Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5386567Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5387058Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5387186Z                     #include <string>
2024-08-30T19:43:30.5387270Z                     
2024-08-30T19:43:30.5387569Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5387729Z                             std::string result = "";
2024-08-30T19:43:30.5387867Z                                 int shift = 7;
2024-08-30T19:43:30.5387956Z                     
2024-08-30T19:43:30.5388168Z                                  -> #include <iostream>
2024-08-30T19:43:30.5388288Z                     #include <string>
2024-08-30T19:43:30.5388384Z                     
2024-08-30T19:43:30.5388561Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5388716Z                             std::string result = "";
2024-08-30T19:43:30.5388850Z                                 int shift = 7;
2024-08-30T19:43:30.5388940Z                     
2024-08-30T19:43:30.5389050Z                                  
2024-08-30T19:43:30.5389374Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5389557Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5389880Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5390122Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5390416Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5390542Z                     #include <string>
2024-08-30T19:43:30.5390633Z                     
2024-08-30T19:43:30.5390810Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5390971Z                             std::string result = "";
2024-08-30T19:43:30.5391109Z                                 int shift = 7;
2024-08-30T19:43:30.5391193Z                     
2024-08-30T19:43:30.5391300Z                                   
2024-08-30T19:43:30.5393491Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5397810Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5398309Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5398438Z                     #include <string>
2024-08-30T19:43:30.5398524Z                     
2024-08-30T19:43:30.5398703Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5398861Z                             std::string result = "";
2024-08-30T19:43:30.5399061Z                                 int shift = 7;
2024-08-30T19:43:30.5399147Z                     
2024-08-30T19:43:30.5399366Z                                   -> #include <iostream>
2024-08-30T19:43:30.5399484Z                     #include <string>
2024-08-30T19:43:30.5399581Z                     
2024-08-30T19:43:30.5399758Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5399916Z                             std::string result = "";
2024-08-30T19:43:30.5400055Z                                 int shift = 7;
2024-08-30T19:43:30.5400264Z                     
2024-08-30T19:43:30.5400374Z                                   
2024-08-30T19:43:30.5400707Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5400890Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5401209Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5401454Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5401741Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5401870Z                     #include <string>
2024-08-30T19:43:30.5401954Z                     
2024-08-30T19:43:30.5402141Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5402298Z                             std::string result = "";
2024-08-30T19:43:30.5402430Z                                 int shift = 7;
2024-08-30T19:43:30.5402523Z                     
2024-08-30T19:43:30.5402640Z                                    
2024-08-30T19:43:30.5404815Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5409125Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5409545Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5409670Z                     #include <string>
2024-08-30T19:43:30.5409762Z                     
2024-08-30T19:43:30.5409940Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5410174Z                             std::string result = "";
2024-08-30T19:43:30.5410321Z                                 int shift = 7;
2024-08-30T19:43:30.5410406Z                     
2024-08-30T19:43:30.5410629Z                                    -> #include <iostream>
2024-08-30T19:43:30.5410758Z                     #include <string>
2024-08-30T19:43:30.5410845Z                     
2024-08-30T19:43:30.5411241Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5411421Z                             std::string result = "";
2024-08-30T19:43:30.5411560Z                                 int shift = 7;
2024-08-30T19:43:30.5411650Z                     
2024-08-30T19:43:30.5411882Z                                    
2024-08-30T19:43:30.5412230Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5412427Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5412737Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5412993Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5413282Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5413412Z                     #include <string>
2024-08-30T19:43:30.5413498Z                     
2024-08-30T19:43:30.5413916Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5414081Z                             std::string result = "";
2024-08-30T19:43:30.5414216Z                                 int shift = 7;
2024-08-30T19:43:30.5414303Z                     
2024-08-30T19:43:30.5414422Z                                     
2024-08-30T19:43:30.5416599Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5420918Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5421342Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5421471Z                     #include <string>
2024-08-30T19:43:30.5421558Z                     
2024-08-30T19:43:30.5421749Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5421902Z                             std::string result = "";
2024-08-30T19:43:30.5422047Z                                 int shift = 7;
2024-08-30T19:43:30.5422131Z                     
2024-08-30T19:43:30.5422344Z                                     -> #include <iostream>
2024-08-30T19:43:30.5422468Z                     #include <string>
2024-08-30T19:43:30.5422559Z                     
2024-08-30T19:43:30.5422739Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5422900Z                             std::string result = "";
2024-08-30T19:43:30.5423036Z                                 int shift = 7;
2024-08-30T19:43:30.5423125Z                     
2024-08-30T19:43:30.5423333Z                                     
2024-08-30T19:43:30.5423664Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5423850Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5424168Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5424409Z [32m      cy:command ✔ [39m type	f, {force: true}
2024-08-30T19:43:30.5424706Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5424829Z                     #include <string>
2024-08-30T19:43:30.5424920Z                     
2024-08-30T19:43:30.5425099Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5425335Z                             std::string result = "";
2024-08-30T19:43:30.5425476Z                                 int shift = 7;
2024-08-30T19:43:30.5425560Z                     
2024-08-30T19:43:30.5425671Z                                     f
2024-08-30T19:43:30.5427984Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                f","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5432320Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5432736Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5432868Z                     #include <string>
2024-08-30T19:43:30.5432952Z                     
2024-08-30T19:43:30.5433137Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5433297Z                             std::string result = "";
2024-08-30T19:43:30.5433436Z                                 int shift = 7;
2024-08-30T19:43:30.5433527Z                     
2024-08-30T19:43:30.5433743Z                                      -> #include <iostream>
2024-08-30T19:43:30.5433863Z                     #include <string>
2024-08-30T19:43:30.5433959Z                     
2024-08-30T19:43:30.5434141Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5434295Z                             std::string result = "";
2024-08-30T19:43:30.5434437Z                                 int shift = 7;
2024-08-30T19:43:30.5434528Z                     
2024-08-30T19:43:30.5434644Z                                     f
2024-08-30T19:43:30.5434969Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5435150Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5435461Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5435702Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.5436004Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5436124Z                     #include <string>
2024-08-30T19:43:30.5436210Z                     
2024-08-30T19:43:30.5436395Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5436629Z                             std::string result = "";
2024-08-30T19:43:30.5436766Z                                 int shift = 7;
2024-08-30T19:43:30.5436857Z                     
2024-08-30T19:43:30.5436978Z                                     fo
2024-08-30T19:43:30.5439189Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                fo","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5443689Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5444125Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5444252Z                     #include <string>
2024-08-30T19:43:30.5444344Z                     
2024-08-30T19:43:30.5444522Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5444685Z                             std::string result = "";
2024-08-30T19:43:30.5444818Z                                 int shift = 7;
2024-08-30T19:43:30.5444903Z                     
2024-08-30T19:43:30.5445128Z                                     f -> #include <iostream>
2024-08-30T19:43:30.5445252Z                     #include <string>
2024-08-30T19:43:30.5445336Z                     
2024-08-30T19:43:30.5445518Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5445670Z                             std::string result = "";
2024-08-30T19:43:30.5445809Z                                 int shift = 7;
2024-08-30T19:43:30.5445893Z                     
2024-08-30T19:43:30.5446011Z                                     fo
2024-08-30T19:43:30.5446338Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5446518Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5446826Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5447077Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.5447365Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5447494Z                     #include <string>
2024-08-30T19:43:30.5447577Z                     
2024-08-30T19:43:30.5447761Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5447918Z                             std::string result = "";
2024-08-30T19:43:30.5448051Z                                 int shift = 7;
2024-08-30T19:43:30.5448142Z                     
2024-08-30T19:43:30.5448258Z                                     for
2024-08-30T19:43:30.5450458Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5455253Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5455799Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5455926Z                     #include <string>
2024-08-30T19:43:30.5456018Z                     
2024-08-30T19:43:30.5456336Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5456492Z                             std::string result = "";
2024-08-30T19:43:30.5456636Z                                 int shift = 7;
2024-08-30T19:43:30.5456721Z                     
2024-08-30T19:43:30.5456943Z                                     fo -> #include <iostream>
2024-08-30T19:43:30.5457067Z                     #include <string>
2024-08-30T19:43:30.5457155Z                     
2024-08-30T19:43:30.5457329Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5457488Z                             std::string result = "";
2024-08-30T19:43:30.5457620Z                                 int shift = 7;
2024-08-30T19:43:30.5457708Z                     
2024-08-30T19:43:30.5457830Z                                     for
2024-08-30T19:43:30.5458151Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5458337Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5458648Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5458893Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5459183Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5459306Z                     #include <string>
2024-08-30T19:43:30.5459398Z                     
2024-08-30T19:43:30.5459572Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5459733Z                             std::string result = "";
2024-08-30T19:43:30.5459867Z                                 int shift = 7;
2024-08-30T19:43:30.5459954Z                     
2024-08-30T19:43:30.5460082Z                                     for 
2024-08-30T19:43:30.5462285Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5467250Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5468191Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5468345Z                     #include <string>
2024-08-30T19:43:30.5468435Z                     
2024-08-30T19:43:30.5468637Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5468799Z                             std::string result = "";
2024-08-30T19:43:30.5469046Z                                 int shift = 7;
2024-08-30T19:43:30.5469139Z                     
2024-08-30T19:43:30.5469385Z                                     for -> #include <iostream>
2024-08-30T19:43:30.5469509Z                     #include <string>
2024-08-30T19:43:30.5469606Z                     
2024-08-30T19:43:30.5469790Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5469953Z                             std::string result = "";
2024-08-30T19:43:30.5470089Z                                 int shift = 7;
2024-08-30T19:43:30.5470295Z                     
2024-08-30T19:43:30.5470428Z                                     for 
2024-08-30T19:43:30.5470773Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5470957Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5471275Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5471522Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.5471824Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5471949Z                     #include <string>
2024-08-30T19:43:30.5472042Z                     
2024-08-30T19:43:30.5472227Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5472388Z                             std::string result = "";
2024-08-30T19:43:30.5472530Z                                 int shift = 7;
2024-08-30T19:43:30.5472613Z                     
2024-08-30T19:43:30.5472742Z                                     for (
2024-08-30T19:43:30.5474968Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5479305Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5479718Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5479850Z                     #include <string>
2024-08-30T19:43:30.5479933Z                     
2024-08-30T19:43:30.5480114Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5480362Z                             std::string result = "";
2024-08-30T19:43:30.5480499Z                                 int shift = 7;
2024-08-30T19:43:30.5480584Z                     
2024-08-30T19:43:30.5480816Z                                     for  -> #include <iostream>
2024-08-30T19:43:30.5480939Z                     #include <string>
2024-08-30T19:43:30.5481027Z                     
2024-08-30T19:43:30.5481209Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5481361Z                             std::string result = "";
2024-08-30T19:43:30.5481501Z                                 int shift = 7;
2024-08-30T19:43:30.5481584Z                     
2024-08-30T19:43:30.5481772Z                                     for (
2024-08-30T19:43:30.5482112Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5482297Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5482612Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5482860Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.5483155Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5483287Z                     #include <string>
2024-08-30T19:43:30.5483493Z                     
2024-08-30T19:43:30.5483688Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5483844Z                             std::string result = "";
2024-08-30T19:43:30.5483982Z                                 int shift = 7;
2024-08-30T19:43:30.5484073Z                     
2024-08-30T19:43:30.5484192Z                                     for (c
2024-08-30T19:43:30.5486419Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5490822Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5491518Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5491653Z                     #include <string>
2024-08-30T19:43:30.5491745Z                     
2024-08-30T19:43:30.5491938Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5492094Z                             std::string result = "";
2024-08-30T19:43:30.5492236Z                                 int shift = 7;
2024-08-30T19:43:30.5492321Z                     
2024-08-30T19:43:30.5492560Z                                     for ( -> #include <iostream>
2024-08-30T19:43:30.5492678Z                     #include <string>
2024-08-30T19:43:30.5492767Z                     
2024-08-30T19:43:30.5492950Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5493101Z                             std::string result = "";
2024-08-30T19:43:30.5493234Z                                 int shift = 7;
2024-08-30T19:43:30.5493436Z                     
2024-08-30T19:43:30.5493559Z                                     for (c
2024-08-30T19:43:30.5493900Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5494085Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5494414Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5494666Z [32m      cy:command ✔ [39m type	h, {force: true}
2024-08-30T19:43:30.5494959Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5495090Z                     #include <string>
2024-08-30T19:43:30.5495175Z                     
2024-08-30T19:43:30.5495444Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5495609Z                             std::string result = "";
2024-08-30T19:43:30.5495746Z                                 int shift = 7;
2024-08-30T19:43:30.5495832Z                     
2024-08-30T19:43:30.5495965Z                                     for (ch
2024-08-30T19:43:30.5498342Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (ch","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5502676Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5503100Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5503228Z                     #include <string>
2024-08-30T19:43:30.5503315Z                     
2024-08-30T19:43:30.5503502Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5503661Z                             std::string result = "";
2024-08-30T19:43:30.5503809Z                                 int shift = 7;
2024-08-30T19:43:30.5503895Z                     
2024-08-30T19:43:30.5504125Z                                     for (c -> #include <iostream>
2024-08-30T19:43:30.5504255Z                     #include <string>
2024-08-30T19:43:30.5504338Z                     
2024-08-30T19:43:30.5504517Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5504675Z                             std::string result = "";
2024-08-30T19:43:30.5504816Z                                 int shift = 7;
2024-08-30T19:43:30.5504902Z                     
2024-08-30T19:43:30.5505033Z                                     for (ch
2024-08-30T19:43:30.5505356Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5505544Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5505850Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5506103Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.5506392Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5506515Z                     #include <string>
2024-08-30T19:43:30.5506606Z                     
2024-08-30T19:43:30.5506864Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5507017Z                             std::string result = "";
2024-08-30T19:43:30.5507157Z                                 int shift = 7;
2024-08-30T19:43:30.5507247Z                     
2024-08-30T19:43:30.5507383Z                                     for (cha
2024-08-30T19:43:30.5509595Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (cha","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5514104Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5514529Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5514661Z                     #include <string>
2024-08-30T19:43:30.5514747Z                     
2024-08-30T19:43:30.5514967Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5515120Z                             std::string result = "";
2024-08-30T19:43:30.5515253Z                                 int shift = 7;
2024-08-30T19:43:30.5515343Z                     
2024-08-30T19:43:30.5515587Z                                     for (ch -> #include <iostream>
2024-08-30T19:43:30.5515706Z                     #include <string>
2024-08-30T19:43:30.5515796Z                     
2024-08-30T19:43:30.5515970Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5516117Z                             std::string result = "";
2024-08-30T19:43:30.5516254Z                                 int shift = 7;
2024-08-30T19:43:30.5516342Z                     
2024-08-30T19:43:30.5516478Z                                     for (cha
2024-08-30T19:43:30.5516805Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5516989Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5517310Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5517549Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.5517840Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5517969Z                     #include <string>
2024-08-30T19:43:30.5518056Z                     
2024-08-30T19:43:30.5518241Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5518396Z                             std::string result = "";
2024-08-30T19:43:30.5518535Z                                 int shift = 7;
2024-08-30T19:43:30.5518620Z                     
2024-08-30T19:43:30.5518752Z                                     for (char
2024-08-30T19:43:30.5520983Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5525379Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5525869Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5526000Z                     #include <string>
2024-08-30T19:43:30.5526201Z                     
2024-08-30T19:43:30.5526388Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5526548Z                             std::string result = "";
2024-08-30T19:43:30.5526685Z                                 int shift = 7;
2024-08-30T19:43:30.5526769Z                     
2024-08-30T19:43:30.5527010Z                                     for (cha -> #include <iostream>
2024-08-30T19:43:30.5527132Z                     #include <string>
2024-08-30T19:43:30.5527215Z                     
2024-08-30T19:43:30.5527394Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5527543Z                             std::string result = "";
2024-08-30T19:43:30.5527686Z                                 int shift = 7;
2024-08-30T19:43:30.5527770Z                     
2024-08-30T19:43:30.5527900Z                                     for (char
2024-08-30T19:43:30.5528227Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5528417Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5528741Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5528982Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5529270Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5529401Z                     #include <string>
2024-08-30T19:43:30.5529491Z                     
2024-08-30T19:43:30.5529672Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5529827Z                             std::string result = "";
2024-08-30T19:43:30.5529961Z                                 int shift = 7;
2024-08-30T19:43:30.5530056Z                     
2024-08-30T19:43:30.5530187Z                                     for (char 
2024-08-30T19:43:30.5532642Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5537004Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5537547Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5537676Z                     #include <string>
2024-08-30T19:43:30.5537768Z                     
2024-08-30T19:43:30.5538029Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5538183Z                             std::string result = "";
2024-08-30T19:43:30.5538322Z                                 int shift = 7;
2024-08-30T19:43:30.5538407Z                     
2024-08-30T19:43:30.5538650Z                                     for (char -> #include <iostream>
2024-08-30T19:43:30.5538777Z                     #include <string>
2024-08-30T19:43:30.5538861Z                     
2024-08-30T19:43:30.5539038Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5539331Z                             std::string result = "";
2024-08-30T19:43:30.5539466Z                                 int shift = 7;
2024-08-30T19:43:30.5539558Z                     
2024-08-30T19:43:30.5539689Z                                     for (char 
2024-08-30T19:43:30.5540023Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5540220Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5540543Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5540789Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.5541077Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5541216Z                     #include <string>
2024-08-30T19:43:30.5541301Z                     
2024-08-30T19:43:30.5541481Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5541640Z                             std::string result = "";
2024-08-30T19:43:30.5541781Z                                 int shift = 7;
2024-08-30T19:43:30.5541866Z                     
2024-08-30T19:43:30.5542008Z                                     for (char c
2024-08-30T19:43:30.5544246Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5548747Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5549188Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5549317Z                     #include <string>
2024-08-30T19:43:30.5549495Z                     
2024-08-30T19:43:30.5549691Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5549847Z                             std::string result = "";
2024-08-30T19:43:30.5549988Z                                 int shift = 7;
2024-08-30T19:43:30.5550079Z                     
2024-08-30T19:43:30.5550326Z                                     for (char  -> #include <iostream>
2024-08-30T19:43:30.5550450Z                     #include <string>
2024-08-30T19:43:30.5550534Z                     
2024-08-30T19:43:30.5550705Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5550936Z                             std::string result = "";
2024-08-30T19:43:30.5551070Z                                 int shift = 7;
2024-08-30T19:43:30.5551154Z                     
2024-08-30T19:43:30.5551295Z                                     for (char c
2024-08-30T19:43:30.5551624Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5551823Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5552140Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5552377Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5552796Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5552923Z                     #include <string>
2024-08-30T19:43:30.5553017Z                     
2024-08-30T19:43:30.5553197Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5553350Z                             std::string result = "";
2024-08-30T19:43:30.5553492Z                                 int shift = 7;
2024-08-30T19:43:30.5553580Z                     
2024-08-30T19:43:30.5553717Z                                     for (char c 
2024-08-30T19:43:30.5555973Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5560287Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5560706Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5560837Z                     #include <string>
2024-08-30T19:43:30.5560922Z                     
2024-08-30T19:43:30.5561099Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5561258Z                             std::string result = "";
2024-08-30T19:43:30.5561391Z                                 int shift = 7;
2024-08-30T19:43:30.5561485Z                     
2024-08-30T19:43:30.5561726Z                                     for (char c -> #include <iostream>
2024-08-30T19:43:30.5561844Z                     #include <string>
2024-08-30T19:43:30.5561933Z                     
2024-08-30T19:43:30.5562304Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5562652Z                             std::string result = "";
2024-08-30T19:43:30.5562798Z                                 int shift = 7;
2024-08-30T19:43:30.5562883Z                     
2024-08-30T19:43:30.5563032Z                                     for (char c 
2024-08-30T19:43:30.5563392Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5563579Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5563905Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5564146Z [32m      cy:command ✔ [39m type	:, {force: true}
2024-08-30T19:43:30.5564475Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5564688Z                     #include <string>
2024-08-30T19:43:30.5564773Z                     
2024-08-30T19:43:30.5564967Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5565119Z                             std::string result = "";
2024-08-30T19:43:30.5565259Z                                 int shift = 7;
2024-08-30T19:43:30.5565350Z                     
2024-08-30T19:43:30.5565487Z                                     for (char c :
2024-08-30T19:43:30.5567908Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c :","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5572492Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5572988Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5573216Z                     #include <string>
2024-08-30T19:43:30.5573369Z                     
2024-08-30T19:43:30.5573666Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5573833Z                             std::string result = "";
2024-08-30T19:43:30.5573977Z                                 int shift = 7;
2024-08-30T19:43:30.5574061Z                     
2024-08-30T19:43:30.5574328Z                                     for (char c  -> #include <iostream>
2024-08-30T19:43:30.5574448Z                     #include <string>
2024-08-30T19:43:30.5574539Z                     
2024-08-30T19:43:30.5574721Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5574875Z                             std::string result = "";
2024-08-30T19:43:30.5575014Z                                 int shift = 7;
2024-08-30T19:43:30.5575102Z                     
2024-08-30T19:43:30.5575240Z                                     for (char c :
2024-08-30T19:43:30.5575579Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5575762Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5576085Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5576329Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5576747Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5576883Z                     #include <string>
2024-08-30T19:43:30.5576968Z                     
2024-08-30T19:43:30.5577157Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5577319Z                             std::string result = "";
2024-08-30T19:43:30.5577454Z                                 int shift = 7;
2024-08-30T19:43:30.5577546Z                     
2024-08-30T19:43:30.5577689Z                                     for (char c : 
2024-08-30T19:43:30.5579929Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5584478Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5584908Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5585035Z                     #include <string>
2024-08-30T19:43:30.5585125Z                     
2024-08-30T19:43:30.5585301Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5585461Z                             std::string result = "";
2024-08-30T19:43:30.5585603Z                                 int shift = 7;
2024-08-30T19:43:30.5585688Z                     
2024-08-30T19:43:30.5585936Z                                     for (char c : -> #include <iostream>
2024-08-30T19:43:30.5586059Z                     #include <string>
2024-08-30T19:43:30.5586145Z                     
2024-08-30T19:43:30.5586328Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5586481Z                             std::string result = "";
2024-08-30T19:43:30.5586613Z                                 int shift = 7;
2024-08-30T19:43:30.5586705Z                     
2024-08-30T19:43:30.5586848Z                                     for (char c : 
2024-08-30T19:43:30.5587170Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5587359Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5587681Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5587929Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.5588216Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5588340Z                     #include <string>
2024-08-30T19:43:30.5588431Z                     
2024-08-30T19:43:30.5588605Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5588768Z                             std::string result = "";
2024-08-30T19:43:30.5588900Z                                 int shift = 7;
2024-08-30T19:43:30.5588983Z                     
2024-08-30T19:43:30.5589128Z                                     for (char c : i
2024-08-30T19:43:30.5591461Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5595906Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5596392Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5596516Z                     #include <string>
2024-08-30T19:43:30.5596601Z                     
2024-08-30T19:43:30.5596787Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5596945Z                             std::string result = "";
2024-08-30T19:43:30.5597080Z                                 int shift = 7;
2024-08-30T19:43:30.5597170Z                     
2024-08-30T19:43:30.5597420Z                                     for (char c :  -> #include <iostream>
2024-08-30T19:43:30.5597550Z                     #include <string>
2024-08-30T19:43:30.5597633Z                     
2024-08-30T19:43:30.5597811Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5597967Z                             std::string result = "";
2024-08-30T19:43:30.5598107Z                                 int shift = 7;
2024-08-30T19:43:30.5598189Z                     
2024-08-30T19:43:30.5598340Z                                     for (char c : i
2024-08-30T19:43:30.5598658Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5598844Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5599160Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5599401Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.5599695Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5599816Z                     #include <string>
2024-08-30T19:43:30.5599907Z                     
2024-08-30T19:43:30.5600088Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5600240Z                             std::string result = "";
2024-08-30T19:43:30.5600380Z                                 int shift = 7;
2024-08-30T19:43:30.5600464Z                     
2024-08-30T19:43:30.5600613Z                                     for (char c : in
2024-08-30T19:43:30.5602865Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5607169Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5607712Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5607841Z                     #include <string>
2024-08-30T19:43:30.5607927Z                     
2024-08-30T19:43:30.5608115Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5608275Z                             std::string result = "";
2024-08-30T19:43:30.5608410Z                                 int shift = 7;
2024-08-30T19:43:30.5608501Z                     
2024-08-30T19:43:30.5608874Z                                     for (char c : i -> #include <iostream>
2024-08-30T19:43:30.5608996Z                     #include <string>
2024-08-30T19:43:30.5609087Z                     
2024-08-30T19:43:30.5609266Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5609418Z                             std::string result = "";
2024-08-30T19:43:30.5609562Z                                 int shift = 7;
2024-08-30T19:43:30.5609648Z                     
2024-08-30T19:43:30.5609794Z                                     for (char c : in
2024-08-30T19:43:30.5610130Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5610314Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5610644Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5610884Z [32m      cy:command ✔ [39m type	p, {force: true}
2024-08-30T19:43:30.5611483Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5611621Z                     #include <string>
2024-08-30T19:43:30.5611707Z                     
2024-08-30T19:43:30.5611898Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5612051Z                             std::string result = "";
2024-08-30T19:43:30.5612184Z                                 int shift = 7;
2024-08-30T19:43:30.5612275Z                     
2024-08-30T19:43:30.5612431Z                                     for (char c : inp
2024-08-30T19:43:30.5614737Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : inp","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5619103Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5619640Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5619773Z                     #include <string>
2024-08-30T19:43:30.5619867Z                     
2024-08-30T19:43:30.5620051Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5620213Z                             std::string result = "";
2024-08-30T19:43:30.5620349Z                                 int shift = 7;
2024-08-30T19:43:30.5620434Z                     
2024-08-30T19:43:30.5620805Z                                     for (char c : in -> #include <iostream>
2024-08-30T19:43:30.5620926Z                     #include <string>
2024-08-30T19:43:30.5621013Z                     
2024-08-30T19:43:30.5621195Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5621355Z                             std::string result = "";
2024-08-30T19:43:30.5621497Z                                 int shift = 7;
2024-08-30T19:43:30.5621581Z                     
2024-08-30T19:43:30.5621732Z                                     for (char c : inp
2024-08-30T19:43:30.5622203Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5622395Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5622715Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5622961Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.5623248Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5623381Z                     #include <string>
2024-08-30T19:43:30.5623465Z                     
2024-08-30T19:43:30.5623642Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5623799Z                             std::string result = "";
2024-08-30T19:43:30.5623931Z                                 int shift = 7;
2024-08-30T19:43:30.5624026Z                     
2024-08-30T19:43:30.5624180Z                                     for (char c : inpu
2024-08-30T19:43:30.5626461Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : inpu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5630799Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5631219Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5631347Z                     #include <string>
2024-08-30T19:43:30.5631439Z                     
2024-08-30T19:43:30.5631615Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5631766Z                             std::string result = "";
2024-08-30T19:43:30.5631908Z                                 int shift = 7;
2024-08-30T19:43:30.5632072Z                     
2024-08-30T19:43:30.5632337Z                                     for (char c : inp -> #include <iostream>
2024-08-30T19:43:30.5632495Z                     #include <string>
2024-08-30T19:43:30.5632650Z                     
2024-08-30T19:43:30.5632993Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5633201Z                             std::string result = "";
2024-08-30T19:43:30.5633424Z                                 int shift = 7;
2024-08-30T19:43:30.5633600Z                     
2024-08-30T19:43:30.5633892Z                                     for (char c : inpu
2024-08-30T19:43:30.5634545Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5634950Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5635291Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5635547Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.5635850Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5635980Z                     #include <string>
2024-08-30T19:43:30.5636076Z                     
2024-08-30T19:43:30.5636266Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5636633Z                             std::string result = "";
2024-08-30T19:43:30.5636779Z                                 int shift = 7;
2024-08-30T19:43:30.5636864Z                     
2024-08-30T19:43:30.5637028Z                                     for (char c : input
2024-08-30T19:43:30.5639350Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5643688Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5644114Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5644244Z                     #include <string>
2024-08-30T19:43:30.5644329Z                     
2024-08-30T19:43:30.5644514Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5644674Z                             std::string result = "";
2024-08-30T19:43:30.5644809Z                                 int shift = 7;
2024-08-30T19:43:30.5644900Z                     
2024-08-30T19:43:30.5645161Z                                     for (char c : inpu -> #include <iostream>
2024-08-30T19:43:30.5645287Z                     #include <string>
2024-08-30T19:43:30.5645371Z                     
2024-08-30T19:43:30.5645551Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5645711Z                             std::string result = "";
2024-08-30T19:43:30.5645844Z                                 int shift = 7;
2024-08-30T19:43:30.5645928Z                     
2024-08-30T19:43:30.5646168Z                                     for (char c : input
2024-08-30T19:43:30.5646496Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5646683Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5647008Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5647251Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.5647545Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5647665Z                     #include <string>
2024-08-30T19:43:30.5647753Z                     
2024-08-30T19:43:30.5647929Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5648154Z                             std::string result = "";
2024-08-30T19:43:30.5648300Z                                 int shift = 7;
2024-08-30T19:43:30.5648382Z                     
2024-08-30T19:43:30.5648540Z                                     for (char c : input)
2024-08-30T19:43:30.5651096Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5655575Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5656006Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5656146Z                     #include <string>
2024-08-30T19:43:30.5656233Z                     
2024-08-30T19:43:30.5656417Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5656583Z                             std::string result = "";
2024-08-30T19:43:30.5656722Z                                 int shift = 7;
2024-08-30T19:43:30.5656815Z                     
2024-08-30T19:43:30.5657082Z                                     for (char c : input -> #include <iostream>
2024-08-30T19:43:30.5657207Z                     #include <string>
2024-08-30T19:43:30.5657299Z                     
2024-08-30T19:43:30.5657479Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5657636Z                             std::string result = "";
2024-08-30T19:43:30.5657785Z                                 int shift = 7;
2024-08-30T19:43:30.5657870Z                     
2024-08-30T19:43:30.5658028Z                                     for (char c : input)
2024-08-30T19:43:30.5658358Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5658541Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5658861Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5659103Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5659396Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5659521Z                     #include <string>
2024-08-30T19:43:30.5659605Z                     
2024-08-30T19:43:30.5659902Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5660057Z                             std::string result = "";
2024-08-30T19:43:30.5660193Z                                 int shift = 7;
2024-08-30T19:43:30.5660291Z                     
2024-08-30T19:43:30.5660457Z                                     for (char c : input) 
2024-08-30T19:43:30.5663742Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5671174Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5671784Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5671917Z                     #include <string>
2024-08-30T19:43:30.5672010Z                     
2024-08-30T19:43:30.5672204Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5672368Z                             std::string result = "";
2024-08-30T19:43:30.5672508Z                                 int shift = 7;
2024-08-30T19:43:30.5672595Z                     
2024-08-30T19:43:30.5672882Z                                     for (char c : input) -> #include <iostream>
2024-08-30T19:43:30.5673002Z                     #include <string>
2024-08-30T19:43:30.5673086Z                     
2024-08-30T19:43:30.5673270Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5673425Z                             std::string result = "";
2024-08-30T19:43:30.5673568Z                                 int shift = 7;
2024-08-30T19:43:30.5673654Z                     
2024-08-30T19:43:30.5673813Z                                     for (char c : input) 
2024-08-30T19:43:30.5674145Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5674337Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5674654Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5674900Z [32m      cy:command ✔ [39m type	{, {force: true}
2024-08-30T19:43:30.5675191Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5675333Z                     #include <string>
2024-08-30T19:43:30.5675421Z                     
2024-08-30T19:43:30.5675600Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5675762Z                             std::string result = "";
2024-08-30T19:43:30.5675898Z                                 int shift = 7;
2024-08-30T19:43:30.5675995Z                     
2024-08-30T19:43:30.5676155Z                                     for (char c : input) {
2024-08-30T19:43:30.5678456Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5682885Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5683379Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5683624Z                     #include <string>
2024-08-30T19:43:30.5683720Z                     
2024-08-30T19:43:30.5683905Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5684063Z                             std::string result = "";
2024-08-30T19:43:30.5684210Z                                 int shift = 7;
2024-08-30T19:43:30.5684296Z                     
2024-08-30T19:43:30.5684577Z                                     for (char c : input)  -> #include <iostream>
2024-08-30T19:43:30.5684703Z                     #include <string>
2024-08-30T19:43:30.5684785Z                     
2024-08-30T19:43:30.5684974Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5685137Z                             std::string result = "";
2024-08-30T19:43:30.5685274Z                                 int shift = 7;
2024-08-30T19:43:30.5685363Z                     
2024-08-30T19:43:30.5685522Z                                     for (char c : input) {
2024-08-30T19:43:30.5685863Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5686056Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5686373Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5686556Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.5686674Z                     , {force: true}
2024-08-30T19:43:30.5686968Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5687099Z                     #include <string>
2024-08-30T19:43:30.5687183Z                     
2024-08-30T19:43:30.5687368Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5687523Z                             std::string result = "";
2024-08-30T19:43:30.5687738Z                                 int shift = 7;
2024-08-30T19:43:30.5687831Z                     
2024-08-30T19:43:30.5687990Z                                     for (char c : input) {
2024-08-30T19:43:30.5688117Z                                         
2024-08-30T19:43:30.5690460Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5695036Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5695576Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5695707Z                     #include <string>
2024-08-30T19:43:30.5695790Z                     
2024-08-30T19:43:30.5695968Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5696133Z                             std::string result = "";
2024-08-30T19:43:30.5696266Z                                 int shift = 7;
2024-08-30T19:43:30.5696355Z                     
2024-08-30T19:43:30.5696773Z                                     for (char c : input) { -> #include <iostream>
2024-08-30T19:43:30.5696896Z                     #include <string>
2024-08-30T19:43:30.5696985Z                     
2024-08-30T19:43:30.5697167Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5697319Z                             std::string result = "";
2024-08-30T19:43:30.5697461Z                                 int shift = 7;
2024-08-30T19:43:30.5697548Z                     
2024-08-30T19:43:30.5697704Z                                     for (char c : input) {
2024-08-30T19:43:30.5697825Z                                         
2024-08-30T19:43:30.5698157Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5698350Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5698664Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5698907Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5699200Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5699323Z                     #include <string>
2024-08-30T19:43:30.5699415Z                     
2024-08-30T19:43:30.5699596Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5699750Z                             std::string result = "";
2024-08-30T19:43:30.5699890Z                                 int shift = 7;
2024-08-30T19:43:30.5699978Z                     
2024-08-30T19:43:30.5700144Z                                     for (char c : input) {
2024-08-30T19:43:30.5700261Z                                          
2024-08-30T19:43:30.5702589Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5707015Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5707449Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5707577Z                     #include <string>
2024-08-30T19:43:30.5707669Z                     
2024-08-30T19:43:30.5707852Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5708009Z                             std::string result = "";
2024-08-30T19:43:30.5708230Z                                 int shift = 7;
2024-08-30T19:43:30.5708316Z                     
2024-08-30T19:43:30.5708481Z                                     for (char c : input) {
2024-08-30T19:43:30.5708710Z                                          -> #include <iostream>
2024-08-30T19:43:30.5708841Z                     #include <string>
2024-08-30T19:43:30.5708927Z                     
2024-08-30T19:43:30.5709112Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5709265Z                             std::string result = "";
2024-08-30T19:43:30.5709520Z                                 int shift = 7;
2024-08-30T19:43:30.5709612Z                     
2024-08-30T19:43:30.5709772Z                                     for (char c : input) {
2024-08-30T19:43:30.5709902Z                                          
2024-08-30T19:43:30.5710230Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5710420Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5710739Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5710976Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5711269Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5711398Z                     #include <string>
2024-08-30T19:43:30.5711489Z                     
2024-08-30T19:43:30.5711667Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5711822Z                             std::string result = "";
2024-08-30T19:43:30.5711970Z                                 int shift = 7;
2024-08-30T19:43:30.5712055Z                     
2024-08-30T19:43:30.5712212Z                                     for (char c : input) {
2024-08-30T19:43:30.5712340Z                                           
2024-08-30T19:43:30.5714661Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5719059Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5719478Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5719608Z                     #include <string>
2024-08-30T19:43:30.5719693Z                     
2024-08-30T19:43:30.5719881Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5720040Z                             std::string result = "";
2024-08-30T19:43:30.5720182Z                                 int shift = 7;
2024-08-30T19:43:30.5720265Z                     
2024-08-30T19:43:30.5720427Z                                     for (char c : input) {
2024-08-30T19:43:30.5720662Z                                           -> #include <iostream>
2024-08-30T19:43:30.5720785Z                     #include <string>
2024-08-30T19:43:30.5720941Z                     
2024-08-30T19:43:30.5721128Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5721281Z                             std::string result = "";
2024-08-30T19:43:30.5721417Z                                 int shift = 7;
2024-08-30T19:43:30.5721513Z                     
2024-08-30T19:43:30.5721672Z                                     for (char c : input) {
2024-08-30T19:43:30.5721796Z                                           
2024-08-30T19:43:30.5722265Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5722457Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5722786Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5723029Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5723326Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5723450Z                     #include <string>
2024-08-30T19:43:30.5723541Z                     
2024-08-30T19:43:30.5723728Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5723882Z                             std::string result = "";
2024-08-30T19:43:30.5724027Z                                 int shift = 7;
2024-08-30T19:43:30.5724117Z                     
2024-08-30T19:43:30.5724277Z                                     for (char c : input) {
2024-08-30T19:43:30.5724406Z                                            
2024-08-30T19:43:30.5726749Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5731311Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5731888Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5732022Z                     #include <string>
2024-08-30T19:43:30.5732107Z                     
2024-08-30T19:43:30.5732298Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5732453Z                             std::string result = "";
2024-08-30T19:43:30.5732595Z                                 int shift = 7;
2024-08-30T19:43:30.5732689Z                     
2024-08-30T19:43:30.5732852Z                                     for (char c : input) {
2024-08-30T19:43:30.5733084Z                                            -> #include <iostream>
2024-08-30T19:43:30.5733216Z                     #include <string>
2024-08-30T19:43:30.5733303Z                     
2024-08-30T19:43:30.5733493Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5733647Z                             std::string result = "";
2024-08-30T19:43:30.5733783Z                                 int shift = 7;
2024-08-30T19:43:30.5733873Z                     
2024-08-30T19:43:30.5734119Z                                     for (char c : input) {
2024-08-30T19:43:30.5734240Z                                            
2024-08-30T19:43:30.5734576Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5734759Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5735086Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5735327Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5735622Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5735886Z                     #include <string>
2024-08-30T19:43:30.5735975Z                     
2024-08-30T19:43:30.5736164Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5736319Z                             std::string result = "";
2024-08-30T19:43:30.5736454Z                                 int shift = 7;
2024-08-30T19:43:30.5736543Z                     
2024-08-30T19:43:30.5736703Z                                     for (char c : input) {
2024-08-30T19:43:30.5736832Z                                             
2024-08-30T19:43:30.5739184Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5743494Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5743994Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5744125Z                     #include <string>
2024-08-30T19:43:30.5744209Z                     
2024-08-30T19:43:30.5744394Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5744550Z                             std::string result = "";
2024-08-30T19:43:30.5744685Z                                 int shift = 7;
2024-08-30T19:43:30.5744777Z                     
2024-08-30T19:43:30.5744935Z                                     for (char c : input) {
2024-08-30T19:43:30.5745161Z                                             -> #include <iostream>
2024-08-30T19:43:30.5745288Z                     #include <string>
2024-08-30T19:43:30.5745377Z                     
2024-08-30T19:43:30.5745552Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5745709Z                             std::string result = "";
2024-08-30T19:43:30.5745848Z                                 int shift = 7;
2024-08-30T19:43:30.5745938Z                     
2024-08-30T19:43:30.5746099Z                                     for (char c : input) {
2024-08-30T19:43:30.5746223Z                                             
2024-08-30T19:43:30.5746547Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5746732Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5747128Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5747366Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5747656Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5747783Z                     #include <string>
2024-08-30T19:43:30.5747872Z                     
2024-08-30T19:43:30.5748062Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5748215Z                             std::string result = "";
2024-08-30T19:43:30.5748350Z                                 int shift = 7;
2024-08-30T19:43:30.5748567Z                     
2024-08-30T19:43:30.5748730Z                                     for (char c : input) {
2024-08-30T19:43:30.5748856Z                                              
2024-08-30T19:43:30.5751188Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5755515Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5755924Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5756128Z                     #include <string>
2024-08-30T19:43:30.5756219Z                     
2024-08-30T19:43:30.5756404Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5756570Z                             std::string result = "";
2024-08-30T19:43:30.5756710Z                                 int shift = 7;
2024-08-30T19:43:30.5756796Z                     
2024-08-30T19:43:30.5756964Z                                     for (char c : input) {
2024-08-30T19:43:30.5757199Z                                              -> #include <iostream>
2024-08-30T19:43:30.5757325Z                     #include <string>
2024-08-30T19:43:30.5757413Z                     
2024-08-30T19:43:30.5757592Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5757753Z                             std::string result = "";
2024-08-30T19:43:30.5757890Z                                 int shift = 7;
2024-08-30T19:43:30.5757977Z                     
2024-08-30T19:43:30.5758141Z                                     for (char c : input) {
2024-08-30T19:43:30.5758269Z                                              
2024-08-30T19:43:30.5758601Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5758790Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5759107Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5759354Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5759643Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5759770Z                     #include <string>
2024-08-30T19:43:30.5759934Z                     
2024-08-30T19:43:30.5760118Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5760276Z                             std::string result = "";
2024-08-30T19:43:30.5760410Z                                 int shift = 7;
2024-08-30T19:43:30.5760497Z                     
2024-08-30T19:43:30.5760670Z                                     for (char c : input) {
2024-08-30T19:43:30.5760794Z                                               
2024-08-30T19:43:30.5763266Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5767641Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5768070Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5768207Z                     #include <string>
2024-08-30T19:43:30.5768293Z                     
2024-08-30T19:43:30.5768474Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5768636Z                             std::string result = "";
2024-08-30T19:43:30.5768850Z                                 int shift = 7;
2024-08-30T19:43:30.5768937Z                     
2024-08-30T19:43:30.5769108Z                                     for (char c : input) {
2024-08-30T19:43:30.5769342Z                                               -> #include <iostream>
2024-08-30T19:43:30.5769468Z                     #include <string>
2024-08-30T19:43:30.5769560Z                     
2024-08-30T19:43:30.5769738Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5769898Z                             std::string result = "";
2024-08-30T19:43:30.5770033Z                                 int shift = 7;
2024-08-30T19:43:30.5770118Z                     
2024-08-30T19:43:30.5770354Z                                     for (char c : input) {
2024-08-30T19:43:30.5770484Z                                               
2024-08-30T19:43:30.5770811Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5771198Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5771562Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5771812Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5772101Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5772239Z                     #include <string>
2024-08-30T19:43:30.5772325Z                     
2024-08-30T19:43:30.5772506Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5772664Z                             std::string result = "";
2024-08-30T19:43:30.5772796Z                                 int shift = 7;
2024-08-30T19:43:30.5772880Z                     
2024-08-30T19:43:30.5773052Z                                     for (char c : input) {
2024-08-30T19:43:30.5773181Z                                                
2024-08-30T19:43:30.5775727Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5780074Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5780511Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5780637Z                     #include <string>
2024-08-30T19:43:30.5780729Z                     
2024-08-30T19:43:30.5780906Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5781057Z                             std::string result = "";
2024-08-30T19:43:30.5781196Z                                 int shift = 7;
2024-08-30T19:43:30.5781284Z                     
2024-08-30T19:43:30.5781451Z                                     for (char c : input) {
2024-08-30T19:43:30.5781686Z                                                -> #include <iostream>
2024-08-30T19:43:30.5781832Z                     #include <string>
2024-08-30T19:43:30.5782108Z                     
2024-08-30T19:43:30.5782338Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5782497Z                             std::string result = "";
2024-08-30T19:43:30.5782646Z                                 int shift = 7;
2024-08-30T19:43:30.5782732Z                     
2024-08-30T19:43:30.5782900Z                                     for (char c : input) {
2024-08-30T19:43:30.5783030Z                                                
2024-08-30T19:43:30.5783377Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5783574Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5783993Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5784242Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5784533Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5784657Z                     #include <string>
2024-08-30T19:43:30.5784756Z                     
2024-08-30T19:43:30.5784933Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5785092Z                             std::string result = "";
2024-08-30T19:43:30.5785229Z                                 int shift = 7;
2024-08-30T19:43:30.5785320Z                     
2024-08-30T19:43:30.5785483Z                                     for (char c : input) {
2024-08-30T19:43:30.5785615Z                                                 
2024-08-30T19:43:30.5787959Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5792391Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5792824Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5792952Z                     #include <string>
2024-08-30T19:43:30.5793043Z                     
2024-08-30T19:43:30.5793221Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5793391Z                             std::string result = "";
2024-08-30T19:43:30.5793532Z                                 int shift = 7;
2024-08-30T19:43:30.5793616Z                     
2024-08-30T19:43:30.5793776Z                                     for (char c : input) {
2024-08-30T19:43:30.5794018Z                                                 -> #include <iostream>
2024-08-30T19:43:30.5794137Z                     #include <string>
2024-08-30T19:43:30.5794230Z                     
2024-08-30T19:43:30.5794409Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5794562Z                             std::string result = "";
2024-08-30T19:43:30.5794702Z                                 int shift = 7;
2024-08-30T19:43:30.5794855Z                     
2024-08-30T19:43:30.5795013Z                                     for (char c : input) {
2024-08-30T19:43:30.5795149Z                                                 
2024-08-30T19:43:30.5795472Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5795667Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5795981Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5796220Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.5796513Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5796637Z                     #include <string>
2024-08-30T19:43:30.5796797Z                     
2024-08-30T19:43:30.5796975Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5797129Z                             std::string result = "";
2024-08-30T19:43:30.5797270Z                                 int shift = 7;
2024-08-30T19:43:30.5797362Z                     
2024-08-30T19:43:30.5797520Z                                     for (char c : input) {
2024-08-30T19:43:30.5797664Z                                                 i
2024-08-30T19:43:30.5800702Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5805675Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5806138Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5806280Z                     #include <string>
2024-08-30T19:43:30.5806371Z                     
2024-08-30T19:43:30.5806571Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5806735Z                             std::string result = "";
2024-08-30T19:43:30.5806888Z                                 int shift = 7;
2024-08-30T19:43:30.5806974Z                     
2024-08-30T19:43:30.5807139Z                                     for (char c : input) {
2024-08-30T19:43:30.5807389Z                                                  -> #include <iostream>
2024-08-30T19:43:30.5807523Z                     #include <string>
2024-08-30T19:43:30.5807611Z                     
2024-08-30T19:43:30.5807804Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5807961Z                             std::string result = "";
2024-08-30T19:43:30.5808105Z                                 int shift = 7;
2024-08-30T19:43:30.5808190Z                     
2024-08-30T19:43:30.5808355Z                                     for (char c : input) {
2024-08-30T19:43:30.5808500Z                                                 i
2024-08-30T19:43:30.5808833Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5809031Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5809436Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5809680Z [32m      cy:command ✔ [39m type	f, {force: true}
2024-08-30T19:43:30.5809980Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5810118Z                     #include <string>
2024-08-30T19:43:30.5810211Z                     
2024-08-30T19:43:30.5810397Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5810554Z                             std::string result = "";
2024-08-30T19:43:30.5810695Z                                 int shift = 7;
2024-08-30T19:43:30.5810779Z                     
2024-08-30T19:43:30.5811295Z                                     for (char c : input) {
2024-08-30T19:43:30.5811455Z                                                 if
2024-08-30T19:43:30.5813865Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5818202Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5818804Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5818946Z                     #include <string>
2024-08-30T19:43:30.5819033Z                     
2024-08-30T19:43:30.5819223Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5819380Z                             std::string result = "";
2024-08-30T19:43:30.5819521Z                                 int shift = 7;
2024-08-30T19:43:30.5819613Z                     
2024-08-30T19:43:30.5819776Z                                     for (char c : input) {
2024-08-30T19:43:30.5820035Z                                                 i -> #include <iostream>
2024-08-30T19:43:30.5820161Z                     #include <string>
2024-08-30T19:43:30.5820245Z                     
2024-08-30T19:43:30.5820431Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5820585Z                             std::string result = "";
2024-08-30T19:43:30.5820728Z                                 int shift = 7;
2024-08-30T19:43:30.5820820Z                     
2024-08-30T19:43:30.5820979Z                                     for (char c : input) {
2024-08-30T19:43:30.5821123Z                                                 if
2024-08-30T19:43:30.5821456Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5821640Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5821966Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5822211Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.5822513Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5822727Z                     #include <string>
2024-08-30T19:43:30.5822812Z                     
2024-08-30T19:43:30.5823000Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5823156Z                             std::string result = "";
2024-08-30T19:43:30.5823306Z                                 int shift = 7;
2024-08-30T19:43:30.5823391Z                     
2024-08-30T19:43:30.5823551Z                                     for (char c : input) {
2024-08-30T19:43:30.5823694Z                                                 if 
2024-08-30T19:43:30.5826060Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5830692Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5831135Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5831274Z                     #include <string>
2024-08-30T19:43:30.5831360Z                     
2024-08-30T19:43:30.5831549Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5831852Z                             std::string result = "";
2024-08-30T19:43:30.5831996Z                                 int shift = 7;
2024-08-30T19:43:30.5832087Z                     
2024-08-30T19:43:30.5832251Z                                     for (char c : input) {
2024-08-30T19:43:30.5832497Z                                                 if -> #include <iostream>
2024-08-30T19:43:30.5832626Z                     #include <string>
2024-08-30T19:43:30.5832709Z                     
2024-08-30T19:43:30.5832890Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5833044Z                             std::string result = "";
2024-08-30T19:43:30.5833179Z                                 int shift = 7;
2024-08-30T19:43:30.5833273Z                     
2024-08-30T19:43:30.5833432Z                                     for (char c : input) {
2024-08-30T19:43:30.5833569Z                                                 if 
2024-08-30T19:43:30.5833910Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5834093Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5834414Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5834653Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.5834950Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5835072Z                     #include <string>
2024-08-30T19:43:30.5835161Z                     
2024-08-30T19:43:30.5835346Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5835496Z                             std::string result = "";
2024-08-30T19:43:30.5835629Z                                 int shift = 7;
2024-08-30T19:43:30.5835796Z                     
2024-08-30T19:43:30.5835956Z                                     for (char c : input) {
2024-08-30T19:43:30.5836094Z                                                 if (
2024-08-30T19:43:30.5838473Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5842867Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5843284Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5843419Z                     #include <string>
2024-08-30T19:43:30.5843503Z                     
2024-08-30T19:43:30.5843682Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5843842Z                             std::string result = "";
2024-08-30T19:43:30.5843986Z                                 int shift = 7;
2024-08-30T19:43:30.5844075Z                     
2024-08-30T19:43:30.5844234Z                                     for (char c : input) {
2024-08-30T19:43:30.5844601Z                                                 if  -> #include <iostream>
2024-08-30T19:43:30.5844734Z                     #include <string>
2024-08-30T19:43:30.5844821Z                     
2024-08-30T19:43:30.5844996Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5845152Z                             std::string result = "";
2024-08-30T19:43:30.5845286Z                                 int shift = 7;
2024-08-30T19:43:30.5845382Z                     
2024-08-30T19:43:30.5845539Z                                     for (char c : input) {
2024-08-30T19:43:30.5845680Z                                                 if (
2024-08-30T19:43:30.5846017Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5846203Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5846524Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5846762Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.5847059Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5847189Z                     #include <string>
2024-08-30T19:43:30.5847271Z                     
2024-08-30T19:43:30.5847455Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5847605Z                             std::string result = "";
2024-08-30T19:43:30.5847739Z                                 int shift = 7;
2024-08-30T19:43:30.5847831Z                     
2024-08-30T19:43:30.5847986Z                                     for (char c : input) {
2024-08-30T19:43:30.5848128Z                                                 if (i
2024-08-30T19:43:30.5850509Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5855229Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5855845Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5855982Z                     #include <string>
2024-08-30T19:43:30.5856069Z                     
2024-08-30T19:43:30.5856259Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5856425Z                             std::string result = "";
2024-08-30T19:43:30.5856567Z                                 int shift = 7;
2024-08-30T19:43:30.5856652Z                     
2024-08-30T19:43:30.5856822Z                                     for (char c : input) {
2024-08-30T19:43:30.5857075Z                                                 if ( -> #include <iostream>
2024-08-30T19:43:30.5857206Z                     #include <string>
2024-08-30T19:43:30.5857290Z                     
2024-08-30T19:43:30.5857466Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5857770Z                             std::string result = "";
2024-08-30T19:43:30.5857912Z                                 int shift = 7;
2024-08-30T19:43:30.5857997Z                     
2024-08-30T19:43:30.5858161Z                                     for (char c : input) {
2024-08-30T19:43:30.5858306Z                                                 if (i
2024-08-30T19:43:30.5858644Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5858832Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5859151Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5859398Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.5859690Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5859830Z                     #include <string>
2024-08-30T19:43:30.5859915Z                     
2024-08-30T19:43:30.5860095Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5860261Z                             std::string result = "";
2024-08-30T19:43:30.5860397Z                                 int shift = 7;
2024-08-30T19:43:30.5860485Z                     
2024-08-30T19:43:30.5860649Z                                     for (char c : input) {
2024-08-30T19:43:30.5860798Z                                                 if (is
2024-08-30T19:43:30.5863183Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (is","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5867668Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5868169Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5868306Z                     #include <string>
2024-08-30T19:43:30.5868396Z                     
2024-08-30T19:43:30.5868587Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5868754Z                             std::string result = "";
2024-08-30T19:43:30.5868892Z                                 int shift = 7;
2024-08-30T19:43:30.5868977Z                     
2024-08-30T19:43:30.5869146Z                                     for (char c : input) {
2024-08-30T19:43:30.5869408Z                                                 if (i -> #include <iostream>
2024-08-30T19:43:30.5869534Z                     #include <string>
2024-08-30T19:43:30.5869627Z                     
2024-08-30T19:43:30.5869803Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5869959Z                             std::string result = "";
2024-08-30T19:43:30.5870100Z                                 int shift = 7;
2024-08-30T19:43:30.5870188Z                     
2024-08-30T19:43:30.5870352Z                                     for (char c : input) {
2024-08-30T19:43:30.5870619Z                                                 if (is
2024-08-30T19:43:30.5870956Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5871152Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5871470Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5871716Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.5872008Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5872144Z                     #include <string>
2024-08-30T19:43:30.5872230Z                     
2024-08-30T19:43:30.5872411Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5872572Z                             std::string result = "";
2024-08-30T19:43:30.5872713Z                                 int shift = 7;
2024-08-30T19:43:30.5872799Z                     
2024-08-30T19:43:30.5872964Z                                     for (char c : input) {
2024-08-30T19:43:30.5873122Z                                                 if (isa
2024-08-30T19:43:30.5875516Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isa","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5879847Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5880416Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5880542Z                     #include <string>
2024-08-30T19:43:30.5880634Z                     
2024-08-30T19:43:30.5880815Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5880980Z                             std::string result = "";
2024-08-30T19:43:30.5881115Z                                 int shift = 7;
2024-08-30T19:43:30.5881200Z                     
2024-08-30T19:43:30.5881374Z                                     for (char c : input) {
2024-08-30T19:43:30.5881629Z                                                 if (is -> #include <iostream>
2024-08-30T19:43:30.5881746Z                     #include <string>
2024-08-30T19:43:30.5881839Z                     
2024-08-30T19:43:30.5882011Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5882162Z                             std::string result = "";
2024-08-30T19:43:30.5882304Z                                 int shift = 7;
2024-08-30T19:43:30.5882389Z                     
2024-08-30T19:43:30.5882553Z                                     for (char c : input) {
2024-08-30T19:43:30.5882701Z                                                 if (isa
2024-08-30T19:43:30.5883029Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5883222Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5883535Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5883908Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.5884205Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5884330Z                     #include <string>
2024-08-30T19:43:30.5884421Z                     
2024-08-30T19:43:30.5884601Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5884763Z                             std::string result = "";
2024-08-30T19:43:30.5884902Z                                 int shift = 7;
2024-08-30T19:43:30.5884989Z                     
2024-08-30T19:43:30.5885156Z                                     for (char c : input) {
2024-08-30T19:43:30.5885308Z                                                 if (isal
2024-08-30T19:43:30.5887715Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isal","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5892271Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5892832Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5892974Z                     #include <string>
2024-08-30T19:43:30.5893064Z                     
2024-08-30T19:43:30.5893253Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5893497Z                             std::string result = "";
2024-08-30T19:43:30.5893635Z                                 int shift = 7;
2024-08-30T19:43:30.5893721Z                     
2024-08-30T19:43:30.5893890Z                                     for (char c : input) {
2024-08-30T19:43:30.5894156Z                                                 if (isa -> #include <iostream>
2024-08-30T19:43:30.5894282Z                     #include <string>
2024-08-30T19:43:30.5894366Z                     
2024-08-30T19:43:30.5894552Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5894711Z                             std::string result = "";
2024-08-30T19:43:30.5894847Z                                 int shift = 7;
2024-08-30T19:43:30.5894931Z                     
2024-08-30T19:43:30.5895097Z                                     for (char c : input) {
2024-08-30T19:43:30.5895250Z                                                 if (isal
2024-08-30T19:43:30.5895588Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5895772Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5896086Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5896331Z [32m      cy:command ✔ [39m type	p, {force: true}
2024-08-30T19:43:30.5896625Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5896753Z                     #include <string>
2024-08-30T19:43:30.5896838Z                     
2024-08-30T19:43:30.5897166Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5897330Z                             std::string result = "";
2024-08-30T19:43:30.5897466Z                                 int shift = 7;
2024-08-30T19:43:30.5897549Z                     
2024-08-30T19:43:30.5897713Z                                     for (char c : input) {
2024-08-30T19:43:30.5897868Z                                                 if (isalp
2024-08-30T19:43:30.5901169Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalp","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5908407Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5912115Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5912753Z                     #include <string>
2024-08-30T19:43:30.5913061Z                     
2024-08-30T19:43:30.5913399Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5913849Z                             std::string result = "";
2024-08-30T19:43:30.5914237Z                                 int shift = 7;
2024-08-30T19:43:30.5914554Z                     
2024-08-30T19:43:30.5914869Z                                     for (char c : input) {
2024-08-30T19:43:30.5915498Z                                                 if (isal -> #include <iostream>
2024-08-30T19:43:30.5915901Z                     #include <string>
2024-08-30T19:43:30.5916202Z                     
2024-08-30T19:43:30.5916534Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5916955Z                             std::string result = "";
2024-08-30T19:43:30.5917340Z                                 int shift = 7;
2024-08-30T19:43:30.5917655Z                     
2024-08-30T19:43:30.5917958Z                                     for (char c : input) {
2024-08-30T19:43:30.5918376Z                                                 if (isalp
2024-08-30T19:43:30.5918969Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5919494Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5920030Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5920608Z [32m      cy:command ✔ [39m type	h, {force: true}
2024-08-30T19:43:30.5921172Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5921603Z                     #include <string>
2024-08-30T19:43:30.5921899Z                     
2024-08-30T19:43:30.5922236Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5922676Z                             std::string result = "";
2024-08-30T19:43:30.5923063Z                                 int shift = 7;
2024-08-30T19:43:30.5923385Z                     
2024-08-30T19:43:30.5923832Z                                     for (char c : input) {
2024-08-30T19:43:30.5924247Z                                                 if (isalph
2024-08-30T19:43:30.5926925Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalph","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5933233Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5936718Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5937233Z                     #include <string>
2024-08-30T19:43:30.5937654Z                     
2024-08-30T19:43:30.5937994Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5938414Z                             std::string result = "";
2024-08-30T19:43:30.5938809Z                                 int shift = 7;
2024-08-30T19:43:30.5939128Z                     
2024-08-30T19:43:30.5939426Z                                     for (char c : input) {
2024-08-30T19:43:30.5939951Z                                                 if (isalp -> #include <iostream>
2024-08-30T19:43:30.5940361Z                     #include <string>
2024-08-30T19:43:30.5940659Z                     
2024-08-30T19:43:30.5941069Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5941498Z                             std::string result = "";
2024-08-30T19:43:30.5941883Z                                 int shift = 7;
2024-08-30T19:43:30.5942195Z                     
2024-08-30T19:43:30.5942502Z                                     for (char c : input) {
2024-08-30T19:43:30.5942912Z                                                 if (isalph
2024-08-30T19:43:30.5943496Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5944011Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5944557Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5945128Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.5945683Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5946111Z                     #include <string>
2024-08-30T19:43:30.5946410Z                     
2024-08-30T19:43:30.5946748Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5947173Z                             std::string result = "";
2024-08-30T19:43:30.5947565Z                                 int shift = 7;
2024-08-30T19:43:30.5947881Z                     
2024-08-30T19:43:30.5948177Z                                     for (char c : input) {
2024-08-30T19:43:30.5948597Z                                                 if (isalpha
2024-08-30T19:43:30.5951452Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5957479Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5960911Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5961429Z                     #include <string>
2024-08-30T19:43:30.5961734Z                     
2024-08-30T19:43:30.5962055Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5962478Z                             std::string result = "";
2024-08-30T19:43:30.5962862Z                                 int shift = 7;
2024-08-30T19:43:30.5963257Z                     
2024-08-30T19:43:30.5963567Z                                     for (char c : input) {
2024-08-30T19:43:30.5964093Z                                                 if (isalph -> #include <iostream>
2024-08-30T19:43:30.5964545Z                     #include <string>
2024-08-30T19:43:30.5964846Z                     
2024-08-30T19:43:30.5965170Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5965590Z                             std::string result = "";
2024-08-30T19:43:30.5966140Z                                 int shift = 7;
2024-08-30T19:43:30.5966650Z                     
2024-08-30T19:43:30.5967404Z                                     for (char c : input) {
2024-08-30T19:43:30.5968134Z                                                 if (isalpha
2024-08-30T19:43:30.5968837Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5969371Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5969911Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5970476Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.5971348Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5972071Z                     #include <string>
2024-08-30T19:43:30.5972383Z                     
2024-08-30T19:43:30.5972729Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5973163Z                             std::string result = "";
2024-08-30T19:43:30.5973546Z                                 int shift = 7;
2024-08-30T19:43:30.5973872Z                     
2024-08-30T19:43:30.5974184Z                                     for (char c : input) {
2024-08-30T19:43:30.5974606Z                                                 if (isalpha(
2024-08-30T19:43:30.5977544Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.5983619Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.5987135Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.5987645Z                     #include <string>
2024-08-30T19:43:30.5987950Z                     
2024-08-30T19:43:30.5988282Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5988711Z                             std::string result = "";
2024-08-30T19:43:30.5989100Z                                 int shift = 7;
2024-08-30T19:43:30.5989427Z                     
2024-08-30T19:43:30.5989731Z                                     for (char c : input) {
2024-08-30T19:43:30.5990254Z                                                 if (isalpha -> #include <iostream>
2024-08-30T19:43:30.5990761Z                     #include <string>
2024-08-30T19:43:30.5991056Z                     
2024-08-30T19:43:30.5991378Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5991805Z                             std::string result = "";
2024-08-30T19:43:30.5992201Z                                 int shift = 7;
2024-08-30T19:43:30.5992511Z                     
2024-08-30T19:43:30.5992815Z                                     for (char c : input) {
2024-08-30T19:43:30.5993232Z                                                 if (isalpha(
2024-08-30T19:43:30.5993832Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5994431Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.5994963Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.5995531Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.5996089Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.5996518Z                     #include <string>
2024-08-30T19:43:30.5996814Z                     
2024-08-30T19:43:30.5997144Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.5997561Z                             std::string result = "";
2024-08-30T19:43:30.5998073Z                                 int shift = 7;
2024-08-30T19:43:30.5998394Z                     
2024-08-30T19:43:30.5998691Z                                     for (char c : input) {
2024-08-30T19:43:30.5999108Z                                                 if (isalpha(c
2024-08-30T19:43:30.6001797Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6007820Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6011512Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6012040Z                     #include <string>
2024-08-30T19:43:30.6012341Z                     
2024-08-30T19:43:30.6012676Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6013101Z                             std::string result = "";
2024-08-30T19:43:30.6013494Z                                 int shift = 7;
2024-08-30T19:43:30.6013809Z                     
2024-08-30T19:43:30.6014122Z                                     for (char c : input) {
2024-08-30T19:43:30.6014667Z                                                 if (isalpha( -> #include <iostream>
2024-08-30T19:43:30.6015074Z                     #include <string>
2024-08-30T19:43:30.6015373Z                     
2024-08-30T19:43:30.6015708Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6016140Z                             std::string result = "";
2024-08-30T19:43:30.6016707Z                                 int shift = 7;
2024-08-30T19:43:30.6017028Z                     
2024-08-30T19:43:30.6017339Z                                     for (char c : input) {
2024-08-30T19:43:30.6017751Z                                                 if (isalpha(c
2024-08-30T19:43:30.6018348Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6018870Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6019413Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6019966Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.6020524Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6021042Z                     #include <string>
2024-08-30T19:43:30.6021341Z                     
2024-08-30T19:43:30.6021669Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6022099Z                             std::string result = "";
2024-08-30T19:43:30.6022496Z                                 int shift = 7;
2024-08-30T19:43:30.6022807Z                     
2024-08-30T19:43:30.6023116Z                                     for (char c : input) {
2024-08-30T19:43:30.6023536Z                                                 if (isalpha(c)
2024-08-30T19:43:30.6026367Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6032366Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6035799Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6036311Z                     #include <string>
2024-08-30T19:43:30.6036603Z                     
2024-08-30T19:43:30.6036934Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6037364Z                             std::string result = "";
2024-08-30T19:43:30.6037744Z                                 int shift = 7;
2024-08-30T19:43:30.6038065Z                     
2024-08-30T19:43:30.6038380Z                                     for (char c : input) {
2024-08-30T19:43:30.6038906Z                                                 if (isalpha(c -> #include <iostream>
2024-08-30T19:43:30.6039335Z                     #include <string>
2024-08-30T19:43:30.6039635Z                     
2024-08-30T19:43:30.6039960Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6040393Z                             std::string result = "";
2024-08-30T19:43:30.6040787Z                                 int shift = 7;
2024-08-30T19:43:30.6041099Z                     
2024-08-30T19:43:30.6041406Z                                     for (char c : input) {
2024-08-30T19:43:30.6041830Z                                                 if (isalpha(c)
2024-08-30T19:43:30.6042517Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6043033Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6043573Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6044152Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.6044730Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6045158Z                     #include <string>
2024-08-30T19:43:30.6045463Z                     
2024-08-30T19:43:30.6045793Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6046216Z                             std::string result = "";
2024-08-30T19:43:30.6046686Z                                 int shift = 7;
2024-08-30T19:43:30.6047005Z                     
2024-08-30T19:43:30.6047304Z                                     for (char c : input) {
2024-08-30T19:43:30.6047733Z                                                 if (isalpha(c))
2024-08-30T19:43:30.6050599Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c))","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6056937Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6060371Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6060891Z                     #include <string>
2024-08-30T19:43:30.6061190Z                     
2024-08-30T19:43:30.6061517Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6061941Z                             std::string result = "";
2024-08-30T19:43:30.6062328Z                                 int shift = 7;
2024-08-30T19:43:30.6062641Z                     
2024-08-30T19:43:30.6062948Z                                     for (char c : input) {
2024-08-30T19:43:30.6063480Z                                                 if (isalpha(c) -> #include <iostream>
2024-08-30T19:43:30.6063899Z                     #include <string>
2024-08-30T19:43:30.6064189Z                     
2024-08-30T19:43:30.6064516Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6064980Z                             std::string result = "";
2024-08-30T19:43:30.6065363Z                                 int shift = 7;
2024-08-30T19:43:30.6065679Z                     
2024-08-30T19:43:30.6065984Z                                     for (char c : input) {
2024-08-30T19:43:30.6066405Z                                                 if (isalpha(c))
2024-08-30T19:43:30.6066996Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6067509Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6068044Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6068719Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6069278Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6069706Z                     #include <string>
2024-08-30T19:43:30.6070005Z                     
2024-08-30T19:43:30.6070333Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6070761Z                             std::string result = "";
2024-08-30T19:43:30.6071146Z                                 int shift = 7;
2024-08-30T19:43:30.6071457Z                     
2024-08-30T19:43:30.6071765Z                                     for (char c : input) {
2024-08-30T19:43:30.6072281Z                                                 if (isalpha(c)) 
2024-08-30T19:43:30.6075132Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6081183Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6084605Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6085127Z                     #include <string>
2024-08-30T19:43:30.6085420Z                     
2024-08-30T19:43:30.6085754Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6086185Z                             std::string result = "";
2024-08-30T19:43:30.6086568Z                                 int shift = 7;
2024-08-30T19:43:30.6086887Z                     
2024-08-30T19:43:30.6087193Z                                     for (char c : input) {
2024-08-30T19:43:30.6087718Z                                                 if (isalpha(c)) -> #include <iostream>
2024-08-30T19:43:30.6088132Z                     #include <string>
2024-08-30T19:43:30.6088432Z                     
2024-08-30T19:43:30.6088756Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6089184Z                             std::string result = "";
2024-08-30T19:43:30.6089575Z                                 int shift = 7;
2024-08-30T19:43:30.6089894Z                     
2024-08-30T19:43:30.6090189Z                                     for (char c : input) {
2024-08-30T19:43:30.6090616Z                                                 if (isalpha(c)) 
2024-08-30T19:43:30.6091443Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6091974Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6092512Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6093414Z [32m      cy:command ✔ [39m type	{, {force: true}
2024-08-30T19:43:30.6094012Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6094524Z                     #include <string>
2024-08-30T19:43:30.6095052Z                     
2024-08-30T19:43:30.6095411Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6095914Z                             std::string result = "";
2024-08-30T19:43:30.6096416Z                                 int shift = 7;
2024-08-30T19:43:30.6096754Z                     
2024-08-30T19:43:30.6097065Z                                     for (char c : input) {
2024-08-30T19:43:30.6097493Z                                                 if (isalpha(c)) {
2024-08-30T19:43:30.6100271Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6106598Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6110093Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6110764Z                     #include <string>
2024-08-30T19:43:30.6111068Z                     
2024-08-30T19:43:30.6111405Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6111841Z                             std::string result = "";
2024-08-30T19:43:30.6112228Z                                 int shift = 7;
2024-08-30T19:43:30.6112548Z                     
2024-08-30T19:43:30.6112852Z                                     for (char c : input) {
2024-08-30T19:43:30.6113394Z                                                 if (isalpha(c))  -> #include <iostream>
2024-08-30T19:43:30.6113814Z                     #include <string>
2024-08-30T19:43:30.6114115Z                     
2024-08-30T19:43:30.6114438Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6114857Z                             std::string result = "";
2024-08-30T19:43:30.6115230Z                                 int shift = 7;
2024-08-30T19:43:30.6115553Z                     
2024-08-30T19:43:30.6115855Z                                     for (char c : input) {
2024-08-30T19:43:30.6116272Z                                                 if (isalpha(c)) {
2024-08-30T19:43:30.6116876Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6117396Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6117923Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6118474Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6119033Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6119465Z                     #include <string>
2024-08-30T19:43:30.6119767Z                     
2024-08-30T19:43:30.6120087Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6120515Z                             std::string result = "";
2024-08-30T19:43:30.6120900Z                                 int shift = 7;
2024-08-30T19:43:30.6121307Z                     
2024-08-30T19:43:30.6121620Z                                     for (char c : input) {
2024-08-30T19:43:30.6122049Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6124784Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6131192Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6135769Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6136310Z                     #include <string>
2024-08-30T19:43:30.6136612Z                     
2024-08-30T19:43:30.6136957Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6137401Z                             std::string result = "";
2024-08-30T19:43:30.6137788Z                                 int shift = 7;
2024-08-30T19:43:30.6138116Z                     
2024-08-30T19:43:30.6138431Z                                     for (char c : input) {
2024-08-30T19:43:30.6138987Z                                                 if (isalpha(c)) { -> #include <iostream>
2024-08-30T19:43:30.6139408Z                     #include <string>
2024-08-30T19:43:30.6139718Z                     
2024-08-30T19:43:30.6140048Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6140467Z                             std::string result = "";
2024-08-30T19:43:30.6140867Z                                 int shift = 7;
2024-08-30T19:43:30.6141199Z                     
2024-08-30T19:43:30.6141501Z                                     for (char c : input) {
2024-08-30T19:43:30.6141934Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6142537Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6143064Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6143600Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6144109Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.6144451Z                     , {force: true}
2024-08-30T19:43:30.6144942Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6145374Z                     #include <string>
2024-08-30T19:43:30.6145678Z                     
2024-08-30T19:43:30.6146009Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6146441Z                             std::string result = "";
2024-08-30T19:43:30.6146836Z                                 int shift = 7;
2024-08-30T19:43:30.6147158Z                     
2024-08-30T19:43:30.6147459Z                                     for (char c : input) {
2024-08-30T19:43:30.6147889Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6148449Z                                                     
2024-08-30T19:43:30.6151257Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6157581Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6161061Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6161585Z                     #include <string>
2024-08-30T19:43:30.6161880Z                     
2024-08-30T19:43:30.6162215Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6162648Z                             std::string result = "";
2024-08-30T19:43:30.6163029Z                                 int shift = 7;
2024-08-30T19:43:30.6163357Z                     
2024-08-30T19:43:30.6163670Z                                     for (char c : input) {
2024-08-30T19:43:30.6164209Z                                                 if (isalpha(c)) {  -> #include <iostream>
2024-08-30T19:43:30.6164687Z                     #include <string>
2024-08-30T19:43:30.6164999Z                     
2024-08-30T19:43:30.6165335Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6165768Z                             std::string result = "";
2024-08-30T19:43:30.6166163Z                                 int shift = 7;
2024-08-30T19:43:30.6166484Z                     
2024-08-30T19:43:30.6166797Z                                     for (char c : input) {
2024-08-30T19:43:30.6167229Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6167634Z                                                     
2024-08-30T19:43:30.6168207Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6168735Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6169269Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6169833Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6170402Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6170845Z                     #include <string>
2024-08-30T19:43:30.6171397Z                     
2024-08-30T19:43:30.6171736Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6172174Z                             std::string result = "";
2024-08-30T19:43:30.6172572Z                                 int shift = 7;
2024-08-30T19:43:30.6172895Z                     
2024-08-30T19:43:30.6173197Z                                     for (char c : input) {
2024-08-30T19:43:30.6173649Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6174071Z                                                      
2024-08-30T19:43:30.6176979Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6183335Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6186831Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6187355Z                     #include <string>
2024-08-30T19:43:30.6187658Z                     
2024-08-30T19:43:30.6187995Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6188432Z                             std::string result = "";
2024-08-30T19:43:30.6188822Z                                 int shift = 7;
2024-08-30T19:43:30.6189152Z                     
2024-08-30T19:43:30.6189462Z                                     for (char c : input) {
2024-08-30T19:43:30.6189902Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6190427Z                                                      -> #include <iostream>
2024-08-30T19:43:30.6190828Z                     #include <string>
2024-08-30T19:43:30.6191126Z                     
2024-08-30T19:43:30.6191454Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6191882Z                             std::string result = "";
2024-08-30T19:43:30.6192273Z                                 int shift = 7;
2024-08-30T19:43:30.6192592Z                     
2024-08-30T19:43:30.6192910Z                                     for (char c : input) {
2024-08-30T19:43:30.6193338Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6193743Z                                                      
2024-08-30T19:43:30.6194319Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6194841Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6195381Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6195940Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6196501Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6196936Z                     #include <string>
2024-08-30T19:43:30.6197232Z                     
2024-08-30T19:43:30.6197566Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6197995Z                             std::string result = "";
2024-08-30T19:43:30.6198388Z                                 int shift = 7;
2024-08-30T19:43:30.6198703Z                     
2024-08-30T19:43:30.6199007Z                                     for (char c : input) {
2024-08-30T19:43:30.6199435Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6199925Z                                                       
2024-08-30T19:43:30.6202687Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6208949Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6212731Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6213253Z                     #include <string>
2024-08-30T19:43:30.6213565Z                     
2024-08-30T19:43:30.6213912Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6214339Z                             std::string result = "";
2024-08-30T19:43:30.6214734Z                                 int shift = 7;
2024-08-30T19:43:30.6215058Z                     
2024-08-30T19:43:30.6215361Z                                     for (char c : input) {
2024-08-30T19:43:30.6215789Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6216316Z                                                       -> #include <iostream>
2024-08-30T19:43:30.6216713Z                     #include <string>
2024-08-30T19:43:30.6217013Z                     
2024-08-30T19:43:30.6217346Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6217772Z                             std::string result = "";
2024-08-30T19:43:30.6218157Z                                 int shift = 7;
2024-08-30T19:43:30.6218482Z                     
2024-08-30T19:43:30.6218788Z                                     for (char c : input) {
2024-08-30T19:43:30.6219203Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6219613Z                                                       
2024-08-30T19:43:30.6220195Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6220712Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6221241Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6221811Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6222378Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6222801Z                     #include <string>
2024-08-30T19:43:30.6223106Z                     
2024-08-30T19:43:30.6223443Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6223877Z                             std::string result = "";
2024-08-30T19:43:30.6224266Z                                 int shift = 7;
2024-08-30T19:43:30.6224588Z                     
2024-08-30T19:43:30.6224899Z                                     for (char c : input) {
2024-08-30T19:43:30.6225328Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6225926Z                                                        
2024-08-30T19:43:30.6228700Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6234978Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6238448Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6238972Z                     #include <string>
2024-08-30T19:43:30.6239279Z                     
2024-08-30T19:43:30.6239610Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6240040Z                             std::string result = "";
2024-08-30T19:43:30.6240427Z                                 int shift = 7;
2024-08-30T19:43:30.6240749Z                     
2024-08-30T19:43:30.6241062Z                                     for (char c : input) {
2024-08-30T19:43:30.6241498Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6242015Z                                                        -> #include <iostream>
2024-08-30T19:43:30.6242420Z                     #include <string>
2024-08-30T19:43:30.6242723Z                     
2024-08-30T19:43:30.6243050Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6243470Z                             std::string result = "";
2024-08-30T19:43:30.6243859Z                                 int shift = 7;
2024-08-30T19:43:30.6244183Z                     
2024-08-30T19:43:30.6244487Z                                     for (char c : input) {
2024-08-30T19:43:30.6244915Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6245331Z                                                        
2024-08-30T19:43:30.6245907Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6246429Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6246960Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6247530Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6248091Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6248522Z                     #include <string>
2024-08-30T19:43:30.6248830Z                     
2024-08-30T19:43:30.6249161Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6249595Z                             std::string result = "";
2024-08-30T19:43:30.6249995Z                                 int shift = 7;
2024-08-30T19:43:30.6250315Z                     
2024-08-30T19:43:30.6250616Z                                     for (char c : input) {
2024-08-30T19:43:30.6251264Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6251851Z                                                         
2024-08-30T19:43:30.6254649Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6260950Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6264436Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6265002Z                     #include <string>
2024-08-30T19:43:30.6265304Z                     
2024-08-30T19:43:30.6265648Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6266084Z                             std::string result = "";
2024-08-30T19:43:30.6266477Z                                 int shift = 7;
2024-08-30T19:43:30.6266801Z                     
2024-08-30T19:43:30.6267109Z                                     for (char c : input) {
2024-08-30T19:43:30.6267531Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6268054Z                                                         -> #include <iostream>
2024-08-30T19:43:30.6268464Z                     #include <string>
2024-08-30T19:43:30.6268759Z                     
2024-08-30T19:43:30.6269092Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6269521Z                             std::string result = "";
2024-08-30T19:43:30.6269918Z                                 int shift = 7;
2024-08-30T19:43:30.6270234Z                     
2024-08-30T19:43:30.6270546Z                                     for (char c : input) {
2024-08-30T19:43:30.6270974Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6271386Z                                                         
2024-08-30T19:43:30.6271969Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6272489Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6273031Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6273588Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6274149Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6274583Z                     #include <string>
2024-08-30T19:43:30.6274894Z                     
2024-08-30T19:43:30.6275230Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6275679Z                             std::string result = "";
2024-08-30T19:43:30.6276070Z                                 int shift = 7;
2024-08-30T19:43:30.6276385Z                     
2024-08-30T19:43:30.6276694Z                                     for (char c : input) {
2024-08-30T19:43:30.6277214Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6277631Z                                                          
2024-08-30T19:43:30.6280414Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6287620Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6291565Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6292116Z                     #include <string>
2024-08-30T19:43:30.6292429Z                     
2024-08-30T19:43:30.6292783Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6292942Z                             std::string result = "";
2024-08-30T19:43:30.6293088Z                                 int shift = 7;
2024-08-30T19:43:30.6293184Z                     
2024-08-30T19:43:30.6293349Z                                     for (char c : input) {
2024-08-30T19:43:30.6293530Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6293801Z                                                          -> #include <iostream>
2024-08-30T19:43:30.6293926Z                     #include <string>
2024-08-30T19:43:30.6294023Z                     
2024-08-30T19:43:30.6294206Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6294361Z                             std::string result = "";
2024-08-30T19:43:30.6294507Z                                 int shift = 7;
2024-08-30T19:43:30.6294594Z                     
2024-08-30T19:43:30.6294758Z                                     for (char c : input) {
2024-08-30T19:43:30.6294939Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6295089Z                                                          
2024-08-30T19:43:30.6295431Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6295619Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6295941Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6296191Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6296494Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6296633Z                     #include <string>
2024-08-30T19:43:30.6296721Z                     
2024-08-30T19:43:30.6296907Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6297077Z                             std::string result = "";
2024-08-30T19:43:30.6297214Z                                 int shift = 7;
2024-08-30T19:43:30.6297304Z                     
2024-08-30T19:43:30.6297466Z                                     for (char c : input) {
2024-08-30T19:43:30.6297763Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6297918Z                                                           
2024-08-30T19:43:30.6301430Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6306190Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6306647Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6306788Z                     #include <string>
2024-08-30T19:43:30.6306879Z                     
2024-08-30T19:43:30.6307077Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6307244Z                             std::string result = "";
2024-08-30T19:43:30.6307389Z                                 int shift = 7;
2024-08-30T19:43:30.6307481Z                     
2024-08-30T19:43:30.6307645Z                                     for (char c : input) {
2024-08-30T19:43:30.6307832Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6308093Z                                                           -> #include <iostream>
2024-08-30T19:43:30.6308216Z                     #include <string>
2024-08-30T19:43:30.6308310Z                     
2024-08-30T19:43:30.6308495Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6308655Z                             std::string result = "";
2024-08-30T19:43:30.6308800Z                                 int shift = 7;
2024-08-30T19:43:30.6308886Z                     
2024-08-30T19:43:30.6309049Z                                     for (char c : input) {
2024-08-30T19:43:30.6309230Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6309379Z                                                           
2024-08-30T19:43:30.6309723Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6309913Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6310234Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6310487Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6310785Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6310923Z                     #include <string>
2024-08-30T19:43:30.6311012Z                     
2024-08-30T19:43:30.6311201Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6311364Z                             std::string result = "";
2024-08-30T19:43:30.6311504Z                                 int shift = 7;
2024-08-30T19:43:30.6311598Z                     
2024-08-30T19:43:30.6311759Z                                     for (char c : input) {
2024-08-30T19:43:30.6312013Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6312176Z                                                            
2024-08-30T19:43:30.6314705Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6319265Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6319712Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6319845Z                     #include <string>
2024-08-30T19:43:30.6319933Z                     
2024-08-30T19:43:30.6320126Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6320291Z                             std::string result = "";
2024-08-30T19:43:30.6320430Z                                 int shift = 7;
2024-08-30T19:43:30.6320520Z                     
2024-08-30T19:43:30.6320689Z                                     for (char c : input) {
2024-08-30T19:43:30.6320868Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6321125Z                                                            -> #include <iostream>
2024-08-30T19:43:30.6321247Z                     #include <string>
2024-08-30T19:43:30.6321339Z                     
2024-08-30T19:43:30.6321518Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6321677Z                             std::string result = "";
2024-08-30T19:43:30.6321820Z                                 int shift = 7;
2024-08-30T19:43:30.6321906Z                     
2024-08-30T19:43:30.6322074Z                                     for (char c : input) {
2024-08-30T19:43:30.6322247Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6322396Z                                                            
2024-08-30T19:43:30.6322732Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6322923Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6323241Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6323483Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6323773Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6323912Z                     #include <string>
2024-08-30T19:43:30.6324003Z                     
2024-08-30T19:43:30.6324183Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6324342Z                             std::string result = "";
2024-08-30T19:43:30.6324478Z                                 int shift = 7;
2024-08-30T19:43:30.6324569Z                     
2024-08-30T19:43:30.6324809Z                                     for (char c : input) {
2024-08-30T19:43:30.6324981Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6325140Z                                                             
2024-08-30T19:43:30.6327655Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6332479Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6332952Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6333083Z                     #include <string>
2024-08-30T19:43:30.6333168Z                     
2024-08-30T19:43:30.6333368Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6333525Z                             std::string result = "";
2024-08-30T19:43:30.6333664Z                                 int shift = 7;
2024-08-30T19:43:30.6333756Z                     
2024-08-30T19:43:30.6333924Z                                     for (char c : input) {
2024-08-30T19:43:30.6334102Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6334357Z                                                             -> #include <iostream>
2024-08-30T19:43:30.6334477Z                     #include <string>
2024-08-30T19:43:30.6334568Z                     
2024-08-30T19:43:30.6334754Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6334906Z                             std::string result = "";
2024-08-30T19:43:30.6335050Z                                 int shift = 7;
2024-08-30T19:43:30.6335135Z                     
2024-08-30T19:43:30.6335301Z                                     for (char c : input) {
2024-08-30T19:43:30.6335472Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6335623Z                                                             
2024-08-30T19:43:30.6335965Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6336151Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6336473Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6336714Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6337008Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6337144Z                     #include <string>
2024-08-30T19:43:30.6337234Z                     
2024-08-30T19:43:30.6337424Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6337577Z                             std::string result = "";
2024-08-30T19:43:30.6337713Z                                 int shift = 7;
2024-08-30T19:43:30.6337896Z                     
2024-08-30T19:43:30.6338055Z                                     for (char c : input) {
2024-08-30T19:43:30.6338222Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6338387Z                                                              
2024-08-30T19:43:30.6340912Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6345437Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6345874Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6346002Z                     #include <string>
2024-08-30T19:43:30.6346095Z                     
2024-08-30T19:43:30.6346282Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6346438Z                             std::string result = "";
2024-08-30T19:43:30.6346580Z                                 int shift = 7;
2024-08-30T19:43:30.6346674Z                     
2024-08-30T19:43:30.6346835Z                                     for (char c : input) {
2024-08-30T19:43:30.6347014Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6347271Z                                                              -> #include <iostream>
2024-08-30T19:43:30.6347391Z                     #include <string>
2024-08-30T19:43:30.6347490Z                     
2024-08-30T19:43:30.6347666Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6347825Z                             std::string result = "";
2024-08-30T19:43:30.6347960Z                                 int shift = 7;
2024-08-30T19:43:30.6348044Z                     
2024-08-30T19:43:30.6348214Z                                     for (char c : input) {
2024-08-30T19:43:30.6348387Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6348532Z                                                              
2024-08-30T19:43:30.6348867Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6349052Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6349379Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6349620Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6349909Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6350047Z                     #include <string>
2024-08-30T19:43:30.6350134Z                     
2024-08-30T19:43:30.6350319Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6350475Z                             std::string result = "";
2024-08-30T19:43:30.6350692Z                                 int shift = 7;
2024-08-30T19:43:30.6350786Z                     
2024-08-30T19:43:30.6350946Z                                     for (char c : input) {
2024-08-30T19:43:30.6351118Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6351287Z                                                               
2024-08-30T19:43:30.6353801Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6358323Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6358753Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6358879Z                     #include <string>
2024-08-30T19:43:30.6358972Z                     
2024-08-30T19:43:30.6359162Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6359316Z                             std::string result = "";
2024-08-30T19:43:30.6359467Z                                 int shift = 7;
2024-08-30T19:43:30.6359552Z                     
2024-08-30T19:43:30.6359714Z                                     for (char c : input) {
2024-08-30T19:43:30.6359894Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6360158Z                                                               -> #include <iostream>
2024-08-30T19:43:30.6360282Z                     #include <string>
2024-08-30T19:43:30.6360372Z                     
2024-08-30T19:43:30.6360550Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6360711Z                             std::string result = "";
2024-08-30T19:43:30.6360848Z                                 int shift = 7;
2024-08-30T19:43:30.6360934Z                     
2024-08-30T19:43:30.6361098Z                                     for (char c : input) {
2024-08-30T19:43:30.6361268Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6361431Z                                                               
2024-08-30T19:43:30.6361768Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6361953Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6362275Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6362517Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6362818Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6362943Z                     #include <string>
2024-08-30T19:43:30.6363031Z                     
2024-08-30T19:43:30.6363215Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6363368Z                             std::string result = "";
2024-08-30T19:43:30.6363586Z                                 int shift = 7;
2024-08-30T19:43:30.6363680Z                     
2024-08-30T19:43:30.6363841Z                                     for (char c : input) {
2024-08-30T19:43:30.6364021Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6364182Z                                                                
2024-08-30T19:43:30.6366743Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6371573Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6372056Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6372192Z                     #include <string>
2024-08-30T19:43:30.6372287Z                     
2024-08-30T19:43:30.6372474Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6372631Z                             std::string result = "";
2024-08-30T19:43:30.6372781Z                                 int shift = 7;
2024-08-30T19:43:30.6372868Z                     
2024-08-30T19:43:30.6373030Z                                     for (char c : input) {
2024-08-30T19:43:30.6373205Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6373472Z                                                                -> #include <iostream>
2024-08-30T19:43:30.6373606Z                     #include <string>
2024-08-30T19:43:30.6373692Z                     
2024-08-30T19:43:30.6373871Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6374033Z                             std::string result = "";
2024-08-30T19:43:30.6374173Z                                 int shift = 7;
2024-08-30T19:43:30.6374259Z                     
2024-08-30T19:43:30.6374427Z                                     for (char c : input) {
2024-08-30T19:43:30.6374595Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6374756Z                                                                
2024-08-30T19:43:30.6375092Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6375276Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6375589Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6375832Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6376132Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6376257Z                     #include <string>
2024-08-30T19:43:30.6376342Z                     
2024-08-30T19:43:30.6376528Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6376777Z                             std::string result = "";
2024-08-30T19:43:30.6376912Z                                 int shift = 7;
2024-08-30T19:43:30.6377007Z                     
2024-08-30T19:43:30.6377175Z                                     for (char c : input) {
2024-08-30T19:43:30.6377352Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6377513Z                                                                 
2024-08-30T19:43:30.6380045Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6384592Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6385024Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6385155Z                     #include <string>
2024-08-30T19:43:30.6385247Z                     
2024-08-30T19:43:30.6385432Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6385600Z                             std::string result = "";
2024-08-30T19:43:30.6385748Z                                 int shift = 7;
2024-08-30T19:43:30.6385836Z                     
2024-08-30T19:43:30.6385997Z                                     for (char c : input) {
2024-08-30T19:43:30.6386174Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6386441Z                                                                 -> #include <iostream>
2024-08-30T19:43:30.6386569Z                     #include <string>
2024-08-30T19:43:30.6386654Z                     
2024-08-30T19:43:30.6386836Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6387002Z                             std::string result = "";
2024-08-30T19:43:30.6387138Z                                 int shift = 7;
2024-08-30T19:43:30.6387230Z                     
2024-08-30T19:43:30.6387398Z                                     for (char c : input) {
2024-08-30T19:43:30.6387573Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6387738Z                                                                 
2024-08-30T19:43:30.6388072Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6388257Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6388576Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6388822Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.6389122Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6389248Z                     #include <string>
2024-08-30T19:43:30.6389333Z                     
2024-08-30T19:43:30.6389600Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6389754Z                             std::string result = "";
2024-08-30T19:43:30.6389893Z                                 int shift = 7;
2024-08-30T19:43:30.6389986Z                     
2024-08-30T19:43:30.6390149Z                                     for (char c : input) {
2024-08-30T19:43:30.6390323Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6390488Z                                                                 c
2024-08-30T19:43:30.6393184Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6397775Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6398221Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6398349Z                     #include <string>
2024-08-30T19:43:30.6398447Z                     
2024-08-30T19:43:30.6398639Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6398797Z                             std::string result = "";
2024-08-30T19:43:30.6398941Z                                 int shift = 7;
2024-08-30T19:43:30.6399026Z                     
2024-08-30T19:43:30.6399188Z                                     for (char c : input) {
2024-08-30T19:43:30.6399367Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6399634Z                                                                  -> #include <iostream>
2024-08-30T19:43:30.6399764Z                     #include <string>
2024-08-30T19:43:30.6399848Z                     
2024-08-30T19:43:30.6400037Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6400202Z                             std::string result = "";
2024-08-30T19:43:30.6400337Z                                 int shift = 7;
2024-08-30T19:43:30.6400423Z                     
2024-08-30T19:43:30.6400594Z                                     for (char c : input) {
2024-08-30T19:43:30.6400766Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6400942Z                                                                 c
2024-08-30T19:43:30.6401270Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6401457Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6401778Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6402022Z [32m      cy:command ✔ [39m type	h, {force: true}
2024-08-30T19:43:30.6402320Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6402444Z                     #include <string>
2024-08-30T19:43:30.6402606Z                     
2024-08-30T19:43:30.6402794Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6402949Z                             std::string result = "";
2024-08-30T19:43:30.6403098Z                                 int shift = 7;
2024-08-30T19:43:30.6403183Z                     
2024-08-30T19:43:30.6403342Z                                     for (char c : input) {
2024-08-30T19:43:30.6403521Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6403677Z                                                                 ch
2024-08-30T19:43:30.6406212Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            ch","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6410719Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6411435Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6411573Z                     #include <string>
2024-08-30T19:43:30.6411677Z                     
2024-08-30T19:43:30.6411863Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6412019Z                             std::string result = "";
2024-08-30T19:43:30.6412164Z                                 int shift = 7;
2024-08-30T19:43:30.6412248Z                     
2024-08-30T19:43:30.6412417Z                                     for (char c : input) {
2024-08-30T19:43:30.6412590Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6412873Z                                                                 c -> #include <iostream>
2024-08-30T19:43:30.6412999Z                     #include <string>
2024-08-30T19:43:30.6413089Z                     
2024-08-30T19:43:30.6413269Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6413432Z                             std::string result = "";
2024-08-30T19:43:30.6413568Z                                 int shift = 7;
2024-08-30T19:43:30.6413665Z                     
2024-08-30T19:43:30.6413828Z                                     for (char c : input) {
2024-08-30T19:43:30.6413999Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6414167Z                                                                 ch
2024-08-30T19:43:30.6414503Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6414692Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6415007Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6415247Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.6415544Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6415789Z                     #include <string>
2024-08-30T19:43:30.6415876Z                     
2024-08-30T19:43:30.6416065Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6416221Z                             std::string result = "";
2024-08-30T19:43:30.6416372Z                                 int shift = 7;
2024-08-30T19:43:30.6416459Z                     
2024-08-30T19:43:30.6416620Z                                     for (char c : input) {
2024-08-30T19:43:30.6416796Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6416960Z                                                                 cha
2024-08-30T19:43:30.6419752Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            cha","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6424099Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6424530Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6424666Z                     #include <string>
2024-08-30T19:43:30.6424762Z                     
2024-08-30T19:43:30.6424946Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6425112Z                             std::string result = "";
2024-08-30T19:43:30.6425248Z                                 int shift = 7;
2024-08-30T19:43:30.6425332Z                     
2024-08-30T19:43:30.6425506Z                                     for (char c : input) {
2024-08-30T19:43:30.6425676Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6425949Z                                                                 ch -> #include <iostream>
2024-08-30T19:43:30.6426082Z                     #include <string>
2024-08-30T19:43:30.6426166Z                     
2024-08-30T19:43:30.6426343Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6426507Z                             std::string result = "";
2024-08-30T19:43:30.6426649Z                                 int shift = 7;
2024-08-30T19:43:30.6426740Z                     
2024-08-30T19:43:30.6426902Z                                     for (char c : input) {
2024-08-30T19:43:30.6427073Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6427252Z                                                                 cha
2024-08-30T19:43:30.6427572Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6427761Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6428065Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6428302Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.6428685Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6428810Z                     #include <string>
2024-08-30T19:43:30.6428901Z                     
2024-08-30T19:43:30.6429082Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6429244Z                             std::string result = "";
2024-08-30T19:43:30.6429391Z                                 int shift = 7;
2024-08-30T19:43:30.6429476Z                     
2024-08-30T19:43:30.6429635Z                                     for (char c : input) {
2024-08-30T19:43:30.6429805Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6430043Z                                                                 char
2024-08-30T19:43:30.6432715Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6437058Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6437491Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6437618Z                     #include <string>
2024-08-30T19:43:30.6437708Z                     
2024-08-30T19:43:30.6437893Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6438054Z                             std::string result = "";
2024-08-30T19:43:30.6438195Z                                 int shift = 7;
2024-08-30T19:43:30.6438289Z                     
2024-08-30T19:43:30.6438457Z                                     for (char c : input) {
2024-08-30T19:43:30.6438627Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6438902Z                                                                 cha -> #include <iostream>
2024-08-30T19:43:30.6439031Z                     #include <string>
2024-08-30T19:43:30.6439115Z                     
2024-08-30T19:43:30.6439297Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6439455Z                             std::string result = "";
2024-08-30T19:43:30.6439591Z                                 int shift = 7;
2024-08-30T19:43:30.6439681Z                     
2024-08-30T19:43:30.6439836Z                                     for (char c : input) {
2024-08-30T19:43:30.6439998Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6440178Z                                                                 char
2024-08-30T19:43:30.6440507Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6440701Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6441010Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6441333Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6441634Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6441757Z                     #include <string>
2024-08-30T19:43:30.6441850Z                     
2024-08-30T19:43:30.6442032Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6442183Z                             std::string result = "";
2024-08-30T19:43:30.6442325Z                                 int shift = 7;
2024-08-30T19:43:30.6442410Z                     
2024-08-30T19:43:30.6442563Z                                     for (char c : input) {
2024-08-30T19:43:30.6442803Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6442975Z                                                                 char 
2024-08-30T19:43:30.6445648Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6449994Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6450412Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6450542Z                     #include <string>
2024-08-30T19:43:30.6450626Z                     
2024-08-30T19:43:30.6450805Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6451148Z                             std::string result = "";
2024-08-30T19:43:30.6451358Z                                 int shift = 7;
2024-08-30T19:43:30.6451448Z                     
2024-08-30T19:43:30.6451622Z                                     for (char c : input) {
2024-08-30T19:43:30.6451794Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6452084Z                                                                 char -> #include <iostream>
2024-08-30T19:43:30.6452212Z                     #include <string>
2024-08-30T19:43:30.6452297Z                     
2024-08-30T19:43:30.6452489Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6452642Z                             std::string result = "";
2024-08-30T19:43:30.6452777Z                                 int shift = 7;
2024-08-30T19:43:30.6452894Z                     
2024-08-30T19:43:30.6453052Z                                     for (char c : input) {
2024-08-30T19:43:30.6453218Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6453396Z                                                                 char 
2024-08-30T19:43:30.6453724Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6453916Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6454341Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6454590Z [32m      cy:command ✔ [39m type	b, {force: true}
2024-08-30T19:43:30.6454880Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6455013Z                     #include <string>
2024-08-30T19:43:30.6455107Z                     
2024-08-30T19:43:30.6455282Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6455434Z                             std::string result = "";
2024-08-30T19:43:30.6455579Z                                 int shift = 7;
2024-08-30T19:43:30.6455665Z                     
2024-08-30T19:43:30.6455910Z                                     for (char c : input) {
2024-08-30T19:43:30.6456074Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6456242Z                                                                 char b
2024-08-30T19:43:30.6459031Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char b","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6463407Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6463827Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6463961Z                     #include <string>
2024-08-30T19:43:30.6464047Z                     
2024-08-30T19:43:30.6464230Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6464400Z                             std::string result = "";
2024-08-30T19:43:30.6464537Z                                 int shift = 7;
2024-08-30T19:43:30.6464655Z                     
2024-08-30T19:43:30.6464822Z                                     for (char c : input) {
2024-08-30T19:43:30.6464994Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6465281Z                                                                 char  -> #include <iostream>
2024-08-30T19:43:30.6465399Z                     #include <string>
2024-08-30T19:43:30.6465491Z                     
2024-08-30T19:43:30.6465672Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6465904Z                             std::string result = "";
2024-08-30T19:43:30.6466149Z                                 int shift = 7;
2024-08-30T19:43:30.6466319Z                     
2024-08-30T19:43:30.6466516Z                                     for (char c : input) {
2024-08-30T19:43:30.6466836Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6467156Z                                                                 char b
2024-08-30T19:43:30.6467815Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6468256Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6468598Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6468850Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.6469154Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6469284Z                     #include <string>
2024-08-30T19:43:30.6469380Z                     
2024-08-30T19:43:30.6469577Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6469746Z                             std::string result = "";
2024-08-30T19:43:30.6469888Z                                 int shift = 7;
2024-08-30T19:43:30.6470069Z                     
2024-08-30T19:43:30.6470244Z                                     for (char c : input) {
2024-08-30T19:43:30.6470416Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6470588Z                                                                 char ba
2024-08-30T19:43:30.6473320Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char ba","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6477693Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6478112Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6478252Z                     #include <string>
2024-08-30T19:43:30.6478347Z                     
2024-08-30T19:43:30.6478535Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6478701Z                             std::string result = "";
2024-08-30T19:43:30.6478839Z                                 int shift = 7;
2024-08-30T19:43:30.6478934Z                     
2024-08-30T19:43:30.6479094Z                                     for (char c : input) {
2024-08-30T19:43:30.6479265Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6479562Z                                                                 char b -> #include <iostream>
2024-08-30T19:43:30.6479688Z                     #include <string>
2024-08-30T19:43:30.6479776Z                     
2024-08-30T19:43:30.6479961Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6480123Z                             std::string result = "";
2024-08-30T19:43:30.6480258Z                                 int shift = 7;
2024-08-30T19:43:30.6480353Z                     
2024-08-30T19:43:30.6480509Z                                     for (char c : input) {
2024-08-30T19:43:30.6480684Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6480860Z                                                                 char ba
2024-08-30T19:43:30.6481278Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6481473Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6481784Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6482041Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.6482334Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6482459Z                     #include <string>
2024-08-30T19:43:30.6482554Z                     
2024-08-30T19:43:30.6482736Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6482899Z                             std::string result = "";
2024-08-30T19:43:30.6483118Z                                 int shift = 7;
2024-08-30T19:43:30.6483201Z                     
2024-08-30T19:43:30.6483369Z                                     for (char c : input) {
2024-08-30T19:43:30.6483542Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6483722Z                                                                 char bas
2024-08-30T19:43:30.6486438Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char bas","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6490787Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6491450Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6491602Z                     #include <string>
2024-08-30T19:43:30.6491690Z                     
2024-08-30T19:43:30.6491882Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6492047Z                             std::string result = "";
2024-08-30T19:43:30.6492187Z                                 int shift = 7;
2024-08-30T19:43:30.6492280Z                     
2024-08-30T19:43:30.6492443Z                                     for (char c : input) {
2024-08-30T19:43:30.6492615Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6492926Z                                                                 char ba -> #include <iostream>
2024-08-30T19:43:30.6493049Z                     #include <string>
2024-08-30T19:43:30.6493133Z                     
2024-08-30T19:43:30.6493320Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6493474Z                             std::string result = "";
2024-08-30T19:43:30.6493618Z                                 int shift = 7;
2024-08-30T19:43:30.6493703Z                     
2024-08-30T19:43:30.6493863Z                                     for (char c : input) {
2024-08-30T19:43:30.6494040Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6494332Z                                                                 char bas
2024-08-30T19:43:30.6494670Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6494865Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6495194Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6495444Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.6495737Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6495871Z                     #include <string>
2024-08-30T19:43:30.6495957Z                     
2024-08-30T19:43:30.6496143Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6496400Z                             std::string result = "";
2024-08-30T19:43:30.6496543Z                                 int shift = 7;
2024-08-30T19:43:30.6496631Z                     
2024-08-30T19:43:30.6496802Z                                     for (char c : input) {
2024-08-30T19:43:30.6496983Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6497159Z                                                                 char base
2024-08-30T19:43:30.6499903Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6504253Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6504676Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6504810Z                     #include <string>
2024-08-30T19:43:30.6504897Z                     
2024-08-30T19:43:30.6505086Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6505245Z                             std::string result = "";
2024-08-30T19:43:30.6505383Z                                 int shift = 7;
2024-08-30T19:43:30.6505474Z                     
2024-08-30T19:43:30.6505633Z                                     for (char c : input) {
2024-08-30T19:43:30.6505808Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6506105Z                                                                 char bas -> #include <iostream>
2024-08-30T19:43:30.6506226Z                     #include <string>
2024-08-30T19:43:30.6506315Z                     
2024-08-30T19:43:30.6506496Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6506656Z                             std::string result = "";
2024-08-30T19:43:30.6506799Z                                 int shift = 7;
2024-08-30T19:43:30.6506886Z                     
2024-08-30T19:43:30.6507046Z                                     for (char c : input) {
2024-08-30T19:43:30.6507298Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6507471Z                                                                 char base
2024-08-30T19:43:30.6507806Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6508001Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6508309Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6508556Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6508846Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6508979Z                     #include <string>
2024-08-30T19:43:30.6509136Z                     
2024-08-30T19:43:30.6509318Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6509479Z                             std::string result = "";
2024-08-30T19:43:30.6509616Z                                 int shift = 7;
2024-08-30T19:43:30.6509705Z                     
2024-08-30T19:43:30.6509872Z                                     for (char c : input) {
2024-08-30T19:43:30.6510040Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6510348Z                                                                 char base 
2024-08-30T19:43:30.6512936Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6517263Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6517680Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6517813Z                     #include <string>
2024-08-30T19:43:30.6517901Z                     
2024-08-30T19:43:30.6518087Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6518242Z                             std::string result = "";
2024-08-30T19:43:30.6518381Z                                 int shift = 7;
2024-08-30T19:43:30.6518476Z                     
2024-08-30T19:43:30.6518637Z                                     for (char c : input) {
2024-08-30T19:43:30.6518806Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6519100Z                                                                 char base -> #include <iostream>
2024-08-30T19:43:30.6519220Z                     #include <string>
2024-08-30T19:43:30.6519313Z                     
2024-08-30T19:43:30.6519489Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6519642Z                             std::string result = "";
2024-08-30T19:43:30.6519785Z                                 int shift = 7;
2024-08-30T19:43:30.6519944Z                     
2024-08-30T19:43:30.6520108Z                                     for (char c : input) {
2024-08-30T19:43:30.6520279Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6520458Z                                                                 char base 
2024-08-30T19:43:30.6520800Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6520983Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6521291Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6521535Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.6521821Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6522071Z                     #include <string>
2024-08-30T19:43:30.6522157Z                     
2024-08-30T19:43:30.6522340Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6522502Z                             std::string result = "";
2024-08-30T19:43:30.6522647Z                                 int shift = 7;
2024-08-30T19:43:30.6522738Z                     
2024-08-30T19:43:30.6522899Z                                     for (char c : input) {
2024-08-30T19:43:30.6523185Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6523376Z                                                                 char base =
2024-08-30T19:43:30.6525966Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base =","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6530305Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6530731Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6530862Z                     #include <string>
2024-08-30T19:43:30.6530955Z                     
2024-08-30T19:43:30.6531394Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6531557Z                             std::string result = "";
2024-08-30T19:43:30.6531705Z                                 int shift = 7;
2024-08-30T19:43:30.6531797Z                     
2024-08-30T19:43:30.6531961Z                                     for (char c : input) {
2024-08-30T19:43:30.6532138Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6532440Z                                                                 char base  -> #include <iostream>
2024-08-30T19:43:30.6532565Z                     #include <string>
2024-08-30T19:43:30.6532834Z                     
2024-08-30T19:43:30.6533089Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6533246Z                             std::string result = "";
2024-08-30T19:43:30.6533511Z                                 int shift = 7;
2024-08-30T19:43:30.6533598Z                     
2024-08-30T19:43:30.6533768Z                                     for (char c : input) {
2024-08-30T19:43:30.6533945Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6534122Z                                                                 char base =
2024-08-30T19:43:30.6534483Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6534667Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6534979Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6535438Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6535901Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6536043Z                     #include <string>
2024-08-30T19:43:30.6536129Z                     
2024-08-30T19:43:30.6536321Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6536486Z                             std::string result = "";
2024-08-30T19:43:30.6536625Z                                 int shift = 7;
2024-08-30T19:43:30.6536716Z                     
2024-08-30T19:43:30.6537044Z                                     for (char c : input) {
2024-08-30T19:43:30.6537225Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6537417Z                                                                 char base = 
2024-08-30T19:43:30.6540022Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6544584Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6545041Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6545168Z                     #include <string>
2024-08-30T19:43:30.6545253Z                     
2024-08-30T19:43:30.6545449Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6545603Z                             std::string result = "";
2024-08-30T19:43:30.6545746Z                                 int shift = 7;
2024-08-30T19:43:30.6545832Z                     
2024-08-30T19:43:30.6545993Z                                     for (char c : input) {
2024-08-30T19:43:30.6546191Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6546704Z                                                                 char base = -> #include <iostream>
2024-08-30T19:43:30.6546837Z                     #include <string>
2024-08-30T19:43:30.6546934Z                     
2024-08-30T19:43:30.6547121Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6547401Z                             std::string result = "";
2024-08-30T19:43:30.6547540Z                                 int shift = 7;
2024-08-30T19:43:30.6547626Z                     
2024-08-30T19:43:30.6547804Z                                     for (char c : input) {
2024-08-30T19:43:30.6547978Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6548157Z                                                                 char base = 
2024-08-30T19:43:30.6548512Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6548700Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6549101Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6549343Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.6549629Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6549762Z                     #include <string>
2024-08-30T19:43:30.6549854Z                     
2024-08-30T19:43:30.6550045Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6550204Z                             std::string result = "";
2024-08-30T19:43:30.6550466Z                                 int shift = 7;
2024-08-30T19:43:30.6550562Z                     
2024-08-30T19:43:30.6550725Z                                     for (char c : input) {
2024-08-30T19:43:30.6550897Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6551088Z                                                                 char base = i
2024-08-30T19:43:30.6553703Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6558051Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6558475Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6558604Z                     #include <string>
2024-08-30T19:43:30.6558697Z                     
2024-08-30T19:43:30.6558887Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6559046Z                             std::string result = "";
2024-08-30T19:43:30.6559190Z                                 int shift = 7;
2024-08-30T19:43:30.6559274Z                     
2024-08-30T19:43:30.6559434Z                                     for (char c : input) {
2024-08-30T19:43:30.6559614Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6559908Z                                                                 char base =  -> #include <iostream>
2024-08-30T19:43:30.6560029Z                     #include <string>
2024-08-30T19:43:30.6560204Z                     
2024-08-30T19:43:30.6560386Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6560549Z                             std::string result = "";
2024-08-30T19:43:30.6560689Z                                 int shift = 7;
2024-08-30T19:43:30.6560774Z                     
2024-08-30T19:43:30.6560943Z                                     for (char c : input) {
2024-08-30T19:43:30.6561113Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6561294Z                                                                 char base = i
2024-08-30T19:43:30.6561636Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6561894Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6562211Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6562453Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.6562755Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6562880Z                     #include <string>
2024-08-30T19:43:30.6562966Z                     
2024-08-30T19:43:30.6563153Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6563447Z                             std::string result = "";
2024-08-30T19:43:30.6563589Z                                 int shift = 7;
2024-08-30T19:43:30.6563679Z                     
2024-08-30T19:43:30.6563840Z                                     for (char c : input) {
2024-08-30T19:43:30.6564014Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6564196Z                                                                 char base = is
2024-08-30T19:43:30.6566867Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = is","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6571396Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6571858Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6571985Z                     #include <string>
2024-08-30T19:43:30.6572075Z                     
2024-08-30T19:43:30.6572257Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6572409Z                             std::string result = "";
2024-08-30T19:43:30.6572551Z                                 int shift = 7;
2024-08-30T19:43:30.6572639Z                     
2024-08-30T19:43:30.6572798Z                                     for (char c : input) {
2024-08-30T19:43:30.6572974Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6573271Z                                                                 char base = i -> #include <iostream>
2024-08-30T19:43:30.6573518Z                     #include <string>
2024-08-30T19:43:30.6573606Z                     
2024-08-30T19:43:30.6573790Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6573958Z                             std::string result = "";
2024-08-30T19:43:30.6574099Z                                 int shift = 7;
2024-08-30T19:43:30.6574186Z                     
2024-08-30T19:43:30.6574354Z                                     for (char c : input) {
2024-08-30T19:43:30.6574523Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6574710Z                                                                 char base = is
2024-08-30T19:43:30.6575122Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6575309Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6575628Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6575880Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.6576180Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6576311Z                     #include <string>
2024-08-30T19:43:30.6576398Z                     
2024-08-30T19:43:30.6576738Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6576902Z                             std::string result = "";
2024-08-30T19:43:30.6577042Z                                 int shift = 7;
2024-08-30T19:43:30.6577134Z                     
2024-08-30T19:43:30.6577298Z                                     for (char c : input) {
2024-08-30T19:43:30.6577477Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6577662Z                                                                 char base = isl
2024-08-30T19:43:30.6580290Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = isl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6584615Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6585038Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6585164Z                     #include <string>
2024-08-30T19:43:30.6585257Z                     
2024-08-30T19:43:30.6585438Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6585597Z                             std::string result = "";
2024-08-30T19:43:30.6585742Z                                 int shift = 7;
2024-08-30T19:43:30.6585828Z                     
2024-08-30T19:43:30.6585995Z                                     for (char c : input) {
2024-08-30T19:43:30.6586163Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6586548Z                                                                 char base = is -> #include <iostream>
2024-08-30T19:43:30.6586675Z                     #include <string>
2024-08-30T19:43:30.6586762Z                     
2024-08-30T19:43:30.6586955Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6587118Z                             std::string result = "";
2024-08-30T19:43:30.6587259Z                                 int shift = 7;
2024-08-30T19:43:30.6587345Z                     
2024-08-30T19:43:30.6587512Z                                     for (char c : input) {
2024-08-30T19:43:30.6587747Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6587939Z                                                                 char base = isl
2024-08-30T19:43:30.6588268Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6588458Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6588771Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6589015Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.6589319Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6589571Z                     #include <string>
2024-08-30T19:43:30.6589662Z                     
2024-08-30T19:43:30.6589855Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6590010Z                             std::string result = "";
2024-08-30T19:43:30.6590155Z                                 int shift = 7;
2024-08-30T19:43:30.6590246Z                     
2024-08-30T19:43:30.6590407Z                                     for (char c : input) {
2024-08-30T19:43:30.6590582Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6590772Z                                                                 char base = islo
2024-08-30T19:43:30.6593419Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islo","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6597758Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6598184Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6598310Z                     #include <string>
2024-08-30T19:43:30.6598413Z                     
2024-08-30T19:43:30.6598593Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6598754Z                             std::string result = "";
2024-08-30T19:43:30.6598891Z                                 int shift = 7;
2024-08-30T19:43:30.6598976Z                     
2024-08-30T19:43:30.6599223Z                                     for (char c : input) {
2024-08-30T19:43:30.6599397Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6599709Z                                                                 char base = isl -> #include <iostream>
2024-08-30T19:43:30.6599839Z                     #include <string>
2024-08-30T19:43:30.6599929Z                     
2024-08-30T19:43:30.6600107Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6600267Z                             std::string result = "";
2024-08-30T19:43:30.6600402Z                                 int shift = 7;
2024-08-30T19:43:30.6600563Z                     
2024-08-30T19:43:30.6600723Z                                     for (char c : input) {
2024-08-30T19:43:30.6600896Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6601089Z                                                                 char base = islo
2024-08-30T19:43:30.6601426Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6601622Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6601932Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6602294Z [32m      cy:command ✔ [39m type	w, {force: true}
2024-08-30T19:43:30.6602598Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6602723Z                     #include <string>
2024-08-30T19:43:30.6602815Z                     
2024-08-30T19:43:30.6602998Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6603155Z                             std::string result = "";
2024-08-30T19:43:30.6603306Z                                 int shift = 7;
2024-08-30T19:43:30.6603391Z                     
2024-08-30T19:43:30.6603553Z                                     for (char c : input) {
2024-08-30T19:43:30.6603730Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6603923Z                                                                 char base = islow
2024-08-30T19:43:30.6606556Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islow","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6610883Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6611551Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6611688Z                     #include <string>
2024-08-30T19:43:30.6611782Z                     
2024-08-30T19:43:30.6611963Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6612125Z                             std::string result = "";
2024-08-30T19:43:30.6612368Z                                 int shift = 7;
2024-08-30T19:43:30.6612454Z                     
2024-08-30T19:43:30.6612623Z                                     for (char c : input) {
2024-08-30T19:43:30.6612800Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6613117Z                                                                 char base = islo -> #include <iostream>
2024-08-30T19:43:30.6613245Z                     #include <string>
2024-08-30T19:43:30.6613330Z                     
2024-08-30T19:43:30.6613514Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6613668Z                             std::string result = "";
2024-08-30T19:43:30.6613904Z                                 int shift = 7;
2024-08-30T19:43:30.6613994Z                     
2024-08-30T19:43:30.6614160Z                                     for (char c : input) {
2024-08-30T19:43:30.6614335Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6614534Z                                                                 char base = islow
2024-08-30T19:43:30.6614869Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6615060Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6615508Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6615758Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.6616059Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6616182Z                     #include <string>
2024-08-30T19:43:30.6616274Z                     
2024-08-30T19:43:30.6616461Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6616615Z                             std::string result = "";
2024-08-30T19:43:30.6616759Z                                 int shift = 7;
2024-08-30T19:43:30.6616845Z                     
2024-08-30T19:43:30.6617005Z                                     for (char c : input) {
2024-08-30T19:43:30.6617192Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6617384Z                                                                 char base = islowe
2024-08-30T19:43:30.6620020Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islowe","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6624343Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6624759Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6624889Z                     #include <string>
2024-08-30T19:43:30.6624975Z                     
2024-08-30T19:43:30.6625232Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6625392Z                             std::string result = "";
2024-08-30T19:43:30.6625527Z                                 int shift = 7;
2024-08-30T19:43:30.6625615Z                     
2024-08-30T19:43:30.6625787Z                                     for (char c : input) {
2024-08-30T19:43:30.6625957Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6626272Z                                                                 char base = islow -> #include <iostream>
2024-08-30T19:43:30.6626390Z                     #include <string>
2024-08-30T19:43:30.6626475Z                     
2024-08-30T19:43:30.6626726Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6626880Z                             std::string result = "";
2024-08-30T19:43:30.6627018Z                                 int shift = 7;
2024-08-30T19:43:30.6627111Z                     
2024-08-30T19:43:30.6627274Z                                     for (char c : input) {
2024-08-30T19:43:30.6627445Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6627641Z                                                                 char base = islowe
2024-08-30T19:43:30.6628085Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6628283Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6628596Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6628842Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.6629134Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6629264Z                     #include <string>
2024-08-30T19:43:30.6629358Z                     
2024-08-30T19:43:30.6629538Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6629691Z                             std::string result = "";
2024-08-30T19:43:30.6629844Z                                 int shift = 7;
2024-08-30T19:43:30.6629931Z                     
2024-08-30T19:43:30.6630096Z                                     for (char c : input) {
2024-08-30T19:43:30.6630267Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6630464Z                                                                 char base = islower
2024-08-30T19:43:30.6633675Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6638574Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6639025Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6639303Z                     #include <string>
2024-08-30T19:43:30.6639394Z                     
2024-08-30T19:43:30.6639591Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6639767Z                             std::string result = "";
2024-08-30T19:43:30.6639913Z                                 int shift = 7;
2024-08-30T19:43:30.6640008Z                     
2024-08-30T19:43:30.6640175Z                                     for (char c : input) {
2024-08-30T19:43:30.6640347Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6640675Z                                                                 char base = islowe -> #include <iostream>
2024-08-30T19:43:30.6640872Z                     #include <string>
2024-08-30T19:43:30.6640961Z                     
2024-08-30T19:43:30.6641153Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6641313Z                             std::string result = "";
2024-08-30T19:43:30.6641457Z                                 int shift = 7;
2024-08-30T19:43:30.6641552Z                     
2024-08-30T19:43:30.6641714Z                                     for (char c : input) {
2024-08-30T19:43:30.6641896Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6642202Z                                                                 char base = islower
2024-08-30T19:43:30.6642552Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6642752Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6643071Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6643337Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.6643634Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6643764Z                     #include <string>
2024-08-30T19:43:30.6643856Z                     
2024-08-30T19:43:30.6644040Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6644342Z                             std::string result = "";
2024-08-30T19:43:30.6644518Z                                 int shift = 7;
2024-08-30T19:43:30.6644609Z                     
2024-08-30T19:43:30.6644791Z                                     for (char c : input) {
2024-08-30T19:43:30.6644967Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6645162Z                                                                 char base = islower(
2024-08-30T19:43:30.6647826Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6652426Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6653008Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6653147Z                     #include <string>
2024-08-30T19:43:30.6653235Z                     
2024-08-30T19:43:30.6653430Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6653596Z                             std::string result = "";
2024-08-30T19:43:30.6653737Z                                 int shift = 7;
2024-08-30T19:43:30.6653830Z                     
2024-08-30T19:43:30.6653994Z                                     for (char c : input) {
2024-08-30T19:43:30.6654170Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6654575Z                                                                 char base = islower -> #include <iostream>
2024-08-30T19:43:30.6654700Z                     #include <string>
2024-08-30T19:43:30.6654787Z                     
2024-08-30T19:43:30.6654972Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6655129Z                             std::string result = "";
2024-08-30T19:43:30.6655271Z                                 int shift = 7;
2024-08-30T19:43:30.6655358Z                     
2024-08-30T19:43:30.6655653Z                                     for (char c : input) {
2024-08-30T19:43:30.6655837Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6656034Z                                                                 char base = islower(
2024-08-30T19:43:30.6656369Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6656566Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6656879Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6657127Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.6657418Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6657555Z                     #include <string>
2024-08-30T19:43:30.6657641Z                     
2024-08-30T19:43:30.6657820Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6657979Z                             std::string result = "";
2024-08-30T19:43:30.6658123Z                                 int shift = 7;
2024-08-30T19:43:30.6658209Z                     
2024-08-30T19:43:30.6658375Z                                     for (char c : input) {
2024-08-30T19:43:30.6658544Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6658746Z                                                                 char base = islower(c
2024-08-30T19:43:30.6661387Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6665751Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6666276Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6666422Z                     #include <string>
2024-08-30T19:43:30.6666509Z                     
2024-08-30T19:43:30.6666699Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6666858Z                             std::string result = "";
2024-08-30T19:43:30.6666996Z                                 int shift = 7;
2024-08-30T19:43:30.6667088Z                     
2024-08-30T19:43:30.6667323Z                                     for (char c : input) {
2024-08-30T19:43:30.6667495Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6667821Z                                                                 char base = islower( -> #include <iostream>
2024-08-30T19:43:30.6667947Z                     #include <string>
2024-08-30T19:43:30.6668039Z                     
2024-08-30T19:43:30.6668215Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6668368Z                             std::string result = "";
2024-08-30T19:43:30.6668705Z                                 int shift = 7;
2024-08-30T19:43:30.6668799Z                     
2024-08-30T19:43:30.6668967Z                                     for (char c : input) {
2024-08-30T19:43:30.6669145Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6669337Z                                                                 char base = islower(c
2024-08-30T19:43:30.6669680Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6669866Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6670176Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6670430Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.6670724Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6670858Z                     #include <string>
2024-08-30T19:43:30.6670944Z                     
2024-08-30T19:43:30.6671134Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6671302Z                             std::string result = "";
2024-08-30T19:43:30.6671440Z                                 int shift = 7;
2024-08-30T19:43:30.6671532Z                     
2024-08-30T19:43:30.6671690Z                                     for (char c : input) {
2024-08-30T19:43:30.6671865Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6672073Z                                                                 char base = islower(c)
2024-08-30T19:43:30.6674863Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6679220Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6679751Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6679883Z                     #include <string>
2024-08-30T19:43:30.6679971Z                     
2024-08-30T19:43:30.6680165Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6680323Z                             std::string result = "";
2024-08-30T19:43:30.6680533Z                                 int shift = 7;
2024-08-30T19:43:30.6680636Z                     
2024-08-30T19:43:30.6680803Z                                     for (char c : input) {
2024-08-30T19:43:30.6681006Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6681349Z                                                                 char base = islower(c -> #include <iostream>
2024-08-30T19:43:30.6681474Z                     #include <string>
2024-08-30T19:43:30.6681567Z                     
2024-08-30T19:43:30.6681865Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6682024Z                             std::string result = "";
2024-08-30T19:43:30.6682171Z                                 int shift = 7;
2024-08-30T19:43:30.6682258Z                     
2024-08-30T19:43:30.6682418Z                                     for (char c : input) {
2024-08-30T19:43:30.6682596Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6682794Z                                                                 char base = islower(c)
2024-08-30T19:43:30.6683140Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6683329Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6683653Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6683899Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6684193Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6684334Z                     #include <string>
2024-08-30T19:43:30.6684420Z                     
2024-08-30T19:43:30.6684605Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6684768Z                             std::string result = "";
2024-08-30T19:43:30.6684906Z                                 int shift = 7;
2024-08-30T19:43:30.6684997Z                     
2024-08-30T19:43:30.6685160Z                                     for (char c : input) {
2024-08-30T19:43:30.6685331Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6685541Z                                                                 char base = islower(c) 
2024-08-30T19:43:30.6688194Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6692792Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6693350Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6693479Z                     #include <string>
2024-08-30T19:43:30.6693565Z                     
2024-08-30T19:43:30.6693841Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6693998Z                             std::string result = "";
2024-08-30T19:43:30.6694143Z                                 int shift = 7;
2024-08-30T19:43:30.6694229Z                     
2024-08-30T19:43:30.6694396Z                                     for (char c : input) {
2024-08-30T19:43:30.6694570Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6694898Z                                                                 char base = islower(c) -> #include <iostream>
2024-08-30T19:43:30.6695160Z                     #include <string>
2024-08-30T19:43:30.6695257Z                     
2024-08-30T19:43:30.6695437Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6695596Z                             std::string result = "";
2024-08-30T19:43:30.6695729Z                                 int shift = 7;
2024-08-30T19:43:30.6695813Z                     
2024-08-30T19:43:30.6695981Z                                     for (char c : input) {
2024-08-30T19:43:30.6696152Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6696352Z                                                                 char base = islower(c) 
2024-08-30T19:43:30.6696696Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6696883Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6697201Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6697452Z [32m      cy:command ✔ [39m type	?, {force: true}
2024-08-30T19:43:30.6697744Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6697874Z                     #include <string>
2024-08-30T19:43:30.6697960Z                     
2024-08-30T19:43:30.6698152Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6698305Z                             std::string result = "";
2024-08-30T19:43:30.6698445Z                                 int shift = 7;
2024-08-30T19:43:30.6698537Z                     
2024-08-30T19:43:30.6698699Z                                     for (char c : input) {
2024-08-30T19:43:30.6698870Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6699084Z                                                                 char base = islower(c) ?
2024-08-30T19:43:30.6701755Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ?","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6706103Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6706604Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6706800Z                     #include <string>
2024-08-30T19:43:30.6706895Z                     
2024-08-30T19:43:30.6707079Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6707237Z                             std::string result = "";
2024-08-30T19:43:30.6707385Z                                 int shift = 7;
2024-08-30T19:43:30.6707473Z                     
2024-08-30T19:43:30.6707634Z                                     for (char c : input) {
2024-08-30T19:43:30.6707948Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6708284Z                                                                 char base = islower(c)  -> #include <iostream>
2024-08-30T19:43:30.6708406Z                     #include <string>
2024-08-30T19:43:30.6708496Z                     
2024-08-30T19:43:30.6708677Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6708839Z                             std::string result = "";
2024-08-30T19:43:30.6708978Z                                 int shift = 7;
2024-08-30T19:43:30.6709062Z                     
2024-08-30T19:43:30.6709228Z                                     for (char c : input) {
2024-08-30T19:43:30.6709392Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6709596Z                                                                 char base = islower(c) ?
2024-08-30T19:43:30.6709931Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6710120Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6710432Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6710681Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6710975Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6711099Z                     #include <string>
2024-08-30T19:43:30.6711186Z                     
2024-08-30T19:43:30.6711378Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6711530Z                             std::string result = "";
2024-08-30T19:43:30.6711665Z                                 int shift = 7;
2024-08-30T19:43:30.6711762Z                     
2024-08-30T19:43:30.6711996Z                                     for (char c : input) {
2024-08-30T19:43:30.6712176Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6712378Z                                                                 char base = islower(c) ? 
2024-08-30T19:43:30.6715028Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6719361Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6719858Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6719987Z                     #include <string>
2024-08-30T19:43:30.6720079Z                     
2024-08-30T19:43:30.6720264Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6720416Z                             std::string result = "";
2024-08-30T19:43:30.6720557Z                                 int shift = 7;
2024-08-30T19:43:30.6720645Z                     
2024-08-30T19:43:30.6720919Z                                     for (char c : input) {
2024-08-30T19:43:30.6721099Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6721429Z                                                                 char base = islower(c) ? -> #include <iostream>
2024-08-30T19:43:30.6721557Z                     #include <string>
2024-08-30T19:43:30.6721646Z                     
2024-08-30T19:43:30.6721827Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6721986Z                             std::string result = "";
2024-08-30T19:43:30.6722120Z                                 int shift = 7;
2024-08-30T19:43:30.6722208Z                     
2024-08-30T19:43:30.6722377Z                                     for (char c : input) {
2024-08-30T19:43:30.6722542Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6722751Z                                                                 char base = islower(c) ? 
2024-08-30T19:43:30.6723080Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6723265Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6723580Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6723824Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.6724121Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6724249Z                     #include <string>
2024-08-30T19:43:30.6724336Z                     
2024-08-30T19:43:30.6724521Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6724675Z                             std::string result = "";
2024-08-30T19:43:30.6724892Z                                 int shift = 7;
2024-08-30T19:43:30.6724977Z                     
2024-08-30T19:43:30.6725138Z                                     for (char c : input) {
2024-08-30T19:43:30.6725321Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6725527Z                                                                 char base = islower(c) ? '
2024-08-30T19:43:30.6728180Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? '","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6732765Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6733333Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6733473Z                     #include <string>
2024-08-30T19:43:30.6733565Z                     
2024-08-30T19:43:30.6733752Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6734051Z                             std::string result = "";
2024-08-30T19:43:30.6734200Z                                 int shift = 7;
2024-08-30T19:43:30.6734287Z                     
2024-08-30T19:43:30.6734454Z                                     for (char c : input) {
2024-08-30T19:43:30.6734627Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6734963Z                                                                 char base = islower(c) ?  -> #include <iostream>
2024-08-30T19:43:30.6735093Z                     #include <string>
2024-08-30T19:43:30.6735178Z                     
2024-08-30T19:43:30.6735363Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6735526Z                             std::string result = "";
2024-08-30T19:43:30.6735662Z                                 int shift = 7;
2024-08-30T19:43:30.6735755Z                     
2024-08-30T19:43:30.6735914Z                                     for (char c : input) {
2024-08-30T19:43:30.6736088Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6736298Z                                                                 char base = islower(c) ? '
2024-08-30T19:43:30.6736629Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6736821Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6737134Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6737383Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.6737683Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6737807Z                     #include <string>
2024-08-30T19:43:30.6737899Z                     
2024-08-30T19:43:30.6738168Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6738323Z                             std::string result = "";
2024-08-30T19:43:30.6738468Z                                 int shift = 7;
2024-08-30T19:43:30.6738564Z                     
2024-08-30T19:43:30.6738724Z                                     for (char c : input) {
2024-08-30T19:43:30.6738900Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6739147Z                                                                 char base = islower(c) ? 'a
2024-08-30T19:43:30.6741819Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6746181Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6746682Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6746808Z                     #include <string>
2024-08-30T19:43:30.6747016Z                     
2024-08-30T19:43:30.6747204Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6747366Z                             std::string result = "";
2024-08-30T19:43:30.6747501Z                                 int shift = 7;
2024-08-30T19:43:30.6747586Z                     
2024-08-30T19:43:30.6747752Z                                     for (char c : input) {
2024-08-30T19:43:30.6747926Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6748263Z                                                                 char base = islower(c) ? ' -> #include <iostream>
2024-08-30T19:43:30.6748390Z                     #include <string>
2024-08-30T19:43:30.6748480Z                     
2024-08-30T19:43:30.6748665Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6748816Z                             std::string result = "";
2024-08-30T19:43:30.6748950Z                                 int shift = 7;
2024-08-30T19:43:30.6749044Z                     
2024-08-30T19:43:30.6749202Z                                     for (char c : input) {
2024-08-30T19:43:30.6749368Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6749612Z                                                                 char base = islower(c) ? 'a
2024-08-30T19:43:30.6749937Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6750128Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6750434Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6750680Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.6751059Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6751183Z                     #include <string>
2024-08-30T19:43:30.6751273Z                     
2024-08-30T19:43:30.6751450Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6751610Z                             std::string result = "";
2024-08-30T19:43:30.6751749Z                                 int shift = 7;
2024-08-30T19:43:30.6751833Z                     
2024-08-30T19:43:30.6751992Z                                     for (char c : input) {
2024-08-30T19:43:30.6752165Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6752444Z                                                                 char base = islower(c) ? 'a'
2024-08-30T19:43:30.6755124Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a'","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6759489Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6760117Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6760255Z                     #include <string>
2024-08-30T19:43:30.6760340Z                     
2024-08-30T19:43:30.6760520Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6760684Z                             std::string result = "";
2024-08-30T19:43:30.6760824Z                                 int shift = 7;
2024-08-30T19:43:30.6760910Z                     
2024-08-30T19:43:30.6761077Z                                     for (char c : input) {
2024-08-30T19:43:30.6761245Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6761594Z                                                                 char base = islower(c) ? 'a -> #include <iostream>
2024-08-30T19:43:30.6761715Z                     #include <string>
2024-08-30T19:43:30.6761800Z                     
2024-08-30T19:43:30.6761989Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6762141Z                             std::string result = "";
2024-08-30T19:43:30.6762274Z                                 int shift = 7;
2024-08-30T19:43:30.6762364Z                     
2024-08-30T19:43:30.6762524Z                                     for (char c : input) {
2024-08-30T19:43:30.6762699Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6762980Z                                                                 char base = islower(c) ? 'a'
2024-08-30T19:43:30.6763308Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6763497Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6763884Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6764132Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6764420Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6764551Z                     #include <string>
2024-08-30T19:43:30.6764642Z                     
2024-08-30T19:43:30.6764857Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6765017Z                             std::string result = "";
2024-08-30T19:43:30.6765162Z                                 int shift = 7;
2024-08-30T19:43:30.6765251Z                     
2024-08-30T19:43:30.6765417Z                                     for (char c : input) {
2024-08-30T19:43:30.6765589Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6765874Z                                                                 char base = islower(c) ? 'a' 
2024-08-30T19:43:30.6768542Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6773281Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6773812Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6773948Z                     #include <string>
2024-08-30T19:43:30.6774036Z                     
2024-08-30T19:43:30.6774226Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6774390Z                             std::string result = "";
2024-08-30T19:43:30.6774524Z                                 int shift = 7;
2024-08-30T19:43:30.6774615Z                     
2024-08-30T19:43:30.6774783Z                                     for (char c : input) {
2024-08-30T19:43:30.6774954Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6775305Z                                                                 char base = islower(c) ? 'a' -> #include <iostream>
2024-08-30T19:43:30.6775433Z                     #include <string>
2024-08-30T19:43:30.6775519Z                     
2024-08-30T19:43:30.6775704Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6775857Z                             std::string result = "";
2024-08-30T19:43:30.6775996Z                                 int shift = 7;
2024-08-30T19:43:30.6776080Z                     
2024-08-30T19:43:30.6776244Z                                     for (char c : input) {
2024-08-30T19:43:30.6776423Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6776702Z                                                                 char base = islower(c) ? 'a' 
2024-08-30T19:43:30.6777122Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6777315Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6777624Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6777877Z [32m      cy:command ✔ [39m type	:, {force: true}
2024-08-30T19:43:30.6778166Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6778295Z                     #include <string>
2024-08-30T19:43:30.6778381Z                     
2024-08-30T19:43:30.6778560Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6778719Z                             std::string result = "";
2024-08-30T19:43:30.6778859Z                                 int shift = 7;
2024-08-30T19:43:30.6778945Z                     
2024-08-30T19:43:30.6779109Z                                     for (char c : input) {
2024-08-30T19:43:30.6779274Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6779561Z                                                                 char base = islower(c) ? 'a' :
2024-08-30T19:43:30.6782254Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' :","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6787044Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6787504Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6787649Z                     #include <string>
2024-08-30T19:43:30.6787737Z                     
2024-08-30T19:43:30.6787932Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6788088Z                             std::string result = "";
2024-08-30T19:43:30.6788231Z                                 int shift = 7;
2024-08-30T19:43:30.6788324Z                     
2024-08-30T19:43:30.6788483Z                                     for (char c : input) {
2024-08-30T19:43:30.6788658Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6789011Z                                                                 char base = islower(c) ? 'a'  -> #include <iostream>
2024-08-30T19:43:30.6789133Z                     #include <string>
2024-08-30T19:43:30.6789227Z                     
2024-08-30T19:43:30.6789410Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6789568Z                             std::string result = "";
2024-08-30T19:43:30.6789712Z                                 int shift = 7;
2024-08-30T19:43:30.6789797Z                     
2024-08-30T19:43:30.6789955Z                                     for (char c : input) {
2024-08-30T19:43:30.6790130Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6790484Z                                                                 char base = islower(c) ? 'a' :
2024-08-30T19:43:30.6790826Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6791018Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6791331Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6791579Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6791871Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6792004Z                     #include <string>
2024-08-30T19:43:30.6792094Z                     
2024-08-30T19:43:30.6792278Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6792439Z                             std::string result = "";
2024-08-30T19:43:30.6792576Z                                 int shift = 7;
2024-08-30T19:43:30.6792659Z                     
2024-08-30T19:43:30.6792828Z                                     for (char c : input) {
2024-08-30T19:43:30.6792993Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6793289Z                                                                 char base = islower(c) ? 'a' : 
2024-08-30T19:43:30.6795965Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6801727Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6802276Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6802414Z                     #include <string>
2024-08-30T19:43:30.6802510Z                     
2024-08-30T19:43:30.6802711Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6802871Z                             std::string result = "";
2024-08-30T19:43:30.6803011Z                                 int shift = 7;
2024-08-30T19:43:30.6803113Z                     
2024-08-30T19:43:30.6803277Z                                     for (char c : input) {
2024-08-30T19:43:30.6803456Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6803812Z                                                                 char base = islower(c) ? 'a' : -> #include <iostream>
2024-08-30T19:43:30.6803934Z                     #include <string>
2024-08-30T19:43:30.6804033Z                     
2024-08-30T19:43:30.6804215Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6804370Z                             std::string result = "";
2024-08-30T19:43:30.6804513Z                                 int shift = 7;
2024-08-30T19:43:30.6804677Z                     
2024-08-30T19:43:30.6804840Z                                     for (char c : input) {
2024-08-30T19:43:30.6805020Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6805316Z                                                                 char base = islower(c) ? 'a' : 
2024-08-30T19:43:30.6805658Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6805847Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6806162Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6806410Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.6806800Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6806936Z                     #include <string>
2024-08-30T19:43:30.6807026Z                     
2024-08-30T19:43:30.6807210Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6807379Z                             std::string result = "";
2024-08-30T19:43:30.6807517Z                                 int shift = 7;
2024-08-30T19:43:30.6807610Z                     
2024-08-30T19:43:30.6807770Z                                     for (char c : input) {
2024-08-30T19:43:30.6807948Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6808246Z                                                                 char base = islower(c) ? 'a' : '
2024-08-30T19:43:30.6810947Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : '","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6815784Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6816232Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6816362Z                     #include <string>
2024-08-30T19:43:30.6816451Z                     
2024-08-30T19:43:30.6816647Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6816802Z                             std::string result = "";
2024-08-30T19:43:30.6816950Z                                 int shift = 7;
2024-08-30T19:43:30.6817040Z                     
2024-08-30T19:43:30.6817205Z                                     for (char c : input) {
2024-08-30T19:43:30.6817443Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6818084Z                                                                 char base = islower(c) ? 'a' :  -> #include <iostream>
2024-08-30T19:43:30.6818295Z                     #include <string>
2024-08-30T19:43:30.6818450Z                     
2024-08-30T19:43:30.6818762Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6819245Z                             std::string result = "";
2024-08-30T19:43:30.6819430Z                                 int shift = 7;
2024-08-30T19:43:30.6819525Z                     
2024-08-30T19:43:30.6819714Z                                     for (char c : input) {
2024-08-30T19:43:30.6819892Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6820214Z                                                                 char base = islower(c) ? 'a' : '
2024-08-30T19:43:30.6820572Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6820765Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6821211Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6821459Z [32m      cy:command ✔ [39m type	A, {force: true}
2024-08-30T19:43:30.6821756Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6821903Z                     #include <string>
2024-08-30T19:43:30.6821991Z                     
2024-08-30T19:43:30.6822184Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6822340Z                             std::string result = "";
2024-08-30T19:43:30.6822485Z                                 int shift = 7;
2024-08-30T19:43:30.6822578Z                     
2024-08-30T19:43:30.6822746Z                                     for (char c : input) {
2024-08-30T19:43:30.6822915Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6823214Z                                                                 char base = islower(c) ? 'a' : 'A
2024-08-30T19:43:30.6826040Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6830404Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6830834Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6830978Z                     #include <string>
2024-08-30T19:43:30.6831071Z                     
2024-08-30T19:43:30.6831258Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6831414Z                             std::string result = "";
2024-08-30T19:43:30.6831558Z                                 int shift = 7;
2024-08-30T19:43:30.6831647Z                     
2024-08-30T19:43:30.6831809Z                                     for (char c : input) {
2024-08-30T19:43:30.6831986Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6832343Z                                                                 char base = islower(c) ? 'a' : ' -> #include <iostream>
2024-08-30T19:43:30.6832547Z                     #include <string>
2024-08-30T19:43:30.6832634Z                     
2024-08-30T19:43:30.6832817Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6832989Z                             std::string result = "";
2024-08-30T19:43:30.6833128Z                                 int shift = 7;
2024-08-30T19:43:30.6833214Z                     
2024-08-30T19:43:30.6833383Z                                     for (char c : input) {
2024-08-30T19:43:30.6833554Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6833850Z                                                                 char base = islower(c) ? 'a' : 'A
2024-08-30T19:43:30.6834254Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6834438Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6834752Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6835008Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.6835304Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6835429Z                     #include <string>
2024-08-30T19:43:30.6835513Z                     
2024-08-30T19:43:30.6835709Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6835864Z                             std::string result = "";
2024-08-30T19:43:30.6836001Z                                 int shift = 7;
2024-08-30T19:43:30.6836096Z                     
2024-08-30T19:43:30.6836257Z                                     for (char c : input) {
2024-08-30T19:43:30.6836432Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6836726Z                                                                 char base = islower(c) ? 'a' : 'A'
2024-08-30T19:43:30.6839532Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6843859Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6844290Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6844418Z                     #include <string>
2024-08-30T19:43:30.6844517Z                     
2024-08-30T19:43:30.6844696Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6844857Z                             std::string result = "";
2024-08-30T19:43:30.6845001Z                                 int shift = 7;
2024-08-30T19:43:30.6845089Z                     
2024-08-30T19:43:30.6845252Z                                     for (char c : input) {
2024-08-30T19:43:30.6845504Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6845871Z                                                                 char base = islower(c) ? 'a' : 'A -> #include <iostream>
2024-08-30T19:43:30.6845996Z                     #include <string>
2024-08-30T19:43:30.6846089Z                     
2024-08-30T19:43:30.6846270Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6846427Z                             std::string result = "";
2024-08-30T19:43:30.6846563Z                                 int shift = 7;
2024-08-30T19:43:30.6846648Z                     
2024-08-30T19:43:30.6846816Z                                     for (char c : input) {
2024-08-30T19:43:30.6847050Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6847347Z                                                                 char base = islower(c) ? 'a' : 'A'
2024-08-30T19:43:30.6847677Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6847867Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6848186Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6848426Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.6848730Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6848856Z                     #include <string>
2024-08-30T19:43:30.6848940Z                     
2024-08-30T19:43:30.6849125Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6849277Z                             std::string result = "";
2024-08-30T19:43:30.6849419Z                                 int shift = 7;
2024-08-30T19:43:30.6849508Z                     
2024-08-30T19:43:30.6849664Z                                     for (char c : input) {
2024-08-30T19:43:30.6849839Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6850128Z                                                                 char base = islower(c) ? 'a' : 'A';
2024-08-30T19:43:30.6853282Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A';","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6857669Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6858095Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6858226Z                     #include <string>
2024-08-30T19:43:30.6858319Z                     
2024-08-30T19:43:30.6858503Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6858669Z                             std::string result = "";
2024-08-30T19:43:30.6858912Z                                 int shift = 7;
2024-08-30T19:43:30.6858998Z                     
2024-08-30T19:43:30.6859166Z                                     for (char c : input) {
2024-08-30T19:43:30.6859337Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6859715Z                                                                 char base = islower(c) ? 'a' : 'A' -> #include <iostream>
2024-08-30T19:43:30.6859843Z                     #include <string>
2024-08-30T19:43:30.6859927Z                     
2024-08-30T19:43:30.6860111Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6860265Z                             std::string result = "";
2024-08-30T19:43:30.6860478Z                                 int shift = 7;
2024-08-30T19:43:30.6860569Z                     
2024-08-30T19:43:30.6860732Z                                     for (char c : input) {
2024-08-30T19:43:30.6860907Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6861209Z                                                                 char base = islower(c) ? 'a' : 'A';
2024-08-30T19:43:30.6861534Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6861724Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6862040Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6862281Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6862575Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6862699Z                     #include <string>
2024-08-30T19:43:30.6862789Z                     
2024-08-30T19:43:30.6862970Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6863126Z                             std::string result = "";
2024-08-30T19:43:30.6863270Z                                 int shift = 7;
2024-08-30T19:43:30.6863357Z                     
2024-08-30T19:43:30.6863523Z                                     for (char c : input) {
2024-08-30T19:43:30.6863702Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6863994Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6866850Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6871187Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6871606Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6871740Z                     #include <string>
2024-08-30T19:43:30.6871827Z                     
2024-08-30T19:43:30.6872084Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6872244Z                             std::string result = "";
2024-08-30T19:43:30.6872381Z                                 int shift = 7;
2024-08-30T19:43:30.6872465Z                     
2024-08-30T19:43:30.6872639Z                                     for (char c : input) {
2024-08-30T19:43:30.6872809Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6873187Z                                                                 char base = islower(c) ? 'a' : 'A'; -> #include <iostream>
2024-08-30T19:43:30.6873310Z                     #include <string>
2024-08-30T19:43:30.6873552Z                     
2024-08-30T19:43:30.6873745Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6873905Z                             std::string result = "";
2024-08-30T19:43:30.6874042Z                                 int shift = 7;
2024-08-30T19:43:30.6874138Z                     
2024-08-30T19:43:30.6874315Z                                     for (char c : input) {
2024-08-30T19:43:30.6874484Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6874793Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6875125Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6875316Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6875626Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6875813Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.6875937Z                     , {force: true}
2024-08-30T19:43:30.6876231Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6876361Z                     #include <string>
2024-08-30T19:43:30.6876447Z                     
2024-08-30T19:43:30.6876629Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6876795Z                             std::string result = "";
2024-08-30T19:43:30.6876931Z                                 int shift = 7;
2024-08-30T19:43:30.6877023Z                     
2024-08-30T19:43:30.6877309Z                                     for (char c : input) {
2024-08-30T19:43:30.6877482Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6877778Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6877935Z                                                                 
2024-08-30T19:43:30.6880724Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6885059Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6885557Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6885691Z                     #include <string>
2024-08-30T19:43:30.6885784Z                     
2024-08-30T19:43:30.6885968Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6886131Z                             std::string result = "";
2024-08-30T19:43:30.6886270Z                                 int shift = 7;
2024-08-30T19:43:30.6886355Z                     
2024-08-30T19:43:30.6886591Z                                     for (char c : input) {
2024-08-30T19:43:30.6886761Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6887136Z                                                                 char base = islower(c) ? 'a' : 'A';  -> #include <iostream>
2024-08-30T19:43:30.6887269Z                     #include <string>
2024-08-30T19:43:30.6887354Z                     
2024-08-30T19:43:30.6887540Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6887699Z                             std::string result = "";
2024-08-30T19:43:30.6887835Z                                 int shift = 7;
2024-08-30T19:43:30.6887925Z                     
2024-08-30T19:43:30.6888081Z                                     for (char c : input) {
2024-08-30T19:43:30.6888252Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6888555Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6888717Z                                                                 
2024-08-30T19:43:30.6889047Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6889232Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6889545Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6889792Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6890084Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6890342Z                     #include <string>
2024-08-30T19:43:30.6890433Z                     
2024-08-30T19:43:30.6890614Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6890773Z                             std::string result = "";
2024-08-30T19:43:30.6890907Z                                 int shift = 7;
2024-08-30T19:43:30.6891205Z                     
2024-08-30T19:43:30.6891404Z                                     for (char c : input) {
2024-08-30T19:43:30.6891582Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6891898Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6892058Z                                                                  
2024-08-30T19:43:30.6894871Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6899207Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6899745Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6899955Z                     #include <string>
2024-08-30T19:43:30.6900054Z                     
2024-08-30T19:43:30.6900238Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6900393Z                             std::string result = "";
2024-08-30T19:43:30.6900542Z                                 int shift = 7;
2024-08-30T19:43:30.6900628Z                     
2024-08-30T19:43:30.6900795Z                                     for (char c : input) {
2024-08-30T19:43:30.6900973Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6901275Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6901544Z                                                                  -> #include <iostream>
2024-08-30T19:43:30.6901664Z                     #include <string>
2024-08-30T19:43:30.6901748Z                     
2024-08-30T19:43:30.6901936Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6902087Z                             std::string result = "";
2024-08-30T19:43:30.6902228Z                                 int shift = 7;
2024-08-30T19:43:30.6902312Z                     
2024-08-30T19:43:30.6902473Z                                     for (char c : input) {
2024-08-30T19:43:30.6902654Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6902940Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6903258Z                                                                  
2024-08-30T19:43:30.6903609Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6903798Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6904122Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6904363Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6904659Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6904796Z                     #include <string>
2024-08-30T19:43:30.6904885Z                     
2024-08-30T19:43:30.6905075Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6905236Z                             std::string result = "";
2024-08-30T19:43:30.6905374Z                                 int shift = 7;
2024-08-30T19:43:30.6905465Z                     
2024-08-30T19:43:30.6905625Z                                     for (char c : input) {
2024-08-30T19:43:30.6905802Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6906104Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6906257Z                                                                   
2024-08-30T19:43:30.6909034Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6913460Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6913941Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6914081Z                     #include <string>
2024-08-30T19:43:30.6914167Z                     
2024-08-30T19:43:30.6914349Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6914510Z                             std::string result = "";
2024-08-30T19:43:30.6914650Z                                 int shift = 7;
2024-08-30T19:43:30.6914739Z                     
2024-08-30T19:43:30.6914905Z                                     for (char c : input) {
2024-08-30T19:43:30.6915074Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6915374Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6915637Z                                                                   -> #include <iostream>
2024-08-30T19:43:30.6915761Z                     #include <string>
2024-08-30T19:43:30.6915855Z                     
2024-08-30T19:43:30.6916032Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6916304Z                             std::string result = "";
2024-08-30T19:43:30.6916452Z                                 int shift = 7;
2024-08-30T19:43:30.6916536Z                     
2024-08-30T19:43:30.6916703Z                                     for (char c : input) {
2024-08-30T19:43:30.6916871Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6917163Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6917321Z                                                                   
2024-08-30T19:43:30.6917648Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6917836Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6918163Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6918403Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6918708Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6918834Z                     #include <string>
2024-08-30T19:43:30.6918923Z                     
2024-08-30T19:43:30.6919101Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6919255Z                             std::string result = "";
2024-08-30T19:43:30.6919395Z                                 int shift = 7;
2024-08-30T19:43:30.6919484Z                     
2024-08-30T19:43:30.6919642Z                                     for (char c : input) {
2024-08-30T19:43:30.6919810Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6920094Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6920334Z                                                                    
2024-08-30T19:43:30.6923137Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6927554Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6927977Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6928110Z                     #include <string>
2024-08-30T19:43:30.6928195Z                     
2024-08-30T19:43:30.6928382Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6928539Z                             std::string result = "";
2024-08-30T19:43:30.6928675Z                                 int shift = 7;
2024-08-30T19:43:30.6928765Z                     
2024-08-30T19:43:30.6928926Z                                     for (char c : input) {
2024-08-30T19:43:30.6929214Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6929520Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6929784Z                                                                    -> #include <iostream>
2024-08-30T19:43:30.6929910Z                     #include <string>
2024-08-30T19:43:30.6929997Z                     
2024-08-30T19:43:30.6930176Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6930334Z                             std::string result = "";
2024-08-30T19:43:30.6930469Z                                 int shift = 7;
2024-08-30T19:43:30.6930555Z                     
2024-08-30T19:43:30.6930721Z                                     for (char c : input) {
2024-08-30T19:43:30.6930892Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6931428Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6931598Z                                                                    
2024-08-30T19:43:30.6931938Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6932131Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6932448Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6932700Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6932993Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6933118Z                     #include <string>
2024-08-30T19:43:30.6933211Z                     
2024-08-30T19:43:30.6933393Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6933674Z                             std::string result = "";
2024-08-30T19:43:30.6933814Z                                 int shift = 7;
2024-08-30T19:43:30.6933900Z                     
2024-08-30T19:43:30.6934075Z                                     for (char c : input) {
2024-08-30T19:43:30.6934248Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6934544Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6934712Z                                                                     
2024-08-30T19:43:30.6937503Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6941936Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6942512Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6942643Z                     #include <string>
2024-08-30T19:43:30.6942737Z                     
2024-08-30T19:43:30.6942920Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6943079Z                             std::string result = "";
2024-08-30T19:43:30.6943220Z                                 int shift = 7;
2024-08-30T19:43:30.6943308Z                     
2024-08-30T19:43:30.6943469Z                                     for (char c : input) {
2024-08-30T19:43:30.6943644Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6943941Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6944212Z                                                                     -> #include <iostream>
2024-08-30T19:43:30.6944342Z                     #include <string>
2024-08-30T19:43:30.6944426Z                     
2024-08-30T19:43:30.6944619Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6944771Z                             std::string result = "";
2024-08-30T19:43:30.6944904Z                                 int shift = 7;
2024-08-30T19:43:30.6944993Z                     
2024-08-30T19:43:30.6945151Z                                     for (char c : input) {
2024-08-30T19:43:30.6945319Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6945613Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6945775Z                                                                     
2024-08-30T19:43:30.6946106Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6946368Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6946695Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6946947Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6947245Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6947375Z                     #include <string>
2024-08-30T19:43:30.6947463Z                     
2024-08-30T19:43:30.6947642Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6947798Z                             std::string result = "";
2024-08-30T19:43:30.6948004Z                                 int shift = 7;
2024-08-30T19:43:30.6948097Z                     
2024-08-30T19:43:30.6948253Z                                     for (char c : input) {
2024-08-30T19:43:30.6948421Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6948718Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6948880Z                                                                      
2024-08-30T19:43:30.6951673Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6956295Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6956761Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6956890Z                     #include <string>
2024-08-30T19:43:30.6956982Z                     
2024-08-30T19:43:30.6957171Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6957333Z                             std::string result = "";
2024-08-30T19:43:30.6957471Z                                 int shift = 7;
2024-08-30T19:43:30.6957562Z                     
2024-08-30T19:43:30.6957739Z                                     for (char c : input) {
2024-08-30T19:43:30.6957906Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6958209Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6958484Z                                                                      -> #include <iostream>
2024-08-30T19:43:30.6958608Z                     #include <string>
2024-08-30T19:43:30.6958701Z                     
2024-08-30T19:43:30.6958880Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6959035Z                             std::string result = "";
2024-08-30T19:43:30.6959300Z                                 int shift = 7;
2024-08-30T19:43:30.6959433Z                     
2024-08-30T19:43:30.6959694Z                                     for (char c : input) {
2024-08-30T19:43:30.6959973Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6960490Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6960778Z                                                                      
2024-08-30T19:43:30.6961372Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6961698Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6962415Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6962840Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6963372Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6963533Z                     #include <string>
2024-08-30T19:43:30.6963629Z                     
2024-08-30T19:43:30.6963825Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6963983Z                             std::string result = "";
2024-08-30T19:43:30.6964122Z                                 int shift = 7;
2024-08-30T19:43:30.6964222Z                     
2024-08-30T19:43:30.6964385Z                                     for (char c : input) {
2024-08-30T19:43:30.6964562Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6964906Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6965072Z                                                                       
2024-08-30T19:43:30.6968955Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6973721Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6974189Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6974333Z                     #include <string>
2024-08-30T19:43:30.6974424Z                     
2024-08-30T19:43:30.6974617Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6974781Z                             std::string result = "";
2024-08-30T19:43:30.6974921Z                                 int shift = 7;
2024-08-30T19:43:30.6975014Z                     
2024-08-30T19:43:30.6975174Z                                     for (char c : input) {
2024-08-30T19:43:30.6975344Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6975770Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6976042Z                                                                       -> #include <iostream>
2024-08-30T19:43:30.6976170Z                     #include <string>
2024-08-30T19:43:30.6976262Z                     
2024-08-30T19:43:30.6976442Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6976604Z                             std::string result = "";
2024-08-30T19:43:30.6976737Z                                 int shift = 7;
2024-08-30T19:43:30.6976821Z                     
2024-08-30T19:43:30.6976988Z                                     for (char c : input) {
2024-08-30T19:43:30.6977247Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6977540Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6977713Z                                                                       
2024-08-30T19:43:30.6978052Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6978244Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6978573Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6978818Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6979118Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6979245Z                     #include <string>
2024-08-30T19:43:30.6979338Z                     
2024-08-30T19:43:30.6979519Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6979679Z                             std::string result = "";
2024-08-30T19:43:30.6979821Z                                 int shift = 7;
2024-08-30T19:43:30.6979905Z                     
2024-08-30T19:43:30.6980065Z                                     for (char c : input) {
2024-08-30T19:43:30.6980248Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6980540Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6980711Z                                                                        
2024-08-30T19:43:30.6983668Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.6988037Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.6988466Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.6988596Z                     #include <string>
2024-08-30T19:43:30.6988755Z                     
2024-08-30T19:43:30.6988948Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6989106Z                             std::string result = "";
2024-08-30T19:43:30.6989249Z                                 int shift = 7;
2024-08-30T19:43:30.6989341Z                     
2024-08-30T19:43:30.6989509Z                                     for (char c : input) {
2024-08-30T19:43:30.6989689Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6989983Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6990324Z                                                                        -> #include <iostream>
2024-08-30T19:43:30.6990452Z                     #include <string>
2024-08-30T19:43:30.6990538Z                     
2024-08-30T19:43:30.6990715Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6990880Z                             std::string result = "";
2024-08-30T19:43:30.6991028Z                                 int shift = 7;
2024-08-30T19:43:30.6991118Z                     
2024-08-30T19:43:30.6991277Z                                     for (char c : input) {
2024-08-30T19:43:30.6991450Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6991746Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6991913Z                                                                        
2024-08-30T19:43:30.6992242Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6992438Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.6992757Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.6993005Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.6993294Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.6993431Z                     #include <string>
2024-08-30T19:43:30.6993517Z                     
2024-08-30T19:43:30.6993699Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.6993984Z                             std::string result = "";
2024-08-30T19:43:30.6994124Z                                 int shift = 7;
2024-08-30T19:43:30.6994208Z                     
2024-08-30T19:43:30.6994376Z                                     for (char c : input) {
2024-08-30T19:43:30.6994552Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.6994856Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.6995032Z                                                                         
2024-08-30T19:43:30.6997828Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7002182Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7002682Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7002811Z                     #include <string>
2024-08-30T19:43:30.7002903Z                     
2024-08-30T19:43:30.7003093Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7003337Z                             std::string result = "";
2024-08-30T19:43:30.7003483Z                                 int shift = 7;
2024-08-30T19:43:30.7003571Z                     
2024-08-30T19:43:30.7003732Z                                     for (char c : input) {
2024-08-30T19:43:30.7003914Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7004213Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7004611Z                                                                         -> #include <iostream>
2024-08-30T19:43:30.7004736Z                     #include <string>
2024-08-30T19:43:30.7004822Z                     
2024-08-30T19:43:30.7005011Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7005165Z                             std::string result = "";
2024-08-30T19:43:30.7005304Z                                 int shift = 7;
2024-08-30T19:43:30.7005397Z                     
2024-08-30T19:43:30.7005556Z                                     for (char c : input) {
2024-08-30T19:43:30.7005730Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7006025Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7006195Z                                                                         
2024-08-30T19:43:30.7006529Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7006719Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7007042Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7007280Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7007568Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7007701Z                     #include <string>
2024-08-30T19:43:30.7007785Z                     
2024-08-30T19:43:30.7007977Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7008133Z                             std::string result = "";
2024-08-30T19:43:30.7008268Z                                 int shift = 7;
2024-08-30T19:43:30.7008358Z                     
2024-08-30T19:43:30.7008520Z                                     for (char c : input) {
2024-08-30T19:43:30.7008687Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7008981Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7009157Z                                                                          
2024-08-30T19:43:30.7012215Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7016719Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7017220Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7017363Z                     #include <string>
2024-08-30T19:43:30.7017448Z                     
2024-08-30T19:43:30.7017629Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7017934Z                             std::string result = "";
2024-08-30T19:43:30.7018076Z                                 int shift = 7;
2024-08-30T19:43:30.7018158Z                     
2024-08-30T19:43:30.7018325Z                                     for (char c : input) {
2024-08-30T19:43:30.7018498Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7018805Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7019081Z                                                                          -> #include <iostream>
2024-08-30T19:43:30.7019201Z                     #include <string>
2024-08-30T19:43:30.7019295Z                     
2024-08-30T19:43:30.7019474Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7019630Z                             std::string result = "";
2024-08-30T19:43:30.7019770Z                                 int shift = 7;
2024-08-30T19:43:30.7019859Z                     
2024-08-30T19:43:30.7020024Z                                     for (char c : input) {
2024-08-30T19:43:30.7020193Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7020482Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7020654Z                                                                          
2024-08-30T19:43:30.7020984Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7021165Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7021487Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7021728Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7022024Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7022147Z                     #include <string>
2024-08-30T19:43:30.7022236Z                     
2024-08-30T19:43:30.7022424Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7022580Z                             std::string result = "";
2024-08-30T19:43:30.7022725Z                                 int shift = 7;
2024-08-30T19:43:30.7022807Z                     
2024-08-30T19:43:30.7022968Z                                     for (char c : input) {
2024-08-30T19:43:30.7023141Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7023433Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7023611Z                                                                           
2024-08-30T19:43:30.7026398Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7030985Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7031416Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7031550Z                     #include <string>
2024-08-30T19:43:30.7031637Z                     
2024-08-30T19:43:30.7031825Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7031980Z                             std::string result = "";
2024-08-30T19:43:30.7032117Z                                 int shift = 7;
2024-08-30T19:43:30.7032209Z                     
2024-08-30T19:43:30.7032372Z                                     for (char c : input) {
2024-08-30T19:43:30.7032541Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7032851Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7033129Z                                                                           -> #include <iostream>
2024-08-30T19:43:30.7033253Z                     #include <string>
2024-08-30T19:43:30.7033334Z                     
2024-08-30T19:43:30.7033514Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7033674Z                             std::string result = "";
2024-08-30T19:43:30.7033807Z                                 int shift = 7;
2024-08-30T19:43:30.7033888Z                     
2024-08-30T19:43:30.7034056Z                                     for (char c : input) {
2024-08-30T19:43:30.7034220Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7034522Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7034692Z                                                                           
2024-08-30T19:43:30.7035026Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7035212Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7035529Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7035774Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7036062Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7036190Z                     #include <string>
2024-08-30T19:43:30.7036278Z                     
2024-08-30T19:43:30.7036457Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7036614Z                             std::string result = "";
2024-08-30T19:43:30.7036832Z                                 int shift = 7;
2024-08-30T19:43:30.7036914Z                     
2024-08-30T19:43:30.7037080Z                                     for (char c : input) {
2024-08-30T19:43:30.7037251Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7037551Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7037727Z                                                                            
2024-08-30T19:43:30.7040524Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7045062Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7045502Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7045627Z                     #include <string>
2024-08-30T19:43:30.7045725Z                     
2024-08-30T19:43:30.7045907Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7046060Z                             std::string result = "";
2024-08-30T19:43:30.7046204Z                                 int shift = 7;
2024-08-30T19:43:30.7046288Z                     
2024-08-30T19:43:30.7046446Z                                     for (char c : input) {
2024-08-30T19:43:30.7046624Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7046917Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7047198Z                                                                            -> #include <iostream>
2024-08-30T19:43:30.7047321Z                     #include <string>
2024-08-30T19:43:30.7047403Z                     
2024-08-30T19:43:30.7047588Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7047745Z                             std::string result = "";
2024-08-30T19:43:30.7047879Z                                 int shift = 7;
2024-08-30T19:43:30.7047967Z                     
2024-08-30T19:43:30.7048122Z                                     for (char c : input) {
2024-08-30T19:43:30.7048288Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7048587Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7048759Z                                                                            
2024-08-30T19:43:30.7049093Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7049277Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7049696Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7049945Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7050234Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7050373Z                     #include <string>
2024-08-30T19:43:30.7050459Z                     
2024-08-30T19:43:30.7050641Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7050807Z                             std::string result = "";
2024-08-30T19:43:30.7050945Z                                 int shift = 7;
2024-08-30T19:43:30.7051254Z                     
2024-08-30T19:43:30.7051540Z                                     for (char c : input) {
2024-08-30T19:43:30.7051716Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7052034Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7052211Z                                                                             
2024-08-30T19:43:30.7055178Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7059532Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7059963Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7060095Z                     #include <string>
2024-08-30T19:43:30.7060186Z                     
2024-08-30T19:43:30.7060372Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7060535Z                             std::string result = "";
2024-08-30T19:43:30.7060673Z                                 int shift = 7;
2024-08-30T19:43:30.7060757Z                     
2024-08-30T19:43:30.7060923Z                                     for (char c : input) {
2024-08-30T19:43:30.7061101Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7061395Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7061680Z                                                                             -> #include <iostream>
2024-08-30T19:43:30.7061797Z                     #include <string>
2024-08-30T19:43:30.7061889Z                     
2024-08-30T19:43:30.7062069Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7062222Z                             std::string result = "";
2024-08-30T19:43:30.7062361Z                                 int shift = 7;
2024-08-30T19:43:30.7062443Z                     
2024-08-30T19:43:30.7062696Z                                     for (char c : input) {
2024-08-30T19:43:30.7062873Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7063172Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7063348Z                                                                             
2024-08-30T19:43:30.7063674Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7063852Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7064176Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7064486Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.7064818Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7064943Z                     #include <string>
2024-08-30T19:43:30.7065028Z                     
2024-08-30T19:43:30.7065214Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7065375Z                             std::string result = "";
2024-08-30T19:43:30.7065516Z                                 int shift = 7;
2024-08-30T19:43:30.7065598Z                     
2024-08-30T19:43:30.7065882Z                                     for (char c : input) {
2024-08-30T19:43:30.7066062Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7066354Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7066532Z                                                                             r
2024-08-30T19:43:30.7069366Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7073713Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7074137Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7074269Z                     #include <string>
2024-08-30T19:43:30.7074352Z                     
2024-08-30T19:43:30.7074539Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7074702Z                             std::string result = "";
2024-08-30T19:43:30.7074838Z                                 int shift = 7;
2024-08-30T19:43:30.7074929Z                     
2024-08-30T19:43:30.7075087Z                                     for (char c : input) {
2024-08-30T19:43:30.7075257Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7075556Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7075994Z                                                                              -> #include <iostream>
2024-08-30T19:43:30.7076114Z                     #include <string>
2024-08-30T19:43:30.7076207Z                     
2024-08-30T19:43:30.7076400Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7076561Z                             std::string result = "";
2024-08-30T19:43:30.7076698Z                                 int shift = 7;
2024-08-30T19:43:30.7076782Z                     
2024-08-30T19:43:30.7076951Z                                     for (char c : input) {
2024-08-30T19:43:30.7077188Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7077485Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7077674Z                                                                             r
2024-08-30T19:43:30.7078046Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7078237Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7078551Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7078918Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.7079215Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7079338Z                     #include <string>
2024-08-30T19:43:30.7079428Z                     
2024-08-30T19:43:30.7079609Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7079760Z                             std::string result = "";
2024-08-30T19:43:30.7079906Z                                 int shift = 7;
2024-08-30T19:43:30.7079988Z                     
2024-08-30T19:43:30.7080152Z                                     for (char c : input) {
2024-08-30T19:43:30.7080324Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7080620Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7080802Z                                                                             re
2024-08-30T19:43:30.7083618Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7087965Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7088383Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7088508Z                     #include <string>
2024-08-30T19:43:30.7088670Z                     
2024-08-30T19:43:30.7088857Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7089009Z                             std::string result = "";
2024-08-30T19:43:30.7089150Z                                 int shift = 7;
2024-08-30T19:43:30.7089244Z                     
2024-08-30T19:43:30.7089400Z                                     for (char c : input) {
2024-08-30T19:43:30.7089573Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7089867Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7090138Z                                                                             r -> #include <iostream>
2024-08-30T19:43:30.7090327Z                     #include <string>
2024-08-30T19:43:30.7090410Z                     
2024-08-30T19:43:30.7090593Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7090747Z                             std::string result = "";
2024-08-30T19:43:30.7090886Z                                 int shift = 7;
2024-08-30T19:43:30.7091139Z                     
2024-08-30T19:43:30.7091361Z                                     for (char c : input) {
2024-08-30T19:43:30.7091719Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7092047Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7092231Z                                                                             re
2024-08-30T19:43:30.7092573Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7092765Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7093084Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7093335Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.7093629Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7093768Z                     #include <string>
2024-08-30T19:43:30.7093854Z                     
2024-08-30T19:43:30.7094040Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7094206Z                             std::string result = "";
2024-08-30T19:43:30.7094352Z                                 int shift = 7;
2024-08-30T19:43:30.7094442Z                     
2024-08-30T19:43:30.7094612Z                                     for (char c : input) {
2024-08-30T19:43:30.7094781Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7095078Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7095263Z                                                                             res
2024-08-30T19:43:30.7098096Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        res","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7102437Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7103121Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7103272Z                     #include <string>
2024-08-30T19:43:30.7103366Z                     
2024-08-30T19:43:30.7103550Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7103816Z                             std::string result = "";
2024-08-30T19:43:30.7103961Z                                 int shift = 7;
2024-08-30T19:43:30.7104044Z                     
2024-08-30T19:43:30.7104209Z                                     for (char c : input) {
2024-08-30T19:43:30.7104387Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7104690Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7105096Z                                                                             re -> #include <iostream>
2024-08-30T19:43:30.7105219Z                     #include <string>
2024-08-30T19:43:30.7105303Z                     
2024-08-30T19:43:30.7105490Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7105647Z                             std::string result = "";
2024-08-30T19:43:30.7105790Z                                 int shift = 7;
2024-08-30T19:43:30.7105878Z                     
2024-08-30T19:43:30.7106036Z                                     for (char c : input) {
2024-08-30T19:43:30.7106214Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7106533Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7106717Z                                                                             res
2024-08-30T19:43:30.7107177Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7107405Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7107742Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7108107Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.7108420Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7108547Z                     #include <string>
2024-08-30T19:43:30.7108638Z                     
2024-08-30T19:43:30.7108935Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7109097Z                             std::string result = "";
2024-08-30T19:43:30.7109233Z                                 int shift = 7;
2024-08-30T19:43:30.7109324Z                     
2024-08-30T19:43:30.7109525Z                                     for (char c : input) {
2024-08-30T19:43:30.7109781Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7110102Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7110327Z                                                                             resu
2024-08-30T19:43:30.7113631Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        resu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7118684Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7119239Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7119378Z                     #include <string>
2024-08-30T19:43:30.7119465Z                     
2024-08-30T19:43:30.7119656Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7119940Z                             std::string result = "";
2024-08-30T19:43:30.7120083Z                                 int shift = 7;
2024-08-30T19:43:30.7120168Z                     
2024-08-30T19:43:30.7120338Z                                     for (char c : input) {
2024-08-30T19:43:30.7120509Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7120817Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7121104Z                                                                             res -> #include <iostream>
2024-08-30T19:43:30.7121225Z                     #include <string>
2024-08-30T19:43:30.7121319Z                     
2024-08-30T19:43:30.7121501Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7121656Z                             std::string result = "";
2024-08-30T19:43:30.7121797Z                                 int shift = 7;
2024-08-30T19:43:30.7121888Z                     
2024-08-30T19:43:30.7122057Z                                     for (char c : input) {
2024-08-30T19:43:30.7122228Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7122523Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7122716Z                                                                             resu
2024-08-30T19:43:30.7123051Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7123245Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7123566Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7123815Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.7124114Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7124239Z                     #include <string>
2024-08-30T19:43:30.7124334Z                     
2024-08-30T19:43:30.7124524Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7124690Z                             std::string result = "";
2024-08-30T19:43:30.7124836Z                                 int shift = 7;
2024-08-30T19:43:30.7124921Z                     
2024-08-30T19:43:30.7125087Z                                     for (char c : input) {
2024-08-30T19:43:30.7125270Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7125562Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7125749Z                                                                             resul
2024-08-30T19:43:30.7128663Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        resul","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7134264Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7134878Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7135024Z                     #include <string>
2024-08-30T19:43:30.7135111Z                     
2024-08-30T19:43:30.7135315Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7135474Z                             std::string result = "";
2024-08-30T19:43:30.7135612Z                                 int shift = 7;
2024-08-30T19:43:30.7135707Z                     
2024-08-30T19:43:30.7135871Z                                     for (char c : input) {
2024-08-30T19:43:30.7136048Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7136356Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7136649Z                                                                             resu -> #include <iostream>
2024-08-30T19:43:30.7136775Z                     #include <string>
2024-08-30T19:43:30.7136859Z                     
2024-08-30T19:43:30.7137041Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7137205Z                             std::string result = "";
2024-08-30T19:43:30.7137341Z                                 int shift = 7;
2024-08-30T19:43:30.7137429Z                     
2024-08-30T19:43:30.7137588Z                                     for (char c : input) {
2024-08-30T19:43:30.7137761Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7138057Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7138243Z                                                                             resul
2024-08-30T19:43:30.7138582Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7138776Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7139092Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7139341Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.7139639Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7139775Z                     #include <string>
2024-08-30T19:43:30.7139860Z                     
2024-08-30T19:43:30.7140047Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7140209Z                             std::string result = "";
2024-08-30T19:43:30.7140457Z                                 int shift = 7;
2024-08-30T19:43:30.7140545Z                     
2024-08-30T19:43:30.7140719Z                                     for (char c : input) {
2024-08-30T19:43:30.7140900Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7141211Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7141394Z                                                                             result
2024-08-30T19:43:30.7144397Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7148822Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7149256Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7149393Z                     #include <string>
2024-08-30T19:43:30.7149486Z                     
2024-08-30T19:43:30.7149672Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7149832Z                             std::string result = "";
2024-08-30T19:43:30.7149980Z                                 int shift = 7;
2024-08-30T19:43:30.7150066Z                     
2024-08-30T19:43:30.7150230Z                                     for (char c : input) {
2024-08-30T19:43:30.7150407Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7150714Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7151021Z                                                                             resul -> #include <iostream>
2024-08-30T19:43:30.7151149Z                     #include <string>
2024-08-30T19:43:30.7151237Z                     
2024-08-30T19:43:30.7151433Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7151591Z                             std::string result = "";
2024-08-30T19:43:30.7151729Z                                 int shift = 7;
2024-08-30T19:43:30.7151819Z                     
2024-08-30T19:43:30.7151985Z                                     for (char c : input) {
2024-08-30T19:43:30.7152160Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7152453Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7152634Z                                                                             result
2024-08-30T19:43:30.7152966Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7153235Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7153566Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7153807Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7154105Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7154241Z                     #include <string>
2024-08-30T19:43:30.7154329Z                     
2024-08-30T19:43:30.7154525Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7154679Z                             std::string result = "";
2024-08-30T19:43:30.7154814Z                                 int shift = 7;
2024-08-30T19:43:30.7154981Z                     
2024-08-30T19:43:30.7155142Z                                     for (char c : input) {
2024-08-30T19:43:30.7155311Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7155610Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7155798Z                                                                             result 
2024-08-30T19:43:30.7158759Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7163102Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7163518Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7163654Z                     #include <string>
2024-08-30T19:43:30.7163739Z                     
2024-08-30T19:43:30.7163927Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7164089Z                             std::string result = "";
2024-08-30T19:43:30.7164226Z                                 int shift = 7;
2024-08-30T19:43:30.7164311Z                     
2024-08-30T19:43:30.7164485Z                                     for (char c : input) {
2024-08-30T19:43:30.7164656Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7165006Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7165307Z                                                                             result -> #include <iostream>
2024-08-30T19:43:30.7165433Z                     #include <string>
2024-08-30T19:43:30.7165525Z                     
2024-08-30T19:43:30.7165707Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7165860Z                             std::string result = "";
2024-08-30T19:43:30.7166079Z                                 int shift = 7;
2024-08-30T19:43:30.7166165Z                     
2024-08-30T19:43:30.7166332Z                                     for (char c : input) {
2024-08-30T19:43:30.7166504Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7166808Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7167002Z                                                                             result 
2024-08-30T19:43:30.7167334Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7167518Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7167913Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7168155Z [32m      cy:command ✔ [39m type	+, {force: true}
2024-08-30T19:43:30.7168451Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7168577Z                     #include <string>
2024-08-30T19:43:30.7168675Z                     
2024-08-30T19:43:30.7168855Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7169009Z                             std::string result = "";
2024-08-30T19:43:30.7169275Z                                 int shift = 7;
2024-08-30T19:43:30.7169363Z                     
2024-08-30T19:43:30.7169524Z                                     for (char c : input) {
2024-08-30T19:43:30.7169700Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7169993Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7170193Z                                                                             result +
2024-08-30T19:43:30.7173315Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result +","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7177679Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7178100Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7178232Z                     #include <string>
2024-08-30T19:43:30.7178317Z                     
2024-08-30T19:43:30.7178505Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7178665Z                             std::string result = "";
2024-08-30T19:43:30.7178803Z                                 int shift = 7;
2024-08-30T19:43:30.7178894Z                     
2024-08-30T19:43:30.7179053Z                                     for (char c : input) {
2024-08-30T19:43:30.7179224Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7179637Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7179942Z                                                                             result  -> #include <iostream>
2024-08-30T19:43:30.7180069Z                     #include <string>
2024-08-30T19:43:30.7180151Z                     
2024-08-30T19:43:30.7180329Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7180492Z                             std::string result = "";
2024-08-30T19:43:30.7180629Z                                 int shift = 7;
2024-08-30T19:43:30.7180792Z                     
2024-08-30T19:43:30.7180962Z                                     for (char c : input) {
2024-08-30T19:43:30.7181133Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7181427Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7181619Z                                                                             result +
2024-08-30T19:43:30.7181945Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7182135Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7182597Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7182852Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.7183145Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7183270Z                     #include <string>
2024-08-30T19:43:30.7183361Z                     
2024-08-30T19:43:30.7183543Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7183708Z                             std::string result = "";
2024-08-30T19:43:30.7183842Z                                 int shift = 7;
2024-08-30T19:43:30.7183926Z                     
2024-08-30T19:43:30.7184088Z                                     for (char c : input) {
2024-08-30T19:43:30.7184260Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7184542Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7184744Z                                                                             result +=
2024-08-30T19:43:30.7187568Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result +=","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7191909Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7192326Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7192529Z                     #include <string>
2024-08-30T19:43:30.7192620Z                     
2024-08-30T19:43:30.7192803Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7192966Z                             std::string result = "";
2024-08-30T19:43:30.7193108Z                                 int shift = 7;
2024-08-30T19:43:30.7193192Z                     
2024-08-30T19:43:30.7193351Z                                     for (char c : input) {
2024-08-30T19:43:30.7193525Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7193823Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7194216Z                                                                             result + -> #include <iostream>
2024-08-30T19:43:30.7194337Z                     #include <string>
2024-08-30T19:43:30.7194425Z                     
2024-08-30T19:43:30.7194606Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7194759Z                             std::string result = "";
2024-08-30T19:43:30.7194892Z                                 int shift = 7;
2024-08-30T19:43:30.7195095Z                     
2024-08-30T19:43:30.7195262Z                                     for (char c : input) {
2024-08-30T19:43:30.7195438Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7195727Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7195917Z                                                                             result +=
2024-08-30T19:43:30.7196253Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7196434Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7196757Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7197000Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7197290Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7197420Z                     #include <string>
2024-08-30T19:43:30.7197506Z                     
2024-08-30T19:43:30.7197697Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7197847Z                             std::string result = "";
2024-08-30T19:43:30.7197983Z                                 int shift = 7;
2024-08-30T19:43:30.7198074Z                     
2024-08-30T19:43:30.7198235Z                                     for (char c : input) {
2024-08-30T19:43:30.7198406Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7198705Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7198895Z                                                                             result += 
2024-08-30T19:43:30.7201745Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7206055Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7206553Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7206755Z                     #include <string>
2024-08-30T19:43:30.7206842Z                     
2024-08-30T19:43:30.7207030Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7207190Z                             std::string result = "";
2024-08-30T19:43:30.7207331Z                                 int shift = 7;
2024-08-30T19:43:30.7207425Z                     
2024-08-30T19:43:30.7207594Z                                     for (char c : input) {
2024-08-30T19:43:30.7207779Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7208197Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7208516Z                                                                             result += -> #include <iostream>
2024-08-30T19:43:30.7208636Z                     #include <string>
2024-08-30T19:43:30.7208726Z                     
2024-08-30T19:43:30.7208904Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7209059Z                             std::string result = "";
2024-08-30T19:43:30.7209202Z                                 int shift = 7;
2024-08-30T19:43:30.7209287Z                     
2024-08-30T19:43:30.7209448Z                                     for (char c : input) {
2024-08-30T19:43:30.7209629Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7209917Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7210117Z                                                                             result += 
2024-08-30T19:43:30.7210445Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7210633Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7211122Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7211455Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.7211767Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7211893Z                     #include <string>
2024-08-30T19:43:30.7211977Z                     
2024-08-30T19:43:30.7212169Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7212332Z                             std::string result = "";
2024-08-30T19:43:30.7212477Z                                 int shift = 7;
2024-08-30T19:43:30.7212561Z                     
2024-08-30T19:43:30.7212721Z                                     for (char c : input) {
2024-08-30T19:43:30.7212910Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7213203Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7213392Z                                                                             result += (
2024-08-30T19:43:30.7216238Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7220675Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7221176Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7221452Z                     #include <string>
2024-08-30T19:43:30.7221543Z                     
2024-08-30T19:43:30.7221733Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7221887Z                             std::string result = "";
2024-08-30T19:43:30.7222023Z                                 int shift = 7;
2024-08-30T19:43:30.7222116Z                     
2024-08-30T19:43:30.7222278Z                                     for (char c : input) {
2024-08-30T19:43:30.7222451Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7222750Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7223055Z                                                                             result +=  -> #include <iostream>
2024-08-30T19:43:30.7223184Z                     #include <string>
2024-08-30T19:43:30.7223268Z                     
2024-08-30T19:43:30.7223448Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7223607Z                             std::string result = "";
2024-08-30T19:43:30.7223740Z                                 int shift = 7;
2024-08-30T19:43:30.7223822Z                     
2024-08-30T19:43:30.7223984Z                                     for (char c : input) {
2024-08-30T19:43:30.7224153Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7224444Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7224633Z                                                                             result += (
2024-08-30T19:43:30.7224958Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7225153Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7225467Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7225715Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.7226012Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7226139Z                     #include <string>
2024-08-30T19:43:30.7226230Z                     
2024-08-30T19:43:30.7226410Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7226569Z                             std::string result = "";
2024-08-30T19:43:30.7226707Z                                 int shift = 7;
2024-08-30T19:43:30.7226789Z                     
2024-08-30T19:43:30.7226955Z                                     for (char c : input) {
2024-08-30T19:43:30.7227122Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7227496Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7227695Z                                                                             result += (c
2024-08-30T19:43:30.7230547Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7235060Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7235492Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7235619Z                     #include <string>
2024-08-30T19:43:30.7235718Z                     
2024-08-30T19:43:30.7235902Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7236058Z                             std::string result = "";
2024-08-30T19:43:30.7236202Z                                 int shift = 7;
2024-08-30T19:43:30.7236291Z                     
2024-08-30T19:43:30.7236454Z                                     for (char c : input) {
2024-08-30T19:43:30.7236628Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7237083Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7237402Z                                                                             result += ( -> #include <iostream>
2024-08-30T19:43:30.7237535Z                     #include <string>
2024-08-30T19:43:30.7237618Z                     
2024-08-30T19:43:30.7237809Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7237968Z                             std::string result = "";
2024-08-30T19:43:30.7238111Z                                 int shift = 7;
2024-08-30T19:43:30.7238199Z                     
2024-08-30T19:43:30.7238360Z                                     for (char c : input) {
2024-08-30T19:43:30.7238537Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7238837Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7239031Z                                                                             result += (c
2024-08-30T19:43:30.7239365Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7239552Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7239869Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7240114Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7240403Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7240659Z                     #include <string>
2024-08-30T19:43:30.7240745Z                     
2024-08-30T19:43:30.7240930Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7241094Z                             std::string result = "";
2024-08-30T19:43:30.7241237Z                                 int shift = 7;
2024-08-30T19:43:30.7241328Z                     
2024-08-30T19:43:30.7241489Z                                     for (char c : input) {
2024-08-30T19:43:30.7241669Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7241966Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7242232Z                                                                             result += (c 
2024-08-30T19:43:30.7245211Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7249553Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7249978Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7250104Z                     #include <string>
2024-08-30T19:43:30.7250197Z                     
2024-08-30T19:43:30.7250379Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7250549Z                             std::string result = "";
2024-08-30T19:43:30.7250690Z                                 int shift = 7;
2024-08-30T19:43:30.7250773Z                     
2024-08-30T19:43:30.7250938Z                                     for (char c : input) {
2024-08-30T19:43:30.7251377Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7251696Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7252024Z                                                                             result += (c -> #include <iostream>
2024-08-30T19:43:30.7252146Z                     #include <string>
2024-08-30T19:43:30.7252238Z                     
2024-08-30T19:43:30.7252420Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7252575Z                             std::string result = "";
2024-08-30T19:43:30.7252721Z                                 int shift = 7;
2024-08-30T19:43:30.7252804Z                     
2024-08-30T19:43:30.7252962Z                                     for (char c : input) {
2024-08-30T19:43:30.7253134Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7253427Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7253740Z                                                                             result += (c 
2024-08-30T19:43:30.7254081Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7254276Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7254600Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7254839Z [32m      cy:command ✔ [39m type	-, {force: true}
2024-08-30T19:43:30.7255133Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7255259Z                     #include <string>
2024-08-30T19:43:30.7255427Z                     
2024-08-30T19:43:30.7255621Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7255781Z                             std::string result = "";
2024-08-30T19:43:30.7255925Z                                 int shift = 7;
2024-08-30T19:43:30.7256014Z                     
2024-08-30T19:43:30.7256174Z                                     for (char c : input) {
2024-08-30T19:43:30.7256349Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7256784Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7256987Z                                                                             result += (c -
2024-08-30T19:43:30.7259845Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c -","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7264175Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7264587Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7264719Z                     #include <string>
2024-08-30T19:43:30.7264840Z                     
2024-08-30T19:43:30.7265041Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7265199Z                             std::string result = "";
2024-08-30T19:43:30.7265338Z                                 int shift = 7;
2024-08-30T19:43:30.7265431Z                     
2024-08-30T19:43:30.7265587Z                                     for (char c : input) {
2024-08-30T19:43:30.7265758Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7266062Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7266370Z                                                                             result += (c  -> #include <iostream>
2024-08-30T19:43:30.7266576Z                     #include <string>
2024-08-30T19:43:30.7266665Z                     
2024-08-30T19:43:30.7266845Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7267004Z                             std::string result = "";
2024-08-30T19:43:30.7267145Z                                 int shift = 7;
2024-08-30T19:43:30.7267227Z                     
2024-08-30T19:43:30.7267392Z                                     for (char c : input) {
2024-08-30T19:43:30.7267558Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7267851Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7268130Z                                                                             result += (c -
2024-08-30T19:43:30.7268458Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7268648Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7268974Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7269222Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7269509Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7269831Z                     #include <string>
2024-08-30T19:43:30.7269928Z                     
2024-08-30T19:43:30.7270110Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7270265Z                             std::string result = "";
2024-08-30T19:43:30.7270410Z                                 int shift = 7;
2024-08-30T19:43:30.7270493Z                     
2024-08-30T19:43:30.7270663Z                                     for (char c : input) {
2024-08-30T19:43:30.7270832Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7271124Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7271362Z                                                                             result += (c - 
2024-08-30T19:43:30.7274247Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7278575Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7278996Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7279120Z                     #include <string>
2024-08-30T19:43:30.7279205Z                     
2024-08-30T19:43:30.7279392Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7279624Z                             std::string result = "";
2024-08-30T19:43:30.7279766Z                                 int shift = 7;
2024-08-30T19:43:30.7279850Z                     
2024-08-30T19:43:30.7280012Z                                     for (char c : input) {
2024-08-30T19:43:30.7280200Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7280492Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7280801Z                                                                             result += (c - -> #include <iostream>
2024-08-30T19:43:30.7280926Z                     #include <string>
2024-08-30T19:43:30.7281076Z                     
2024-08-30T19:43:30.7281262Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7281417Z                             std::string result = "";
2024-08-30T19:43:30.7281551Z                                 int shift = 7;
2024-08-30T19:43:30.7281651Z                     
2024-08-30T19:43:30.7281808Z                                     for (char c : input) {
2024-08-30T19:43:30.7281976Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7282416Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7282699Z                                                                             result += (c - ...
2024-08-30T19:43:30.7283029Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7283213Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7283528Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7283778Z [32m      cy:command ✔ [39m type	b, {force: true}
2024-08-30T19:43:30.7284068Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7284234Z                     #include <string>
2024-08-30T19:43:30.7284386Z                     
2024-08-30T19:43:30.7284665Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7284832Z                             std::string result = "";
2024-08-30T19:43:30.7284969Z                                 int shift = 7;
2024-08-30T19:43:30.7285058Z                     
2024-08-30T19:43:30.7285224Z                                     for (char c : input) {
2024-08-30T19:43:30.7285391Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7285694Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7285960Z                                                                             result += (c - b
2024-08-30T19:43:30.7288844Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - b","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7293375Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7293955Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7294084Z                     #include <string>
2024-08-30T19:43:30.7294178Z                     
2024-08-30T19:43:30.7294364Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7294526Z                             std::string result = "";
2024-08-30T19:43:30.7294744Z                                 int shift = 7;
2024-08-30T19:43:30.7294830Z                     
2024-08-30T19:43:30.7294995Z                                     for (char c : input) {
2024-08-30T19:43:30.7295166Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7295469Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7295794Z                                                                             result += (c -  -> #include <iostream>
2024-08-30T19:43:30.7296054Z                     #include <string>
2024-08-30T19:43:30.7296148Z                     
2024-08-30T19:43:30.7296329Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7296486Z                             std::string result = "";
2024-08-30T19:43:30.7296629Z                                 int shift = 7;
2024-08-30T19:43:30.7296713Z                     
2024-08-30T19:43:30.7296875Z                                     for (char c : input) {
2024-08-30T19:43:30.7297050Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7297345Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7297557Z                                                                             result += (c  ...
2024-08-30T19:43:30.7297884Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7298067Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7298394Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7298632Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.7298928Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7299080Z                     #include <string>
2024-08-30T19:43:30.7299233Z                     
2024-08-30T19:43:30.7299573Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7299788Z                             std::string result = "";
2024-08-30T19:43:30.7300021Z                                 int shift = 7;
2024-08-30T19:43:30.7300182Z                     
2024-08-30T19:43:30.7300491Z                                     for (char c : input) {
2024-08-30T19:43:30.7300808Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7301343Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7301649Z                                                                             result += (c - ba
2024-08-30T19:43:30.7304612Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - ba","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7309163Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7309662Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7309805Z                     #include <string>
2024-08-30T19:43:30.7309890Z                     
2024-08-30T19:43:30.7310081Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7310359Z                             std::string result = "";
2024-08-30T19:43:30.7310502Z                                 int shift = 7;
2024-08-30T19:43:30.7310596Z                     
2024-08-30T19:43:30.7310756Z                                     for (char c : input) {
2024-08-30T19:43:30.7310927Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7311230Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7311554Z                                                                             result += (c - b -> #include <iostream>
2024-08-30T19:43:30.7311682Z                     #include <string>
2024-08-30T19:43:30.7311770Z                     
2024-08-30T19:43:30.7311952Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7312114Z                             std::string result = "";
2024-08-30T19:43:30.7312250Z                                 int shift = 7;
2024-08-30T19:43:30.7312340Z                     
2024-08-30T19:43:30.7312507Z                                     for (char c : input) {
2024-08-30T19:43:30.7312676Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7312968Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7313175Z                                                                             result += (c ...
2024-08-30T19:43:30.7313508Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7313699Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7314018Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7314269Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.7314561Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7314685Z                     #include <string>
2024-08-30T19:43:30.7314775Z                     
2024-08-30T19:43:30.7314961Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7315114Z                             std::string result = "";
2024-08-30T19:43:30.7315256Z                                 int shift = 7;
2024-08-30T19:43:30.7315338Z                     
2024-08-30T19:43:30.7315504Z                                     for (char c : input) {
2024-08-30T19:43:30.7315673Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7315965Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7316245Z                                                                             result += (c - bas
2024-08-30T19:43:30.7319208Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - bas","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7323722Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7324155Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7324285Z                     #include <string>
2024-08-30T19:43:30.7324369Z                     
2024-08-30T19:43:30.7324558Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7324711Z                             std::string result = "";
2024-08-30T19:43:30.7324859Z                                 int shift = 7;
2024-08-30T19:43:30.7324947Z                     
2024-08-30T19:43:30.7325107Z                                     for (char c : input) {
2024-08-30T19:43:30.7325289Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7325586Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7325906Z                                                                             result += (c - ba -> #include <iostream>
2024-08-30T19:43:30.7326031Z                     #include <string>
2024-08-30T19:43:30.7326113Z                     
2024-08-30T19:43:30.7326296Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7326451Z                             std::string result = "";
2024-08-30T19:43:30.7326585Z                                 int shift = 7;
2024-08-30T19:43:30.7326675Z                     
2024-08-30T19:43:30.7326832Z                                     for (char c : input) {
2024-08-30T19:43:30.7327001Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7327296Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7327497Z                                                                             result += ( ...
2024-08-30T19:43:30.7327826Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7328008Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7328322Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7328570Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.7328865Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7328994Z                     #include <string>
2024-08-30T19:43:30.7329079Z                     
2024-08-30T19:43:30.7329257Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7329497Z                             std::string result = "";
2024-08-30T19:43:30.7329631Z                                 int shift = 7;
2024-08-30T19:43:30.7329720Z                     
2024-08-30T19:43:30.7329876Z                                     for (char c : input) {
2024-08-30T19:43:30.7330050Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7330341Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7330614Z                                                                             result += (c - base
2024-08-30T19:43:30.7333979Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7338401Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7338837Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7338963Z                     #include <string>
2024-08-30T19:43:30.7339055Z                     
2024-08-30T19:43:30.7339234Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7339396Z                             std::string result = "";
2024-08-30T19:43:30.7339529Z                                 int shift = 7;
2024-08-30T19:43:30.7339616Z                     
2024-08-30T19:43:30.7339783Z                                     for (char c : input) {
2024-08-30T19:43:30.7339951Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7340240Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7340574Z                                                                             result += (c - bas -> #include <iostream>
2024-08-30T19:43:30.7340692Z                     #include <string>
2024-08-30T19:43:30.7340782Z                     
2024-08-30T19:43:30.7340965Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7341121Z                             std::string result = "";
2024-08-30T19:43:30.7341265Z                                 int shift = 7;
2024-08-30T19:43:30.7341350Z                     
2024-08-30T19:43:30.7341506Z                                     for (char c : input) {
2024-08-30T19:43:30.7341681Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7341972Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7342172Z                                                                             result +=  ...
2024-08-30T19:43:30.7342592Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7342774Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7343094Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7343339Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7343633Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7343757Z                     #include <string>
2024-08-30T19:43:30.7343839Z                     
2024-08-30T19:43:30.7344024Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7344175Z                             std::string result = "";
2024-08-30T19:43:30.7344390Z                                 int shift = 7;
2024-08-30T19:43:30.7344477Z                     
2024-08-30T19:43:30.7344634Z                                     for (char c : input) {
2024-08-30T19:43:30.7344810Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7345101Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7345376Z                                                                             result += (c - base 
2024-08-30T19:43:30.7348384Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7352723Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7353136Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7353269Z                     #include <string>
2024-08-30T19:43:30.7353353Z                     
2024-08-30T19:43:30.7353551Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7353710Z                             std::string result = "";
2024-08-30T19:43:30.7353849Z                                 int shift = 7;
2024-08-30T19:43:30.7353940Z                     
2024-08-30T19:43:30.7354098Z                                     for (char c : input) {
2024-08-30T19:43:30.7354263Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7354562Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7354888Z                                                                             result += (c - base -> #include <iostream>
2024-08-30T19:43:30.7355005Z                     #include <string>
2024-08-30T19:43:30.7355093Z                     
2024-08-30T19:43:30.7355268Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7355502Z                             std::string result = "";
2024-08-30T19:43:30.7355638Z                                 int shift = 7;
2024-08-30T19:43:30.7355721Z                     
2024-08-30T19:43:30.7355888Z                                     for (char c : input) {
2024-08-30T19:43:30.7356056Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7356344Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7356543Z                                                                             result += ...
2024-08-30T19:43:30.7356868Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7357127Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7357444Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7357690Z [32m      cy:command ✔ [39m type	+, {force: true}
2024-08-30T19:43:30.7357984Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7358109Z                     #include <string>
2024-08-30T19:43:30.7358199Z                     
2024-08-30T19:43:30.7358382Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7358656Z                             std::string result = "";
2024-08-30T19:43:30.7358806Z                                 int shift = 7;
2024-08-30T19:43:30.7358891Z                     
2024-08-30T19:43:30.7359056Z                                     for (char c : input) {
2024-08-30T19:43:30.7359226Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7359527Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7359811Z                                                                             result += (c - base +
2024-08-30T19:43:30.7362706Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base +","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7367061Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7367488Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7367614Z                     #include <string>
2024-08-30T19:43:30.7367707Z                     
2024-08-30T19:43:30.7367893Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7368047Z                             std::string result = "";
2024-08-30T19:43:30.7368188Z                                 int shift = 7;
2024-08-30T19:43:30.7368362Z                     
2024-08-30T19:43:30.7368530Z                                     for (char c : input) {
2024-08-30T19:43:30.7368708Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7369008Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7369334Z                                                                             result += (c - base  -> #include <iostream>
2024-08-30T19:43:30.7369463Z                     #include <string>
2024-08-30T19:43:30.7369546Z                     
2024-08-30T19:43:30.7369731Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7369952Z                             std::string result = "";
2024-08-30T19:43:30.7370091Z                                 int shift = 7;
2024-08-30T19:43:30.7370181Z                     
2024-08-30T19:43:30.7370339Z                                     for (char c : input) {
2024-08-30T19:43:30.7370510Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7370812Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7371193Z                                                                             result + ...
2024-08-30T19:43:30.7371746Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7371952Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7372274Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7372520Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7372810Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7372947Z                     #include <string>
2024-08-30T19:43:30.7373030Z                     
2024-08-30T19:43:30.7373210Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7373368Z                             std::string result = "";
2024-08-30T19:43:30.7373506Z                                 int shift = 7;
2024-08-30T19:43:30.7373594Z                     
2024-08-30T19:43:30.7373751Z                                     for (char c : input) {
2024-08-30T19:43:30.7373930Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7374224Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7374499Z                                                                             result += (c - base + 
2024-08-30T19:43:30.7377410Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7381723Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7382238Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7382372Z                     #include <string>
2024-08-30T19:43:30.7382466Z                     
2024-08-30T19:43:30.7382650Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7382809Z                             std::string result = "";
2024-08-30T19:43:30.7382948Z                                 int shift = 7;
2024-08-30T19:43:30.7383032Z                     
2024-08-30T19:43:30.7383297Z                                     for (char c : input) {
2024-08-30T19:43:30.7383469Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7383764Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7384106Z                                                                             result += (c - base + -> #include <iostream>
2024-08-30T19:43:30.7384226Z                     #include <string>
2024-08-30T19:43:30.7384317Z                     
2024-08-30T19:43:30.7384616Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7384777Z                             std::string result = "";
2024-08-30T19:43:30.7384922Z                                 int shift = 7;
2024-08-30T19:43:30.7385006Z                     
2024-08-30T19:43:30.7385166Z                                     for (char c : input) {
2024-08-30T19:43:30.7385342Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7385641Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7385837Z                                                                             result  ...
2024-08-30T19:43:30.7386163Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7386352Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7386674Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7386911Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.7387215Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7387339Z                     #include <string>
2024-08-30T19:43:30.7387421Z                     
2024-08-30T19:43:30.7387604Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7387755Z                             std::string result = "";
2024-08-30T19:43:30.7387893Z                                 int shift = 7;
2024-08-30T19:43:30.7387981Z                     
2024-08-30T19:43:30.7388137Z                                     for (char c : input) {
2024-08-30T19:43:30.7388311Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7388597Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7388879Z                                                                             result += (c - base + s
2024-08-30T19:43:30.7391794Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7396102Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7396640Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7396770Z                     #include <string>
2024-08-30T19:43:30.7396859Z                     
2024-08-30T19:43:30.7397039Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7397200Z                             std::string result = "";
2024-08-30T19:43:30.7397333Z                                 int shift = 7;
2024-08-30T19:43:30.7397539Z                     
2024-08-30T19:43:30.7397703Z                                     for (char c : input) {
2024-08-30T19:43:30.7397874Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7398173Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7398502Z                                                                             result += (c - base +  -> #include <iostream>
2024-08-30T19:43:30.7398625Z                     #include <string>
2024-08-30T19:43:30.7398716Z                     
2024-08-30T19:43:30.7398894Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7399058Z                             std::string result = "";
2024-08-30T19:43:30.7399195Z                                 int shift = 7;
2024-08-30T19:43:30.7399278Z                     
2024-08-30T19:43:30.7399443Z                                     for (char c : input) {
2024-08-30T19:43:30.7399618Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7399910Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7400107Z                                                                             result ...
2024-08-30T19:43:30.7400430Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7400625Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7400939Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7401182Z [32m      cy:command ✔ [39m type	h, {force: true}
2024-08-30T19:43:30.7401466Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7401594Z                     #include <string>
2024-08-30T19:43:30.7401682Z                     
2024-08-30T19:43:30.7401858Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7402027Z                             std::string result = "";
2024-08-30T19:43:30.7402167Z                                 int shift = 7;
2024-08-30T19:43:30.7402251Z                     
2024-08-30T19:43:30.7402414Z                                     for (char c : input) {
2024-08-30T19:43:30.7402582Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7402868Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7403151Z                                                                             result += (c - base + sh
2024-08-30T19:43:30.7406028Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + sh","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7410561Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7411256Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7411398Z                     #include <string>
2024-08-30T19:43:30.7411486Z                     
2024-08-30T19:43:30.7411683Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7411837Z                             std::string result = "";
2024-08-30T19:43:30.7411976Z                                 int shift = 7;
2024-08-30T19:43:30.7412058Z                     
2024-08-30T19:43:30.7412215Z                                     for (char c : input) {
2024-08-30T19:43:30.7412394Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7412695Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7413040Z                                                                             result += (c - base + s -> #include <iostream>
2024-08-30T19:43:30.7413168Z                     #include <string>
2024-08-30T19:43:30.7413250Z                     
2024-08-30T19:43:30.7413432Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7413582Z                             std::string result = "";
2024-08-30T19:43:30.7413717Z                                 int shift = 7;
2024-08-30T19:43:30.7413804Z                     
2024-08-30T19:43:30.7413963Z                                     for (char c : input) {
2024-08-30T19:43:30.7414135Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7414427Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7414617Z                                                                             resul ...
2024-08-30T19:43:30.7414956Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7415138Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7415451Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7415700Z [32m      cy:command ✔ [39m type	i, {force: true}
2024-08-30T19:43:30.7415986Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7416121Z                     #include <string>
2024-08-30T19:43:30.7416205Z                     
2024-08-30T19:43:30.7416381Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7416539Z                             std::string result = "";
2024-08-30T19:43:30.7416673Z                                 int shift = 7;
2024-08-30T19:43:30.7416868Z                     
2024-08-30T19:43:30.7417028Z                                     for (char c : input) {
2024-08-30T19:43:30.7417197Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7417501Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7417787Z                                                                             result += (c - base + shi
2024-08-30T19:43:30.7420699Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shi","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7425312Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7425748Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7425874Z                     #include <string>
2024-08-30T19:43:30.7425971Z                     
2024-08-30T19:43:30.7426154Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7426315Z                             std::string result = "";
2024-08-30T19:43:30.7426451Z                                 int shift = 7;
2024-08-30T19:43:30.7426535Z                     
2024-08-30T19:43:30.7426704Z                                     for (char c : input) {
2024-08-30T19:43:30.7426880Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7427174Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7427516Z                                                                             result += (c - base + sh -> #include <iostream>
2024-08-30T19:43:30.7427640Z                     #include <string>
2024-08-30T19:43:30.7427728Z                     
2024-08-30T19:43:30.7427903Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7428060Z                             std::string result = "";
2024-08-30T19:43:30.7428198Z                                 int shift = 7;
2024-08-30T19:43:30.7428284Z                     
2024-08-30T19:43:30.7428442Z                                     for (char c : input) {
2024-08-30T19:43:30.7428619Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7428903Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7429095Z                                                                             resu ...
2024-08-30T19:43:30.7429417Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7429700Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7430025Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7430265Z [32m      cy:command ✔ [39m type	f, {force: true}
2024-08-30T19:43:30.7430567Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7430693Z                     #include <string>
2024-08-30T19:43:30.7430778Z                     
2024-08-30T19:43:30.7430965Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7431116Z                             std::string result = "";
2024-08-30T19:43:30.7431256Z                                 int shift = 7;
2024-08-30T19:43:30.7431410Z                     
2024-08-30T19:43:30.7431568Z                                     for (char c : input) {
2024-08-30T19:43:30.7431742Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7432028Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7432321Z                                                                             result += (c - base + shif
2024-08-30T19:43:30.7435351Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shif","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7439671Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7440089Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7440220Z                     #include <string>
2024-08-30T19:43:30.7440305Z                     
2024-08-30T19:43:30.7440493Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7440649Z                             std::string result = "";
2024-08-30T19:43:30.7440784Z                                 int shift = 7;
2024-08-30T19:43:30.7440875Z                     
2024-08-30T19:43:30.7441041Z                                     for (char c : input) {
2024-08-30T19:43:30.7441212Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7441504Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7441841Z                                                                             result += (c - base + shi -> #include <iostream>
2024-08-30T19:43:30.7441973Z                     #include <string>
2024-08-30T19:43:30.7442055Z                     
2024-08-30T19:43:30.7442236Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7442398Z                             std::string result = "";
2024-08-30T19:43:30.7442607Z                                 int shift = 7;
2024-08-30T19:43:30.7442691Z                     
2024-08-30T19:43:30.7442854Z                                     for (char c : input) {
2024-08-30T19:43:30.7443026Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7443312Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7443499Z                                                                             res ...
2024-08-30T19:43:30.7443824Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7444013Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7444407Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7444657Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.7444946Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7445077Z                     #include <string>
2024-08-30T19:43:30.7445167Z                     
2024-08-30T19:43:30.7445343Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7445496Z                             std::string result = "";
2024-08-30T19:43:30.7445758Z                                 int shift = 7;
2024-08-30T19:43:30.7445844Z                     
2024-08-30T19:43:30.7446009Z                                     for (char c : input) {
2024-08-30T19:43:30.7446175Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7446461Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7446759Z                                                                             result += (c - base + shift
2024-08-30T19:43:30.7449669Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7454214Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7454657Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7454780Z                     #include <string>
2024-08-30T19:43:30.7454869Z                     
2024-08-30T19:43:30.7455057Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7455212Z                             std::string result = "";
2024-08-30T19:43:30.7455354Z                                 int shift = 7;
2024-08-30T19:43:30.7455435Z                     
2024-08-30T19:43:30.7455594Z                                     for (char c : input) {
2024-08-30T19:43:30.7455878Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7456170Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7456519Z                                                                             result += (c - base + shif -> #include <iostream>
2024-08-30T19:43:30.7456645Z                     #include <string>
2024-08-30T19:43:30.7456730Z                     
2024-08-30T19:43:30.7456912Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7457060Z                             std::string result = "";
2024-08-30T19:43:30.7457271Z                                 int shift = 7;
2024-08-30T19:43:30.7457358Z                     
2024-08-30T19:43:30.7457514Z                                     for (char c : input) {
2024-08-30T19:43:30.7457683Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7457976Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7458158Z                                                                             re ...
2024-08-30T19:43:30.7458627Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7458817Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7459143Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7459428Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.7459717Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7459849Z                     #include <string>
2024-08-30T19:43:30.7459939Z                     
2024-08-30T19:43:30.7460121Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7460281Z                             std::string result = "";
2024-08-30T19:43:30.7460415Z                                 int shift = 7;
2024-08-30T19:43:30.7460510Z                     
2024-08-30T19:43:30.7460668Z                                     for (char c : input) {
2024-08-30T19:43:30.7460836Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7461140Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7461429Z                                                                             result += (c - base + shift)
2024-08-30T19:43:30.7464349Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7469631Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7470297Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7470434Z                     #include <string>
2024-08-30T19:43:30.7470528Z                     
2024-08-30T19:43:30.7470728Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7470897Z                             std::string result = "";
2024-08-30T19:43:30.7471040Z                                 int shift = 7;
2024-08-30T19:43:30.7471129Z                     
2024-08-30T19:43:30.7471300Z                                     for (char c : input) {
2024-08-30T19:43:30.7471552Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7471855Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7472229Z                                                                             result += (c - base + shift -> #include <iostream>
2024-08-30T19:43:30.7472360Z                     #include <string>
2024-08-30T19:43:30.7472453Z                     
2024-08-30T19:43:30.7472639Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7473023Z                             std::string result = "";
2024-08-30T19:43:30.7473176Z                                 int shift = 7;
2024-08-30T19:43:30.7473265Z                     
2024-08-30T19:43:30.7473430Z                                     for (char c : input) {
2024-08-30T19:43:30.7473605Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7473903Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7474093Z                                                                             r ...
2024-08-30T19:43:30.7474428Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7474614Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7474947Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7475188Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7475486Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7475621Z                     #include <string>
2024-08-30T19:43:30.7475708Z                     
2024-08-30T19:43:30.7475898Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7476056Z                             std::string result = "";
2024-08-30T19:43:30.7476201Z                                 int shift = 7;
2024-08-30T19:43:30.7476291Z                     
2024-08-30T19:43:30.7476458Z                                     for (char c : input) {
2024-08-30T19:43:30.7476635Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7476932Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7477230Z                                                                             result += (c - base + shift) 
2024-08-30T19:43:30.7480195Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7484537Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7485086Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7485221Z                     #include <string>
2024-08-30T19:43:30.7485308Z                     
2024-08-30T19:43:30.7485501Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7485666Z                             std::string result = "";
2024-08-30T19:43:30.7485805Z                                 int shift = 7;
2024-08-30T19:43:30.7485899Z                     
2024-08-30T19:43:30.7486181Z                                     for (char c : input) {
2024-08-30T19:43:30.7486359Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7486668Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7487026Z                                                                             result += (c - base + shift) -> #include <iostream>
2024-08-30T19:43:30.7487158Z                     #include <string>
2024-08-30T19:43:30.7487245Z                     
2024-08-30T19:43:30.7487427Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7487590Z                             std::string result = "";
2024-08-30T19:43:30.7487735Z                                 int shift = 7;
2024-08-30T19:43:30.7487821Z                     
2024-08-30T19:43:30.7487988Z                                     for (char c : input) {
2024-08-30T19:43:30.7488159Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7488468Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7488655Z                                                                              ...
2024-08-30T19:43:30.7488985Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7489179Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7489502Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7489759Z [32m      cy:command ✔ [39m type	%, {force: true}
2024-08-30T19:43:30.7490056Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7490185Z                     #include <string>
2024-08-30T19:43:30.7490284Z                     
2024-08-30T19:43:30.7490465Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7490624Z                             std::string result = "";
2024-08-30T19:43:30.7490778Z                                 int shift = 7;
2024-08-30T19:43:30.7490864Z                     
2024-08-30T19:43:30.7491235Z                                     for (char c : input) {
2024-08-30T19:43:30.7491445Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7491749Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7492061Z                                                                             result += (c - base + shift) %
2024-08-30T19:43:30.7495531Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) %","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7500251Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7500763Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7500895Z                     #include <string>
2024-08-30T19:43:30.7500983Z                     
2024-08-30T19:43:30.7501180Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7501344Z                             std::string result = "";
2024-08-30T19:43:30.7501490Z                                 int shift = 7;
2024-08-30T19:43:30.7501576Z                     
2024-08-30T19:43:30.7501743Z                                     for (char c : input) {
2024-08-30T19:43:30.7501923Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7502217Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7502577Z                                                                             result += (c - base + shift)  -> #include <iostream>
2024-08-30T19:43:30.7502707Z                     #include <string>
2024-08-30T19:43:30.7502794Z                     
2024-08-30T19:43:30.7502982Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7503136Z                             std::string result = "";
2024-08-30T19:43:30.7503275Z                                 int shift = 7;
2024-08-30T19:43:30.7503369Z                     
2024-08-30T19:43:30.7503529Z                                     for (char c : input) {
2024-08-30T19:43:30.7503696Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7503995Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7504177Z                                                                             ...
2024-08-30T19:43:30.7504508Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7504699Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7505017Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7505265Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7505557Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7505697Z                     #include <string>
2024-08-30T19:43:30.7505787Z                     
2024-08-30T19:43:30.7505966Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7506130Z                             std::string result = "";
2024-08-30T19:43:30.7506265Z                                 int shift = 7;
2024-08-30T19:43:30.7506437Z                     
2024-08-30T19:43:30.7506599Z                                     for (char c : input) {
2024-08-30T19:43:30.7506770Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7507076Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7507373Z                                                                             result += (c - base + shift) % 
2024-08-30T19:43:30.7510303Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7514821Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7515256Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7515384Z                     #include <string>
2024-08-30T19:43:30.7515475Z                     
2024-08-30T19:43:30.7515666Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7515829Z                             std::string result = "";
2024-08-30T19:43:30.7515964Z                                 int shift = 7;
2024-08-30T19:43:30.7516047Z                     
2024-08-30T19:43:30.7516216Z                                     for (char c : input) {
2024-08-30T19:43:30.7516390Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7516684Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7517048Z                                                                             result += (c - base + shift) % -> #include <iostream>
2024-08-30T19:43:30.7517171Z                     #include <string>
2024-08-30T19:43:30.7517261Z                     
2024-08-30T19:43:30.7517441Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7517599Z                             std::string result = "";
2024-08-30T19:43:30.7517741Z                                 int shift = 7;
2024-08-30T19:43:30.7517826Z                     
2024-08-30T19:43:30.7517989Z                                     for (char c : input) {
2024-08-30T19:43:30.7518165Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7518550Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7518788Z                                                                            ...
2024-08-30T19:43:30.7519130Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7519322Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7519755Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7520006Z [32m      cy:command ✔ [39m type	2, {force: true}
2024-08-30T19:43:30.7520304Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7520440Z                     #include <string>
2024-08-30T19:43:30.7520529Z                     
2024-08-30T19:43:30.7520722Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7520881Z                             std::string result = "";
2024-08-30T19:43:30.7521027Z                                 int shift = 7;
2024-08-30T19:43:30.7521113Z                     
2024-08-30T19:43:30.7521349Z                                     for (char c : input) {
2024-08-30T19:43:30.7521526Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7521821Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7522134Z                                                                             result += (c - base + shift) % 2
2024-08-30T19:43:30.7525228Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 2","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7529580Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7530001Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7530138Z                     #include <string>
2024-08-30T19:43:30.7530224Z                     
2024-08-30T19:43:30.7530414Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7530575Z                             std::string result = "";
2024-08-30T19:43:30.7530714Z                                 int shift = 7;
2024-08-30T19:43:30.7530808Z                     
2024-08-30T19:43:30.7531164Z                                     for (char c : input) {
2024-08-30T19:43:30.7531401Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7531716Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7532084Z                                                                             result += (c - base + shift) %  -> #include <iostream>
2024-08-30T19:43:30.7532220Z                     #include <string>
2024-08-30T19:43:30.7532306Z                     
2024-08-30T19:43:30.7532492Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7532657Z                             std::string result = "";
2024-08-30T19:43:30.7532904Z                                 int shift = 7;
2024-08-30T19:43:30.7532989Z                     
2024-08-30T19:43:30.7533159Z                                     for (char c : input) {
2024-08-30T19:43:30.7533332Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7533640Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7533819Z                                                                           ...
2024-08-30T19:43:30.7534158Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7534352Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7534755Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7535001Z [32m      cy:command ✔ [39m type	6, {force: true}
2024-08-30T19:43:30.7535291Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7535417Z                     #include <string>
2024-08-30T19:43:30.7535514Z                     
2024-08-30T19:43:30.7535695Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7535855Z                             std::string result = "";
2024-08-30T19:43:30.7535993Z                                 int shift = 7;
2024-08-30T19:43:30.7536219Z                     
2024-08-30T19:43:30.7536392Z                                     for (char c : input) {
2024-08-30T19:43:30.7536565Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7536861Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7537174Z                                                                             result += (c - base + shift) % 26
2024-08-30T19:43:30.7540137Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7544474Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7544895Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7545022Z                     #include <string>
2024-08-30T19:43:30.7545116Z                     
2024-08-30T19:43:30.7545301Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7545462Z                             std::string result = "";
2024-08-30T19:43:30.7545605Z                                 int shift = 7;
2024-08-30T19:43:30.7545688Z                     
2024-08-30T19:43:30.7545849Z                                     for (char c : input) {
2024-08-30T19:43:30.7546101Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7546397Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7546779Z                                                                             result += (c - base + shift) % 2 -> #include <iostream>
2024-08-30T19:43:30.7546902Z                     #include <string>
2024-08-30T19:43:30.7546985Z                     
2024-08-30T19:43:30.7547175Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7547330Z                             std::string result = "";
2024-08-30T19:43:30.7547466Z                                 int shift = 7;
2024-08-30T19:43:30.7547626Z                     
2024-08-30T19:43:30.7547789Z                                     for (char c : input) {
2024-08-30T19:43:30.7547957Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7548256Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7548433Z                                                                          ...
2024-08-30T19:43:30.7548795Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7549095Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7549431Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7549675Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7549966Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7550097Z                     #include <string>
2024-08-30T19:43:30.7550186Z                     
2024-08-30T19:43:30.7550370Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7550533Z                             std::string result = "";
2024-08-30T19:43:30.7550670Z                                 int shift = 7;
2024-08-30T19:43:30.7550764Z                     
2024-08-30T19:43:30.7550923Z                                     for (char c : input) {
2024-08-30T19:43:30.7551093Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7551399Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7551708Z                                                                             result += (c - base + shift) % 26 
2024-08-30T19:43:30.7554661Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7559003Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7559505Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7559638Z                     #include <string>
2024-08-30T19:43:30.7559722Z                     
2024-08-30T19:43:30.7559911Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7560071Z                             std::string result = "";
2024-08-30T19:43:30.7560208Z                                 int shift = 7;
2024-08-30T19:43:30.7560292Z                     
2024-08-30T19:43:30.7560462Z                                     for (char c : input) {
2024-08-30T19:43:30.7560699Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7560991Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7561370Z                                                                             result += (c - base + shift) % 26 -> #include <iostream>
2024-08-30T19:43:30.7561495Z                     #include <string>
2024-08-30T19:43:30.7561585Z                     
2024-08-30T19:43:30.7561763Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7562040Z                             std::string result = "";
2024-08-30T19:43:30.7562188Z                                 int shift = 7;
2024-08-30T19:43:30.7562273Z                     
2024-08-30T19:43:30.7562431Z                                     for (char c : input) {
2024-08-30T19:43:30.7562606Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7562900Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7563082Z                                                                         ...
2024-08-30T19:43:30.7563409Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7563593Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7563919Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7564155Z [32m      cy:command ✔ [39m type	+, {force: true}
2024-08-30T19:43:30.7564451Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7564583Z                     #include <string>
2024-08-30T19:43:30.7564668Z                     
2024-08-30T19:43:30.7564892Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7565050Z                             std::string result = "";
2024-08-30T19:43:30.7565191Z                                 int shift = 7;
2024-08-30T19:43:30.7565322Z                     
2024-08-30T19:43:30.7565599Z                                     for (char c : input) {
2024-08-30T19:43:30.7565813Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7566114Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7566431Z                                                                             result += (c - base + shift) % 26 +
2024-08-30T19:43:30.7569408Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 +","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7574087Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7574864Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7575016Z                     #include <string>
2024-08-30T19:43:30.7575104Z                     
2024-08-30T19:43:30.7575301Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7575504Z                             std::string result = "";
2024-08-30T19:43:30.7575696Z                                 int shift = 7;
2024-08-30T19:43:30.7575790Z                     
2024-08-30T19:43:30.7576168Z                                     for (char c : input) {
2024-08-30T19:43:30.7576483Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7576845Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7577228Z                                                                             result += (c - base + shift) % 26  -> #include <iostream>
2024-08-30T19:43:30.7577367Z                     #include <string>
2024-08-30T19:43:30.7577453Z                     
2024-08-30T19:43:30.7577639Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7577802Z                             std::string result = "";
2024-08-30T19:43:30.7577943Z                                 int shift = 7;
2024-08-30T19:43:30.7578027Z                     
2024-08-30T19:43:30.7578195Z                                     for (char c : input) {
2024-08-30T19:43:30.7578368Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7578677Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7578849Z                                                                        ...
2024-08-30T19:43:30.7579190Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7579383Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7579712Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7579965Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7580259Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7580388Z                     #include <string>
2024-08-30T19:43:30.7580486Z                     
2024-08-30T19:43:30.7580668Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7580830Z                             std::string result = "";
2024-08-30T19:43:30.7580973Z                                 int shift = 7;
2024-08-30T19:43:30.7581057Z                     
2024-08-30T19:43:30.7581226Z                                     for (char c : input) {
2024-08-30T19:43:30.7581396Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7581687Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7582004Z                                                                             result += (c - base + shift) % 26 + 
2024-08-30T19:43:30.7584958Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7589525Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7590013Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7590139Z                     #include <string>
2024-08-30T19:43:30.7590232Z                     
2024-08-30T19:43:30.7590415Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7590575Z                             std::string result = "";
2024-08-30T19:43:30.7590718Z                                 int shift = 7;
2024-08-30T19:43:30.7590802Z                     
2024-08-30T19:43:30.7590970Z                                     for (char c : input) {
2024-08-30T19:43:30.7591153Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7591453Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7591850Z                                                                             result += (c - base + shift) % 26 + -> #include <iostream>
2024-08-30T19:43:30.7591973Z                     #include <string>
2024-08-30T19:43:30.7592057Z                     
2024-08-30T19:43:30.7592253Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7592410Z                             std::string result = "";
2024-08-30T19:43:30.7592550Z                                 int shift = 7;
2024-08-30T19:43:30.7592642Z                     
2024-08-30T19:43:30.7592799Z                                     for (char c : input) {
2024-08-30T19:43:30.7592975Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7593270Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7593440Z                                                                       ...
2024-08-30T19:43:30.7593776Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7593965Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7594288Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7594531Z [32m      cy:command ✔ [39m type	b, {force: true}
2024-08-30T19:43:30.7594820Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7594951Z                     #include <string>
2024-08-30T19:43:30.7595040Z                     
2024-08-30T19:43:30.7595229Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7595383Z                             std::string result = "";
2024-08-30T19:43:30.7595520Z                                 int shift = 7;
2024-08-30T19:43:30.7595690Z                     
2024-08-30T19:43:30.7595854Z                                     for (char c : input) {
2024-08-30T19:43:30.7596027Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7596336Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7596650Z                                                                             result += (c - base + shift) % 26 + b
2024-08-30T19:43:30.7599631Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + b","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7604157Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7604586Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7604720Z                     #include <string>
2024-08-30T19:43:30.7604810Z                     
2024-08-30T19:43:30.7604993Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7605153Z                             std::string result = "";
2024-08-30T19:43:30.7605289Z                                 int shift = 7;
2024-08-30T19:43:30.7605373Z                     
2024-08-30T19:43:30.7605546Z                                     for (char c : input) {
2024-08-30T19:43:30.7605721Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7606020Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7606405Z                                                                             result += (c - base + shift) % 26 +  -> #include <iostream>
2024-08-30T19:43:30.7606528Z                     #include <string>
2024-08-30T19:43:30.7606618Z                     
2024-08-30T19:43:30.7606798Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7606956Z                             std::string result = "";
2024-08-30T19:43:30.7607098Z                                 int shift = 7;
2024-08-30T19:43:30.7607184Z                     
2024-08-30T19:43:30.7607342Z                                     for (char c : input) {
2024-08-30T19:43:30.7607521Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7607812Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7607989Z                                                                      ...
2024-08-30T19:43:30.7608312Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7608574Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7608899Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7609141Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.7609441Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7609565Z                     #include <string>
2024-08-30T19:43:30.7609656Z                     
2024-08-30T19:43:30.7609839Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7609993Z                             std::string result = "";
2024-08-30T19:43:30.7610139Z                                 int shift = 7;
2024-08-30T19:43:30.7610296Z                     
2024-08-30T19:43:30.7610456Z                                     for (char c : input) {
2024-08-30T19:43:30.7610631Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7610923Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7611552Z                                                                             result += (c - base + shift) % 26 + ba
2024-08-30T19:43:30.7614712Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + ba","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7619072Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7619493Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7619629Z                     #include <string>
2024-08-30T19:43:30.7619718Z                     
2024-08-30T19:43:30.7619911Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7620065Z                             std::string result = "";
2024-08-30T19:43:30.7620201Z                                 int shift = 7;
2024-08-30T19:43:30.7620294Z                     
2024-08-30T19:43:30.7620457Z                                     for (char c : input) {
2024-08-30T19:43:30.7620625Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7620925Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7621309Z                                                                             result += (c - base + shift) % 26 + b -> #include <iostream>
2024-08-30T19:43:30.7621439Z                     #include <string>
2024-08-30T19:43:30.7621522Z                     
2024-08-30T19:43:30.7621703Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7621863Z                             std::string result = "";
2024-08-30T19:43:30.7622117Z                                 int shift = 7;
2024-08-30T19:43:30.7622201Z                     
2024-08-30T19:43:30.7622379Z                                     for (char c : input) {
2024-08-30T19:43:30.7622557Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7622862Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7623031Z                                                                     ...
2024-08-30T19:43:30.7623352Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7623543Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7623950Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7624197Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.7624486Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7624617Z                     #include <string>
2024-08-30T19:43:30.7624711Z                     
2024-08-30T19:43:30.7624895Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7625057Z                             std::string result = "";
2024-08-30T19:43:30.7625309Z                                 int shift = 7;
2024-08-30T19:43:30.7625397Z                     
2024-08-30T19:43:30.7625564Z                                     for (char c : input) {
2024-08-30T19:43:30.7625733Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7626024Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7626352Z                                                                             result += (c - base + shift) % 26 + bas
2024-08-30T19:43:30.7629327Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + bas","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7634576Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7635240Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7635377Z                     #include <string>
2024-08-30T19:43:30.7635473Z                     
2024-08-30T19:43:30.7635674Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7635841Z                             std::string result = "";
2024-08-30T19:43:30.7635989Z                                 int shift = 7;
2024-08-30T19:43:30.7636076Z                     
2024-08-30T19:43:30.7636242Z                                     for (char c : input) {
2024-08-30T19:43:30.7636428Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7636728Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7637132Z                                                                             result += (c - base + shift) % 26 + ba -> #include <iostream>
2024-08-30T19:43:30.7637257Z                     #include <string>
2024-08-30T19:43:30.7637344Z                     
2024-08-30T19:43:30.7637534Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7637691Z                             std::string result = "";
2024-08-30T19:43:30.7637910Z                                 int shift = 7;
2024-08-30T19:43:30.7638004Z                     
2024-08-30T19:43:30.7638167Z                                     for (char c : input) {
2024-08-30T19:43:30.7638347Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7638649Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7638819Z                                                                    ...
2024-08-30T19:43:30.7639273Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7639467Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7639798Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7640038Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.7640331Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7640471Z                     #include <string>
2024-08-30T19:43:30.7640558Z                     
2024-08-30T19:43:30.7640746Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7640900Z                             std::string result = "";
2024-08-30T19:43:30.7641036Z                                 int shift = 7;
2024-08-30T19:43:30.7641135Z                     
2024-08-30T19:43:30.7641296Z                                     for (char c : input) {
2024-08-30T19:43:30.7641468Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7641780Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7642098Z                                                                             result += (c - base + shift) % 26 + base
2024-08-30T19:43:30.7645092Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7649515Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7649936Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7650073Z                     #include <string>
2024-08-30T19:43:30.7650166Z                     
2024-08-30T19:43:30.7650354Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7650520Z                             std::string result = "";
2024-08-30T19:43:30.7650658Z                                 int shift = 7;
2024-08-30T19:43:30.7650743Z                     
2024-08-30T19:43:30.7650910Z                                     for (char c : input) {
2024-08-30T19:43:30.7651409Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7651739Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7652138Z                                                                             result += (c - base + shift) % 26 + bas -> #include <iostream>
2024-08-30T19:43:30.7652267Z                     #include <string>
2024-08-30T19:43:30.7652358Z                     
2024-08-30T19:43:30.7652696Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7652862Z                             std::string result = "";
2024-08-30T19:43:30.7653010Z                                 int shift = 7;
2024-08-30T19:43:30.7653098Z                     
2024-08-30T19:43:30.7653270Z                                     for (char c : input) {
2024-08-30T19:43:30.7653442Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7653742Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7653918Z                                                                   ...
2024-08-30T19:43:30.7654253Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7654454Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7654771Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7655012Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.7655317Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7655445Z                     #include <string>
2024-08-30T19:43:30.7655539Z                     
2024-08-30T19:43:30.7655726Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7655885Z                             std::string result = "";
2024-08-30T19:43:30.7656031Z                                 int shift = 7;
2024-08-30T19:43:30.7656121Z                     
2024-08-30T19:43:30.7656284Z                                     for (char c : input) {
2024-08-30T19:43:30.7656471Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7656766Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7657190Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7660186Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7664531Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7665082Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7665215Z                     #include <string>
2024-08-30T19:43:30.7665307Z                     
2024-08-30T19:43:30.7665499Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7665653Z                             std::string result = "";
2024-08-30T19:43:30.7665790Z                                 int shift = 7;
2024-08-30T19:43:30.7666020Z                     
2024-08-30T19:43:30.7666190Z                                     for (char c : input) {
2024-08-30T19:43:30.7666369Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7666668Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7667063Z                                                                             result += (c - base + shift) % 26 + base -> #include <iostream>
2024-08-30T19:43:30.7667195Z                     #include <string>
2024-08-30T19:43:30.7667278Z                     
2024-08-30T19:43:30.7667458Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7667630Z                             std::string result = "";
2024-08-30T19:43:30.7667771Z                                 int shift = 7;
2024-08-30T19:43:30.7667862Z                     
2024-08-30T19:43:30.7668028Z                                     for (char c : input) {
2024-08-30T19:43:30.7668210Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7668508Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7668672Z                                                                  ...
2024-08-30T19:43:30.7668998Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7669190Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7669509Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7669697Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.7669818Z                     , {force: true}
2024-08-30T19:43:30.7670192Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7670317Z                     #include <string>
2024-08-30T19:43:30.7670401Z                     
2024-08-30T19:43:30.7670591Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7670751Z                             std::string result = "";
2024-08-30T19:43:30.7670887Z                                 int shift = 7;
2024-08-30T19:43:30.7670980Z                     
2024-08-30T19:43:30.7671137Z                                     for (char c : input) {
2024-08-30T19:43:30.7671304Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7671600Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7671920Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7672097Z                                                                             
2024-08-30T19:43:30.7675202Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7679792Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7680237Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7680364Z                     #include <string>
2024-08-30T19:43:30.7680450Z                     
2024-08-30T19:43:30.7680643Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7680802Z                             std::string result = "";
2024-08-30T19:43:30.7680944Z                                 int shift = 7;
2024-08-30T19:43:30.7681029Z                     
2024-08-30T19:43:30.7681193Z                                     for (char c : input) {
2024-08-30T19:43:30.7681379Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7681677Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7682076Z                                                                             result += (c - base + shift) % 26 + base; -> #include <iostream>
2024-08-30T19:43:30.7682207Z                     #include <string>
2024-08-30T19:43:30.7682290Z                     
2024-08-30T19:43:30.7682472Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7682623Z                             std::string result = "";
2024-08-30T19:43:30.7682834Z                                 int shift = 7;
2024-08-30T19:43:30.7682924Z                     
2024-08-30T19:43:30.7683084Z                                     for (char c : input) {
2024-08-30T19:43:30.7683258Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7683559Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7683723Z                                                                 ...
2024-08-30T19:43:30.7684050Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7684235Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7684556Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7684813Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7685106Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7685239Z                     #include <string>
2024-08-30T19:43:30.7685331Z                     
2024-08-30T19:43:30.7685509Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7685668Z                             std::string result = "";
2024-08-30T19:43:30.7685803Z                                 int shift = 7;
2024-08-30T19:43:30.7685893Z                     
2024-08-30T19:43:30.7686058Z                                     for (char c : input) {
2024-08-30T19:43:30.7686225Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7686516Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7686834Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7687080Z                                                                              
2024-08-30T19:43:30.7690289Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7694911Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7695343Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7695482Z                     #include <string>
2024-08-30T19:43:30.7695573Z                     
2024-08-30T19:43:30.7695767Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7695925Z                             std::string result = "";
2024-08-30T19:43:30.7696063Z                                 int shift = 7;
2024-08-30T19:43:30.7696261Z                     
2024-08-30T19:43:30.7696428Z                                     for (char c : input) {
2024-08-30T19:43:30.7696603Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7696920Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7697244Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7697534Z                                                                              -> #include <iostream>
2024-08-30T19:43:30.7697654Z                     #include <string>
2024-08-30T19:43:30.7697784Z                     
2024-08-30T19:43:30.7698201Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7698415Z                             std::string result = "";
2024-08-30T19:43:30.7698618Z                                 int shift = 7;
2024-08-30T19:43:30.7698737Z                     
2024-08-30T19:43:30.7698932Z                                     for (char c : input) {
2024-08-30T19:43:30.7699200Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7699465Z                                                                 char base = islower(c)  ...
2024-08-30T19:43:30.7699842Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7700101Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7700453Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7700766Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7701244Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7701439Z                     #include <string>
2024-08-30T19:43:30.7701556Z                     
2024-08-30T19:43:30.7701773Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7701996Z                             std::string result = "";
2024-08-30T19:43:30.7702173Z                                 int shift = 7;
2024-08-30T19:43:30.7702405Z                     
2024-08-30T19:43:30.7702717Z                                     for (char c : input) {
2024-08-30T19:43:30.7703072Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7703449Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7703823Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7704029Z                                                                               
2024-08-30T19:43:30.7707269Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7711682Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7712219Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7712433Z                     #include <string>
2024-08-30T19:43:30.7712553Z                     
2024-08-30T19:43:30.7712806Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7713036Z                             std::string result = "";
2024-08-30T19:43:30.7713204Z                                 int shift = 7;
2024-08-30T19:43:30.7713368Z                     
2024-08-30T19:43:30.7713559Z                                     for (char c : input) {
2024-08-30T19:43:30.7713766Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7714160Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7714524Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7714834Z                                                                               -> #include <iostream>
2024-08-30T19:43:30.7715035Z                     #include <string>
2024-08-30T19:43:30.7715150Z                     
2024-08-30T19:43:30.7715502Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7715767Z                             std::string result = "";
2024-08-30T19:43:30.7715933Z                                 int shift = 7;
2024-08-30T19:43:30.7716098Z                     
2024-08-30T19:43:30.7716291Z                                     for (char c : input) {
2024-08-30T19:43:30.7716495Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7716799Z                                                                 char base = islower(c) ...
2024-08-30T19:43:30.7717168Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7717558Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7717921Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7718195Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7718559Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7718748Z                     #include <string>
2024-08-30T19:43:30.7718921Z                     
2024-08-30T19:43:30.7719139Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7719325Z                             std::string result = "";
2024-08-30T19:43:30.7719525Z                                 int shift = 7;
2024-08-30T19:43:30.7719647Z                     
2024-08-30T19:43:30.7719920Z                                     for (char c : input) {
2024-08-30T19:43:30.7720125Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7720465Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7720853Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7721129Z                                                                                
2024-08-30T19:43:30.7724352Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7728822Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7729318Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7729475Z                     #include <string>
2024-08-30T19:43:30.7729625Z                     
2024-08-30T19:43:30.7729857Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7730113Z                             std::string result = "";
2024-08-30T19:43:30.7730284Z                                 int shift = 7;
2024-08-30T19:43:30.7730484Z                     
2024-08-30T19:43:30.7730717Z                                     for (char c : input) {
2024-08-30T19:43:30.7730934Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7731543Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7731994Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7732480Z                                                                                -> #include <iostream>
2024-08-30T19:43:30.7732676Z                     #include <string>
2024-08-30T19:43:30.7732811Z                     
2024-08-30T19:43:30.7733031Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7733284Z                             std::string result = "";
2024-08-30T19:43:30.7733453Z                                 int shift = 7;
2024-08-30T19:43:30.7733571Z                     
2024-08-30T19:43:30.7733891Z                                     for (char c : input) {
2024-08-30T19:43:30.7734091Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7734359Z                                                                 char base = islower(c ...
2024-08-30T19:43:30.7734772Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7734996Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7735388Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7735686Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7736047Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7736203Z                     #include <string>
2024-08-30T19:43:30.7736347Z                     
2024-08-30T19:43:30.7736599Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7736809Z                             std::string result = "";
2024-08-30T19:43:30.7737012Z                                 int shift = 7;
2024-08-30T19:43:30.7737127Z                     
2024-08-30T19:43:30.7737321Z                                     for (char c : input) {
2024-08-30T19:43:30.7737596Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7738045Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7738409Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7738652Z                                                                                 
2024-08-30T19:43:30.7741811Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7746578Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7747508Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7747754Z                     #include <string>
2024-08-30T19:43:30.7748172Z                     
2024-08-30T19:43:30.7748531Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7748845Z                             std::string result = "";
2024-08-30T19:43:30.7749255Z                                 int shift = 7;
2024-08-30T19:43:30.7749469Z                     
2024-08-30T19:43:30.7749780Z                                     for (char c : input) {
2024-08-30T19:43:30.7750040Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7750417Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7750882Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7751216Z                                                                                 -> #include <iostream>
2024-08-30T19:43:30.7751371Z                     #include <string>
2024-08-30T19:43:30.7751520Z                     
2024-08-30T19:43:30.7751748Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7751939Z                             std::string result = "";
2024-08-30T19:43:30.7752190Z                                 int shift = 7;
2024-08-30T19:43:30.7752303Z                     
2024-08-30T19:43:30.7752539Z                                     for (char c : input) {
2024-08-30T19:43:30.7752745Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7752978Z                                                                 char base = islower( ...
2024-08-30T19:43:30.7753411Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7753857Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7754255Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7754537Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7754876Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7755091Z                     #include <string>
2024-08-30T19:43:30.7755208Z                     
2024-08-30T19:43:30.7755489Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7755677Z                             std::string result = "";
2024-08-30T19:43:30.7755845Z                                 int shift = 7;
2024-08-30T19:43:30.7756087Z                     
2024-08-30T19:43:30.7756281Z                                     for (char c : input) {
2024-08-30T19:43:30.7756484Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7756884Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7757244Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7757500Z                                                                                  
2024-08-30T19:43:30.7760671Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7765292Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7765845Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7766036Z                     #include <string>
2024-08-30T19:43:30.7766153Z                     
2024-08-30T19:43:30.7766405Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7766672Z                             std::string result = "";
2024-08-30T19:43:30.7766843Z                                 int shift = 7;
2024-08-30T19:43:30.7767026Z                     
2024-08-30T19:43:30.7767235Z                                     for (char c : input) {
2024-08-30T19:43:30.7767471Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7767807Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7768170Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7768557Z                                                                                  -> #include <iostream>
2024-08-30T19:43:30.7768805Z                     #include <string>
2024-08-30T19:43:30.7768955Z                     
2024-08-30T19:43:30.7769170Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7769361Z                             std::string result = "";
2024-08-30T19:43:30.7769566Z                                 int shift = 7;
2024-08-30T19:43:30.7769724Z                     
2024-08-30T19:43:30.7769917Z                                     for (char c : input) {
2024-08-30T19:43:30.7770154Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7770386Z                                                                 char base = islower ...
2024-08-30T19:43:30.7770867Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7771370Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7771874Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7772204Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7772533Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7772799Z                     #include <string>
2024-08-30T19:43:30.7772919Z                     
2024-08-30T19:43:30.7773165Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7773424Z                             std::string result = "";
2024-08-30T19:43:30.7773596Z                                 int shift = 7;
2024-08-30T19:43:30.7773708Z                     
2024-08-30T19:43:30.7773937Z                                     for (char c : input) {
2024-08-30T19:43:30.7774157Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7774545Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7774903Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7775120Z                                                                                   
2024-08-30T19:43:30.7778472Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7782939Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7783395Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7783626Z                     #include <string>
2024-08-30T19:43:30.7783830Z                     
2024-08-30T19:43:30.7784106Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7784295Z                             std::string result = "";
2024-08-30T19:43:30.7784462Z                                 int shift = 7;
2024-08-30T19:43:30.7784649Z                     
2024-08-30T19:43:30.7784843Z                                     for (char c : input) {
2024-08-30T19:43:30.7785099Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7785703Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7786070Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7786543Z                                                                                   -> #include <iostream>
2024-08-30T19:43:30.7786739Z                     #include <string>
2024-08-30T19:43:30.7786857Z                     
2024-08-30T19:43:30.7787133Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7787320Z                             std::string result = "";
2024-08-30T19:43:30.7787488Z                                 int shift = 7;
2024-08-30T19:43:30.7787640Z                     
2024-08-30T19:43:30.7787858Z                                     for (char c : input) {
2024-08-30T19:43:30.7788057Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7788334Z                                                                 char base = islowe ...
2024-08-30T19:43:30.7788709Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7788967Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7789316Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7789661Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7789986Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7790152Z                     #include <string>
2024-08-30T19:43:30.7790301Z                     
2024-08-30T19:43:30.7790515Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7790829Z                             std::string result = "";
2024-08-30T19:43:30.7791157Z                                 int shift = 7;
2024-08-30T19:43:30.7828543Z                     
2024-08-30T19:43:30.7828792Z                                     for (char c : input) {
2024-08-30T19:43:30.7828988Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7829346Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7829687Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7829873Z                                                                                    
2024-08-30T19:43:30.7833074Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7837446Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7838034Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7838256Z                     #include <string>
2024-08-30T19:43:30.7838345Z                     
2024-08-30T19:43:30.7838532Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7838693Z                             std::string result = "";
2024-08-30T19:43:30.7838833Z                                 int shift = 7;
2024-08-30T19:43:30.7838914Z                     
2024-08-30T19:43:30.7839077Z                                     for (char c : input) {
2024-08-30T19:43:30.7839258Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7839560Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7839887Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7840177Z                                                                                    -> #include <iostream>
2024-08-30T19:43:30.7840300Z                     #include <string>
2024-08-30T19:43:30.7840387Z                     
2024-08-30T19:43:30.7840568Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7840726Z                             std::string result = "";
2024-08-30T19:43:30.7840864Z                                 int shift = 7;
2024-08-30T19:43:30.7840945Z                     
2024-08-30T19:43:30.7841108Z                                     for (char c : input) {
2024-08-30T19:43:30.7841421Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7841622Z                                                                 char base = islow ...
2024-08-30T19:43:30.7841965Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7842150Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7842467Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7842716Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7843009Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7843133Z                     #include <string>
2024-08-30T19:43:30.7843215Z                     
2024-08-30T19:43:30.7843405Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7843558Z                             std::string result = "";
2024-08-30T19:43:30.7843693Z                                 int shift = 7;
2024-08-30T19:43:30.7843778Z                     
2024-08-30T19:43:30.7843944Z                                     for (char c : input) {
2024-08-30T19:43:30.7844113Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7844409Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7844728Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7844911Z                                                                                     
2024-08-30T19:43:30.7848022Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7852730Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7853186Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7853315Z                     #include <string>
2024-08-30T19:43:30.7853402Z                     
2024-08-30T19:43:30.7853592Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7853746Z                             std::string result = "";
2024-08-30T19:43:30.7853882Z                                 int shift = 7;
2024-08-30T19:43:30.7853968Z                     
2024-08-30T19:43:30.7854127Z                                     for (char c : input) {
2024-08-30T19:43:30.7854298Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7854759Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7855098Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7855401Z                                                                                     -> #include <iostream>
2024-08-30T19:43:30.7855523Z                     #include <string>
2024-08-30T19:43:30.7855614Z                     
2024-08-30T19:43:30.7855801Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7855956Z                             std::string result = "";
2024-08-30T19:43:30.7856094Z                                 int shift = 7;
2024-08-30T19:43:30.7856180Z                     
2024-08-30T19:43:30.7856342Z                                     for (char c : input) {
2024-08-30T19:43:30.7856514Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7856713Z                                                                 char base = islo ...
2024-08-30T19:43:30.7857052Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7857239Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7857551Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7857795Z [32m      cy:command ✔ [39m type	}, {force: true}
2024-08-30T19:43:30.7858087Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7858220Z                     #include <string>
2024-08-30T19:43:30.7858303Z                     
2024-08-30T19:43:30.7858490Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7858662Z                             std::string result = "";
2024-08-30T19:43:30.7858892Z                                 int shift = 7;
2024-08-30T19:43:30.7858978Z                     
2024-08-30T19:43:30.7859141Z                                     for (char c : input) {
2024-08-30T19:43:30.7859319Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7859620Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7859943Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7860075Z                                                 }
2024-08-30T19:43:30.7863230Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            }","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7867737Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7868170Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7868303Z                     #include <string>
2024-08-30T19:43:30.7868387Z                     
2024-08-30T19:43:30.7868573Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7868726Z                             std::string result = "";
2024-08-30T19:43:30.7868864Z                                 int shift = 7;
2024-08-30T19:43:30.7868948Z                     
2024-08-30T19:43:30.7869106Z                                     for (char c : input) {
2024-08-30T19:43:30.7869272Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7869573Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7869892Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7870195Z                                                                                      -> #include <iostream>
2024-08-30T19:43:30.7870312Z                     #include <string>
2024-08-30T19:43:30.7870393Z                     
2024-08-30T19:43:30.7870572Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7870725Z                             std::string result = "";
2024-08-30T19:43:30.7870861Z                                 int shift = 7;
2024-08-30T19:43:30.7870945Z                     
2024-08-30T19:43:30.7871100Z                                     for (char c : input) {
2024-08-30T19:43:30.7871269Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7871532Z                                                                 char base = isl ...
2024-08-30T19:43:30.7871862Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7872047Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7872363Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7872604Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7872887Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7873008Z                     #include <string>
2024-08-30T19:43:30.7873093Z                     
2024-08-30T19:43:30.7873271Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7873500Z                             std::string result = "";
2024-08-30T19:43:30.7873634Z                                 int shift = 7;
2024-08-30T19:43:30.7873715Z                     
2024-08-30T19:43:30.7873872Z                                     for (char c : input) {
2024-08-30T19:43:30.7874047Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7874337Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7874659Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7874788Z                                                 } 
2024-08-30T19:43:30.7877841Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7882289Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7882720Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7882849Z                     #include <string>
2024-08-30T19:43:30.7882938Z                     
2024-08-30T19:43:30.7883120Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7883274Z                             std::string result = "";
2024-08-30T19:43:30.7883409Z                                 int shift = 7;
2024-08-30T19:43:30.7883490Z                     
2024-08-30T19:43:30.7883650Z                                     for (char c : input) {
2024-08-30T19:43:30.7883819Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7884114Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7884429Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7884742Z                                                 } -> #include <iostream>
2024-08-30T19:43:30.7884861Z                     #include <string>
2024-08-30T19:43:30.7884943Z                     
2024-08-30T19:43:30.7885127Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7885282Z                             std::string result = "";
2024-08-30T19:43:30.7885413Z                                 int shift = 7;
2024-08-30T19:43:30.7885500Z                     
2024-08-30T19:43:30.7885655Z                                     for (char c : input) {
2024-08-30T19:43:30.7885888Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7886176Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7886283Z                                   ...
2024-08-30T19:43:30.7886607Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7886795Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7887099Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7887338Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.7887629Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7887752Z                     #include <string>
2024-08-30T19:43:30.7887835Z                     
2024-08-30T19:43:30.7888013Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7888167Z                             std::string result = "";
2024-08-30T19:43:30.7888300Z                                 int shift = 7;
2024-08-30T19:43:30.7888386Z                     
2024-08-30T19:43:30.7888546Z                                     for (char c : input) {
2024-08-30T19:43:30.7888710Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7888996Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7889319Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7889577Z                                                 } e
2024-08-30T19:43:30.7892917Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } e","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7897275Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7897688Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7897927Z                     #include <string>
2024-08-30T19:43:30.7898008Z                     
2024-08-30T19:43:30.7898187Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7898348Z                             std::string result = "";
2024-08-30T19:43:30.7898482Z                                 int shift = 7;
2024-08-30T19:43:30.7898565Z                     
2024-08-30T19:43:30.7898725Z                                     for (char c : input) {
2024-08-30T19:43:30.7898889Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7899182Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7899591Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7899824Z                                                 }  -> #include <iostream>
2024-08-30T19:43:30.7899949Z                     #include <string>
2024-08-30T19:43:30.7900030Z                     
2024-08-30T19:43:30.7900202Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7900354Z                             std::string result = "";
2024-08-30T19:43:30.7900491Z                                 int shift = 7;
2024-08-30T19:43:30.7900582Z                     
2024-08-30T19:43:30.7900737Z                                     for (char c : input) {
2024-08-30T19:43:30.7900900Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7901184Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7901292Z                                  ...
2024-08-30T19:43:30.7901610Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7901796Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7902102Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7902353Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.7902643Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7902773Z                     #include <string>
2024-08-30T19:43:30.7903009Z                     
2024-08-30T19:43:30.7903196Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7903362Z                             std::string result = "";
2024-08-30T19:43:30.7903498Z                                 int shift = 7;
2024-08-30T19:43:30.7903582Z                     
2024-08-30T19:43:30.7903750Z                                     for (char c : input) {
2024-08-30T19:43:30.7903922Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7904224Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7904544Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7904692Z                                                 } el
2024-08-30T19:43:30.7907768Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } el","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7912083Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7912652Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7912784Z                     #include <string>
2024-08-30T19:43:30.7912869Z                     
2024-08-30T19:43:30.7913057Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7913218Z                             std::string result = "";
2024-08-30T19:43:30.7913354Z                                 int shift = 7;
2024-08-30T19:43:30.7913456Z                     
2024-08-30T19:43:30.7913620Z                                     for (char c : input) {
2024-08-30T19:43:30.7913793Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7914096Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7914417Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7914664Z                                                 } e -> #include <iostream>
2024-08-30T19:43:30.7914793Z                     #include <string>
2024-08-30T19:43:30.7914878Z                     
2024-08-30T19:43:30.7915073Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7915230Z                             std::string result = "";
2024-08-30T19:43:30.7915367Z                                 int shift = 7;
2024-08-30T19:43:30.7915461Z                     
2024-08-30T19:43:30.7915747Z                                     for (char c : input) {
2024-08-30T19:43:30.7915924Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7916229Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7916340Z                                 ...
2024-08-30T19:43:30.7916691Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7916904Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7917218Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7917467Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.7917755Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7917891Z                     #include <string>
2024-08-30T19:43:30.7917978Z                     
2024-08-30T19:43:30.7918163Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7918333Z                             std::string result = "";
2024-08-30T19:43:30.7918471Z                                 int shift = 7;
2024-08-30T19:43:30.7918560Z                     
2024-08-30T19:43:30.7918720Z                                     for (char c : input) {
2024-08-30T19:43:30.7918892Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7919197Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7919523Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7919671Z                                                 } els
2024-08-30T19:43:30.7922818Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } els","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7927205Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7927621Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7927760Z                     #include <string>
2024-08-30T19:43:30.7927846Z                     
2024-08-30T19:43:30.7928038Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7928193Z                             std::string result = "";
2024-08-30T19:43:30.7928333Z                                 int shift = 7;
2024-08-30T19:43:30.7928431Z                     
2024-08-30T19:43:30.7928592Z                                     for (char c : input) {
2024-08-30T19:43:30.7928883Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7929191Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7929510Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7929758Z                                                 } el -> #include <iostream>
2024-08-30T19:43:30.7929882Z                     #include <string>
2024-08-30T19:43:30.7929967Z                     
2024-08-30T19:43:30.7930154Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7930308Z                             std::string result = "";
2024-08-30T19:43:30.7930446Z                                 int shift = 7;
2024-08-30T19:43:30.7930537Z                     
2024-08-30T19:43:30.7930695Z                                     for (char c : input) {
2024-08-30T19:43:30.7930872Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7931432Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7931549Z                                ...
2024-08-30T19:43:30.7931903Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7932089Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7932409Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7932655Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.7932952Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7933083Z                     #include <string>
2024-08-30T19:43:30.7933279Z                     
2024-08-30T19:43:30.7933474Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7933629Z                             std::string result = "";
2024-08-30T19:43:30.7933766Z                                 int shift = 7;
2024-08-30T19:43:30.7933864Z                     
2024-08-30T19:43:30.7934025Z                                     for (char c : input) {
2024-08-30T19:43:30.7934194Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7934501Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7934823Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7935060Z                                                 } else
2024-08-30T19:43:30.7938143Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7942620Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7943054Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7943181Z                     #include <string>
2024-08-30T19:43:30.7943272Z                     
2024-08-30T19:43:30.7943462Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7943616Z                             std::string result = "";
2024-08-30T19:43:30.7943751Z                                 int shift = 7;
2024-08-30T19:43:30.7943844Z                     
2024-08-30T19:43:30.7944007Z                                     for (char c : input) {
2024-08-30T19:43:30.7944184Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7944487Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7944805Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7945057Z                                                 } els -> #include <iostream>
2024-08-30T19:43:30.7945177Z                     #include <string>
2024-08-30T19:43:30.7945259Z                     
2024-08-30T19:43:30.7945446Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7945599Z                             std::string result = "";
2024-08-30T19:43:30.7945747Z                                 int shift = 7;
2024-08-30T19:43:30.7945833Z                     
2024-08-30T19:43:30.7945994Z                                     for (char c : input) {
2024-08-30T19:43:30.7946245Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7946540Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7946656Z                               ...
2024-08-30T19:43:30.7946993Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7947177Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7947491Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7947730Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7948095Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7948227Z                     #include <string>
2024-08-30T19:43:30.7948310Z                     
2024-08-30T19:43:30.7948497Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7948649Z                             std::string result = "";
2024-08-30T19:43:30.7948793Z                                 int shift = 7;
2024-08-30T19:43:30.7948886Z                     
2024-08-30T19:43:30.7949046Z                                     for (char c : input) {
2024-08-30T19:43:30.7949224Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7949526Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7949849Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7950005Z                                                 } else 
2024-08-30T19:43:30.7953189Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7957533Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7957962Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7958086Z                     #include <string>
2024-08-30T19:43:30.7958172Z                     
2024-08-30T19:43:30.7958360Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7958511Z                             std::string result = "";
2024-08-30T19:43:30.7958659Z                                 int shift = 7;
2024-08-30T19:43:30.7958745Z                     
2024-08-30T19:43:30.7958902Z                                     for (char c : input) {
2024-08-30T19:43:30.7959080Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7959469Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7959791Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7960054Z                                                 } else -> #include <iostream>
2024-08-30T19:43:30.7960180Z                     #include <string>
2024-08-30T19:43:30.7960266Z                     
2024-08-30T19:43:30.7960452Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7960604Z                             std::string result = "";
2024-08-30T19:43:30.7960815Z                                 int shift = 7;
2024-08-30T19:43:30.7960900Z                     
2024-08-30T19:43:30.7961061Z                                     for (char c : input) {
2024-08-30T19:43:30.7961236Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7961532Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7961640Z                              ...
2024-08-30T19:43:30.7961973Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7962160Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7962475Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7962713Z [32m      cy:command ✔ [39m type	{, {force: true}
2024-08-30T19:43:30.7963006Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7963128Z                     #include <string>
2024-08-30T19:43:30.7963215Z                     
2024-08-30T19:43:30.7963401Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7963551Z                             std::string result = "";
2024-08-30T19:43:30.7963686Z                                 int shift = 7;
2024-08-30T19:43:30.7963776Z                     
2024-08-30T19:43:30.7963938Z                                     for (char c : input) {
2024-08-30T19:43:30.7964114Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7964531Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7964859Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7965068Z                                                 } else {
2024-08-30T19:43:30.7968794Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7973667Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7974285Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7974429Z                     #include <string>
2024-08-30T19:43:30.7974517Z                     
2024-08-30T19:43:30.7974711Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7974871Z                             std::string result = "";
2024-08-30T19:43:30.7975012Z                                 int shift = 7;
2024-08-30T19:43:30.7975097Z                     
2024-08-30T19:43:30.7975350Z                                     for (char c : input) {
2024-08-30T19:43:30.7975526Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7975829Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7976160Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7976420Z                                                 } else  -> #include <iostream>
2024-08-30T19:43:30.7976545Z                     #include <string>
2024-08-30T19:43:30.7976636Z                     
2024-08-30T19:43:30.7976813Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7976968Z                             std::string result = "";
2024-08-30T19:43:30.7977111Z                                 int shift = 7;
2024-08-30T19:43:30.7977194Z                     
2024-08-30T19:43:30.7977356Z                                     for (char c : input) {
2024-08-30T19:43:30.7977533Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7977824Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7977939Z                             ...
2024-08-30T19:43:30.7978267Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7978450Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7978767Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7979098Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.7979232Z                     , {force: true}
2024-08-30T19:43:30.7979536Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7979664Z                     #include <string>
2024-08-30T19:43:30.7979756Z                     
2024-08-30T19:43:30.7979939Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7980104Z                             std::string result = "";
2024-08-30T19:43:30.7980245Z                                 int shift = 7;
2024-08-30T19:43:30.7980331Z                     
2024-08-30T19:43:30.7980496Z                                     for (char c : input) {
2024-08-30T19:43:30.7980672Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7980966Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7981300Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7981453Z                                                 } else {
2024-08-30T19:43:30.7981596Z                                                     
2024-08-30T19:43:30.7984767Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.7989177Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.7989677Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.7989805Z                     #include <string>
2024-08-30T19:43:30.7989890Z                     
2024-08-30T19:43:30.7990080Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7990235Z                             std::string result = "";
2024-08-30T19:43:30.7990371Z                                 int shift = 7;
2024-08-30T19:43:30.7990471Z                     
2024-08-30T19:43:30.7990629Z                                     for (char c : input) {
2024-08-30T19:43:30.7990805Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7991098Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7991424Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7991681Z                                                 } else { -> #include <iostream>
2024-08-30T19:43:30.7991928Z                     #include <string>
2024-08-30T19:43:30.7992017Z                     
2024-08-30T19:43:30.7992204Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7992360Z                             std::string result = "";
2024-08-30T19:43:30.7992504Z                                 int shift = 7;
2024-08-30T19:43:30.7992593Z                     
2024-08-30T19:43:30.7992758Z                                     for (char c : input) {
2024-08-30T19:43:30.7992938Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7993254Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7993365Z                            ...
2024-08-30T19:43:30.7993719Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7993904Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.7994220Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.7994464Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.7994762Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.7994890Z                     #include <string>
2024-08-30T19:43:30.7994975Z                     
2024-08-30T19:43:30.7995165Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.7995332Z                             std::string result = "";
2024-08-30T19:43:30.7995469Z                                 int shift = 7;
2024-08-30T19:43:30.7995562Z                     
2024-08-30T19:43:30.7995725Z                                     for (char c : input) {
2024-08-30T19:43:30.7995895Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.7996273Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.7996602Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.7996761Z                                                 } else {
2024-08-30T19:43:30.7996903Z                                                      
2024-08-30T19:43:30.8000055Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8004450Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8004874Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8005143Z                     #include <string>
2024-08-30T19:43:30.8005243Z                     
2024-08-30T19:43:30.8005426Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8005589Z                             std::string result = "";
2024-08-30T19:43:30.8005725Z                                 int shift = 7;
2024-08-30T19:43:30.8005815Z                     
2024-08-30T19:43:30.8005985Z                                     for (char c : input) {
2024-08-30T19:43:30.8006155Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8006453Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8006787Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8006941Z                                                 } else {
2024-08-30T19:43:30.8007192Z                                                      -> #include <iostream>
2024-08-30T19:43:30.8007313Z                     #include <string>
2024-08-30T19:43:30.8007398Z                     
2024-08-30T19:43:30.8007584Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8007739Z                             std::string result = "";
2024-08-30T19:43:30.8007874Z                                 int shift = 7;
2024-08-30T19:43:30.8007974Z                     
2024-08-30T19:43:30.8008133Z                                     for (char c : input) {
2024-08-30T19:43:30.8008303Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8008490Z                                                                 char base  ...
2024-08-30T19:43:30.8008890Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8009082Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8009392Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8009644Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8009931Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8010055Z                     #include <string>
2024-08-30T19:43:30.8010147Z                     
2024-08-30T19:43:30.8010329Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8010485Z                             std::string result = "";
2024-08-30T19:43:30.8010712Z                                 int shift = 7;
2024-08-30T19:43:30.8010796Z                     
2024-08-30T19:43:30.8011124Z                                     for (char c : input) {
2024-08-30T19:43:30.8011424Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8011917Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8012352Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8012692Z                                                 } else {
2024-08-30T19:43:30.8012846Z                                                       
2024-08-30T19:43:30.8016041Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8020392Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8020810Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8020944Z                     #include <string>
2024-08-30T19:43:30.8021032Z                     
2024-08-30T19:43:30.8021222Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8021378Z                             std::string result = "";
2024-08-30T19:43:30.8021517Z                                 int shift = 7;
2024-08-30T19:43:30.8021606Z                     
2024-08-30T19:43:30.8021765Z                                     for (char c : input) {
2024-08-30T19:43:30.8021940Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8022238Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8022556Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8022893Z                                                 } else {
2024-08-30T19:43:30.8023142Z                                                       -> #include <iostream>
2024-08-30T19:43:30.8023268Z                     #include <string>
2024-08-30T19:43:30.8023366Z                     
2024-08-30T19:43:30.8023547Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8023706Z                             std::string result = "";
2024-08-30T19:43:30.8023846Z                                 int shift = 7;
2024-08-30T19:43:30.8023932Z                     
2024-08-30T19:43:30.8024182Z                                     for (char c : input) {
2024-08-30T19:43:30.8024351Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8024532Z                                                                 char base ...
2024-08-30T19:43:30.8024869Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8025053Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8025364Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8025726Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8026023Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8026156Z                     #include <string>
2024-08-30T19:43:30.8026241Z                     
2024-08-30T19:43:30.8026425Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8026579Z                             std::string result = "";
2024-08-30T19:43:30.8026719Z                                 int shift = 7;
2024-08-30T19:43:30.8026814Z                     
2024-08-30T19:43:30.8026971Z                                     for (char c : input) {
2024-08-30T19:43:30.8027137Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8027441Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8027757Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8027925Z                                                 } else {
2024-08-30T19:43:30.8028070Z                                                        
2024-08-30T19:43:30.8031216Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8035545Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8036048Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8036174Z                     #include <string>
2024-08-30T19:43:30.8036273Z                     
2024-08-30T19:43:30.8036457Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8036621Z                             std::string result = "";
2024-08-30T19:43:30.8036757Z                                 int shift = 7;
2024-08-30T19:43:30.8036842Z                     
2024-08-30T19:43:30.8037011Z                                     for (char c : input) {
2024-08-30T19:43:30.8037253Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8037551Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8037883Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8038043Z                                                 } else {
2024-08-30T19:43:30.8038293Z                                                        -> #include <iostream>
2024-08-30T19:43:30.8038531Z                     #include <string>
2024-08-30T19:43:30.8038620Z                     
2024-08-30T19:43:30.8038808Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8038961Z                             std::string result = "";
2024-08-30T19:43:30.8039095Z                                 int shift = 7;
2024-08-30T19:43:30.8039189Z                     
2024-08-30T19:43:30.8039351Z                                     for (char c : input) {
2024-08-30T19:43:30.8039521Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8039711Z                                                                 char bas ...
2024-08-30T19:43:30.8040041Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8040234Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8040541Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8040787Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8041084Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8041209Z                     #include <string>
2024-08-30T19:43:30.8041301Z                     
2024-08-30T19:43:30.8041477Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8041629Z                             std::string result = "";
2024-08-30T19:43:30.8041775Z                                 int shift = 7;
2024-08-30T19:43:30.8041862Z                     
2024-08-30T19:43:30.8042028Z                                     for (char c : input) {
2024-08-30T19:43:30.8042194Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8042490Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8042824Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8042980Z                                                 } else {
2024-08-30T19:43:30.8043122Z                                                         
2024-08-30T19:43:30.8046280Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8050696Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8051337Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8051477Z                     #include <string>
2024-08-30T19:43:30.8051736Z                     
2024-08-30T19:43:30.8051934Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8052099Z                             std::string result = "";
2024-08-30T19:43:30.8052237Z                                 int shift = 7;
2024-08-30T19:43:30.8052331Z                     
2024-08-30T19:43:30.8052493Z                                     for (char c : input) {
2024-08-30T19:43:30.8052674Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8052985Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8053307Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8053469Z                                                 } else {
2024-08-30T19:43:30.8053718Z                                                         -> #include <iostream>
2024-08-30T19:43:30.8053842Z                     #include <string>
2024-08-30T19:43:30.8053934Z                     
2024-08-30T19:43:30.8054114Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8054266Z                             std::string result = "";
2024-08-30T19:43:30.8054410Z                                 int shift = 7;
2024-08-30T19:43:30.8054493Z                     
2024-08-30T19:43:30.8054659Z                                     for (char c : input) {
2024-08-30T19:43:30.8054833Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8055014Z                                                                 char ba ...
2024-08-30T19:43:30.8055352Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8055541Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8055859Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8056101Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8056398Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8056532Z                     #include <string>
2024-08-30T19:43:30.8056617Z                     
2024-08-30T19:43:30.8056804Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8056956Z                             std::string result = "";
2024-08-30T19:43:30.8057091Z                                 int shift = 7;
2024-08-30T19:43:30.8057184Z                     
2024-08-30T19:43:30.8057341Z                                     for (char c : input) {
2024-08-30T19:43:30.8057511Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8057813Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8058230Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8058389Z                                                 } else {
2024-08-30T19:43:30.8058550Z                                                          
2024-08-30T19:43:30.8061705Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8066269Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8066708Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8066838Z                     #include <string>
2024-08-30T19:43:30.8066932Z                     
2024-08-30T19:43:30.8067124Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8067281Z                             std::string result = "";
2024-08-30T19:43:30.8067428Z                                 int shift = 7;
2024-08-30T19:43:30.8067515Z                     
2024-08-30T19:43:30.8067683Z                                     for (char c : input) {
2024-08-30T19:43:30.8067857Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8068151Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8068481Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8068635Z                                                 } else {
2024-08-30T19:43:30.8068886Z                                                          -> #include <iostream>
2024-08-30T19:43:30.8069011Z                     #include <string>
2024-08-30T19:43:30.8069101Z                     
2024-08-30T19:43:30.8069287Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8069441Z                             std::string result = "";
2024-08-30T19:43:30.8069575Z                                 int shift = 7;
2024-08-30T19:43:30.8069665Z                     
2024-08-30T19:43:30.8069827Z                                     for (char c : input) {
2024-08-30T19:43:30.8070000Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8070183Z                                                                 char b ...
2024-08-30T19:43:30.8070512Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8070958Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8071336Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8071579Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8071885Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8072012Z                     #include <string>
2024-08-30T19:43:30.8072102Z                     
2024-08-30T19:43:30.8072283Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8072437Z                             std::string result = "";
2024-08-30T19:43:30.8072578Z                                 int shift = 7;
2024-08-30T19:43:30.8072760Z                     
2024-08-30T19:43:30.8072928Z                                     for (char c : input) {
2024-08-30T19:43:30.8073096Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8073395Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8073732Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8073886Z                                                 } else {
2024-08-30T19:43:30.8074149Z                                                           
2024-08-30T19:43:30.8077339Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8081875Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8082443Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8082581Z                     #include <string>
2024-08-30T19:43:30.8082667Z                     
2024-08-30T19:43:30.8082867Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8083025Z                             std::string result = "";
2024-08-30T19:43:30.8083171Z                                 int shift = 7;
2024-08-30T19:43:30.8083261Z                     
2024-08-30T19:43:30.8083421Z                                     for (char c : input) {
2024-08-30T19:43:30.8083595Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8083903Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8084226Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8084494Z                                                 } else {
2024-08-30T19:43:30.8084749Z                                                           -> #include <iostream>
2024-08-30T19:43:30.8084875Z                     #include <string>
2024-08-30T19:43:30.8084972Z                     
2024-08-30T19:43:30.8085156Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8085310Z                             std::string result = "";
2024-08-30T19:43:30.8085454Z                                 int shift = 7;
2024-08-30T19:43:30.8085538Z                     
2024-08-30T19:43:30.8085703Z                                     for (char c : input) {
2024-08-30T19:43:30.8085940Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8086116Z                                                                 char  ...
2024-08-30T19:43:30.8086458Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8086648Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8086963Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8087205Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8087613Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8087749Z                     #include <string>
2024-08-30T19:43:30.8087834Z                     
2024-08-30T19:43:30.8088026Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8088179Z                             std::string result = "";
2024-08-30T19:43:30.8088316Z                                 int shift = 7;
2024-08-30T19:43:30.8088410Z                     
2024-08-30T19:43:30.8088573Z                                     for (char c : input) {
2024-08-30T19:43:30.8088748Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8089053Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8089381Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8089542Z                                                 } else {
2024-08-30T19:43:30.8089699Z                                                            
2024-08-30T19:43:30.8093063Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8097403Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8097942Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8098070Z                     #include <string>
2024-08-30T19:43:30.8098163Z                     
2024-08-30T19:43:30.8098354Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8098511Z                             std::string result = "";
2024-08-30T19:43:30.8098653Z                                 int shift = 7;
2024-08-30T19:43:30.8098737Z                     
2024-08-30T19:43:30.8098901Z                                     for (char c : input) {
2024-08-30T19:43:30.8099071Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8099467Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8099791Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8099947Z                                                 } else {
2024-08-30T19:43:30.8100200Z                                                            -> #include <iostream>
2024-08-30T19:43:30.8100325Z                     #include <string>
2024-08-30T19:43:30.8100408Z                     
2024-08-30T19:43:30.8100734Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8100892Z                             std::string result = "";
2024-08-30T19:43:30.8101029Z                                 int shift = 7;
2024-08-30T19:43:30.8101123Z                     
2024-08-30T19:43:30.8101280Z                                     for (char c : input) {
2024-08-30T19:43:30.8101450Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8101632Z                                                                 char ...
2024-08-30T19:43:30.8101961Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8102151Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8102462Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8102702Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8102995Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8103126Z                     #include <string>
2024-08-30T19:43:30.8103219Z                     
2024-08-30T19:43:30.8103400Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8103553Z                             std::string result = "";
2024-08-30T19:43:30.8103694Z                                 int shift = 7;
2024-08-30T19:43:30.8103779Z                     
2024-08-30T19:43:30.8103943Z                                     for (char c : input) {
2024-08-30T19:43:30.8104122Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8104411Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8104739Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8104889Z                                                 } else {
2024-08-30T19:43:30.8105044Z                                                             
2024-08-30T19:43:30.8108195Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8112605Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8113093Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8113228Z                     #include <string>
2024-08-30T19:43:30.8113313Z                     
2024-08-30T19:43:30.8113620Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8113780Z                             std::string result = "";
2024-08-30T19:43:30.8113916Z                                 int shift = 7;
2024-08-30T19:43:30.8114010Z                     
2024-08-30T19:43:30.8114171Z                                     for (char c : input) {
2024-08-30T19:43:30.8114342Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8114656Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8114976Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8115132Z                                                 } else {
2024-08-30T19:43:30.8115388Z                                                             -> #include <iostream>
2024-08-30T19:43:30.8115507Z                     #include <string>
2024-08-30T19:43:30.8115598Z                     
2024-08-30T19:43:30.8115780Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8115931Z                             std::string result = "";
2024-08-30T19:43:30.8116074Z                                 int shift = 7;
2024-08-30T19:43:30.8116159Z                     
2024-08-30T19:43:30.8116324Z                                     for (char c : input) {
2024-08-30T19:43:30.8116493Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8116669Z                                                                 cha ...
2024-08-30T19:43:30.8117005Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8117186Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8117500Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8117739Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8118026Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8118165Z                     #include <string>
2024-08-30T19:43:30.8118250Z                     
2024-08-30T19:43:30.8118435Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8118588Z                             std::string result = "";
2024-08-30T19:43:30.8118721Z                                 int shift = 7;
2024-08-30T19:43:30.8118810Z                     
2024-08-30T19:43:30.8118974Z                                     for (char c : input) {
2024-08-30T19:43:30.8119142Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8119436Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8119837Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8119994Z                                                 } else {
2024-08-30T19:43:30.8120140Z                                                              
2024-08-30T19:43:30.8123303Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8127820Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8128261Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8128390Z                     #include <string>
2024-08-30T19:43:30.8128482Z                     
2024-08-30T19:43:30.8128669Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8128834Z                             std::string result = "";
2024-08-30T19:43:30.8128981Z                                 int shift = 7;
2024-08-30T19:43:30.8129066Z                     
2024-08-30T19:43:30.8129235Z                                     for (char c : input) {
2024-08-30T19:43:30.8129406Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8129710Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8130039Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8130192Z                                                 } else {
2024-08-30T19:43:30.8130452Z                                                              -> #include <iostream>
2024-08-30T19:43:30.8130581Z                     #include <string>
2024-08-30T19:43:30.8130666Z                     
2024-08-30T19:43:30.8130856Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8131131Z                             std::string result = "";
2024-08-30T19:43:30.8131274Z                                 int shift = 7;
2024-08-30T19:43:30.8131365Z                     
2024-08-30T19:43:30.8131526Z                                     for (char c : input) {
2024-08-30T19:43:30.8131695Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8131875Z                                                                 ch ...
2024-08-30T19:43:30.8132208Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8132404Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8133164Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8133593Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8133911Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8134147Z                     #include <string>
2024-08-30T19:43:30.8134318Z                     
2024-08-30T19:43:30.8134653Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8134873Z                             std::string result = "";
2024-08-30T19:43:30.8135023Z                                 int shift = 7;
2024-08-30T19:43:30.8135111Z                     
2024-08-30T19:43:30.8135275Z                                     for (char c : input) {
2024-08-30T19:43:30.8135604Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8135935Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8136264Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8136422Z                                                 } else {
2024-08-30T19:43:30.8136576Z                                                               
2024-08-30T19:43:30.8139925Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8144277Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8144691Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8144827Z                     #include <string>
2024-08-30T19:43:30.8144913Z                     
2024-08-30T19:43:30.8145102Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8145267Z                             std::string result = "";
2024-08-30T19:43:30.8145406Z                                 int shift = 7;
2024-08-30T19:43:30.8145496Z                     
2024-08-30T19:43:30.8145660Z                                     for (char c : input) {
2024-08-30T19:43:30.8145831Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8146135Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8146453Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8146611Z                                                 } else {
2024-08-30T19:43:30.8146970Z                                                               -> #include <iostream>
2024-08-30T19:43:30.8147091Z                     #include <string>
2024-08-30T19:43:30.8147181Z                     
2024-08-30T19:43:30.8147366Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8147519Z                             std::string result = "";
2024-08-30T19:43:30.8147663Z                                 int shift = 7;
2024-08-30T19:43:30.8147746Z                     
2024-08-30T19:43:30.8147910Z                                     for (char c : input) {
2024-08-30T19:43:30.8148079Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8148313Z                                                                 c ...
2024-08-30T19:43:30.8148651Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8148835Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8149151Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8149390Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8149681Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8149813Z                     #include <string>
2024-08-30T19:43:30.8150020Z                     
2024-08-30T19:43:30.8150207Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8150372Z                             std::string result = "";
2024-08-30T19:43:30.8150510Z                                 int shift = 7;
2024-08-30T19:43:30.8150600Z                     
2024-08-30T19:43:30.8150758Z                                     for (char c : input) {
2024-08-30T19:43:30.8150930Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8151232Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8151549Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8151717Z                                                 } else {
2024-08-30T19:43:30.8151872Z                                                                
2024-08-30T19:43:30.8155038Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
2024-08-30T19:43:30.8159377Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8159797Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8159995Z                     #include <string>
2024-08-30T19:43:30.8160095Z                     
2024-08-30T19:43:30.8160280Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8160443Z                             std::string result = "";
2024-08-30T19:43:30.8160586Z                                 int shift = 7;
2024-08-30T19:43:30.8160671Z                     
2024-08-30T19:43:30.8160837Z                                     for (char c : input) {
2024-08-30T19:43:30.8161009Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8161307Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8161707Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8161862Z                                                 } else {
2024-08-30T19:43:30.8162124Z                                                                -> #include <iostream>
2024-08-30T19:43:30.8162252Z                     #include <string>
2024-08-30T19:43:30.8162336Z                     
2024-08-30T19:43:30.8162633Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8162789Z                             std::string result = "";
2024-08-30T19:43:30.8162926Z                                 int shift = 7;
2024-08-30T19:43:30.8163015Z                     
2024-08-30T19:43:30.8163172Z                                     for (char c : input) {
2024-08-30T19:43:30.8163349Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8163519Z                                                                  ...
2024-08-30T19:43:30.8163851Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8164042Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8164348Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8164595Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8164895Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8165073Z                     #include <string>
2024-08-30T19:43:30.8165178Z                     
2024-08-30T19:43:30.8165360Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8165513Z                             std::string result = "";
2024-08-30T19:43:30.8165654Z                                 int shift = 7;
2024-08-30T19:43:30.8165742Z                     
2024-08-30T19:43:30.8165900Z                                     for (char c : input) {
2024-08-30T19:43:30.8166080Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8166378Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8166706Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8166862Z                                                 } else {
2024-08-30T19:43:30.8167016Z                                                                 
2024-08-30T19:43:30.8170182Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?" ...
2024-08-30T19:43:30.8175088Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8175655Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8175799Z                     #include <string>
2024-08-30T19:43:30.8175887Z                     
2024-08-30T19:43:30.8176082Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8176382Z                             std::string result = "";
2024-08-30T19:43:30.8176526Z                                 int shift = 7;
2024-08-30T19:43:30.8176616Z                     
2024-08-30T19:43:30.8176778Z                                     for (char c : input) {
2024-08-30T19:43:30.8176955Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8177264Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8177590Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8177750Z                                                 } else {
2024-08-30T19:43:30.8178011Z                                                                 -> #include <iostream>
2024-08-30T19:43:30.8178134Z                     #include <string>
2024-08-30T19:43:30.8178227Z                     
2024-08-30T19:43:30.8178415Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8178570Z                             std::string result = "";
2024-08-30T19:43:30.8178714Z                                 int shift = 7;
2024-08-30T19:43:30.8178798Z                     
2024-08-30T19:43:30.8178958Z                                     for (char c : input) {
2024-08-30T19:43:30.8179135Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8179297Z                                                                 ...
2024-08-30T19:43:30.8179623Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8179810Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8180115Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8180365Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.8180657Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8180789Z                     #include <string>
2024-08-30T19:43:30.8180883Z                     
2024-08-30T19:43:30.8181067Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8181229Z                             std::string result = "";
2024-08-30T19:43:30.8181364Z                                 int shift = 7;
2024-08-30T19:43:30.8181454Z                     
2024-08-30T19:43:30.8181616Z                                     for (char c : input) {
2024-08-30T19:43:30.8181790Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8182087Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8182405Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8182645Z                                                 } else {
2024-08-30T19:43:30.8182815Z                                                                 r
2024-08-30T19:43:30.8186017Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ? ...
2024-08-30T19:43:30.8190539Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8190967Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8191102Z                     #include <string>
2024-08-30T19:43:30.8191193Z                     
2024-08-30T19:43:30.8191380Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8191541Z                             std::string result = "";
2024-08-30T19:43:30.8191690Z                                 int shift = 7;
2024-08-30T19:43:30.8191776Z                     
2024-08-30T19:43:30.8191939Z                                     for (char c : input) {
2024-08-30T19:43:30.8192117Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8192415Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8192747Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8192898Z                                                 } else {
2024-08-30T19:43:30.8193166Z                                                                  -> #include <iostream>
2024-08-30T19:43:30.8193294Z                     #include <string>
2024-08-30T19:43:30.8193379Z                     
2024-08-30T19:43:30.8193573Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8193731Z                             std::string result = "";
2024-08-30T19:43:30.8193866Z                                 int shift = 7;
2024-08-30T19:43:30.8193956Z                     
2024-08-30T19:43:30.8194120Z                                     for (char c : input) {
2024-08-30T19:43:30.8194290Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8194451Z                                                                ...
2024-08-30T19:43:30.8194785Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8194976Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8195292Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8195616Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.8195918Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8196045Z                     #include <string>
2024-08-30T19:43:30.8196149Z                     
2024-08-30T19:43:30.8196334Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8196491Z                             std::string result = "";
2024-08-30T19:43:30.8196633Z                                 int shift = 7;
2024-08-30T19:43:30.8196718Z                     
2024-08-30T19:43:30.8196878Z                                     for (char c : input) {
2024-08-30T19:43:30.8197128Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8197430Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8197760Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8197918Z                                                 } else {
2024-08-30T19:43:30.8198079Z                                                                 re
2024-08-30T19:43:30.8201378Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z'  ...
2024-08-30T19:43:30.8205724Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8206142Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8206280Z                     #include <string>
2024-08-30T19:43:30.8206366Z                     
2024-08-30T19:43:30.8206558Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8206721Z                             std::string result = "";
2024-08-30T19:43:30.8206861Z                                 int shift = 7;
2024-08-30T19:43:30.8206955Z                     
2024-08-30T19:43:30.8207116Z                                     for (char c : input) {
2024-08-30T19:43:30.8207285Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8207585Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8207907Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8208064Z                                                 } else {
2024-08-30T19:43:30.8208411Z                                                                 r -> #include <iostream>
2024-08-30T19:43:30.8208532Z                     #include <string>
2024-08-30T19:43:30.8208621Z                     
2024-08-30T19:43:30.8208804Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8208963Z                             std::string result = "";
2024-08-30T19:43:30.8209106Z                                 int shift = 7;
2024-08-30T19:43:30.8209190Z                     
2024-08-30T19:43:30.8209350Z                                     for (char c : input) {
2024-08-30T19:43:30.8209525Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8209757Z                                                               ...
2024-08-30T19:43:30.8210098Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8210282Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8210587Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8210839Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.8211317Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8211450Z                     #include <string>
2024-08-30T19:43:30.8211775Z                     
2024-08-30T19:43:30.8211970Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8212132Z                             std::string result = "";
2024-08-30T19:43:30.8212270Z                                 int shift = 7;
2024-08-30T19:43:30.8212361Z                     
2024-08-30T19:43:30.8212521Z                                     for (char c : input) {
2024-08-30T19:43:30.8212696Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8213009Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8213336Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8213492Z                                                 } else {
2024-08-30T19:43:30.8213667Z                                                                 res
2024-08-30T19:43:30.8216860Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            res","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ...
2024-08-30T19:43:30.8221189Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8221605Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8221825Z                     #include <string>
2024-08-30T19:43:30.8221917Z                     
2024-08-30T19:43:30.8222100Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8222262Z                             std::string result = "";
2024-08-30T19:43:30.8222406Z                                 int shift = 7;
2024-08-30T19:43:30.8222492Z                     
2024-08-30T19:43:30.8222652Z                                     for (char c : input) {
2024-08-30T19:43:30.8222829Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8223125Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8223537Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8223704Z                                                 } else {
2024-08-30T19:43:30.8224019Z                                                                 re -> #include <iostream>
2024-08-30T19:43:30.8224143Z                     #include <string>
2024-08-30T19:43:30.8224227Z                     
2024-08-30T19:43:30.8224413Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8224683Z                             std::string result = "";
2024-08-30T19:43:30.8224825Z                                 int shift = 7;
2024-08-30T19:43:30.8224914Z                     
2024-08-30T19:43:30.8225073Z                                     for (char c : input) {
2024-08-30T19:43:30.8225242Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8225411Z                                                              ...
2024-08-30T19:43:30.8225741Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8225933Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8226240Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8226490Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.8226785Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8226909Z                     #include <string>
2024-08-30T19:43:30.8227009Z                     
2024-08-30T19:43:30.8227189Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8227345Z                             std::string result = "";
2024-08-30T19:43:30.8227488Z                                 int shift = 7;
2024-08-30T19:43:30.8227573Z                     
2024-08-30T19:43:30.8227730Z                                     for (char c : input) {
2024-08-30T19:43:30.8227909Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8228204Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8228531Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8228688Z                                                 } else {
2024-08-30T19:43:30.8228854Z                                                                 resu
2024-08-30T19:43:30.8232039Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            resu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z ...
2024-08-30T19:43:30.8236459Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8236937Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8237076Z                     #include <string>
2024-08-30T19:43:30.8237161Z                     
2024-08-30T19:43:30.8237349Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8237640Z                             std::string result = "";
2024-08-30T19:43:30.8237784Z                                 int shift = 7;
2024-08-30T19:43:30.8237874Z                     
2024-08-30T19:43:30.8238034Z                                     for (char c : input) {
2024-08-30T19:43:30.8238204Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8238511Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8238833Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8238990Z                                                 } else {
2024-08-30T19:43:30.8239264Z                                                                 res -> #include <iostream>
2024-08-30T19:43:30.8239386Z                     #include <string>
2024-08-30T19:43:30.8239476Z                     
2024-08-30T19:43:30.8239656Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8239819Z                             std::string result = "";
2024-08-30T19:43:30.8239960Z                                 int shift = 7;
2024-08-30T19:43:30.8240044Z                     
2024-08-30T19:43:30.8240202Z                                     for (char c : input) {
2024-08-30T19:43:30.8240374Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8240532Z                                                             ...
2024-08-30T19:43:30.8240865Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8241048Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8241356Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8241606Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.8241894Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8242024Z                     #include <string>
2024-08-30T19:43:30.8242115Z                     
2024-08-30T19:43:30.8242296Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8242453Z                             std::string result = "";
2024-08-30T19:43:30.8242585Z                                 int shift = 7;
2024-08-30T19:43:30.8242675Z                     
2024-08-30T19:43:30.8242833Z                                     for (char c : input) {
2024-08-30T19:43:30.8243005Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8243306Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8243624Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8243856Z                                                 } else {
2024-08-30T19:43:30.8244031Z                                                                 resul
2024-08-30T19:43:30.8247217Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            resul","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= ' ...
2024-08-30T19:43:30.8252017Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8252479Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8252612Z                     #include <string>
2024-08-30T19:43:30.8252705Z                     
2024-08-30T19:43:30.8252892Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8253052Z                             std::string result = "";
2024-08-30T19:43:30.8253196Z                                 int shift = 7;
2024-08-30T19:43:30.8253282Z                     
2024-08-30T19:43:30.8253440Z                                     for (char c : input) {
2024-08-30T19:43:30.8253615Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8253906Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8254237Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8254385Z                                                 } else {
2024-08-30T19:43:30.8254663Z                                                                 resu -> #include <iostream>
2024-08-30T19:43:30.8254789Z                     #include <string>
2024-08-30T19:43:30.8254874Z                     
2024-08-30T19:43:30.8255058Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8255218Z                             std::string result = "";
2024-08-30T19:43:30.8255355Z                                 int shift = 7;
2024-08-30T19:43:30.8255443Z                     
2024-08-30T19:43:30.8255600Z                                     for (char c : input) {
2024-08-30T19:43:30.8255766Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8255927Z                                                            ...
2024-08-30T19:43:30.8256249Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8256437Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8256743Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8257078Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.8257375Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8257502Z                     #include <string>
2024-08-30T19:43:30.8257602Z                     
2024-08-30T19:43:30.8257788Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8257942Z                             std::string result = "";
2024-08-30T19:43:30.8258085Z                                 int shift = 7;
2024-08-30T19:43:30.8258169Z                     
2024-08-30T19:43:30.8258328Z                                     for (char c : input) {
2024-08-30T19:43:30.8258593Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8258894Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8259222Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8259378Z                                                 } else {
2024-08-30T19:43:30.8259549Z                                                                 result
2024-08-30T19:43:30.8262889Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <=  ...
2024-08-30T19:43:30.8267271Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8267691Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8267827Z                     #include <string>
2024-08-30T19:43:30.8267912Z                     
2024-08-30T19:43:30.8268099Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8268259Z                             std::string result = "";
2024-08-30T19:43:30.8268397Z                                 int shift = 7;
2024-08-30T19:43:30.8268486Z                     
2024-08-30T19:43:30.8268646Z                                     for (char c : input) {
2024-08-30T19:43:30.8268814Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8269115Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8269441Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8269596Z                                                 } else {
2024-08-30T19:43:30.8269952Z                                                                 resul -> #include <iostream>
2024-08-30T19:43:30.8270073Z                     #include <string>
2024-08-30T19:43:30.8270164Z                     
2024-08-30T19:43:30.8270341Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8270501Z                             std::string result = "";
2024-08-30T19:43:30.8270643Z                                 int shift = 7;
2024-08-30T19:43:30.8270728Z                     
2024-08-30T19:43:30.8270886Z                                     for (char c : input) {
2024-08-30T19:43:30.8271064Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8271285Z                                                           ...
2024-08-30T19:43:30.8271621Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8271807Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8272112Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8272367Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8272655Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8272785Z                     #include <string>
2024-08-30T19:43:30.8272870Z                     
2024-08-30T19:43:30.8273170Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8273333Z                             std::string result = "";
2024-08-30T19:43:30.8273467Z                                 int shift = 7;
2024-08-30T19:43:30.8273556Z                     
2024-08-30T19:43:30.8273712Z                                     for (char c : input) {
2024-08-30T19:43:30.8273884Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8274188Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8274512Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8274667Z                                                 } else {
2024-08-30T19:43:30.8274843Z                                                                 result 
2024-08-30T19:43:30.8278030Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= ...
2024-08-30T19:43:30.8282341Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8282759Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8282963Z                     #include <string>
2024-08-30T19:43:30.8283055Z                     
2024-08-30T19:43:30.8283238Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8283396Z                             std::string result = "";
2024-08-30T19:43:30.8283537Z                                 int shift = 7;
2024-08-30T19:43:30.8283622Z                     
2024-08-30T19:43:30.8283781Z                                     for (char c : input) {
2024-08-30T19:43:30.8283956Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8284254Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8284670Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8284821Z                                                 } else {
2024-08-30T19:43:30.8285100Z                                                                 result -> #include <iostream>
2024-08-30T19:43:30.8285225Z                     #include <string>
2024-08-30T19:43:30.8285309Z                     
2024-08-30T19:43:30.8285493Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8285768Z                             std::string result = "";
2024-08-30T19:43:30.8286015Z                                 int shift = 7;
2024-08-30T19:43:30.8286150Z                     
2024-08-30T19:43:30.8286379Z                                     for (char c : input) {
2024-08-30T19:43:30.8286555Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8286718Z                                                          ...
2024-08-30T19:43:30.8287071Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8287266Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8287572Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8287818Z [32m      cy:command ✔ [39m type	+, {force: true}
2024-08-30T19:43:30.8288116Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8288239Z                     #include <string>
2024-08-30T19:43:30.8288328Z                     
2024-08-30T19:43:30.8288519Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8288670Z                             std::string result = "";
2024-08-30T19:43:30.8288809Z                                 int shift = 7;
2024-08-30T19:43:30.8288893Z                     
2024-08-30T19:43:30.8289049Z                                     for (char c : input) {
2024-08-30T19:43:30.8289227Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8289522Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8289852Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8290006Z                                                 } else {
2024-08-30T19:43:30.8290182Z                                                                 result +
2024-08-30T19:43:30.8293675Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result +","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c < ...
2024-08-30T19:43:30.8298150Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8298646Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8298784Z                     #include <string>
2024-08-30T19:43:30.8298869Z                     
2024-08-30T19:43:30.8299116Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8299635Z                             std::string result = "";
2024-08-30T19:43:30.8299922Z                                 int shift = 7;
2024-08-30T19:43:30.8300072Z                     
2024-08-30T19:43:30.8300253Z                                     for (char c : input) {
2024-08-30T19:43:30.8300432Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8301035Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8301565Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8301740Z                                                 } else {
2024-08-30T19:43:30.8302032Z                                                                 result  -> #include <iostream>
2024-08-30T19:43:30.8302154Z                     #include <string>
2024-08-30T19:43:30.8302246Z                     
2024-08-30T19:43:30.8302439Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8302603Z                             std::string result = "";
2024-08-30T19:43:30.8302750Z                                 int shift = 7;
2024-08-30T19:43:30.8302835Z                     
2024-08-30T19:43:30.8302997Z                                     for (char c : input) {
2024-08-30T19:43:30.8303177Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8303330Z                                                         ...
2024-08-30T19:43:30.8303686Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8303879Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8304190Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8304441Z [32m      cy:command ✔ [39m type	=, {force: true}
2024-08-30T19:43:30.8304730Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8304867Z                     #include <string>
2024-08-30T19:43:30.8304952Z                     
2024-08-30T19:43:30.8305143Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8305308Z                             std::string result = "";
2024-08-30T19:43:30.8305447Z                                 int shift = 7;
2024-08-30T19:43:30.8305539Z                     
2024-08-30T19:43:30.8305698Z                                     for (char c : input) {
2024-08-30T19:43:30.8305870Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8306168Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8306488Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8306791Z                                                 } else {
2024-08-30T19:43:30.8306975Z                                                                 result +=
2024-08-30T19:43:30.8310222Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result +=","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c  ...
2024-08-30T19:43:30.8314749Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8315182Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8315317Z                     #include <string>
2024-08-30T19:43:30.8315412Z                     
2024-08-30T19:43:30.8315600Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8315766Z                             std::string result = "";
2024-08-30T19:43:30.8315912Z                                 int shift = 7;
2024-08-30T19:43:30.8315998Z                     
2024-08-30T19:43:30.8316160Z                                     for (char c : input) {
2024-08-30T19:43:30.8316335Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8316631Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8316962Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8317113Z                                                 } else {
2024-08-30T19:43:30.8317402Z                                                                 result + -> #include <iostream>
2024-08-30T19:43:30.8317530Z                     #include <string>
2024-08-30T19:43:30.8317613Z                     
2024-08-30T19:43:30.8317799Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8317960Z                             std::string result = "";
2024-08-30T19:43:30.8318098Z                                 int shift = 7;
2024-08-30T19:43:30.8318188Z                     
2024-08-30T19:43:30.8318348Z                                     for (char c : input) {
2024-08-30T19:43:30.8318519Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8318674Z                                                        ...
2024-08-30T19:43:30.8319006Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8319195Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8319506Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8319835Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8320136Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8320261Z                     #include <string>
2024-08-30T19:43:30.8320354Z                     
2024-08-30T19:43:30.8320544Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8320701Z                             std::string result = "";
2024-08-30T19:43:30.8320844Z                                 int shift = 7;
2024-08-30T19:43:30.8320930Z                     
2024-08-30T19:43:30.8321090Z                                     for (char c : input) {
2024-08-30T19:43:30.8321342Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8321640Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8321968Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8322125Z                                                 } else {
2024-08-30T19:43:30.8322301Z                                                                 result += 
2024-08-30T19:43:30.8325630Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c ...
2024-08-30T19:43:30.8329986Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8330397Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8330533Z                     #include <string>
2024-08-30T19:43:30.8330618Z                     
2024-08-30T19:43:30.8330813Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8331206Z                             std::string result = "";
2024-08-30T19:43:30.8331411Z                                 int shift = 7;
2024-08-30T19:43:30.8331506Z                     
2024-08-30T19:43:30.8331668Z                                     for (char c : input) {
2024-08-30T19:43:30.8331838Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8332245Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8332569Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8332727Z                                                 } else {
2024-08-30T19:43:30.8333151Z                                                                 result += -> #include <iostream>
2024-08-30T19:43:30.8333273Z                     #include <string>
2024-08-30T19:43:30.8333363Z                     
2024-08-30T19:43:30.8333548Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8333711Z                             std::string result = "";
2024-08-30T19:43:30.8333853Z                                 int shift = 7;
2024-08-30T19:43:30.8333937Z                     
2024-08-30T19:43:30.8334099Z                                     for (char c : input) {
2024-08-30T19:43:30.8334279Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8334510Z                                                       ...
2024-08-30T19:43:30.8334849Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8335032Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8335337Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8335589Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.8335877Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8336006Z                     #include <string>
2024-08-30T19:43:30.8336232Z                     
2024-08-30T19:43:30.8336420Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8336582Z                             std::string result = "";
2024-08-30T19:43:30.8336719Z                                 int shift = 7;
2024-08-30T19:43:30.8336809Z                     
2024-08-30T19:43:30.8336967Z                                     for (char c : input) {
2024-08-30T19:43:30.8337138Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8337438Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8337753Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8337911Z                                                 } else {
2024-08-30T19:43:30.8338094Z                                                                 result += c
2024-08-30T19:43:30.8341301Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' &&  ...
2024-08-30T19:43:30.8345622Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8346042Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8346241Z                     #include <string>
2024-08-30T19:43:30.8346332Z                     
2024-08-30T19:43:30.8346514Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8346675Z                             std::string result = "";
2024-08-30T19:43:30.8346820Z                                 int shift = 7;
2024-08-30T19:43:30.8346904Z                     
2024-08-30T19:43:30.8347062Z                                     for (char c : input) {
2024-08-30T19:43:30.8347240Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8347538Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8347937Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8348089Z                                                 } else {
2024-08-30T19:43:30.8348376Z                                                                 result +=  -> #include <iostream>
2024-08-30T19:43:30.8348501Z                     #include <string>
2024-08-30T19:43:30.8348587Z                     
2024-08-30T19:43:30.8348775Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8349046Z                             std::string result = "";
2024-08-30T19:43:30.8349189Z                                 int shift = 7;
2024-08-30T19:43:30.8349279Z                     
2024-08-30T19:43:30.8349440Z                                     for (char c : input) {
2024-08-30T19:43:30.8349613Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8349770Z                                                      ...
2024-08-30T19:43:30.8350102Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8350291Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8350597Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8350844Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.8351137Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8351260Z                     #include <string>
2024-08-30T19:43:30.8351363Z                     
2024-08-30T19:43:30.8351544Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8351696Z                             std::string result = "";
2024-08-30T19:43:30.8351841Z                                 int shift = 7;
2024-08-30T19:43:30.8351927Z                     
2024-08-30T19:43:30.8352086Z                                     for (char c : input) {
2024-08-30T19:43:30.8352268Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8352732Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8353079Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8353243Z                                                 } else {
2024-08-30T19:43:30.8353425Z                                                                 result += c;
2024-08-30T19:43:30.8356638Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && ...
2024-08-30T19:43:30.8361076Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8361559Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8361698Z                     #include <string>
2024-08-30T19:43:30.8361783Z                     
2024-08-30T19:43:30.8361975Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8362248Z                             std::string result = "";
2024-08-30T19:43:30.8362392Z                                 int shift = 7;
2024-08-30T19:43:30.8362482Z                     
2024-08-30T19:43:30.8362642Z                                     for (char c : input) {
2024-08-30T19:43:30.8362812Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8363154Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8363712Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8363886Z                                                 } else {
2024-08-30T19:43:30.8364194Z                                                                 result += c -> #include <iostream>
2024-08-30T19:43:30.8364320Z                     #include <string>
2024-08-30T19:43:30.8364412Z                     
2024-08-30T19:43:30.8364605Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8364760Z                             std::string result = "";
2024-08-30T19:43:30.8364905Z                                 int shift = 7;
2024-08-30T19:43:30.8364989Z                     
2024-08-30T19:43:30.8365190Z                                     for (char c : input) {
2024-08-30T19:43:30.8365368Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8365516Z                                                     ...
2024-08-30T19:43:30.8365866Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8366052Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8366364Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8366555Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.8366673Z                     , {force: true}
2024-08-30T19:43:30.8366971Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8367105Z                     #include <string>
2024-08-30T19:43:30.8367192Z                     
2024-08-30T19:43:30.8367381Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8367537Z                             std::string result = "";
2024-08-30T19:43:30.8367681Z                                 int shift = 7;
2024-08-30T19:43:30.8367767Z                     
2024-08-30T19:43:30.8367928Z                                     for (char c : input) {
2024-08-30T19:43:30.8368108Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8368402Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8368722Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8368990Z                                                 } else {
2024-08-30T19:43:30.8369173Z                                                                 result += c;
2024-08-30T19:43:30.8369340Z                                                                 
2024-08-30T19:43:30.8372743Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                   ...
2024-08-30T19:43:30.8377388Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8377830Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8377959Z                     #include <string>
2024-08-30T19:43:30.8378046Z                     
2024-08-30T19:43:30.8378242Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8378399Z                             std::string result = "";
2024-08-30T19:43:30.8378536Z                                 int shift = 7;
2024-08-30T19:43:30.8378629Z                     
2024-08-30T19:43:30.8378793Z                                     for (char c : input) {
2024-08-30T19:43:30.8378974Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8379275Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8379598Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8379763Z                                                 } else {
2024-08-30T19:43:30.8380050Z                                                                 result += c; -> #include <iostream>
2024-08-30T19:43:30.8380177Z                     #include <string>
2024-08-30T19:43:30.8380267Z                     
2024-08-30T19:43:30.8380447Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8380606Z                             std::string result = "";
2024-08-30T19:43:30.8380741Z                                 int shift = 7;
2024-08-30T19:43:30.8380825Z                     
2024-08-30T19:43:30.8380993Z                                     for (char c : input) {
2024-08-30T19:43:30.8381165Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8381308Z                                                    ...
2024-08-30T19:43:30.8381641Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8381920Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8382245Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8382485Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8382789Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8382916Z                     #include <string>
2024-08-30T19:43:30.8383002Z                     
2024-08-30T19:43:30.8383195Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8383353Z                             std::string result = "";
2024-08-30T19:43:30.8383492Z                                 int shift = 7;
2024-08-30T19:43:30.8383653Z                     
2024-08-30T19:43:30.8383814Z                                     for (char c : input) {
2024-08-30T19:43:30.8383993Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8384285Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8384610Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8384770Z                                                 } else {
2024-08-30T19:43:30.8385070Z                                                                 result += c;
2024-08-30T19:43:30.8385234Z                                                                  
2024-08-30T19:43:30.8388392Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                  ...
2024-08-30T19:43:30.8392716Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8393129Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8393272Z                     #include <string>
2024-08-30T19:43:30.8393357Z                     
2024-08-30T19:43:30.8393549Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8393706Z                             std::string result = "";
2024-08-30T19:43:30.8393846Z                                 int shift = 7;
2024-08-30T19:43:30.8393941Z                     
2024-08-30T19:43:30.8394104Z                                     for (char c : input) {
2024-08-30T19:43:30.8394274Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8394577Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8394975Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8395134Z                                                 } else {
2024-08-30T19:43:30.8395321Z                                                                 result += c;
2024-08-30T19:43:30.8395584Z                                                                  -> #include <iostream>
2024-08-30T19:43:30.8395712Z                     #include <string>
2024-08-30T19:43:30.8395796Z                     
2024-08-30T19:43:30.8395976Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8396138Z                             std::string result = "";
2024-08-30T19:43:30.8396342Z                                 int shift = 7;
2024-08-30T19:43:30.8396435Z                     
2024-08-30T19:43:30.8396598Z                                     for (char c : input) {
2024-08-30T19:43:30.8396751Z                                                 if ( ...
2024-08-30T19:43:30.8397091Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8397273Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8397584Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8397943Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8398239Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8398369Z                     #include <string>
2024-08-30T19:43:30.8398453Z                     
2024-08-30T19:43:30.8398642Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8398799Z                             std::string result = "";
2024-08-30T19:43:30.8398941Z                                 int shift = 7;
2024-08-30T19:43:30.8399032Z                     
2024-08-30T19:43:30.8399191Z                                     for (char c : input) {
2024-08-30T19:43:30.8399360Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8399665Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8399980Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8400146Z                                                 } else {
2024-08-30T19:43:30.8400328Z                                                                 result += c;
2024-08-30T19:43:30.8400490Z                                                                   
2024-08-30T19:43:30.8403627Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                 ...
2024-08-30T19:43:30.8407954Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8408473Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8408605Z                     #include <string>
2024-08-30T19:43:30.8408689Z                     
2024-08-30T19:43:30.8408871Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8409033Z                             std::string result = "";
2024-08-30T19:43:30.8409238Z                                 int shift = 7;
2024-08-30T19:43:30.8409330Z                     
2024-08-30T19:43:30.8409492Z                                     for (char c : input) {
2024-08-30T19:43:30.8409660Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8409965Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8410291Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8410635Z                                                 } else {
2024-08-30T19:43:30.8410829Z                                                                 result += c;
2024-08-30T19:43:30.8411341Z                                                                   -> #include <iostream>
2024-08-30T19:43:30.8411479Z                     #include <string>
2024-08-30T19:43:30.8411564Z                     
2024-08-30T19:43:30.8411747Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8411916Z                             std::string result = "";
2024-08-30T19:43:30.8412054Z                                 int shift = 7;
2024-08-30T19:43:30.8412138Z                     
2024-08-30T19:43:30.8412307Z                                     for (char c : input) {
2024-08-30T19:43:30.8412460Z                                                 if  ...
2024-08-30T19:43:30.8412809Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8412994Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8413311Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8413559Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8413848Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8413982Z                     #include <string>
2024-08-30T19:43:30.8414067Z                     
2024-08-30T19:43:30.8414247Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8414411Z                             std::string result = "";
2024-08-30T19:43:30.8414547Z                                 int shift = 7;
2024-08-30T19:43:30.8414639Z                     
2024-08-30T19:43:30.8414797Z                                     for (char c : input) {
2024-08-30T19:43:30.8414972Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8415272Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8415599Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8415753Z                                                 } else {
2024-08-30T19:43:30.8415937Z                                                                 result += c;
2024-08-30T19:43:30.8416094Z                                                                    
2024-08-30T19:43:30.8419241Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                ...
2024-08-30T19:43:30.8423818Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8424306Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8424443Z                     #include <string>
2024-08-30T19:43:30.8424529Z                     
2024-08-30T19:43:30.8424710Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8424876Z                             std::string result = "";
2024-08-30T19:43:30.8425013Z                                 int shift = 7;
2024-08-30T19:43:30.8425096Z                     
2024-08-30T19:43:30.8425264Z                                     for (char c : input) {
2024-08-30T19:43:30.8425435Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8425737Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8426059Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8426214Z                                                 } else {
2024-08-30T19:43:30.8426402Z                                                                 result += c;
2024-08-30T19:43:30.8426669Z                                                                    -> #include <iostream>
2024-08-30T19:43:30.8426787Z                     #include <string>
2024-08-30T19:43:30.8426885Z                     
2024-08-30T19:43:30.8427063Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8427220Z                             std::string result = "";
2024-08-30T19:43:30.8427358Z                                 int shift = 7;
2024-08-30T19:43:30.8427443Z                     
2024-08-30T19:43:30.8427611Z                                     for (char c : input) {
2024-08-30T19:43:30.8427758Z                                                 if ...
2024-08-30T19:43:30.8428086Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8428279Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8428586Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8428833Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8429120Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8429250Z                     #include <string>
2024-08-30T19:43:30.8429340Z                     
2024-08-30T19:43:30.8429520Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8429682Z                             std::string result = "";
2024-08-30T19:43:30.8429818Z                                 int shift = 7;
2024-08-30T19:43:30.8429978Z                     
2024-08-30T19:43:30.8430146Z                                     for (char c : input) {
2024-08-30T19:43:30.8430318Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8430633Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8430950Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8431100Z                                                 } else {
2024-08-30T19:43:30.8431288Z                                                                 result += c;
2024-08-30T19:43:30.8431518Z                                                                     
2024-08-30T19:43:30.8434770Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n               ...
2024-08-30T19:43:30.8439095Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8439524Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8439653Z                     #include <string>
2024-08-30T19:43:30.8439746Z                     
2024-08-30T19:43:30.8439933Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8440095Z                             std::string result = "";
2024-08-30T19:43:30.8440231Z                                 int shift = 7;
2024-08-30T19:43:30.8440317Z                     
2024-08-30T19:43:30.8440490Z                                     for (char c : input) {
2024-08-30T19:43:30.8440661Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8440956Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8441294Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8441448Z                                                 } else {
2024-08-30T19:43:30.8441633Z                                                                 result += c;
2024-08-30T19:43:30.8441902Z                                                                     -> #include <iostream>
2024-08-30T19:43:30.8442024Z                     #include <string>
2024-08-30T19:43:30.8442116Z                     
2024-08-30T19:43:30.8442294Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8442446Z                             std::string result = "";
2024-08-30T19:43:30.8442666Z                                 int shift = 7;
2024-08-30T19:43:30.8442752Z                     
2024-08-30T19:43:30.8442915Z                                     for (char c : input) {
2024-08-30T19:43:30.8443071Z                                                 i ...
2024-08-30T19:43:30.8443408Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8443600Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8443909Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8444160Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8444452Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8444653Z                     #include <string>
2024-08-30T19:43:30.8444746Z                     
2024-08-30T19:43:30.8444924Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8445087Z                             std::string result = "";
2024-08-30T19:43:30.8445226Z                                 int shift = 7;
2024-08-30T19:43:30.8445310Z                     
2024-08-30T19:43:30.8445476Z                                     for (char c : input) {
2024-08-30T19:43:30.8445776Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8446080Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8446411Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8446563Z                                                 } else {
2024-08-30T19:43:30.8446755Z                                                                 result += c;
2024-08-30T19:43:30.8446917Z                                                                      
2024-08-30T19:43:30.8450059Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n              ...
2024-08-30T19:43:30.8454631Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8455065Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8455198Z                     #include <string>
2024-08-30T19:43:30.8455296Z                     
2024-08-30T19:43:30.8455479Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8455638Z                             std::string result = "";
2024-08-30T19:43:30.8455781Z                                 int shift = 7;
2024-08-30T19:43:30.8455977Z                     
2024-08-30T19:43:30.8456147Z                                     for (char c : input) {
2024-08-30T19:43:30.8456320Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8456623Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8456949Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8457103Z                                                 } else {
2024-08-30T19:43:30.8457282Z                                                                 result += c;
2024-08-30T19:43:30.8457650Z                                                                      -> #include <iostream>
2024-08-30T19:43:30.8457772Z                     #include <string>
2024-08-30T19:43:30.8457864Z                     
2024-08-30T19:43:30.8458042Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8458200Z                             std::string result = "";
2024-08-30T19:43:30.8458345Z                                 int shift = 7;
2024-08-30T19:43:30.8458429Z                     
2024-08-30T19:43:30.8458730Z                                     for (char c : input) {
2024-08-30T19:43:30.8458884Z                                                  ...
2024-08-30T19:43:30.8459224Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8459417Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8459723Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8459966Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8460263Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8460387Z                     #include <string>
2024-08-30T19:43:30.8460480Z                     
2024-08-30T19:43:30.8460662Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8460822Z                             std::string result = "";
2024-08-30T19:43:30.8460966Z                                 int shift = 7;
2024-08-30T19:43:30.8461052Z                     
2024-08-30T19:43:30.8461228Z                                     for (char c : input) {
2024-08-30T19:43:30.8461399Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8461690Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8462014Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8462172Z                                                 } else {
2024-08-30T19:43:30.8462359Z                                                                 result += c;
2024-08-30T19:43:30.8462530Z                                                                       
2024-08-30T19:43:30.8465734Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n             ...
2024-08-30T19:43:30.8471105Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8471804Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8471941Z                     #include <string>
2024-08-30T19:43:30.8472035Z                     
2024-08-30T19:43:30.8472231Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8472398Z                             std::string result = "";
2024-08-30T19:43:30.8472548Z                                 int shift = 7;
2024-08-30T19:43:30.8472639Z                     
2024-08-30T19:43:30.8472803Z                                     for (char c : input) {
2024-08-30T19:43:30.8473104Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8473411Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8473741Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8473892Z                                                 } else {
2024-08-30T19:43:30.8474079Z                                                                 result += c;
2024-08-30T19:43:30.8474358Z                                                                       -> #include <iostream>
2024-08-30T19:43:30.8474481Z                     #include <string>
2024-08-30T19:43:30.8474577Z                     
2024-08-30T19:43:30.8474769Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8474926Z                             std::string result = "";
2024-08-30T19:43:30.8475069Z                                 int shift = 7;
2024-08-30T19:43:30.8475159Z                     
2024-08-30T19:43:30.8475320Z                                     for (char c : input) {
2024-08-30T19:43:30.8475468Z                                                 ...
2024-08-30T19:43:30.8475802Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8475994Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8476308Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8476545Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8476845Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8476971Z                     #include <string>
2024-08-30T19:43:30.8477070Z                     
2024-08-30T19:43:30.8477255Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8477411Z                             std::string result = "";
2024-08-30T19:43:30.8477556Z                                 int shift = 7;
2024-08-30T19:43:30.8477651Z                     
2024-08-30T19:43:30.8477814Z                                     for (char c : input) {
2024-08-30T19:43:30.8477993Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8478285Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8478611Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8478771Z                                                 } else {
2024-08-30T19:43:30.8478953Z                                                                 result += c;
2024-08-30T19:43:30.8479204Z                                                                        
2024-08-30T19:43:30.8482363Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n            ...
2024-08-30T19:43:30.8488952Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8489462Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8489598Z                     #include <string>
2024-08-30T19:43:30.8489687Z                     
2024-08-30T19:43:30.8489893Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8490053Z                             std::string result = "";
2024-08-30T19:43:30.8490193Z                                 int shift = 7;
2024-08-30T19:43:30.8490286Z                     
2024-08-30T19:43:30.8490455Z                                     for (char c : input) {
2024-08-30T19:43:30.8490628Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8490937Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8491678Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8491889Z                                                 } else {
2024-08-30T19:43:30.8492077Z                                                                 result += c;
2024-08-30T19:43:30.8492360Z                                                                        -> #include <iostream>
2024-08-30T19:43:30.8492498Z                     #include <string>
2024-08-30T19:43:30.8492584Z                     
2024-08-30T19:43:30.8492775Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8492943Z                             std::string result = "";
2024-08-30T19:43:30.8493085Z                                 int shift = 7;
2024-08-30T19:43:30.8493176Z                     
2024-08-30T19:43:30.8493339Z                                     for (char c : input) {
2024-08-30T19:43:30.8493477Z                                                ...
2024-08-30T19:43:30.8493839Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8494044Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8494365Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8494607Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8494902Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8495174Z                     #include <string>
2024-08-30T19:43:30.8495265Z                     
2024-08-30T19:43:30.8495456Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8495631Z                             std::string result = "";
2024-08-30T19:43:30.8495769Z                                 int shift = 7;
2024-08-30T19:43:30.8495863Z                     
2024-08-30T19:43:30.8496024Z                                     for (char c : input) {
2024-08-30T19:43:30.8496199Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8496505Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8496921Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8497079Z                                                 } else {
2024-08-30T19:43:30.8497261Z                                                                 result += c;
2024-08-30T19:43:30.8497426Z                                                                         
2024-08-30T19:43:30.8500791Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n           ...
2024-08-30T19:43:30.8505171Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8505601Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8505743Z                     #include <string>
2024-08-30T19:43:30.8505831Z                     
2024-08-30T19:43:30.8506020Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8506189Z                             std::string result = "";
2024-08-30T19:43:30.8506330Z                                 int shift = 7;
2024-08-30T19:43:30.8506426Z                     
2024-08-30T19:43:30.8506588Z                                     for (char c : input) {
2024-08-30T19:43:30.8506759Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8507056Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8507384Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8507538Z                                                 } else {
2024-08-30T19:43:30.8507726Z                                                                 result += c;
2024-08-30T19:43:30.8508090Z                                                                         -> #include <iostream>
2024-08-30T19:43:30.8508222Z                     #include <string>
2024-08-30T19:43:30.8508311Z                     
2024-08-30T19:43:30.8508501Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8508664Z                             std::string result = "";
2024-08-30T19:43:30.8508803Z                                 int shift = 7;
2024-08-30T19:43:30.8508888Z                     
2024-08-30T19:43:30.8509058Z                                     for (char c : input) {
2024-08-30T19:43:30.8509193Z                                               ...
2024-08-30T19:43:30.8509606Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8509796Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8510110Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8510362Z [32m      cy:command ✔ [39m type	}, {force: true}
2024-08-30T19:43:30.8510653Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8510785Z                     #include <string>
2024-08-30T19:43:30.8510871Z                     
2024-08-30T19:43:30.8511124Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8511293Z                             std::string result = "";
2024-08-30T19:43:30.8511432Z                                 int shift = 7;
2024-08-30T19:43:30.8511518Z                     
2024-08-30T19:43:30.8511684Z                                     for (char c : input) {
2024-08-30T19:43:30.8511855Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8512250Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8512579Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8512739Z                                                 } else {
2024-08-30T19:43:30.8512931Z                                                                 result += c;
2024-08-30T19:43:30.8513064Z                                                 }
2024-08-30T19:43:30.8516252Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                  ...
2024-08-30T19:43:30.8520567Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8520978Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8521191Z                     #include <string>
2024-08-30T19:43:30.8521278Z                     
2024-08-30T19:43:30.8521464Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8521628Z                             std::string result = "";
2024-08-30T19:43:30.8521766Z                                 int shift = 7;
2024-08-30T19:43:30.8521852Z                     
2024-08-30T19:43:30.8522022Z                                     for (char c : input) {
2024-08-30T19:43:30.8522192Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8522499Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8522888Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8523041Z                                                 } else {
2024-08-30T19:43:30.8523232Z                                                                 result += c;
2024-08-30T19:43:30.8523513Z                                                                          -> #include <iostream>
2024-08-30T19:43:30.8523634Z                     #include <string>
2024-08-30T19:43:30.8523791Z                     
2024-08-30T19:43:30.8523976Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8524139Z                             std::string result = "";
2024-08-30T19:43:30.8524280Z                                 int shift = 7;
2024-08-30T19:43:30.8524365Z                     
2024-08-30T19:43:30.8524536Z                                     for (char c : input) {
2024-08-30T19:43:30.8524736Z                                              ...
2024-08-30T19:43:30.8525072Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8525264Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8525572Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8525766Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.8525886Z                     , {force: true}
2024-08-30T19:43:30.8526174Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8526316Z                     #include <string>
2024-08-30T19:43:30.8526402Z                     
2024-08-30T19:43:30.8526591Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8526746Z                             std::string result = "";
2024-08-30T19:43:30.8526884Z                                 int shift = 7;
2024-08-30T19:43:30.8526979Z                     
2024-08-30T19:43:30.8527147Z                                     for (char c : input) {
2024-08-30T19:43:30.8527323Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8527625Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8527947Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8528105Z                                                 } else {
2024-08-30T19:43:30.8528290Z                                                                 result += c;
2024-08-30T19:43:30.8528422Z                                                 }
2024-08-30T19:43:30.8528558Z                                                 
2024-08-30T19:43:30.8531981Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n    ...
2024-08-30T19:43:30.8536499Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8537016Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8537218Z                     #include <string>
2024-08-30T19:43:30.8537310Z                     
2024-08-30T19:43:30.8537503Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8537662Z                             std::string result = "";
2024-08-30T19:43:30.8537806Z                                 int shift = 7;
2024-08-30T19:43:30.8537889Z                     
2024-08-30T19:43:30.8538057Z                                     for (char c : input) {
2024-08-30T19:43:30.8538306Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8538612Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8538944Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8539106Z                                                 } else {
2024-08-30T19:43:30.8539288Z                                                                 result += c;
2024-08-30T19:43:30.8539533Z                                                 } -> #include <iostream>
2024-08-30T19:43:30.8539653Z                     #include <string>
2024-08-30T19:43:30.8539736Z                     
2024-08-30T19:43:30.8539924Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8540081Z                             std::string result = "";
2024-08-30T19:43:30.8540225Z                                 int shift = 7;
2024-08-30T19:43:30.8540319Z                     
2024-08-30T19:43:30.8540480Z                                     for (char c : input) {
2024-08-30T19:43:30.8540657Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8540747Z                      ...
2024-08-30T19:43:30.8541079Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8541271Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8541587Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8541837Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8542129Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8542255Z                     #include <string>
2024-08-30T19:43:30.8542347Z                     
2024-08-30T19:43:30.8542528Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8542699Z                             std::string result = "";
2024-08-30T19:43:30.8542843Z                                 int shift = 7;
2024-08-30T19:43:30.8542929Z                     
2024-08-30T19:43:30.8543097Z                                     for (char c : input) {
2024-08-30T19:43:30.8543267Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8543649Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8543987Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8544144Z                                                 } else {
2024-08-30T19:43:30.8544330Z                                                                 result += c;
2024-08-30T19:43:30.8544463Z                                                 }
2024-08-30T19:43:30.8544592Z                                                  
2024-08-30T19:43:30.8547862Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n   ...
2024-08-30T19:43:30.8552271Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8552697Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8552835Z                     #include <string>
2024-08-30T19:43:30.8552922Z                     
2024-08-30T19:43:30.8553111Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8553284Z                             std::string result = "";
2024-08-30T19:43:30.8553427Z                                 int shift = 7;
2024-08-30T19:43:30.8553524Z                     
2024-08-30T19:43:30.8553685Z                                     for (char c : input) {
2024-08-30T19:43:30.8553858Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8554161Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8554485Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8554638Z                                                 } else {
2024-08-30T19:43:30.8554826Z                                                                 result += c;
2024-08-30T19:43:30.8554965Z                                                 }
2024-08-30T19:43:30.8555209Z                                                  -> #include <iostream>
2024-08-30T19:43:30.8555333Z                     #include <string>
2024-08-30T19:43:30.8555423Z                     
2024-08-30T19:43:30.8555613Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8555768Z                             std::string result = "";
2024-08-30T19:43:30.8555979Z                                 int shift = 7;
2024-08-30T19:43:30.8556071Z                     
2024-08-30T19:43:30.8556231Z                                     for (char c : input) {
2024-08-30T19:43:30.8556359Z                                        ...
2024-08-30T19:43:30.8556699Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8557012Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8557493Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8557753Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8558054Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8558280Z                     #include <string>
2024-08-30T19:43:30.8558374Z                     
2024-08-30T19:43:30.8558573Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8558727Z                             std::string result = "";
2024-08-30T19:43:30.8558871Z                                 int shift = 7;
2024-08-30T19:43:30.8558965Z                     
2024-08-30T19:43:30.8559125Z                                     for (char c : input) {
2024-08-30T19:43:30.8559307Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8559695Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8560024Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8560185Z                                                 } else {
2024-08-30T19:43:30.8560367Z                                                                 result += c;
2024-08-30T19:43:30.8560583Z                                                 }
2024-08-30T19:43:30.8560723Z                                                   
2024-08-30T19:43:30.8563867Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n  ...
2024-08-30T19:43:30.8568245Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8568667Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8568796Z                     #include <string>
2024-08-30T19:43:30.8568893Z                     
2024-08-30T19:43:30.8569078Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8569232Z                             std::string result = "";
2024-08-30T19:43:30.8569376Z                                 int shift = 7;
2024-08-30T19:43:30.8569541Z                     
2024-08-30T19:43:30.8569711Z                                     for (char c : input) {
2024-08-30T19:43:30.8569882Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8570185Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8570508Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8570662Z                                                 } else {
2024-08-30T19:43:30.8570844Z                                                                 result += c;
2024-08-30T19:43:30.8571282Z                                                 }
2024-08-30T19:43:30.8571615Z                                                   -> #include <iostream>
2024-08-30T19:43:30.8571751Z                     #include <string>
2024-08-30T19:43:30.8571846Z                     
2024-08-30T19:43:30.8572039Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8572205Z                             std::string result = "";
2024-08-30T19:43:30.8572347Z                                 int shift = 7;
2024-08-30T19:43:30.8572552Z                     
2024-08-30T19:43:30.8572736Z                                     for (char c : input) {
2024-08-30T19:43:30.8572857Z                                       ...
2024-08-30T19:43:30.8573215Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8573404Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8573720Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8574062Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8574367Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8574500Z                     #include <string>
2024-08-30T19:43:30.8574586Z                     
2024-08-30T19:43:30.8574776Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8574944Z                             std::string result = "";
2024-08-30T19:43:30.8575084Z                                 int shift = 7;
2024-08-30T19:43:30.8575171Z                     
2024-08-30T19:43:30.8575347Z                                     for (char c : input) {
2024-08-30T19:43:30.8575521Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8575824Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8576146Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8576310Z                                                 } else {
2024-08-30T19:43:30.8576497Z                                                                 result += c;
2024-08-30T19:43:30.8576629Z                                                 }
2024-08-30T19:43:30.8576766Z                                                    
2024-08-30T19:43:30.8579913Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n ...
2024-08-30T19:43:30.8584275Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8584863Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8584992Z                     #include <string>
2024-08-30T19:43:30.8585080Z                     
2024-08-30T19:43:30.8585281Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8585438Z                             std::string result = "";
2024-08-30T19:43:30.8585577Z                                 int shift = 7;
2024-08-30T19:43:30.8585670Z                     
2024-08-30T19:43:30.8585899Z                                     for (char c : input) {
2024-08-30T19:43:30.8586077Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8586382Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8586707Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8586936Z                                                 } else {
2024-08-30T19:43:30.8587119Z                                                                 result += c;
2024-08-30T19:43:30.8587253Z                                                 }
2024-08-30T19:43:30.8587506Z                                                    -> #include <iostream>
2024-08-30T19:43:30.8587627Z                     #include <string>
2024-08-30T19:43:30.8587713Z                     
2024-08-30T19:43:30.8587906Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8588062Z                             std::string result = "";
2024-08-30T19:43:30.8588206Z                                 int shift = 7;
2024-08-30T19:43:30.8588291Z                     
2024-08-30T19:43:30.8588454Z                                     for (char c : input) {
2024-08-30T19:43:30.8588583Z                                      ...
2024-08-30T19:43:30.8588923Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8589112Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8589421Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8589662Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8589964Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8590092Z                     #include <string>
2024-08-30T19:43:30.8590184Z                     
2024-08-30T19:43:30.8590367Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8590529Z                             std::string result = "";
2024-08-30T19:43:30.8590673Z                                 int shift = 7;
2024-08-30T19:43:30.8590757Z                     
2024-08-30T19:43:30.8590919Z                                     for (char c : input) {
2024-08-30T19:43:30.8591096Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8591396Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8591723Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8591874Z                                                 } else {
2024-08-30T19:43:30.8592139Z                                                                 result += c;
2024-08-30T19:43:30.8592283Z                                                 }
2024-08-30T19:43:30.8592421Z                                                     
2024-08-30T19:43:30.8595560Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\ ...
2024-08-30T19:43:30.8600077Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8600520Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8600650Z                     #include <string>
2024-08-30T19:43:30.8600744Z                     
2024-08-30T19:43:30.8600927Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8601091Z                             std::string result = "";
2024-08-30T19:43:30.8601231Z                                 int shift = 7;
2024-08-30T19:43:30.8601317Z                     
2024-08-30T19:43:30.8601486Z                                     for (char c : input) {
2024-08-30T19:43:30.8601656Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8601961Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8602289Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8602442Z                                                 } else {
2024-08-30T19:43:30.8602638Z                                                                 result += c;
2024-08-30T19:43:30.8602771Z                                                 }
2024-08-30T19:43:30.8603016Z                                                     -> #include <iostream>
2024-08-30T19:43:30.8603145Z                     #include <string>
2024-08-30T19:43:30.8603231Z                     
2024-08-30T19:43:30.8603409Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8603569Z                             std::string result = "";
2024-08-30T19:43:30.8603705Z                                 int shift = 7;
2024-08-30T19:43:30.8603799Z                     
2024-08-30T19:43:30.8603962Z                                     for (char c : input) {
2024-08-30T19:43:30.8604076Z                                     ...
2024-08-30T19:43:30.8604410Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8604755Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8605068Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8605307Z [32m      cy:command ✔ [39m type	}, {force: true}
2024-08-30T19:43:30.8605606Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8605739Z                     #include <string>
2024-08-30T19:43:30.8605825Z                     
2024-08-30T19:43:30.8606015Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8606169Z                             std::string result = "";
2024-08-30T19:43:30.8606307Z                                 int shift = 7;
2024-08-30T19:43:30.8606488Z                     
2024-08-30T19:43:30.8606657Z                                     for (char c : input) {
2024-08-30T19:43:30.8606830Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8607137Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8607462Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8607621Z                                                 } else {
2024-08-30T19:43:30.8607866Z                                                                 result += c;
2024-08-30T19:43:30.8608003Z                                                 }
2024-08-30T19:43:30.8608121Z                                     }
2024-08-30T19:43:30.8611777Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n               ...
2024-08-30T19:43:30.8616220Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8616654Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8616787Z                     #include <string>
2024-08-30T19:43:30.8616874Z                     
2024-08-30T19:43:30.8617070Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8617227Z                             std::string result = "";
2024-08-30T19:43:30.8617372Z                                 int shift = 7;
2024-08-30T19:43:30.8617456Z                     
2024-08-30T19:43:30.8617625Z                                     for (char c : input) {
2024-08-30T19:43:30.8617804Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8618099Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8618514Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8618675Z                                                 } else {
2024-08-30T19:43:30.8618859Z                                                                 result += c;
2024-08-30T19:43:30.8618999Z                                                 }
2024-08-30T19:43:30.8619242Z                                                      -> #include <iostream>
2024-08-30T19:43:30.8619363Z                     #include <string>
2024-08-30T19:43:30.8619456Z                     
2024-08-30T19:43:30.8619638Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8619878Z                             std::string result = "";
2024-08-30T19:43:30.8620023Z                                 int shift = 7;
2024-08-30T19:43:30.8620110Z                     
2024-08-30T19:43:30.8620285Z                                     for (char c : input) {
2024-08-30T19:43:30.8620404Z                                    ...
2024-08-30T19:43:30.8620741Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8620933Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8621324Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8621521Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.8621641Z                     , {force: true}
2024-08-30T19:43:30.8621934Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8622069Z                     #include <string>
2024-08-30T19:43:30.8622155Z                     
2024-08-30T19:43:30.8622346Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8622577Z                             std::string result = "";
2024-08-30T19:43:30.8622717Z                                 int shift = 7;
2024-08-30T19:43:30.8622811Z                     
2024-08-30T19:43:30.8622971Z                                     for (char c : input) {
2024-08-30T19:43:30.8623148Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8623455Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8623778Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8623930Z                                                 } else {
2024-08-30T19:43:30.8624118Z                                                                 result += c;
2024-08-30T19:43:30.8624254Z                                                 }
2024-08-30T19:43:30.8624377Z                                     }
2024-08-30T19:43:30.8624491Z                                     
2024-08-30T19:43:30.8627615Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) ...
2024-08-30T19:43:30.8631925Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8632505Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8632736Z                     #include <string>
2024-08-30T19:43:30.8633045Z                     
2024-08-30T19:43:30.8633380Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8633553Z                             std::string result = "";
2024-08-30T19:43:30.8633701Z                                 int shift = 7;
2024-08-30T19:43:30.8633823Z                     
2024-08-30T19:43:30.8634131Z                                     for (char c : input) {
2024-08-30T19:43:30.8634443Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8635081Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8635441Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8635596Z                                                 } else {
2024-08-30T19:43:30.8635783Z                                                                 result += c;
2024-08-30T19:43:30.8635932Z                                                 }
2024-08-30T19:43:30.8636230Z                                     } -> #include <iostream>
2024-08-30T19:43:30.8636362Z                     #include <string>
2024-08-30T19:43:30.8636450Z                     
2024-08-30T19:43:30.8636638Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8636809Z                             std::string result = "";
2024-08-30T19:43:30.8636948Z                                 int shift = 7;
2024-08-30T19:43:30.8637035Z                     
2024-08-30T19:43:30.8637204Z                                     for (char c : input) {
2024-08-30T19:43:30.8637356Z                                                 i ...
2024-08-30T19:43:30.8637717Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8637908Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8638223Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8638476Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8638778Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8638919Z                     #include <string>
2024-08-30T19:43:30.8639005Z                     
2024-08-30T19:43:30.8639195Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8639363Z                             std::string result = "";
2024-08-30T19:43:30.8639501Z                                 int shift = 7;
2024-08-30T19:43:30.8639599Z                     
2024-08-30T19:43:30.8639762Z                                     for (char c : input) {
2024-08-30T19:43:30.8639937Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8640245Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8640573Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8640730Z                                                 } else {
2024-08-30T19:43:30.8640926Z                                                                 result += c;
2024-08-30T19:43:30.8641063Z                                                 }
2024-08-30T19:43:30.8641184Z                                     }
2024-08-30T19:43:30.8641369Z                                      
2024-08-30T19:43:30.8644517Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c) ...
2024-08-30T19:43:30.8649400Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8649924Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8650064Z                     #include <string>
2024-08-30T19:43:30.8650161Z                     
2024-08-30T19:43:30.8650358Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8650516Z                             std::string result = "";
2024-08-30T19:43:30.8650664Z                                 int shift = 7;
2024-08-30T19:43:30.8650749Z                     
2024-08-30T19:43:30.8650926Z                                     for (char c : input) {
2024-08-30T19:43:30.8651342Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8651668Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8652004Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8652170Z                                                 } else {
2024-08-30T19:43:30.8652353Z                                                                 result += c;
2024-08-30T19:43:30.8652495Z                                                 }
2024-08-30T19:43:30.8652612Z                                     }
2024-08-30T19:43:30.8652837Z                                      -> #include <iostream>
2024-08-30T19:43:30.8652956Z                     #include <string>
2024-08-30T19:43:30.8653041Z                     
2024-08-30T19:43:30.8653238Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8653400Z                             std::string result = "";
2024-08-30T19:43:30.8653541Z                                 int shift = 7;
2024-08-30T19:43:30.8653634Z                     
2024-08-30T19:43:30.8653796Z                                     for (char c : input) {
2024-08-30T19:43:30.8653905Z                                  ...
2024-08-30T19:43:30.8654267Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8654456Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8654780Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8655022Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8655458Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8655589Z                     #include <string>
2024-08-30T19:43:30.8655677Z                     
2024-08-30T19:43:30.8655877Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8656038Z                             std::string result = "";
2024-08-30T19:43:30.8656178Z                                 int shift = 7;
2024-08-30T19:43:30.8656271Z                     
2024-08-30T19:43:30.8656432Z                                     for (char c : input) {
2024-08-30T19:43:30.8656611Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8656999Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8657323Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8657488Z                                                 } else {
2024-08-30T19:43:30.8657672Z                                                                 result += c;
2024-08-30T19:43:30.8657808Z                                                 }
2024-08-30T19:43:30.8657927Z                                     }
2024-08-30T19:43:30.8658112Z                                       
2024-08-30T19:43:30.8661337Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c ...
2024-08-30T19:43:30.8665733Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8666156Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8666290Z                     #include <string>
2024-08-30T19:43:30.8666379Z                     
2024-08-30T19:43:30.8666569Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8666734Z                             std::string result = "";
2024-08-30T19:43:30.8666875Z                                 int shift = 7;
2024-08-30T19:43:30.8666961Z                     
2024-08-30T19:43:30.8667131Z                                     for (char c : input) {
2024-08-30T19:43:30.8667307Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8667617Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8667943Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8668177Z                                                 } else {
2024-08-30T19:43:30.8668368Z                                                                 result += c;
2024-08-30T19:43:30.8668503Z                                                 }
2024-08-30T19:43:30.8668619Z                                     }
2024-08-30T19:43:30.8668847Z                                       -> #include <iostream>
2024-08-30T19:43:30.8668966Z                     #include <string>
2024-08-30T19:43:30.8669058Z                     
2024-08-30T19:43:30.8669241Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8669398Z                             std::string result = "";
2024-08-30T19:43:30.8669619Z                                 int shift = 7;
2024-08-30T19:43:30.8669705Z                     
2024-08-30T19:43:30.8669870Z                                     for (char c : input) {
2024-08-30T19:43:30.8669989Z                                 ...
2024-08-30T19:43:30.8670328Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8670525Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8670836Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8671147Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8671456Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8671582Z                     #include <string>
2024-08-30T19:43:30.8671673Z                     
2024-08-30T19:43:30.8671855Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8672012Z                             std::string result = "";
2024-08-30T19:43:30.8672231Z                                 int shift = 7;
2024-08-30T19:43:30.8672321Z                     
2024-08-30T19:43:30.8672482Z                                     for (char c : input) {
2024-08-30T19:43:30.8672660Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8672960Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8673286Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8673443Z                                                 } else {
2024-08-30T19:43:30.8673630Z                                                                 result += c;
2024-08-30T19:43:30.8673768Z                                                 }
2024-08-30T19:43:30.8673878Z                                     }
2024-08-30T19:43:30.8673991Z                                        
2024-08-30T19:43:30.8677129Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test( ...
2024-08-30T19:43:30.8681539Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8681966Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8682092Z                     #include <string>
2024-08-30T19:43:30.8682179Z                     
2024-08-30T19:43:30.8682367Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8682599Z                             std::string result = "";
2024-08-30T19:43:30.8682744Z                                 int shift = 7;
2024-08-30T19:43:30.8682840Z                     
2024-08-30T19:43:30.8683002Z                                     for (char c : input) {
2024-08-30T19:43:30.8683178Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8683486Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8683881Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8684047Z                                                 } else {
2024-08-30T19:43:30.8684226Z                                                                 result += c;
2024-08-30T19:43:30.8684362Z                                                 }
2024-08-30T19:43:30.8684483Z                                     }
2024-08-30T19:43:30.8684705Z                                        -> #include <iostream>
2024-08-30T19:43:30.8684894Z                     #include <string>
2024-08-30T19:43:30.8684985Z                     
2024-08-30T19:43:30.8685165Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8685326Z                             std::string result = "";
2024-08-30T19:43:30.8685466Z                                 int shift = 7;
2024-08-30T19:43:30.8685551Z                     
2024-08-30T19:43:30.8685718Z                                     for (char c : input) {
2024-08-30T19:43:30.8685832Z                                ...
2024-08-30T19:43:30.8686158Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8686349Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8686659Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8686910Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8687201Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8687346Z                     #include <string>
2024-08-30T19:43:30.8687431Z                     
2024-08-30T19:43:30.8687612Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8687773Z                             std::string result = "";
2024-08-30T19:43:30.8687985Z                                 int shift = 7;
2024-08-30T19:43:30.8688071Z                     
2024-08-30T19:43:30.8688238Z                                     for (char c : input) {
2024-08-30T19:43:30.8688414Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8688716Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8689031Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8689181Z                                                 } else {
2024-08-30T19:43:30.8689377Z                                                                 result += c;
2024-08-30T19:43:30.8689508Z                                                 }
2024-08-30T19:43:30.8689617Z                                     }
2024-08-30T19:43:30.8689740Z                                         
2024-08-30T19:43:30.8693104Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test ...
2024-08-30T19:43:30.8697664Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8698193Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8698326Z                     #include <string>
2024-08-30T19:43:30.8698421Z                     
2024-08-30T19:43:30.8698603Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8698763Z                             std::string result = "";
2024-08-30T19:43:30.8698907Z                                 int shift = 7;
2024-08-30T19:43:30.8698991Z                     
2024-08-30T19:43:30.8699154Z                                     for (char c : input) {
2024-08-30T19:43:30.8699336Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8699637Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8699964Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8700119Z                                                 } else {
2024-08-30T19:43:30.8700312Z                                                                 result += c;
2024-08-30T19:43:30.8700453Z                                                 }
2024-08-30T19:43:30.8700565Z                                     }
2024-08-30T19:43:30.8700871Z                                         -> #include <iostream>
2024-08-30T19:43:30.8701000Z                     #include <string>
2024-08-30T19:43:30.8701084Z                     
2024-08-30T19:43:30.8701269Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8701425Z                             std::string result = "";
2024-08-30T19:43:30.8701563Z                                 int shift = 7;
2024-08-30T19:43:30.8701656Z                     
2024-08-30T19:43:30.8701814Z                                     for (char c : input) {
2024-08-30T19:43:30.8701921Z                               ...
2024-08-30T19:43:30.8702253Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8702444Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8702761Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8703000Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.8703288Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8703427Z                     #include <string>
2024-08-30T19:43:30.8703512Z                     
2024-08-30T19:43:30.8703696Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8703854Z                             std::string result = "";
2024-08-30T19:43:30.8703990Z                                 int shift = 7;
2024-08-30T19:43:30.8704081Z                     
2024-08-30T19:43:30.8704238Z                                     for (char c : input) {
2024-08-30T19:43:30.8704407Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8704705Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8705104Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8705261Z                                                 } else {
2024-08-30T19:43:30.8705448Z                                                                 result += c;
2024-08-30T19:43:30.8705580Z                                                 }
2024-08-30T19:43:30.8705698Z                                     }
2024-08-30T19:43:30.8705822Z                                         r
2024-08-30T19:43:30.8709059Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.tes ...
2024-08-30T19:43:30.8713400Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8713896Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8714031Z                     #include <string>
2024-08-30T19:43:30.8714117Z                     
2024-08-30T19:43:30.8714310Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8714471Z                             std::string result = "";
2024-08-30T19:43:30.8714607Z                                 int shift = 7;
2024-08-30T19:43:30.8714691Z                     
2024-08-30T19:43:30.8714861Z                                     for (char c : input) {
2024-08-30T19:43:30.8715031Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8715329Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8715655Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8715807Z                                                 } else {
2024-08-30T19:43:30.8715998Z                                                                 result += c;
2024-08-30T19:43:30.8716133Z                                                 }
2024-08-30T19:43:30.8716244Z                                     }
2024-08-30T19:43:30.8716475Z                                          -> #include <iostream>
2024-08-30T19:43:30.8716594Z                     #include <string>
2024-08-30T19:43:30.8716684Z                     
2024-08-30T19:43:30.8716865Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8717018Z                             std::string result = "";
2024-08-30T19:43:30.8717239Z                                 int shift = 7;
2024-08-30T19:43:30.8717327Z                     
2024-08-30T19:43:30.8717489Z                                     for (char c : input) {
2024-08-30T19:43:30.8717608Z                              ...
2024-08-30T19:43:30.8717934Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8718127Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8718440Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8718681Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.8719050Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8719178Z                     #include <string>
2024-08-30T19:43:30.8719271Z                     
2024-08-30T19:43:30.8719452Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8719606Z                             std::string result = "";
2024-08-30T19:43:30.8719749Z                                 int shift = 7;
2024-08-30T19:43:30.8719841Z                     
2024-08-30T19:43:30.8720061Z                                     for (char c : input) {
2024-08-30T19:43:30.8720242Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8720537Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8720863Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8721018Z                                                 } else {
2024-08-30T19:43:30.8721203Z                                                                 result += c;
2024-08-30T19:43:30.8721343Z                                                 }
2024-08-30T19:43:30.8721453Z                                     }
2024-08-30T19:43:30.8721576Z                                         re
2024-08-30T19:43:30.8724714Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.te ...
2024-08-30T19:43:30.8729112Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8729529Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8729660Z                     #include <string>
2024-08-30T19:43:30.8729746Z                     
2024-08-30T19:43:30.8729933Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8730088Z                             std::string result = "";
2024-08-30T19:43:30.8730298Z                                 int shift = 7;
2024-08-30T19:43:30.8730390Z                     
2024-08-30T19:43:30.8730551Z                                     for (char c : input) {
2024-08-30T19:43:30.8730721Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8731229Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8731577Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8731834Z                                                 } else {
2024-08-30T19:43:30.8732025Z                                                                 result += c;
2024-08-30T19:43:30.8732158Z                                                 }
2024-08-30T19:43:30.8732275Z                                     }
2024-08-30T19:43:30.8732504Z                                         r -> #include <iostream>
2024-08-30T19:43:30.8732628Z                     #include <string>
2024-08-30T19:43:30.8732795Z                     
2024-08-30T19:43:30.8732985Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8733146Z                             std::string result = "";
2024-08-30T19:43:30.8733286Z                                 int shift = 7;
2024-08-30T19:43:30.8733375Z                     
2024-08-30T19:43:30.8733544Z                                     for (char c : input) {
2024-08-30T19:43:30.8733649Z                             ...
2024-08-30T19:43:30.8733994Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8734186Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8734498Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8734750Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.8735041Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8735170Z                     #include <string>
2024-08-30T19:43:30.8735266Z                     
2024-08-30T19:43:30.8735448Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8735609Z                             std::string result = "";
2024-08-30T19:43:30.8735748Z                                 int shift = 7;
2024-08-30T19:43:30.8735923Z                     
2024-08-30T19:43:30.8736092Z                                     for (char c : input) {
2024-08-30T19:43:30.8736267Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8736578Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8736908Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8737059Z                                                 } else {
2024-08-30T19:43:30.8737248Z                                                                 result += c;
2024-08-30T19:43:30.8737385Z                                                 }
2024-08-30T19:43:30.8737495Z                                     }
2024-08-30T19:43:30.8737628Z                                         ret
2024-08-30T19:43:30.8740753Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    ret","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.t ...
2024-08-30T19:43:30.8745252Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8745690Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8745884Z                     #include <string>
2024-08-30T19:43:30.8745977Z                     
2024-08-30T19:43:30.8746173Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8746328Z                             std::string result = "";
2024-08-30T19:43:30.8746478Z                                 int shift = 7;
2024-08-30T19:43:30.8746566Z                     
2024-08-30T19:43:30.8746727Z                                     for (char c : input) {
2024-08-30T19:43:30.8746910Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8747210Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8747531Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8747694Z                                                 } else {
2024-08-30T19:43:30.8747879Z                                                                 result += c;
2024-08-30T19:43:30.8748023Z                                                 }
2024-08-30T19:43:30.8748134Z                                     }
2024-08-30T19:43:30.8748360Z                                         re -> #include <iostream>
2024-08-30T19:43:30.8748556Z                     #include <string>
2024-08-30T19:43:30.8748643Z                     
2024-08-30T19:43:30.8748823Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8748982Z                             std::string result = "";
2024-08-30T19:43:30.8749120Z                                 int shift = 7;
2024-08-30T19:43:30.8749214Z                     
2024-08-30T19:43:30.8749370Z                                     for (char c : input) {
2024-08-30T19:43:30.8749475Z                            ...
2024-08-30T19:43:30.8749813Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8749997Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8750321Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8750563Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.8750857Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8750993Z                     #include <string>
2024-08-30T19:43:30.8751078Z                     
2024-08-30T19:43:30.8751271Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8751426Z                             std::string result = "";
2024-08-30T19:43:30.8751564Z                                 int shift = 7;
2024-08-30T19:43:30.8751658Z                     
2024-08-30T19:43:30.8751815Z                                     for (char c : input) {
2024-08-30T19:43:30.8751987Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8752286Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8752692Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8752852Z                                                 } else {
2024-08-30T19:43:30.8753034Z                                                                 result += c;
2024-08-30T19:43:30.8753167Z                                                 }
2024-08-30T19:43:30.8753286Z                                     }
2024-08-30T19:43:30.8753416Z                                         retu
2024-08-30T19:43:30.8756682Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    retu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/. ...
2024-08-30T19:43:30.8761038Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8761465Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8761668Z                     #include <string>
2024-08-30T19:43:30.8761761Z                     
2024-08-30T19:43:30.8761949Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8762118Z                             std::string result = "";
2024-08-30T19:43:30.8762257Z                                 int shift = 7;
2024-08-30T19:43:30.8762343Z                     
2024-08-30T19:43:30.8762511Z                                     for (char c : input) {
2024-08-30T19:43:30.8762683Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8762977Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8763311Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8763463Z                                                 } else {
2024-08-30T19:43:30.8763656Z                                                                 result += c;
2024-08-30T19:43:30.8763794Z                                                 }
2024-08-30T19:43:30.8763904Z                                     }
2024-08-30T19:43:30.8764145Z                                         ret -> #include <iostream>
2024-08-30T19:43:30.8764266Z                     #include <string>
2024-08-30T19:43:30.8764350Z                     
2024-08-30T19:43:30.8764535Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8764690Z                             std::string result = "";
2024-08-30T19:43:30.8764827Z                                 int shift = 7;
2024-08-30T19:43:30.8764993Z                     
2024-08-30T19:43:30.8765197Z                                     for (char c : input) {
2024-08-30T19:43:30.8765302Z                           ...
2024-08-30T19:43:30.8765643Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8765830Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8766162Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8766407Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.8766705Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8766901Z                     #include <string>
2024-08-30T19:43:30.8766991Z                     
2024-08-30T19:43:30.8767181Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8767334Z                             std::string result = "";
2024-08-30T19:43:30.8767481Z                                 int shift = 7;
2024-08-30T19:43:30.8767566Z                     
2024-08-30T19:43:30.8767796Z                                     for (char c : input) {
2024-08-30T19:43:30.8767984Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8768286Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8768615Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8768777Z                                                 } else {
2024-08-30T19:43:30.8768961Z                                                                 result += c;
2024-08-30T19:43:30.8769099Z                                                 }
2024-08-30T19:43:30.8769210Z                                     }
2024-08-30T19:43:30.8769342Z                                         retur
2024-08-30T19:43:30.8772700Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    retur","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/ ...
2024-08-30T19:43:30.8777191Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8777625Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8777765Z                     #include <string>
2024-08-30T19:43:30.8777853Z                     
2024-08-30T19:43:30.8778045Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8778209Z                             std::string result = "";
2024-08-30T19:43:30.8778353Z                                 int shift = 7;
2024-08-30T19:43:30.8778534Z                     
2024-08-30T19:43:30.8778704Z                                     for (char c : input) {
2024-08-30T19:43:30.8778875Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8779192Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8779517Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8779668Z                                                 } else {
2024-08-30T19:43:30.8779943Z                                                                 result += c;
2024-08-30T19:43:30.8780085Z                                                 }
2024-08-30T19:43:30.8780204Z                                     }
2024-08-30T19:43:30.8780438Z                                         retu -> #include <iostream>
2024-08-30T19:43:30.8780557Z                     #include <string>
2024-08-30T19:43:30.8780652Z                     
2024-08-30T19:43:30.8780913Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8781072Z                             std::string result = "";
2024-08-30T19:43:30.8781216Z                                 int shift = 7;
2024-08-30T19:43:30.8781306Z                     
2024-08-30T19:43:30.8781475Z                                     for (char c : input) {
2024-08-30T19:43:30.8781568Z                          ...
2024-08-30T19:43:30.8781902Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8782104Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8782415Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8782668Z [32m      cy:command ✔ [39m type	n, {force: true}
2024-08-30T19:43:30.8782959Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8783082Z                     #include <string>
2024-08-30T19:43:30.8783180Z                     
2024-08-30T19:43:30.8783363Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8783520Z                             std::string result = "";
2024-08-30T19:43:30.8783663Z                                 int shift = 7;
2024-08-30T19:43:30.8783748Z                     
2024-08-30T19:43:30.8783993Z                                     for (char c : input) {
2024-08-30T19:43:30.8784166Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8784468Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8784802Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8784953Z                                                 } else {
2024-08-30T19:43:30.8785134Z                                                                 result += c;
2024-08-30T19:43:30.8785275Z                                                 }
2024-08-30T19:43:30.8785391Z                                     }
2024-08-30T19:43:30.8785527Z                                         return
2024-08-30T19:43:30.8788839Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z] ...
2024-08-30T19:43:30.8793424Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8793869Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8794005Z                     #include <string>
2024-08-30T19:43:30.8794229Z                     
2024-08-30T19:43:30.8794434Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8794592Z                             std::string result = "";
2024-08-30T19:43:30.8794733Z                                 int shift = 7;
2024-08-30T19:43:30.8794833Z                     
2024-08-30T19:43:30.8794994Z                                     for (char c : input) {
2024-08-30T19:43:30.8795176Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8795481Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8795799Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8795963Z                                                 } else {
2024-08-30T19:43:30.8796152Z                                                                 result += c;
2024-08-30T19:43:30.8796301Z                                                 }
2024-08-30T19:43:30.8796413Z                                     }
2024-08-30T19:43:30.8796647Z                                         retur -> #include <iostream>
2024-08-30T19:43:30.8796774Z                     #include <string>
2024-08-30T19:43:30.8796931Z                     
2024-08-30T19:43:30.8797115Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8797283Z                             std::string result = "";
2024-08-30T19:43:30.8797425Z                                 int shift = 7;
2024-08-30T19:43:30.8797509Z                     
2024-08-30T19:43:30.8797676Z                                     for (char c : input) {
2024-08-30T19:43:30.8797764Z                         ...
2024-08-30T19:43:30.8798104Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8798287Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8798683Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8798936Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.8799470Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8799721Z                     #include <string>
2024-08-30T19:43:30.8799894Z                     
2024-08-30T19:43:30.8800138Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8800303Z                             std::string result = "";
2024-08-30T19:43:30.8800488Z                                 int shift = 7;
2024-08-30T19:43:30.8800655Z                     
2024-08-30T19:43:30.8800945Z                                     for (char c : input) {
2024-08-30T19:43:30.8801233Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8801584Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8801917Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8802073Z                                                 } else {
2024-08-30T19:43:30.8802260Z                                                                 result += c;
2024-08-30T19:43:30.8802397Z                                                 }
2024-08-30T19:43:30.8802514Z                                     }
2024-08-30T19:43:30.8802649Z                                         return 
2024-08-30T19:43:30.8806000Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z ...
2024-08-30T19:43:30.8810360Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8810793Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8811249Z                     #include <string>
2024-08-30T19:43:30.8811359Z                     
2024-08-30T19:43:30.8811556Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8811713Z                             std::string result = "";
2024-08-30T19:43:30.8811863Z                                 int shift = 7;
2024-08-30T19:43:30.8811948Z                     
2024-08-30T19:43:30.8812116Z                                     for (char c : input) {
2024-08-30T19:43:30.8812289Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8812606Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8813052Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8813207Z                                                 } else {
2024-08-30T19:43:30.8813387Z                                                                 result += c;
2024-08-30T19:43:30.8813529Z                                                 }
2024-08-30T19:43:30.8813639Z                                     }
2024-08-30T19:43:30.8813884Z                                         return -> #include <iostream>
2024-08-30T19:43:30.8814007Z                     #include <string>
2024-08-30T19:43:30.8814094Z                     
2024-08-30T19:43:30.8814282Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8814447Z                             std::string result = "";
2024-08-30T19:43:30.8814585Z                                 int shift = 7;
2024-08-30T19:43:30.8814674Z                     
2024-08-30T19:43:30.8814835Z                                     for (char c : input) {
2024-08-30T19:43:30.8814933Z                        ...
2024-08-30T19:43:30.8815269Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8815454Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8815780Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8816018Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.8816315Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8816521Z                     #include <string>
2024-08-30T19:43:30.8816609Z                     
2024-08-30T19:43:30.8816799Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8816954Z                             std::string result = "";
2024-08-30T19:43:30.8817087Z                                 int shift = 7;
2024-08-30T19:43:30.8817179Z                     
2024-08-30T19:43:30.8817342Z                                     for (char c : input) {
2024-08-30T19:43:30.8817596Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8817901Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8818224Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8818387Z                                                 } else {
2024-08-30T19:43:30.8818568Z                                                                 result += c;
2024-08-30T19:43:30.8818708Z                                                 }
2024-08-30T19:43:30.8818820Z                                     }
2024-08-30T19:43:30.8818956Z                                         return r
2024-08-30T19:43:30.8822105Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA- ...
2024-08-30T19:43:30.8826531Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8827020Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8827153Z                     #include <string>
2024-08-30T19:43:30.8827240Z                     
2024-08-30T19:43:30.8827426Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8827588Z                             std::string result = "";
2024-08-30T19:43:30.8827725Z                                 int shift = 7;
2024-08-30T19:43:30.8827813Z                     
2024-08-30T19:43:30.8827984Z                                     for (char c : input) {
2024-08-30T19:43:30.8828154Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8828455Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8828779Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8828931Z                                                 } else {
2024-08-30T19:43:30.8829183Z                                                                 result += c;
2024-08-30T19:43:30.8829320Z                                                 }
2024-08-30T19:43:30.8829435Z                                     }
2024-08-30T19:43:30.8829677Z                                         return  -> #include <iostream>
2024-08-30T19:43:30.8829795Z                     #include <string>
2024-08-30T19:43:30.8829888Z                     
2024-08-30T19:43:30.8830130Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8830288Z                             std::string result = "";
2024-08-30T19:43:30.8830432Z                                 int shift = 7;
2024-08-30T19:43:30.8830516Z                     
2024-08-30T19:43:30.8830678Z                                     for (char c : input) {
2024-08-30T19:43:30.8830773Z                       ...
2024-08-30T19:43:30.8831103Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8831292Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8831615Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8831856Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.8832153Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8832276Z                     #include <string>
2024-08-30T19:43:30.8832369Z                     
2024-08-30T19:43:30.8832554Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8832712Z                             std::string result = "";
2024-08-30T19:43:30.8832856Z                                 int shift = 7;
2024-08-30T19:43:30.8832939Z                     
2024-08-30T19:43:30.8833201Z                                     for (char c : input) {
2024-08-30T19:43:30.8833371Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8833667Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8834002Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8834155Z                                                 } else {
2024-08-30T19:43:30.8834332Z                                                                 result += c;
2024-08-30T19:43:30.8834473Z                                                 }
2024-08-30T19:43:30.8834650Z                                     }
2024-08-30T19:43:30.8834796Z                                         return re
2024-08-30T19:43:30.8837926Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA ...
2024-08-30T19:43:30.8842333Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8842764Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8842889Z                     #include <string>
2024-08-30T19:43:30.8842978Z                     
2024-08-30T19:43:30.8843232Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8843391Z                             std::string result = "";
2024-08-30T19:43:30.8843528Z                                 int shift = 7;
2024-08-30T19:43:30.8843622Z                     
2024-08-30T19:43:30.8843784Z                                     for (char c : input) {
2024-08-30T19:43:30.8843963Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8844268Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8844589Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8844744Z                                                 } else {
2024-08-30T19:43:30.8844928Z                                                                 result += c;
2024-08-30T19:43:30.8845064Z                                                 }
2024-08-30T19:43:30.8845183Z                                     }
2024-08-30T19:43:30.8845424Z                                         return r -> #include <iostream>
2024-08-30T19:43:30.8845547Z                     #include <string>
2024-08-30T19:43:30.8845699Z                     
2024-08-30T19:43:30.8845879Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8846039Z                             std::string result = "";
2024-08-30T19:43:30.8846176Z                                 int shift = 7;
2024-08-30T19:43:30.8846263Z                     
2024-08-30T19:43:30.8846435Z                                     for (char c : input) {
2024-08-30T19:43:30.8846523Z                      ...
2024-08-30T19:43:30.8846859Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8847043Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8847351Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8847681Z [32m      cy:command ✔ [39m type	s, {force: true}
2024-08-30T19:43:30.8847976Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8848105Z                     #include <string>
2024-08-30T19:43:30.8848189Z                     
2024-08-30T19:43:30.8848375Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8848536Z                             std::string result = "";
2024-08-30T19:43:30.8848669Z                                 int shift = 7;
2024-08-30T19:43:30.8848753Z                     
2024-08-30T19:43:30.8848919Z                                     for (char c : input) {
2024-08-30T19:43:30.8849092Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8849393Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8849715Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8849875Z                                                 } else {
2024-08-30T19:43:30.8850060Z                                                                 result += c;
2024-08-30T19:43:30.8850190Z                                                 }
2024-08-30T19:43:30.8850302Z                                     }
2024-08-30T19:43:30.8850447Z                                         return res
2024-08-30T19:43:30.8854004Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return res","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-z ...
2024-08-30T19:43:30.8858394Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8858827Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8858957Z                     #include <string>
2024-08-30T19:43:30.8859136Z                     
2024-08-30T19:43:30.8859324Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8859483Z                             std::string result = "";
2024-08-30T19:43:30.8859630Z                                 int shift = 7;
2024-08-30T19:43:30.8859717Z                     
2024-08-30T19:43:30.8859879Z                                     for (char c : input) {
2024-08-30T19:43:30.8860058Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8860363Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8860777Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8860934Z                                                 } else {
2024-08-30T19:43:30.8861115Z                                                                 result += c;
2024-08-30T19:43:30.8861258Z                                                 }
2024-08-30T19:43:30.8861370Z                                     }
2024-08-30T19:43:30.8861620Z                                         return re -> #include <iostream>
2024-08-30T19:43:30.8861747Z                     #include <string>
2024-08-30T19:43:30.8861835Z                     
2024-08-30T19:43:30.8862027Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8862182Z                             std::string result = "";
2024-08-30T19:43:30.8862319Z                                 int shift = 7;
2024-08-30T19:43:30.8862411Z                     
2024-08-30T19:43:30.8862582Z                                     for (char c : input) { ...
2024-08-30T19:43:30.8862918Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8863107Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8863419Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8863678Z [32m      cy:command ✔ [39m type	u, {force: true}
2024-08-30T19:43:30.8863967Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8864096Z                     #include <string>
2024-08-30T19:43:30.8864182Z                     
2024-08-30T19:43:30.8864436Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8864611Z                             std::string result = "";
2024-08-30T19:43:30.8864748Z                                 int shift = 7;
2024-08-30T19:43:30.8864832Z                     
2024-08-30T19:43:30.8864997Z                                     for (char c : input) {
2024-08-30T19:43:30.8865209Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8865586Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8865915Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8866076Z                                                 } else {
2024-08-30T19:43:30.8866266Z                                                                 result += c;
2024-08-30T19:43:30.8866402Z                                                 }
2024-08-30T19:43:30.8866516Z                                     }
2024-08-30T19:43:30.8866666Z                                         return resu
2024-08-30T19:43:30.8869789Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return resu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a- ...
2024-08-30T19:43:30.8874214Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8874706Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8874836Z                     #include <string>
2024-08-30T19:43:30.8874932Z                     
2024-08-30T19:43:30.8875114Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8875275Z                             std::string result = "";
2024-08-30T19:43:30.8875417Z                                 int shift = 7;
2024-08-30T19:43:30.8875503Z                     
2024-08-30T19:43:30.8875664Z                                     for (char c : input) {
2024-08-30T19:43:30.8875845Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8876140Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8876466Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8876626Z                                                 } else {
2024-08-30T19:43:30.8876807Z                                                                 result += c;
2024-08-30T19:43:30.8877019Z                                                 }
2024-08-30T19:43:30.8877134Z                                     }
2024-08-30T19:43:30.8877382Z                                         return res -> #include <iostream>
2024-08-30T19:43:30.8877509Z                     #include <string>
2024-08-30T19:43:30.8877595Z                     
2024-08-30T19:43:30.8877782Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8878023Z                             std::string result = "";
2024-08-30T19:43:30.8878164Z                                 int shift = 7;
2024-08-30T19:43:30.8878257Z                     
2024-08-30T19:43:30.8878422Z                                     for (char c : input)  ...
2024-08-30T19:43:30.8878756Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8878947Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8879257Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8879510Z [32m      cy:command ✔ [39m type	l, {force: true}
2024-08-30T19:43:30.8879801Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8879934Z                     #include <string>
2024-08-30T19:43:30.8880018Z                     
2024-08-30T19:43:30.8880195Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8880356Z                             std::string result = "";
2024-08-30T19:43:30.8880504Z                                 int shift = 7;
2024-08-30T19:43:30.8880588Z                     
2024-08-30T19:43:30.8880757Z                                     for (char c : input) {
2024-08-30T19:43:30.8880930Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8881310Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8881638Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8881800Z                                                 } else {
2024-08-30T19:43:30.8881986Z                                                                 result += c;
2024-08-30T19:43:30.8882120Z                                                 }
2024-08-30T19:43:30.8882230Z                                     }
2024-08-30T19:43:30.8882382Z                                         return resul
2024-08-30T19:43:30.8885591Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return resul","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a ...
2024-08-30T19:43:30.8889995Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8890429Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8890558Z                     #include <string>
2024-08-30T19:43:30.8890651Z                     
2024-08-30T19:43:30.8890837Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8891296Z                             std::string result = "";
2024-08-30T19:43:30.8891469Z                                 int shift = 7;
2024-08-30T19:43:30.8891557Z                     
2024-08-30T19:43:30.8891727Z                                     for (char c : input) {
2024-08-30T19:43:30.8891913Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8892226Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8892557Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8892713Z                                                 } else {
2024-08-30T19:43:30.8892892Z                                                                 result += c;
2024-08-30T19:43:30.8893030Z                                                 }
2024-08-30T19:43:30.8893141Z                                     }
2024-08-30T19:43:30.8893396Z                                         return resu -> #include <iostream>
2024-08-30T19:43:30.8893523Z                     #include <string>
2024-08-30T19:43:30.8893609Z                     
2024-08-30T19:43:30.8893798Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8894041Z                             std::string result = "";
2024-08-30T19:43:30.8894181Z                                 int shift = 7;
2024-08-30T19:43:30.8894271Z                     
2024-08-30T19:43:30.8894439Z                                     for (char c : input) ...
2024-08-30T19:43:30.8894787Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8894978Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8895299Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8895545Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.8895833Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8896047Z                     #include <string>
2024-08-30T19:43:30.8896139Z                     
2024-08-30T19:43:30.8896325Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8896486Z                             std::string result = "";
2024-08-30T19:43:30.8896630Z                                 int shift = 7;
2024-08-30T19:43:30.8896715Z                     
2024-08-30T19:43:30.8896883Z                                     for (char c : input) {
2024-08-30T19:43:30.8897055Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8897357Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8897685Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8897839Z                                                 } else {
2024-08-30T19:43:30.8898025Z                                                                 result += c;
2024-08-30T19:43:30.8898164Z                                                 }
2024-08-30T19:43:30.8898279Z                                     }
2024-08-30T19:43:30.8898434Z                                         return result
2024-08-30T19:43:30.8901707Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[ ...
2024-08-30T19:43:30.8906057Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8906482Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8906610Z                     #include <string>
2024-08-30T19:43:30.8906696Z                     
2024-08-30T19:43:30.8906883Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8907114Z                             std::string result = "";
2024-08-30T19:43:30.8907258Z                                 int shift = 7;
2024-08-30T19:43:30.8907343Z                     
2024-08-30T19:43:30.8907505Z                                     for (char c : input) {
2024-08-30T19:43:30.8907685Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8907980Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8908298Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8908455Z                                                 } else {
2024-08-30T19:43:30.8908706Z                                                                 result += c;
2024-08-30T19:43:30.8908844Z                                                 }
2024-08-30T19:43:30.8908955Z                                     }
2024-08-30T19:43:30.8909208Z                                         return resul -> #include <iostream>
2024-08-30T19:43:30.8909337Z                     #include <string>
2024-08-30T19:43:30.8909422Z                     
2024-08-30T19:43:30.8909603Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8909766Z                             std::string result = "";
2024-08-30T19:43:30.8909903Z                                 int shift = 7;
2024-08-30T19:43:30.8909993Z                     
2024-08-30T19:43:30.8910156Z                                     for (char c : input ...
2024-08-30T19:43:30.8910482Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8910672Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8910989Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8911237Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.8911525Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8911652Z                     #include <string>
2024-08-30T19:43:30.8911744Z                     
2024-08-30T19:43:30.8911928Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8912089Z                             std::string result = "";
2024-08-30T19:43:30.8912295Z                                 int shift = 7;
2024-08-30T19:43:30.8912383Z                     
2024-08-30T19:43:30.8912549Z                                     for (char c : input) {
2024-08-30T19:43:30.8912726Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8913020Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8913412Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8913566Z                                                 } else {
2024-08-30T19:43:30.8913752Z                                                                 result += c;
2024-08-30T19:43:30.8913886Z                                                 }
2024-08-30T19:43:30.8913996Z                                     }
2024-08-30T19:43:30.8914154Z                                         return result;
2024-08-30T19:43:30.8917518Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/ ...
2024-08-30T19:43:30.8921993Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8922489Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8922622Z                     #include <string>
2024-08-30T19:43:30.8922707Z                     
2024-08-30T19:43:30.8922897Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8923055Z                             std::string result = "";
2024-08-30T19:43:30.8923199Z                                 int shift = 7;
2024-08-30T19:43:30.8923285Z                     
2024-08-30T19:43:30.8923447Z                                     for (char c : input) {
2024-08-30T19:43:30.8923625Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8923914Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8924243Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8924400Z                                                 } else {
2024-08-30T19:43:30.8924583Z                                                                 result += c;
2024-08-30T19:43:30.8924721Z                                                 }
2024-08-30T19:43:30.8924830Z                                     }
2024-08-30T19:43:30.8925166Z                                         return result -> #include <iostream>
2024-08-30T19:43:30.8925295Z                     #include <string>
2024-08-30T19:43:30.8925382Z                     
2024-08-30T19:43:30.8925566Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8925726Z                             std::string result = "";
2024-08-30T19:43:30.8925861Z                                 int shift = 7;
2024-08-30T19:43:30.8925960Z                     
2024-08-30T19:43:30.8926181Z                                     for (char c : inpu ...
2024-08-30T19:43:30.8926708Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8927000Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8927332Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8927521Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.8927642Z                     , {force: true}
2024-08-30T19:43:30.8927931Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8928069Z                     #include <string>
2024-08-30T19:43:30.8928154Z                     
2024-08-30T19:43:30.8928341Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8928506Z                             std::string result = "";
2024-08-30T19:43:30.8928644Z                                 int shift = 7;
2024-08-30T19:43:30.8928741Z                     
2024-08-30T19:43:30.8929003Z                                     for (char c : input) {
2024-08-30T19:43:30.8929277Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8929781Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8930381Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8930599Z                                                 } else {
2024-08-30T19:43:30.8930866Z                                                                 result += c;
2024-08-30T19:43:30.8931199Z                                                 }
2024-08-30T19:43:30.8931373Z                                     }
2024-08-30T19:43:30.8931585Z                                         return result;
2024-08-30T19:43:30.8931749Z                                         
2024-08-30T19:43:30.8935801Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = in ...
2024-08-30T19:43:30.8940385Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8940815Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8940950Z                     #include <string>
2024-08-30T19:43:30.8941037Z                     
2024-08-30T19:43:30.8941221Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8941386Z                             std::string result = "";
2024-08-30T19:43:30.8941605Z                                 int shift = 7;
2024-08-30T19:43:30.8941700Z                     
2024-08-30T19:43:30.8941861Z                                     for (char c : input) {
2024-08-30T19:43:30.8942033Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8942342Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8942661Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8942817Z                                                 } else {
2024-08-30T19:43:30.8943005Z                                                                 result += c;
2024-08-30T19:43:30.8943140Z                                                 }
2024-08-30T19:43:30.8943258Z                                     }
2024-08-30T19:43:30.8943508Z                                         return result; -> #include <iostream>
2024-08-30T19:43:30.8943632Z                     #include <string>
2024-08-30T19:43:30.8943723Z                     
2024-08-30T19:43:30.8943903Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8944058Z                             std::string result = "";
2024-08-30T19:43:30.8944281Z                                 int shift = 7;
2024-08-30T19:43:30.8944364Z                     
2024-08-30T19:43:30.8944532Z                                     for (char c : inp ...
2024-08-30T19:43:30.8944866Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8945050Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.8945365Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.8945606Z [32m      cy:command ✔ [39m type	}, {force: true}
2024-08-30T19:43:30.8945904Z [37m        cons:log ✱ [39m codee update: #include <iostream>
2024-08-30T19:43:30.8946027Z                     #include <string>
2024-08-30T19:43:30.8946184Z                     
2024-08-30T19:43:30.8946377Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8946531Z                             std::string result = "";
2024-08-30T19:43:30.8946673Z                                 int shift = 7;
2024-08-30T19:43:30.8946765Z                     
2024-08-30T19:43:30.8946924Z                                     for (char c : input) {
2024-08-30T19:43:30.8947099Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8947395Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8947711Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8947870Z                                                 } else {
2024-08-30T19:43:30.8948053Z                                                                 result += c;
2024-08-30T19:43:30.8948195Z                                                 }
2024-08-30T19:43:30.8948306Z                                     }
2024-08-30T19:43:30.8948457Z                                         return result;
2024-08-30T19:43:30.8948551Z                     }
2024-08-30T19:43:30.8951824Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.8956223Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.8956653Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.8956785Z                     #include <string>
2024-08-30T19:43:30.8956872Z                     
2024-08-30T19:43:30.8957060Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8957290Z                             std::string result = "";
2024-08-30T19:43:30.8957436Z                                 int shift = 7;
2024-08-30T19:43:30.8957522Z                     
2024-08-30T19:43:30.8957684Z                                     for (char c : input) {
2024-08-30T19:43:30.8957864Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.8958163Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.8958486Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.8958651Z                                                 } else {
2024-08-30T19:43:30.8958901Z                                                                 result += c;
2024-08-30T19:43:30.8959041Z                                                 }
2024-08-30T19:43:30.8959154Z                                     }
2024-08-30T19:43:30.8959304Z                                         return result;
2024-08-30T19:43:30.8959535Z                                          -> #include <iostream>
2024-08-30T19:43:30.8959652Z                     #include <string>
2024-08-30T19:43:30.8959736Z                     
2024-08-30T19:43:30.8959927Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.8960081Z                             std::string result = "";
2024-08-30T19:43:30.8960218Z                                 int shift = 7;
2024-08-30T19:43:30.8960308Z                     
2024-08-30T19:43:30.8960417Z                                  ...
2024-08-30T19:43:30.8960693Z [32m      cy:command ✔ [39m get	#coderunner-run-button
2024-08-30T19:43:30.8961313Z [32m      cy:command ✔ [39m assert	expected **<button#coderunner-run-button.p-button.p-component>** to be **enabled**
2024-08-30T19:43:30.8961580Z [32m      cy:command ✔ [39m get	#coderunner-run-button
2024-08-30T19:43:30.8962192Z [32m      cy:command ✔ [39m assert	expected **<button#coderunner-run-button.p-button.p-component>** to be **visible**
2024-08-30T19:43:30.8962457Z [32m      cy:command ✔ [39m get	#coderunner-run-button
2024-08-30T19:43:30.8962643Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.8962842Z [37m        cons:log ✱ [39m On run code
2024-08-30T19:43:30.8968410Z [37m        cons:log ✱ [39m exerciseCreatorController: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7 ...
2024-08-30T19:43:30.8972044Z [37m        cons:log ✱ [39m runSignleExerciseCreationTest: {"code":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","manualTests":[{"input":"\"A\"","output":null,"expectedOutput":"\"H\"","errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"","executionTime":-1},{" ...
2024-08-30T19:43:30.8972465Z [37m        cons:log ✱ [39m desitn: /public/app/CodeRun/ExerciseCodeTests
2024-08-30T19:43:30.8975868Z [37m        cons:log ✱ [39m published {"destination":"/public/app/CodeRun/ExerciseCodeTests","body":"{\"code\":\"#include <iostream>\\n#include <string>\\n\\nstd::string solution(std::string input) {\\n        std::string result = \\\"\\\";\\n            int shift = 7;\\n\\n                for (char c : input) {\\n                            if (isalpha(c)) { \\n                                            char base = islower(c) ? 'a' : 'A'; \\n                                                        result += (c - base + shift) % 26 + base;\\n                            } else {\\n                                            result += c;\\n                            }\\n                }\\n                    return result;\\n}\",\"manualTests\":[{\"input\":\"\\\"A\\\"\",\"output\":null,\"expectedOutput\":\"\\\"H\\\"\ ...
2024-08-30T19:43:30.8976234Z [32m      cy:command ✔ [39m get	#TestResultCard0
2024-08-30T19:43:30.8976499Z [32m      cy:command ✔ [39m contains	span, Result
2024-08-30T19:43:30.8976682Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.8977009Z [32m      cy:command ✔ [39m get	#tab-result-expected-container-0
2024-08-30T19:43:30.8977266Z [32m      cy:command ✔ [39m contains	expeteced: "H"
2024-08-30T19:43:30.8977581Z [32m      cy:command ✔ [39m get	#tab-result-achived-container-0
2024-08-30T19:43:30.8977820Z [32m      cy:command ✔ [39m contains	achived: "H"
2024-08-30T19:43:30.8978321Z [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerResults
2024-08-30T19:43:30.8982392Z [37m        cons:log ✱ [39m _CodeResultsCallBack recived  {"results":[{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"H","variablesInput":"A","executionTime":53},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"h","variablesInput":"a","executionTime":59},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","variablesInput":"The quick brown fox jumps over a lazy dog","executionTime":55},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","variablesInput":"The five boxing wizards jump quickly","executionTime":57},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"tDmc\tX","variablesInput":"mWfv\tQ","executionTime":62},{"cons ...
2024-08-30T19:43:30.8982764Z [37m        cons:log ✱ [39m ---------------------------------------------------
2024-08-30T19:43:30.8982861Z                     
2024-08-30T19:43:30.8983204Z [37m        cons:log ✱ [39m create test langauge update: "CPP_RUNNER"
2024-08-30T19:43:30.8987261Z [37m        cons:log ✱ [39m create test rtesult update: [{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"H","variablesInput":"A","executionTime":53},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"h","variablesInput":"a","executionTime":59},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","variablesInput":"The quick brown fox jumps over a lazy dog","executionTime":55},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","variablesInput":"The five boxing wizards jump quickly","executionTime":57},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"tDmc\tX","variablesInput":"mWfv\tQ","executionTime":62},{"consoleOutput":{" ...
2024-08-30T19:43:30.8987617Z [37m        cons:log ✱ [39m ---------------------------------------------------
2024-08-30T19:43:30.8987708Z                     
2024-08-30T19:43:30.8992024Z [37m        cons:log ✱ [39m i: 4::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
2024-08-30T19:43:30.8996272Z [37m        cons:log ✱ [39m i: 5::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
2024-08-30T19:43:30.9000851Z [37m        cons:log ✱ [39m i: 6::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
2024-08-30T19:43:30.9005224Z [37m        cons:log ✱ [39m i: 7::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
2024-08-30T19:43:30.9009323Z [37m        cons:log ✱ [39m i: 8::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
2024-08-30T19:43:30.9013665Z [37m        cons:log ✱ [39m i: 9::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
2024-08-30T19:43:30.9018040Z [37m        cons:log ✱ [39m ---isSolved values: {"CPP_RUNNER":{"tests":[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbt ...
2024-08-30T19:43:30.9022141Z [37m        cons:log ✱ [39m ---isSolved values amont: : 2 : [{"tests":[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw ...
2024-08-30T19:43:30.9023091Z [37m        cons:log ✱ [39m test: {"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53}
2024-08-30T19:43:30.9024098Z [37m        cons:log ✱ [39m test: {"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59}
2024-08-30T19:43:30.9025676Z [37m        cons:log ✱ [39m test: {"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55}
2024-08-30T19:43:30.9027188Z [37m        cons:log ✱ [39m test: {"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"efd68762-a408-44fa-8378-675c74c56885","executionTime":57}
2024-08-30T19:43:30.9028042Z [37m        cons:log ✱ [39m test: {"input":"mWfv\tQ","output":"tDmc\tX","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":62}
2024-08-30T19:43:30.9028986Z [37m        cons:log ✱ [39m test: {"input":"1sqek0w\n8fkGpkq","output":"1zxlr0d\n8mrNwrx","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":45}
2024-08-30T19:43:30.9029822Z [37m        cons:log ✱ [39m test: {"input":"7","output":"7","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":60}
2024-08-30T19:43:30.9030668Z [37m        cons:log ✱ [39m test: {"input":"BUTSdqdn","output":"IBAZkxku","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":49}
2024-08-30T19:43:30.9031416Z [37m        cons:log ✱ [39m test: {"input":"1","output":"1","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":42}
2024-08-30T19:43:30.9032230Z [37m        cons:log ✱ [39m test: {"input":"p\nl","output":"w\ns","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":53}
2024-08-30T19:43:30.9036939Z [37m        cons:log ✱ [39m test: {"input":"A","expectedOutput":"H","output":null,"errorOutput":"/app/8de5c8d8-14e9-4417-82ab-41203584d60c.js:16\n const outputGenerator_9350093b6d1e4d10aaa8c6f1de65b50c_fs = require('fs');\n ^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at internalCompileFunction (node:internal/vm:77:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1290:20)\n    at Module._compile (node:internal/modules/cjs/loader:1342:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js v21.6.1\n","consoleO ...
2024-08-30T19:43:30.9037167Z [37m        cons:log ✱ [39m false
2024-08-30T19:43:30.9041515Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9041777Z [32m      cy:command ✔ [39m get	#TestResultCard1
2024-08-30T19:43:30.9042016Z [32m      cy:command ✔ [39m contains	span, Result
2024-08-30T19:43:30.9042209Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.9042598Z [32m      cy:command ✔ [39m get	#tab-result-expected-container-1
2024-08-30T19:43:30.9042869Z [32m      cy:command ✔ [39m contains	expeteced: "h"
2024-08-30T19:43:30.9043181Z [32m      cy:command ✔ [39m get	#tab-result-achived-container-1
2024-08-30T19:43:30.9043434Z [32m      cy:command ✔ [39m contains	achived: "h"
2024-08-30T19:43:30.9043669Z [32m      cy:command ✔ [39m get	#TestResultCard2
2024-08-30T19:43:30.9043900Z [32m      cy:command ✔ [39m contains	span, Result
2024-08-30T19:43:30.9044097Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.9044415Z [32m      cy:command ✔ [39m get	#tab-result-expected-container-2
2024-08-30T19:43:30.9044873Z [32m      cy:command ✔ [39m contains	expeteced: "Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn"
2024-08-30T19:43:30.9045179Z [32m      cy:command ✔ [39m get	#tab-result-achived-container-2
2024-08-30T19:43:30.9045614Z [32m      cy:command ✔ [39m contains	achived: "Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn"
2024-08-30T19:43:30.9045866Z [32m      cy:command ✔ [39m get	#TestResultCard3
2024-08-30T19:43:30.9046099Z [32m      cy:command ✔ [39m contains	span, Result
2024-08-30T19:43:30.9046285Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.9046596Z [32m      cy:command ✔ [39m get	#tab-result-expected-container-3
2024-08-30T19:43:30.9047118Z [32m      cy:command ✔ [39m contains	expeteced: "Aol mpcl ivepun dpghykz qbtw xbpjrsf"
2024-08-30T19:43:30.9047425Z [32m      cy:command ✔ [39m get	#tab-result-achived-container-3
2024-08-30T19:43:30.9047844Z [32m      cy:command ✔ [39m contains	achived: "Aol mpcl ivepun dpghykz qbtw xbpjrsf"
2024-08-30T19:43:30.9048138Z [32m      cy:command ✔ [39m get	#coderunner-langage-dropdown
2024-08-30T19:43:30.9048321Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.9048552Z [32m      cy:command ✔ [39m get	.p-dropdown-item
2024-08-30T19:43:30.9048752Z [32m      cy:command ✔ [39m contains	js
2024-08-30T19:43:30.9049012Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.9049271Z [37m        cons:log ✱ [39m test change: JS_RUNNER
2024-08-30T19:43:30.9049492Z [32m      cy:command ✔ [39m get	.p-button
2024-08-30T19:43:30.9049732Z [32m      cy:command ✔ [39m contains	span, Change
2024-08-30T19:43:30.9049917Z [32m      cy:command ✔ [39m click	
2024-08-30T19:43:30.9050185Z [37m        cons:log ✱ [39m  confirm change: JS_RUNNER
2024-08-30T19:43:30.9050382Z [37m        cons:log ✱ [39m set awaitng
2024-08-30T19:43:30.9051601Z [37m        cons:log ✱ [39m {"__v_isShallow":false,"dep":{},"__v_isRef":true,"_rawValue":{"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"},"_value":{"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}}
2024-08-30T19:43:30.9052013Z [37m        cons:log ✱ [39m {"codeRunnerType":"CPP_RUNNER","state":"AWAITING"}
2024-08-30T19:43:30.9052288Z [37m        cons:log ✱ [39m codeRunnerName: "JS_RUNNER"
2024-08-30T19:43:30.9052655Z [37m        cons:log ✱ [39m requestCodeRunner: {"CodeRunnerType":"JS_RUNNER"}
2024-08-30T19:43:30.9053042Z [37m        cons:log ✱ [39m codeRunnerRequest: {"CodeRunnerType":"JS_RUNNER"}
2024-08-30T19:43:30.9053358Z [37m        cons:log ✱ [39m desitn: /public/app/codeRunnerRequest
2024-08-30T19:43:30.9054004Z [37m        cons:log ✱ [39m published {"destination":"/public/app/codeRunnerRequest","body":"{\"CodeRunnerType\":\"JS_RUNNER\"}"}
2024-08-30T19:43:30.9054306Z [32m      cy:command ✔ [39m get	#coderunner-loading-dialog
2024-08-30T19:43:30.9054794Z [32m      cy:command ✔ [39m assert	expected **#coderunner-loading-dialog** not to exist in the DOM
2024-08-30T19:43:30.9055050Z                     Actual: 	"#coderunner-loading-dialog"
2024-08-30T19:43:30.9055288Z                     Expected: 	"#coderunner-loading-dialog"
2024-08-30T19:43:30.9055780Z [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
2024-08-30T19:43:30.9056277Z [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:30.9056748Z [37m        cons:log ✱ [39m typeof this.eventHandlers  object
2024-08-30T19:43:30.9057170Z [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
2024-08-30T19:43:30.9057364Z [37m        cons:log ✱ [39m length  1
2024-08-30T19:43:30.9057557Z [37m        cons:log ✱ [39m |Test
2024-08-30T19:43:30.9057910Z [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:30.9058325Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
2024-08-30T19:43:30.9058461Z                     #include <string>
2024-08-30T19:43:30.9058551Z                     
2024-08-30T19:43:30.9058749Z                     std::string solution(std::string input) {
2024-08-30T19:43:30.9058907Z                             std::string result = "";
2024-08-30T19:43:30.9059046Z                                 int shift = 7;
2024-08-30T19:43:30.9059140Z                     
2024-08-30T19:43:30.9059309Z                                     for (char c : input) {
2024-08-30T19:43:30.9059485Z                                                 if (isalpha(c)) { 
2024-08-30T19:43:30.9059786Z                                                                 char base = islower(c) ? 'a' : 'A'; 
2024-08-30T19:43:30.9060208Z                                                                             result += (c - base + shift) % 26 + base;
2024-08-30T19:43:30.9060371Z                                                 } else {
2024-08-30T19:43:30.9060557Z                                                                 result += c;
2024-08-30T19:43:30.9060691Z                                                 }
2024-08-30T19:43:30.9060808Z                                     }
2024-08-30T19:43:30.9060960Z                                         return result;
2024-08-30T19:43:30.9061169Z                     } -> function solution(input) {
2024-08-30T19:43:30.9061299Z                         let result = "";
2024-08-30T19:43:30.9061501Z                         const shift = 7;
2024-08-30T19:43:30.9061596Z                     
2024-08-30T19:43:30.9061778Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9061917Z                             let c = input[i];
2024-08-30T19:43:30.9062134Z                             if (/[a-zA-Z]/.test(c))  ...
2024-08-30T19:43:30.9062633Z [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
2024-08-30T19:43:30.9063192Z [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:30.9063495Z [37m        cons:log ✱ [39m typeof this.eventHandlers  object
2024-08-30T19:43:30.9063905Z [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
2024-08-30T19:43:30.9064104Z [37m        cons:log ✱ [39m length  1
2024-08-30T19:43:30.9064279Z [37m        cons:log ✱ [39m |Test
2024-08-30T19:43:30.9064634Z [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
2024-08-30T19:43:30.9064837Z [32m      cy:command ✔ [39m wait	1000
2024-08-30T19:43:30.9065201Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9065495Z [32m      cy:command ✔ [39m type	{moveToEnd}, {force: true}
2024-08-30T19:43:30.9065819Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9066008Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9066313Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9066563Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9066888Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9067028Z                         let result = "";
2024-08-30T19:43:30.9067153Z                         const shift = 7;
2024-08-30T19:43:30.9067240Z                     
2024-08-30T19:43:30.9067430Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9067647Z                             let c = input[i];
2024-08-30T19:43:30.9067859Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9068150Z                                                               let base = c >= 'a' && c <= 'z' ? 
2024-08-30T19:43:30.9071314Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9075661Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9076253Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9076389Z                         let result = "";
2024-08-30T19:43:30.9076520Z                         const shift = 7;
2024-08-30T19:43:30.9076607Z                     
2024-08-30T19:43:30.9076797Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9076940Z                             let c = input[i];
2024-08-30T19:43:30.9077142Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9077580Z                                                               let base = c >= 'a' && c <= 'z' ? -> function solution(input) {
2024-08-30T19:43:30.9077716Z                         let result = "";
2024-08-30T19:43:30.9077840Z                         const shift = 7;
2024-08-30T19:43:30.9077926Z                     
2024-08-30T19:43:30.9078115Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9078251Z                             let c = input[i];
2024-08-30T19:43:30.9078466Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9078751Z                                                               let base = c >= 'a' && c <= 'z' ? 
2024-08-30T19:43:30.9079076Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9079271Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9079581Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9079829Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.9080157Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9080286Z                         let result = "";
2024-08-30T19:43:30.9080417Z                         const shift = 7;
2024-08-30T19:43:30.9080503Z                     
2024-08-30T19:43:30.9080690Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9080826Z                             let c = input[i];
2024-08-30T19:43:30.9081097Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9081391Z                                                               let base = c >= 'a' && c <= 'z' ? '
2024-08-30T19:43:30.9084531Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9088892Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9089426Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9089625Z                         let result = "";
2024-08-30T19:43:30.9089749Z                         const shift = 7;
2024-08-30T19:43:30.9089841Z                     
2024-08-30T19:43:30.9090023Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9090173Z                             let c = input[i];
2024-08-30T19:43:30.9090372Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9090817Z                                                               let base = c >= 'a' && c <= 'z' ?  -> function solution(input) {
2024-08-30T19:43:30.9090952Z                         let result = "";
2024-08-30T19:43:30.9091303Z                         const shift = 7;
2024-08-30T19:43:30.9091393Z                     
2024-08-30T19:43:30.9091591Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9091729Z                             let c = input[i];
2024-08-30T19:43:30.9091952Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9092239Z                                                               let base = c >= 'a' && c <= 'z' ? '
2024-08-30T19:43:30.9092578Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9092771Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9093088Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9093336Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.9093663Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9093801Z                         let result = "";
2024-08-30T19:43:30.9093932Z                         const shift = 7;
2024-08-30T19:43:30.9094018Z                     
2024-08-30T19:43:30.9094206Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9094343Z                             let c = input[i];
2024-08-30T19:43:30.9094546Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9094954Z                                                               let base = c >= 'a' && c <= 'z' ? 'a
2024-08-30T19:43:30.9098267Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9102669Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9103244Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9103458Z                         let result = "";
2024-08-30T19:43:30.9103587Z                         const shift = 7;
2024-08-30T19:43:30.9103681Z                     
2024-08-30T19:43:30.9103865Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9104008Z                             let c = input[i];
2024-08-30T19:43:30.9104218Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9104594Z                                                               let base = c >= 'a' && c <= 'z' ? ' -> function solution(input) {
2024-08-30T19:43:30.9104806Z                         let result = "";
2024-08-30T19:43:30.9104932Z                         const shift = 7;
2024-08-30T19:43:30.9105017Z                     
2024-08-30T19:43:30.9105204Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9105339Z                             let c = input[i];
2024-08-30T19:43:30.9105538Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9105835Z                                                               let base = c >= 'a' && c <= 'z' ? 'a
2024-08-30T19:43:30.9106165Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9106355Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9106663Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9106912Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.9107236Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9107367Z                         let result = "";
2024-08-30T19:43:30.9107499Z                         const shift = 7;
2024-08-30T19:43:30.9107584Z                     
2024-08-30T19:43:30.9107763Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9107903Z                             let c = input[i];
2024-08-30T19:43:30.9108101Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9108472Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'
2024-08-30T19:43:30.9111652Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9115990Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9116522Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9116654Z                         let result = "";
2024-08-30T19:43:30.9116846Z                         const shift = 7;
2024-08-30T19:43:30.9116943Z                     
2024-08-30T19:43:30.9117125Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9117262Z                             let c = input[i];
2024-08-30T19:43:30.9117471Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9117853Z                                                               let base = c >= 'a' && c <= 'z' ? 'a -> function solution(input) {
2024-08-30T19:43:30.9117984Z                         let result = "";
2024-08-30T19:43:30.9118171Z                         const shift = 7;
2024-08-30T19:43:30.9118262Z                     
2024-08-30T19:43:30.9118448Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9118585Z                             let c = input[i];
2024-08-30T19:43:30.9118782Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9119074Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'
2024-08-30T19:43:30.9119405Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9119594Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9119901Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9120155Z [32m      cy:command ✔ [39m type	., {force: true}
2024-08-30T19:43:30.9120484Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9120614Z                         let result = "";
2024-08-30T19:43:30.9120748Z                         const shift = 7;
2024-08-30T19:43:30.9120833Z                     
2024-08-30T19:43:30.9121014Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9121155Z                             let c = input[i];
2024-08-30T19:43:30.9121353Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9121645Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.
2024-08-30T19:43:30.9124847Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9129188Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9129717Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9129849Z                         let result = "";
2024-08-30T19:43:30.9129973Z                         const shift = 7;
2024-08-30T19:43:30.9130136Z                     
2024-08-30T19:43:30.9130449Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9130671Z                             let c = input[i];
2024-08-30T19:43:30.9130943Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9131574Z                                                               let base = c >= 'a' && c <= 'z' ? 'a' -> function solution(input) {
2024-08-30T19:43:30.9131712Z                         let result = "";
2024-08-30T19:43:30.9131837Z                         const shift = 7;
2024-08-30T19:43:30.9132036Z                     
2024-08-30T19:43:30.9132231Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9132434Z                             let c = input[i];
2024-08-30T19:43:30.9132822Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9133344Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.
2024-08-30T19:43:30.9133727Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9134109Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9134665Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9134936Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.9135294Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9135429Z                         let result = "";
2024-08-30T19:43:30.9135560Z                         const shift = 7;
2024-08-30T19:43:30.9135648Z                     
2024-08-30T19:43:30.9135838Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9135983Z                             let c = input[i];
2024-08-30T19:43:30.9136183Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9136471Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.c
2024-08-30T19:43:30.9139767Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9144105Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9144649Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9144784Z                         let result = "";
2024-08-30T19:43:30.9144908Z                         const shift = 7;
2024-08-30T19:43:30.9145000Z                     
2024-08-30T19:43:30.9145262Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9145405Z                             let c = input[i];
2024-08-30T19:43:30.9145613Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9145995Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'. -> function solution(input) {
2024-08-30T19:43:30.9146128Z                         let result = "";
2024-08-30T19:43:30.9146250Z                         const shift = 7;
2024-08-30T19:43:30.9146334Z                     
2024-08-30T19:43:30.9146606Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9146748Z                             let c = input[i];
2024-08-30T19:43:30.9146946Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9147241Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.c
2024-08-30T19:43:30.9147569Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9147766Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9148075Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9148318Z [32m      cy:command ✔ [39m type	h, {force: true}
2024-08-30T19:43:30.9148647Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9148780Z                         let result = "";
2024-08-30T19:43:30.9148906Z                         const shift = 7;
2024-08-30T19:43:30.9148991Z                     
2024-08-30T19:43:30.9149173Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9149315Z                             let c = input[i];
2024-08-30T19:43:30.9149512Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9149804Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.ch
2024-08-30T19:43:30.9153008Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9157364Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9157887Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9158027Z                         let result = "";
2024-08-30T19:43:30.9158150Z                         const shift = 7;
2024-08-30T19:43:30.9158242Z                     
2024-08-30T19:43:30.9158424Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9158631Z                             let c = input[i];
2024-08-30T19:43:30.9158837Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9159227Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.c -> function solution(input) {
2024-08-30T19:43:30.9159355Z                         let result = "";
2024-08-30T19:43:30.9159484Z                         const shift = 7;
2024-08-30T19:43:30.9159569Z                     
2024-08-30T19:43:30.9159754Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9159956Z                             let c = input[i];
2024-08-30T19:43:30.9160158Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9160459Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.ch
2024-08-30T19:43:30.9160787Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9160986Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9161305Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9161546Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.9161878Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9162013Z                         let result = "";
2024-08-30T19:43:30.9162143Z                         const shift = 7;
2024-08-30T19:43:30.9162230Z                     
2024-08-30T19:43:30.9162407Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9162556Z                             let c = input[i];
2024-08-30T19:43:30.9162753Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9163046Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.cha
2024-08-30T19:43:30.9166320Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9170681Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9171449Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9171601Z                         let result = "";
2024-08-30T19:43:30.9171723Z                         const shift = 7;
2024-08-30T19:43:30.9171814Z                     
2024-08-30T19:43:30.9171997Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9172237Z                             let c = input[i];
2024-08-30T19:43:30.9172465Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9172864Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.ch -> function solution(input) {
2024-08-30T19:43:30.9172990Z                         let result = "";
2024-08-30T19:43:30.9173121Z                         const shift = 7;
2024-08-30T19:43:30.9173205Z                     
2024-08-30T19:43:30.9173392Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9173607Z                             let c = input[i];
2024-08-30T19:43:30.9173816Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9174121Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.cha
2024-08-30T19:43:30.9174457Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9174642Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9174970Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9175213Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.9175544Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9175677Z                         let result = "";
2024-08-30T19:43:30.9175810Z                         const shift = 7;
2024-08-30T19:43:30.9175897Z                     
2024-08-30T19:43:30.9176078Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9176228Z                             let c = input[i];
2024-08-30T19:43:30.9176428Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9176727Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.char
2024-08-30T19:43:30.9179953Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9184299Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9184831Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9184970Z                         let result = "";
2024-08-30T19:43:30.9185095Z                         const shift = 7;
2024-08-30T19:43:30.9185187Z                     
2024-08-30T19:43:30.9185374Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9185511Z                             let c = input[i];
2024-08-30T19:43:30.9185786Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9186179Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.cha -> function solution(input) {
2024-08-30T19:43:30.9186303Z                         let result = "";
2024-08-30T19:43:30.9186437Z                         const shift = 7;
2024-08-30T19:43:30.9186522Z                     
2024-08-30T19:43:30.9186703Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9186845Z                             let c = input[i];
2024-08-30T19:43:30.9187105Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9187415Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.char
2024-08-30T19:43:30.9187742Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9187927Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9188254Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9188508Z [32m      cy:command ✔ [39m type	C, {force: true}
2024-08-30T19:43:30.9188840Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9188973Z                         let result = "";
2024-08-30T19:43:30.9189102Z                         const shift = 7;
2024-08-30T19:43:30.9189193Z                     
2024-08-30T19:43:30.9189375Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9189516Z                             let c = input[i];
2024-08-30T19:43:30.9189720Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9190020Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charC
2024-08-30T19:43:30.9193230Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9197766Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9198354Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9198501Z                         let result = "";
2024-08-30T19:43:30.9198626Z                         const shift = 7;
2024-08-30T19:43:30.9198712Z                     
2024-08-30T19:43:30.9198900Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9199040Z                             let c = input[i];
2024-08-30T19:43:30.9199249Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9199751Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.char -> function solution(input) {
2024-08-30T19:43:30.9199879Z                         let result = "";
2024-08-30T19:43:30.9200007Z                         const shift = 7;
2024-08-30T19:43:30.9200097Z                     
2024-08-30T19:43:30.9200276Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9200419Z                             let c = input[i];
2024-08-30T19:43:30.9200686Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9201003Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charC
2024-08-30T19:43:30.9201335Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9201520Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9201841Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9202091Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.9202425Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9202560Z                         let result = "";
2024-08-30T19:43:30.9202684Z                         const shift = 7;
2024-08-30T19:43:30.9202783Z                     
2024-08-30T19:43:30.9202967Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9203115Z                             let c = input[i];
2024-08-30T19:43:30.9203320Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9203628Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCo
2024-08-30T19:43:30.9206863Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9211752Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9212389Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9212540Z                         let result = "";
2024-08-30T19:43:30.9212666Z                         const shift = 7;
2024-08-30T19:43:30.9212755Z                     
2024-08-30T19:43:30.9212947Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9213087Z                             let c = input[i];
2024-08-30T19:43:30.9213295Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9213783Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charC -> function solution(input) {
2024-08-30T19:43:30.9213911Z                         let result = "";
2024-08-30T19:43:30.9214040Z                         const shift = 7;
2024-08-30T19:43:30.9214130Z                     
2024-08-30T19:43:30.9214310Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9214449Z                             let c = input[i];
2024-08-30T19:43:30.9214644Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9215036Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCo
2024-08-30T19:43:30.9215374Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9215561Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9215874Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9216118Z [32m      cy:command ✔ [39m type	d, {force: true}
2024-08-30T19:43:30.9216451Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9216582Z                         let result = "";
2024-08-30T19:43:30.9216708Z                         const shift = 7;
2024-08-30T19:43:30.9216803Z                     
2024-08-30T19:43:30.9216984Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9217127Z                             let c = input[i];
2024-08-30T19:43:30.9217326Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9217640Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCod
2024-08-30T19:43:30.9220882Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9225237Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9225763Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9225899Z                         let result = "";
2024-08-30T19:43:30.9226025Z                         const shift = 7;
2024-08-30T19:43:30.9226110Z                     
2024-08-30T19:43:30.9226299Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9226437Z                             let c = input[i];
2024-08-30T19:43:30.9226644Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9227046Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCo -> function solution(input) {
2024-08-30T19:43:30.9227315Z                         let result = "";
2024-08-30T19:43:30.9227443Z                         const shift = 7;
2024-08-30T19:43:30.9227530Z                     
2024-08-30T19:43:30.9227711Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9227852Z                             let c = input[i];
2024-08-30T19:43:30.9228049Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9228424Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCod
2024-08-30T19:43:30.9228760Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9228943Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9229259Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9229498Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.9229843Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9229975Z                         let result = "";
2024-08-30T19:43:30.9230098Z                         const shift = 7;
2024-08-30T19:43:30.9230190Z                     
2024-08-30T19:43:30.9230374Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9230510Z                             let c = input[i];
2024-08-30T19:43:30.9230712Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9231027Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCode
2024-08-30T19:43:30.9234232Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9238591Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9239111Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9239247Z                         let result = "";
2024-08-30T19:43:30.9239374Z                         const shift = 7;
2024-08-30T19:43:30.9239460Z                     
2024-08-30T19:43:30.9239646Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9239781Z                             let c = input[i];
2024-08-30T19:43:30.9239980Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9240394Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCod -> function solution(input) {
2024-08-30T19:43:30.9240586Z                         let result = "";
2024-08-30T19:43:30.9240713Z                         const shift = 7;
2024-08-30T19:43:30.9240799Z                     
2024-08-30T19:43:30.9240973Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9241121Z                             let c = input[i];
2024-08-30T19:43:30.9241322Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9241693Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCode
2024-08-30T19:43:30.9242033Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9242218Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9242535Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9242778Z [32m      cy:command ✔ [39m type	A, {force: true}
2024-08-30T19:43:30.9243118Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9243252Z                         let result = "";
2024-08-30T19:43:30.9243375Z                         const shift = 7;
2024-08-30T19:43:30.9243469Z                     
2024-08-30T19:43:30.9243651Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9243794Z                             let c = input[i];
2024-08-30T19:43:30.9243999Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9244316Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeA
2024-08-30T19:43:30.9247528Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9252355Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9253062Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9253204Z                         let result = "";
2024-08-30T19:43:30.9253329Z                         const shift = 7;
2024-08-30T19:43:30.9253422Z                     
2024-08-30T19:43:30.9253611Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9253748Z                             let c = input[i];
2024-08-30T19:43:30.9253951Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9254370Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCode -> function solution(input) {
2024-08-30T19:43:30.9254591Z                         let result = "";
2024-08-30T19:43:30.9254721Z                         const shift = 7;
2024-08-30T19:43:30.9254808Z                     
2024-08-30T19:43:30.9254986Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9255136Z                             let c = input[i];
2024-08-30T19:43:30.9255336Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9255726Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeA
2024-08-30T19:43:30.9256070Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9256258Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9256584Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9256828Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.9257159Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9257298Z                         let result = "";
2024-08-30T19:43:30.9257425Z                         const shift = 7;
2024-08-30T19:43:30.9257516Z                     
2024-08-30T19:43:30.9257704Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9257847Z                             let c = input[i];
2024-08-30T19:43:30.9258056Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9258383Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt
2024-08-30T19:43:30.9261612Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9266065Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9266591Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9266730Z                         let result = "";
2024-08-30T19:43:30.9266853Z                         const shift = 7;
2024-08-30T19:43:30.9266942Z                     
2024-08-30T19:43:30.9267134Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9267270Z                             let c = input[i];
2024-08-30T19:43:30.9267469Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9267888Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeA -> function solution(input) {
2024-08-30T19:43:30.9268084Z                         let result = "";
2024-08-30T19:43:30.9268213Z                         const shift = 7;
2024-08-30T19:43:30.9268297Z                     
2024-08-30T19:43:30.9268475Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9268620Z                             let c = input[i];
2024-08-30T19:43:30.9268819Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9269139Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt
2024-08-30T19:43:30.9269532Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9269721Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9270036Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9270276Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.9270605Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9270743Z                         let result = "";
2024-08-30T19:43:30.9270864Z                         const shift = 7;
2024-08-30T19:43:30.9270951Z                     
2024-08-30T19:43:30.9271128Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9271264Z                             let c = input[i];
2024-08-30T19:43:30.9271464Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9271785Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(
2024-08-30T19:43:30.9275557Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9279993Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9280452Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9280668Z                         let result = "";
2024-08-30T19:43:30.9280795Z                         const shift = 7;
2024-08-30T19:43:30.9280878Z                     
2024-08-30T19:43:30.9281070Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9281208Z                             let c = input[i];
2024-08-30T19:43:30.9281410Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9281835Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt -> function solution(input) {
2024-08-30T19:43:30.9282030Z                         let result = "";
2024-08-30T19:43:30.9282161Z                         const shift = 7;
2024-08-30T19:43:30.9282244Z                     
2024-08-30T19:43:30.9282423Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9282562Z                             let c = input[i];
2024-08-30T19:43:30.9282767Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9283090Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(
2024-08-30T19:43:30.9283497Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9283686Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9284006Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9284249Z [32m      cy:command ✔ [39m type	0, {force: true}
2024-08-30T19:43:30.9284580Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9284713Z                         let result = "";
2024-08-30T19:43:30.9284840Z                         const shift = 7;
2024-08-30T19:43:30.9284930Z                     
2024-08-30T19:43:30.9285108Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9285243Z                             let c = input[i];
2024-08-30T19:43:30.9285453Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9285781Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0
2024-08-30T19:43:30.9289290Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9294124Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9294634Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9294923Z                         let result = "";
2024-08-30T19:43:30.9295052Z                         const shift = 7;
2024-08-30T19:43:30.9295138Z                     
2024-08-30T19:43:30.9295330Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9295466Z                             let c = input[i];
2024-08-30T19:43:30.9295670Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9296089Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt( -> function solution(input) {
2024-08-30T19:43:30.9296295Z                         let result = "";
2024-08-30T19:43:30.9296429Z                         const shift = 7;
2024-08-30T19:43:30.9296513Z                     
2024-08-30T19:43:30.9296693Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9296834Z                             let c = input[i];
2024-08-30T19:43:30.9297039Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9297377Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0
2024-08-30T19:43:30.9297794Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9297983Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9298299Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9298540Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.9298862Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9299056Z                         let result = "";
2024-08-30T19:43:30.9299274Z                         const shift = 7;
2024-08-30T19:43:30.9299418Z                     
2024-08-30T19:43:30.9299732Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9299991Z                             let c = input[i];
2024-08-30T19:43:30.9300400Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9300781Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0)
2024-08-30T19:43:30.9304540Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9308946Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9309423Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9309648Z                         let result = "";
2024-08-30T19:43:30.9309780Z                         const shift = 7;
2024-08-30T19:43:30.9309871Z                     
2024-08-30T19:43:30.9310067Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9310207Z                             let c = input[i];
2024-08-30T19:43:30.9310418Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9310858Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0 -> function solution(input) {
2024-08-30T19:43:30.9310987Z                         let result = "";
2024-08-30T19:43:30.9311186Z                         const shift = 7;
2024-08-30T19:43:30.9311280Z                     
2024-08-30T19:43:30.9311462Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9311607Z                             let c = input[i];
2024-08-30T19:43:30.9311816Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9312143Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0)
2024-08-30T19:43:30.9312549Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9312740Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9313056Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9313296Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9313620Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9313757Z                         let result = "";
2024-08-30T19:43:30.9313888Z                         const shift = 7;
2024-08-30T19:43:30.9313982Z                     
2024-08-30T19:43:30.9314164Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9314300Z                             let c = input[i];
2024-08-30T19:43:30.9314509Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9314843Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) 
2024-08-30T19:43:30.9318068Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9322418Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9322873Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9323082Z                         let result = "";
2024-08-30T19:43:30.9323208Z                         const shift = 7;
2024-08-30T19:43:30.9323295Z                     
2024-08-30T19:43:30.9323484Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9323620Z                             let c = input[i];
2024-08-30T19:43:30.9323826Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9324253Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) -> function solution(input) {
2024-08-30T19:43:30.9324376Z                         let result = "";
2024-08-30T19:43:30.9324564Z                         const shift = 7;
2024-08-30T19:43:30.9324657Z                     
2024-08-30T19:43:30.9324836Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9324978Z                             let c = input[i];
2024-08-30T19:43:30.9325179Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9325506Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) 
2024-08-30T19:43:30.9325836Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9326087Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9326410Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9326648Z [32m      cy:command ✔ [39m type	:, {force: true}
2024-08-30T19:43:30.9326971Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9327107Z                         let result = "";
2024-08-30T19:43:30.9327238Z                         const shift = 7;
2024-08-30T19:43:30.9327328Z                     
2024-08-30T19:43:30.9327505Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9327638Z                             let c = input[i];
2024-08-30T19:43:30.9327843Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9328174Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) :
2024-08-30T19:43:30.9331689Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9336065Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9336518Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9336738Z                         let result = "";
2024-08-30T19:43:30.9336870Z                         const shift = 7;
2024-08-30T19:43:30.9336956Z                     
2024-08-30T19:43:30.9337139Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9337276Z                             let c = input[i];
2024-08-30T19:43:30.9337478Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9337907Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0)  -> function solution(input) {
2024-08-30T19:43:30.9338028Z                         let result = "";
2024-08-30T19:43:30.9338230Z                         const shift = 7;
2024-08-30T19:43:30.9338325Z                     
2024-08-30T19:43:30.9338501Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9338640Z                             let c = input[i];
2024-08-30T19:43:30.9338836Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9339164Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) :
2024-08-30T19:43:30.9339495Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9339757Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9340077Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9340320Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9340645Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9340781Z                         let result = "";
2024-08-30T19:43:30.9340909Z                         const shift = 7;
2024-08-30T19:43:30.9341007Z                     
2024-08-30T19:43:30.9341182Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9341320Z                             let c = input[i];
2024-08-30T19:43:30.9341528Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9341864Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 
2024-08-30T19:43:30.9345073Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9349428Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9349885Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9350096Z                         let result = "";
2024-08-30T19:43:30.9350226Z                         const shift = 7;
2024-08-30T19:43:30.9350313Z                     
2024-08-30T19:43:30.9350501Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9350643Z                             let c = input[i];
2024-08-30T19:43:30.9350844Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9351279Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : -> function solution(input) {
2024-08-30T19:43:30.9351402Z                         let result = "";
2024-08-30T19:43:30.9351592Z                         const shift = 7;
2024-08-30T19:43:30.9351690Z                     
2024-08-30T19:43:30.9351869Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9352012Z                             let c = input[i];
2024-08-30T19:43:30.9352212Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9352552Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 
2024-08-30T19:43:30.9352884Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9353134Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9353454Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9353694Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.9354014Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9354152Z                         let result = "";
2024-08-30T19:43:30.9354279Z                         const shift = 7;
2024-08-30T19:43:30.9354375Z                     
2024-08-30T19:43:30.9354548Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9354682Z                             let c = input[i];
2024-08-30T19:43:30.9354885Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9355230Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : '
2024-08-30T19:43:30.9358427Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9362745Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9363192Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9363397Z                         let result = "";
2024-08-30T19:43:30.9363527Z                         const shift = 7;
2024-08-30T19:43:30.9363610Z                     
2024-08-30T19:43:30.9363792Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9363931Z                             let c = input[i];
2024-08-30T19:43:30.9364129Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9364565Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) :  -> function solution(input) {
2024-08-30T19:43:30.9364689Z                         let result = "";
2024-08-30T19:43:30.9364886Z                         const shift = 7;
2024-08-30T19:43:30.9364980Z                     
2024-08-30T19:43:30.9365159Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9365334Z                             let c = input[i];
2024-08-30T19:43:30.9365542Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9365889Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : '
2024-08-30T19:43:30.9366220Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9366473Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9366797Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9367039Z [32m      cy:command ✔ [39m type	A, {force: true}
2024-08-30T19:43:30.9367362Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9367496Z                         let result = "";
2024-08-30T19:43:30.9367623Z                         const shift = 7;
2024-08-30T19:43:30.9367775Z                     
2024-08-30T19:43:30.9367961Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9368096Z                             let c = input[i];
2024-08-30T19:43:30.9368299Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9368655Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A
2024-08-30T19:43:30.9372022Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9376379Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9376833Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9377077Z                         let result = "";
2024-08-30T19:43:30.9377208Z                         const shift = 7;
2024-08-30T19:43:30.9377293Z                     
2024-08-30T19:43:30.9377479Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9377618Z                             let c = input[i];
2024-08-30T19:43:30.9377821Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9378262Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : ' -> function solution(input) {
2024-08-30T19:43:30.9378388Z                         let result = "";
2024-08-30T19:43:30.9378591Z                         const shift = 7;
2024-08-30T19:43:30.9378689Z                     
2024-08-30T19:43:30.9378867Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9379002Z                             let c = input[i];
2024-08-30T19:43:30.9379208Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9379555Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A
2024-08-30T19:43:30.9379888Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9380148Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9380464Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9380708Z [32m      cy:command ✔ [39m type	', {force: true}
2024-08-30T19:43:30.9381032Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9381164Z                         let result = "";
2024-08-30T19:43:30.9381292Z                         const shift = 7;
2024-08-30T19:43:30.9381454Z                     
2024-08-30T19:43:30.9381646Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9381783Z                             let c = input[i];
2024-08-30T19:43:30.9381988Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9382339Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'
2024-08-30T19:43:30.9385467Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9389800Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9390249Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9390459Z                         let result = "";
2024-08-30T19:43:30.9390590Z                         const shift = 7;
2024-08-30T19:43:30.9390675Z                     
2024-08-30T19:43:30.9390855Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9391002Z                             let c = input[i];
2024-08-30T19:43:30.9391203Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9391654Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A -> function solution(input) {
2024-08-30T19:43:30.9391784Z                         let result = "";
2024-08-30T19:43:30.9391905Z                         const shift = 7;
2024-08-30T19:43:30.9392071Z                     
2024-08-30T19:43:30.9392253Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9392388Z                             let c = input[i];
2024-08-30T19:43:30.9392596Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9392947Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'
2024-08-30T19:43:30.9393282Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9393550Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9393878Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9394127Z [32m      cy:command ✔ [39m type	., {force: true}
2024-08-30T19:43:30.9394451Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9394585Z                         let result = "";
2024-08-30T19:43:30.9394716Z                         const shift = 7;
2024-08-30T19:43:30.9394868Z                     
2024-08-30T19:43:30.9395056Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9395192Z                             let c = input[i];
2024-08-30T19:43:30.9395395Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9395756Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.
2024-08-30T19:43:30.9398886Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9403206Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9403653Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9403859Z                         let result = "";
2024-08-30T19:43:30.9403992Z                         const shift = 7;
2024-08-30T19:43:30.9404079Z                     
2024-08-30T19:43:30.9404261Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9404408Z                             let c = input[i];
2024-08-30T19:43:30.9404610Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9405058Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A' -> function solution(input) {
2024-08-30T19:43:30.9405181Z                         let result = "";
2024-08-30T19:43:30.9405370Z                         const shift = 7;
2024-08-30T19:43:30.9405466Z                     
2024-08-30T19:43:30.9405644Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9405779Z                             let c = input[i];
2024-08-30T19:43:30.9405982Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9406334Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.
2024-08-30T19:43:30.9406661Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9406909Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9407224Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9407469Z [32m      cy:command ✔ [39m type	c, {force: true}
2024-08-30T19:43:30.9407790Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9407925Z                         let result = "";
2024-08-30T19:43:30.9408053Z                         const shift = 7;
2024-08-30T19:43:30.9408203Z                     
2024-08-30T19:43:30.9408395Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9408531Z                             let c = input[i];
2024-08-30T19:43:30.9408738Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9409099Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.c
2024-08-30T19:43:30.9412472Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9416836Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9417295Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9417536Z                         let result = "";
2024-08-30T19:43:30.9417672Z                         const shift = 7;
2024-08-30T19:43:30.9417756Z                     
2024-08-30T19:43:30.9417935Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9418081Z                             let c = input[i];
2024-08-30T19:43:30.9418286Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9418747Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'. -> function solution(input) {
2024-08-30T19:43:30.9418871Z                         let result = "";
2024-08-30T19:43:30.9419073Z                         const shift = 7;
2024-08-30T19:43:30.9419168Z                     
2024-08-30T19:43:30.9419342Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9419477Z                             let c = input[i];
2024-08-30T19:43:30.9419684Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9420039Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.c
2024-08-30T19:43:30.9420367Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9420629Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9420943Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9421190Z [32m      cy:command ✔ [39m type	h, {force: true}
2024-08-30T19:43:30.9421512Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9421648Z                         let result = "";
2024-08-30T19:43:30.9421775Z                         const shift = 7;
2024-08-30T19:43:30.9421939Z                     
2024-08-30T19:43:30.9422133Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9422284Z                             let c = input[i];
2024-08-30T19:43:30.9422571Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9422933Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.ch
2024-08-30T19:43:30.9426050Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9430360Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9430811Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9431017Z                         let result = "";
2024-08-30T19:43:30.9431148Z                         const shift = 7;
2024-08-30T19:43:30.9431232Z                     
2024-08-30T19:43:30.9431410Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9431554Z                             let c = input[i];
2024-08-30T19:43:30.9431754Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9432214Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.c -> function solution(input) {
2024-08-30T19:43:30.9432338Z                         let result = "";
2024-08-30T19:43:30.9432530Z                         const shift = 7;
2024-08-30T19:43:30.9432624Z                     
2024-08-30T19:43:30.9432799Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9432931Z                             let c = input[i];
2024-08-30T19:43:30.9433133Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9433491Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.ch
2024-08-30T19:43:30.9433822Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9434075Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9434390Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9434635Z [32m      cy:command ✔ [39m type	a, {force: true}
2024-08-30T19:43:30.9434957Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9435093Z                         let result = "";
2024-08-30T19:43:30.9435220Z                         const shift = 7;
2024-08-30T19:43:30.9435371Z                     
2024-08-30T19:43:30.9435567Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9435703Z                             let c = input[i];
2024-08-30T19:43:30.9435916Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9436282Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.cha
2024-08-30T19:43:30.9439409Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9443725Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9444176Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9444380Z                         let result = "";
2024-08-30T19:43:30.9444510Z                         const shift = 7;
2024-08-30T19:43:30.9444594Z                     
2024-08-30T19:43:30.9444774Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9444923Z                             let c = input[i];
2024-08-30T19:43:30.9445123Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9445587Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.ch -> function solution(input) {
2024-08-30T19:43:30.9445710Z                         let result = "";
2024-08-30T19:43:30.9445920Z                         const shift = 7;
2024-08-30T19:43:30.9446017Z                     
2024-08-30T19:43:30.9446192Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9446325Z                             let c = input[i];
2024-08-30T19:43:30.9446526Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9446883Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.cha
2024-08-30T19:43:30.9447212Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9447461Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9447775Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9448020Z [32m      cy:command ✔ [39m type	r, {force: true}
2024-08-30T19:43:30.9448342Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9448475Z                         let result = "";
2024-08-30T19:43:30.9448602Z                         const shift = 7;
2024-08-30T19:43:30.9448750Z                     
2024-08-30T19:43:30.9448937Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9449071Z                             let c = input[i];
2024-08-30T19:43:30.9449277Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9449639Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.char
2024-08-30T19:43:30.9452980Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9457331Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9457785Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9458025Z                         let result = "";
2024-08-30T19:43:30.9458156Z                         const shift = 7;
2024-08-30T19:43:30.9458240Z                     
2024-08-30T19:43:30.9458419Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9458564Z                             let c = input[i];
2024-08-30T19:43:30.9458766Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9459227Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.cha -> function solution(input) {
2024-08-30T19:43:30.9459353Z                         let result = "";
2024-08-30T19:43:30.9459558Z                         const shift = 7;
2024-08-30T19:43:30.9459653Z                     
2024-08-30T19:43:30.9459830Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9459966Z                             let c = input[i];
2024-08-30T19:43:30.9460176Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9460535Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.char
2024-08-30T19:43:30.9460862Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9461129Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9461445Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9461691Z [32m      cy:command ✔ [39m type	C, {force: true}
2024-08-30T19:43:30.9462013Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9462148Z                         let result = "";
2024-08-30T19:43:30.9462402Z                         const shift = 7;
2024-08-30T19:43:30.9462491Z                     
2024-08-30T19:43:30.9462683Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9462819Z                             let c = input[i];
2024-08-30T19:43:30.9463023Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9463393Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charC
2024-08-30T19:43:30.9467066Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9471867Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9472353Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9472628Z                         let result = "";
2024-08-30T19:43:30.9472762Z                         const shift = 7;
2024-08-30T19:43:30.9472851Z                     
2024-08-30T19:43:30.9473042Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9473189Z                             let c = input[i];
2024-08-30T19:43:30.9473397Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9473868Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.char -> function solution(input) {
2024-08-30T19:43:30.9473997Z                         let result = "";
2024-08-30T19:43:30.9474198Z                         const shift = 7;
2024-08-30T19:43:30.9474291Z                     
2024-08-30T19:43:30.9474474Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9474612Z                             let c = input[i];
2024-08-30T19:43:30.9474825Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9475190Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charC
2024-08-30T19:43:30.9475596Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9475791Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9476108Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9476356Z [32m      cy:command ✔ [39m type	o, {force: true}
2024-08-30T19:43:30.9476681Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9476818Z                         let result = "";
2024-08-30T19:43:30.9477015Z                         const shift = 7;
2024-08-30T19:43:30.9477104Z                     
2024-08-30T19:43:30.9477295Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9477434Z                             let c = input[i];
2024-08-30T19:43:30.9477644Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9478022Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCo
2024-08-30T19:43:30.9481372Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9485743Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9486203Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9486511Z                         let result = "";
2024-08-30T19:43:30.9486642Z                         const shift = 7;
2024-08-30T19:43:30.9486726Z                     
2024-08-30T19:43:30.9486915Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9487058Z                             let c = input[i];
2024-08-30T19:43:30.9487262Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9487737Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charC -> function solution(input) {
2024-08-30T19:43:30.9487862Z                         let result = "";
2024-08-30T19:43:30.9488061Z                         const shift = 7;
2024-08-30T19:43:30.9488154Z                     
2024-08-30T19:43:30.9488334Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9488469Z                             let c = input[i];
2024-08-30T19:43:30.9488680Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9489056Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCo
2024-08-30T19:43:30.9489456Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9489811Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9490267Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9490525Z [32m      cy:command ✔ [39m type	d, {force: true}
2024-08-30T19:43:30.9490851Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9491187Z                         let result = "";
2024-08-30T19:43:30.9491467Z                         const shift = 7;
2024-08-30T19:43:30.9491564Z                     
2024-08-30T19:43:30.9491757Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9491895Z                             let c = input[i];
2024-08-30T19:43:30.9492116Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9492494Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCod
2024-08-30T19:43:30.9495644Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9499976Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9500431Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9500677Z                         let result = "";
2024-08-30T19:43:30.9500810Z                         const shift = 7;
2024-08-30T19:43:30.9500897Z                     
2024-08-30T19:43:30.9501081Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9501227Z                             let c = input[i];
2024-08-30T19:43:30.9501432Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9501925Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCo -> function solution(input) {
2024-08-30T19:43:30.9502133Z                         let result = "";
2024-08-30T19:43:30.9502262Z                         const shift = 7;
2024-08-30T19:43:30.9502355Z                     
2024-08-30T19:43:30.9502540Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9502685Z                             let c = input[i];
2024-08-30T19:43:30.9502916Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9503293Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCod
2024-08-30T19:43:30.9503709Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9503903Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9504216Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9504466Z [32m      cy:command ✔ [39m type	e, {force: true}
2024-08-30T19:43:30.9504791Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9504932Z                         let result = "";
2024-08-30T19:43:30.9505122Z                         const shift = 7;
2024-08-30T19:43:30.9505212Z                     
2024-08-30T19:43:30.9505398Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9505538Z                             let c = input[i];
2024-08-30T19:43:30.9505737Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9506119Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCode
2024-08-30T19:43:30.9509259Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9513594Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9514046Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9514251Z                         let result = "";
2024-08-30T19:43:30.9514381Z                         const shift = 7;
2024-08-30T19:43:30.9514466Z                     
2024-08-30T19:43:30.9514653Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9514796Z                             let c = input[i];
2024-08-30T19:43:30.9514999Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9515478Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCod -> function solution(input) {
2024-08-30T19:43:30.9515681Z                         let result = "";
2024-08-30T19:43:30.9515805Z                         const shift = 7;
2024-08-30T19:43:30.9515902Z                     
2024-08-30T19:43:30.9516083Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9516227Z                             let c = input[i];
2024-08-30T19:43:30.9516437Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9516810Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCode
2024-08-30T19:43:30.9517204Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9517393Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9517702Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9517946Z [32m      cy:command ✔ [39m type	A, {force: true}
2024-08-30T19:43:30.9518265Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9518480Z                         let result = "";
2024-08-30T19:43:30.9518609Z                         const shift = 7;
2024-08-30T19:43:30.9518694Z                     
2024-08-30T19:43:30.9518880Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9519021Z                             let c = input[i];
2024-08-30T19:43:30.9519221Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9519609Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeA
2024-08-30T19:43:30.9522743Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9527155Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9527613Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9527743Z                         let result = "";
2024-08-30T19:43:30.9527875Z                         const shift = 7;
2024-08-30T19:43:30.9527961Z                     
2024-08-30T19:43:30.9528146Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9528289Z                             let c = input[i];
2024-08-30T19:43:30.9528487Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9528980Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCode -> function solution(input) {
2024-08-30T19:43:30.9529181Z                         let result = "";
2024-08-30T19:43:30.9529309Z                         const shift = 7;
2024-08-30T19:43:30.9529401Z                     
2024-08-30T19:43:30.9529582Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9529723Z                             let c = input[i];
2024-08-30T19:43:30.9529929Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9530367Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeA
2024-08-30T19:43:30.9530701Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9530882Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9531429Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9531688Z [32m      cy:command ✔ [39m type	t, {force: true}
2024-08-30T19:43:30.9532013Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9532251Z                         let result = "";
2024-08-30T19:43:30.9532383Z                         const shift = 7;
2024-08-30T19:43:30.9532468Z                     
2024-08-30T19:43:30.9532656Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9532798Z                             let c = input[i];
2024-08-30T19:43:30.9533000Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9533396Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt
2024-08-30T19:43:30.9536522Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9540934Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9541387Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9541516Z                         let result = "";
2024-08-30T19:43:30.9541643Z                         const shift = 7;
2024-08-30T19:43:30.9541731Z                     
2024-08-30T19:43:30.9541913Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9542053Z                             let c = input[i];
2024-08-30T19:43:30.9542255Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9542753Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeA -> function solution(input) {
2024-08-30T19:43:30.9542968Z                         let result = "";
2024-08-30T19:43:30.9543091Z                         const shift = 7;
2024-08-30T19:43:30.9543180Z                     
2024-08-30T19:43:30.9543356Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9543497Z                             let c = input[i];
2024-08-30T19:43:30.9543698Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9544147Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt
2024-08-30T19:43:30.9544479Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9544661Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9544966Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9545210Z [32m      cy:command ✔ [39m type	(, {force: true}
2024-08-30T19:43:30.9545616Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9545754Z                         let result = "";
2024-08-30T19:43:30.9545876Z                         const shift = 7;
2024-08-30T19:43:30.9545961Z                     
2024-08-30T19:43:30.9546143Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9546282Z                             let c = input[i];
2024-08-30T19:43:30.9546480Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9546872Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(
2024-08-30T19:43:30.9549992Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9554393Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9554846Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9554979Z                         let result = "";
2024-08-30T19:43:30.9555113Z                         const shift = 7;
2024-08-30T19:43:30.9555199Z                     
2024-08-30T19:43:30.9555382Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9555524Z                             let c = input[i];
2024-08-30T19:43:30.9555725Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9556220Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt -> function solution(input) {
2024-08-30T19:43:30.9556421Z                         let result = "";
2024-08-30T19:43:30.9556542Z                         const shift = 7;
2024-08-30T19:43:30.9556631Z                     
2024-08-30T19:43:30.9556814Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9556951Z                             let c = input[i];
2024-08-30T19:43:30.9557157Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9557600Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(
2024-08-30T19:43:30.9557937Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9558120Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9558427Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9558671Z [32m      cy:command ✔ [39m type	0, {force: true}
2024-08-30T19:43:30.9559065Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9559204Z                         let result = "";
2024-08-30T19:43:30.9559327Z                         const shift = 7;
2024-08-30T19:43:30.9559412Z                     
2024-08-30T19:43:30.9559604Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9559739Z                             let c = input[i];
2024-08-30T19:43:30.9559938Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9560331Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0
2024-08-30T19:43:30.9563430Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9567868Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9568330Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9568542Z                         let result = "";
2024-08-30T19:43:30.9568763Z                         const shift = 7;
2024-08-30T19:43:30.9568861Z                     
2024-08-30T19:43:30.9569048Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9569193Z                             let c = input[i];
2024-08-30T19:43:30.9569406Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9569912Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt( -> function solution(input) {
2024-08-30T19:43:30.9570140Z                         let result = "";
2024-08-30T19:43:30.9570265Z                         const shift = 7;
2024-08-30T19:43:30.9570354Z                     
2024-08-30T19:43:30.9570541Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9570678Z                             let c = input[i];
2024-08-30T19:43:30.9570888Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9571622Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0
2024-08-30T19:43:30.9571986Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9572173Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9572484Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9572733Z [32m      cy:command ✔ [39m type	), {force: true}
2024-08-30T19:43:30.9573141Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9573283Z                         let result = "";
2024-08-30T19:43:30.9573408Z                         const shift = 7;
2024-08-30T19:43:30.9573499Z                     
2024-08-30T19:43:30.9573687Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9573824Z                             let c = input[i];
2024-08-30T19:43:30.9574027Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9574424Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0)
2024-08-30T19:43:30.9577737Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9582731Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9583233Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9583376Z                         let result = "";
2024-08-30T19:43:30.9583511Z                         const shift = 7;
2024-08-30T19:43:30.9583599Z                     
2024-08-30T19:43:30.9583784Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9583929Z                             let c = input[i];
2024-08-30T19:43:30.9584132Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9584767Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0 -> function solution(input) {
2024-08-30T19:43:30.9584896Z                         let result = "";
2024-08-30T19:43:30.9585018Z                         const shift = 7;
2024-08-30T19:43:30.9585114Z                     
2024-08-30T19:43:30.9585299Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9585436Z                             let c = input[i];
2024-08-30T19:43:30.9585645Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9586098Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0)
2024-08-30T19:43:30.9586455Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9586643Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9586957Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9587275Z [32m      cy:command ✔ [39m type	;, {force: true}
2024-08-30T19:43:30.9587609Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9587748Z                         let result = "";
2024-08-30T19:43:30.9587875Z                         const shift = 7;
2024-08-30T19:43:30.9587967Z                     
2024-08-30T19:43:30.9588155Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9588292Z                             let c = input[i];
2024-08-30T19:43:30.9588497Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9588894Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9592038Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9596534Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9597008Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9597149Z                         let result = "";
2024-08-30T19:43:30.9597282Z                         const shift = 7;
2024-08-30T19:43:30.9597370Z                     
2024-08-30T19:43:30.9597554Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9597699Z                             let c = input[i];
2024-08-30T19:43:30.9597900Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9598489Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0) -> function solution(input) {
2024-08-30T19:43:30.9598617Z                         let result = "";
2024-08-30T19:43:30.9598745Z                         const shift = 7;
2024-08-30T19:43:30.9598837Z                     
2024-08-30T19:43:30.9599015Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9599152Z                             let c = input[i];
2024-08-30T19:43:30.9599442Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9599842Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9600180Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9600310Z                         let result = "";
2024-08-30T19:43:30.9600439Z                         const shift = 7;
2024-08-30T19:43:30.9600595Z                     
2024-08-30T19:43:30.9600780Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9600914Z                             let c = input[i];
2024-08-30T19:43:30.9601119Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9601476Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9604621Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9609031Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9609487Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9609633Z                         let result = "";
2024-08-30T19:43:30.9609761Z                         const shift = 7;
2024-08-30T19:43:30.9609846Z                     
2024-08-30T19:43:30.9610034Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9610173Z                             let c = input[i];
2024-08-30T19:43:30.9610372Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9610890Z                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0); -> function solution(input) {
2024-08-30T19:43:30.9611226Z                         let result = "";
2024-08-30T19:43:30.9611489Z                         const shift = 7;
2024-08-30T19:43:30.9611581Z                     
2024-08-30T19:43:30.9611767Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9611915Z                             let c = input[i];
2024-08-30T19:43:30.9612128Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9612480Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9612820Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9613087Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9613409Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9613591Z [32m      cy:command ✔ [39m type	
2024-08-30T19:43:30.9613714Z                     , {force: true}
2024-08-30T19:43:30.9614046Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9614176Z                         let result = "";
2024-08-30T19:43:30.9614390Z                         const shift = 7;
2024-08-30T19:43:30.9614481Z                     
2024-08-30T19:43:30.9614664Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9614808Z                             let c = input[i];
2024-08-30T19:43:30.9615018Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9615364Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9615476Z                                 
2024-08-30T19:43:30.9618630Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9623071Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9623533Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9623669Z                         let result = "";
2024-08-30T19:43:30.9623800Z                         const shift = 7;
2024-08-30T19:43:30.9623888Z                     
2024-08-30T19:43:30.9624074Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9624220Z                             let c = input[i];
2024-08-30T19:43:30.9624420Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9624884Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0); -> function solution(input) {
2024-08-30T19:43:30.9625016Z                         let result = "";
2024-08-30T19:43:30.9625222Z                         const shift = 7;
2024-08-30T19:43:30.9625314Z                     
2024-08-30T19:43:30.9625491Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9625625Z                             let c = input[i];
2024-08-30T19:43:30.9625832Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9626184Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9626292Z                                 
2024-08-30T19:43:30.9626696Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9626888Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9627213Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9627460Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9627795Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9627995Z                         let result = "";
2024-08-30T19:43:30.9628122Z                         const shift = 7;
2024-08-30T19:43:30.9628217Z                     
2024-08-30T19:43:30.9628396Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9628536Z                             let c = input[i];
2024-08-30T19:43:30.9628744Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9629092Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9629212Z                                  
2024-08-30T19:43:30.9632446Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9637821Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9638481Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9638622Z                         let result = "";
2024-08-30T19:43:30.9638749Z                         const shift = 7;
2024-08-30T19:43:30.9638849Z                     
2024-08-30T19:43:30.9639039Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9639179Z                             let c = input[i];
2024-08-30T19:43:30.9639392Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9639748Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9639991Z                                  -> function solution(input) {
2024-08-30T19:43:30.9640121Z                         let result = "";
2024-08-30T19:43:30.9640246Z                         const shift = 7;
2024-08-30T19:43:30.9640343Z                     
2024-08-30T19:43:30.9640528Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9640669Z                             let c = input[i];
2024-08-30T19:43:30.9640879Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9641304Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9641427Z                                  
2024-08-30T19:43:30.9641766Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9641953Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9642272Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9642524Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9642929Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9643070Z                         let result = "";
2024-08-30T19:43:30.9643194Z                         const shift = 7;
2024-08-30T19:43:30.9643293Z                     
2024-08-30T19:43:30.9643481Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9643622Z                             let c = input[i];
2024-08-30T19:43:30.9643831Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9644181Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9644299Z                                   
2024-08-30T19:43:30.9647453Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9652116Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9652737Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9652880Z                         let result = "";
2024-08-30T19:43:30.9653008Z                         const shift = 7;
2024-08-30T19:43:30.9653100Z                     
2024-08-30T19:43:30.9653285Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9653426Z                             let c = input[i];
2024-08-30T19:43:30.9653638Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9653998Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9654232Z                                   -> function solution(input) {
2024-08-30T19:43:30.9654362Z                         let result = "";
2024-08-30T19:43:30.9654493Z                         const shift = 7;
2024-08-30T19:43:30.9654590Z                     
2024-08-30T19:43:30.9654771Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9654911Z                             let c = input[i];
2024-08-30T19:43:30.9655202Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9655556Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9655673Z                                   
2024-08-30T19:43:30.9656003Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9656188Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9656586Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9656839Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9657175Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9657314Z                         let result = "";
2024-08-30T19:43:30.9657440Z                         const shift = 7;
2024-08-30T19:43:30.9657537Z                     
2024-08-30T19:43:30.9657720Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9657863Z                             let c = input[i];
2024-08-30T19:43:30.9658070Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9658415Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9658536Z                                    
2024-08-30T19:43:30.9661709Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9666227Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9666770Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9666905Z                         let result = "";
2024-08-30T19:43:30.9667029Z                         const shift = 7;
2024-08-30T19:43:30.9667120Z                     
2024-08-30T19:43:30.9667305Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9667455Z                             let c = input[i];
2024-08-30T19:43:30.9667657Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9668002Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9668240Z                                    -> function solution(input) {
2024-08-30T19:43:30.9668364Z                         let result = "";
2024-08-30T19:43:30.9668486Z                         const shift = 7;
2024-08-30T19:43:30.9668577Z                     
2024-08-30T19:43:30.9668829Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9668970Z                             let c = input[i];
2024-08-30T19:43:30.9669178Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9669529Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9669645Z                                    
2024-08-30T19:43:30.9670040Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9670230Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9670547Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9670788Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9671124Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9671261Z                         let result = "";
2024-08-30T19:43:30.9671387Z                         const shift = 7;
2024-08-30T19:43:30.9671485Z                     
2024-08-30T19:43:30.9671672Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9671811Z                             let c = input[i];
2024-08-30T19:43:30.9672009Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9672355Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9672474Z                                     
2024-08-30T19:43:30.9675629Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9680061Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9680594Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9680725Z                         let result = "";
2024-08-30T19:43:30.9680849Z                         const shift = 7;
2024-08-30T19:43:30.9680945Z                     
2024-08-30T19:43:30.9681128Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9681269Z                             let c = input[i];
2024-08-30T19:43:30.9681467Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9681815Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9682047Z                                     -> function solution(input) {
2024-08-30T19:43:30.9682173Z                         let result = "";
2024-08-30T19:43:30.9682369Z                         const shift = 7;
2024-08-30T19:43:30.9682467Z                     
2024-08-30T19:43:30.9682653Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9682790Z                             let c = input[i];
2024-08-30T19:43:30.9682997Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9683412Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9683531Z                                     
2024-08-30T19:43:30.9683865Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9684045Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9684363Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9684604Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9684935Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9685070Z                         let result = "";
2024-08-30T19:43:30.9685198Z                         const shift = 7;
2024-08-30T19:43:30.9685291Z                     
2024-08-30T19:43:30.9685468Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9685610Z                             let c = input[i];
2024-08-30T19:43:30.9685811Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9686167Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9686289Z                                      
2024-08-30T19:43:30.9689441Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9694145Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9694631Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9694777Z                         let result = "";
2024-08-30T19:43:30.9694901Z                         const shift = 7;
2024-08-30T19:43:30.9694995Z                     
2024-08-30T19:43:30.9695177Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9695327Z                             let c = input[i];
2024-08-30T19:43:30.9695526Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9695874Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9696215Z                                      -> function solution(input) {
2024-08-30T19:43:30.9696347Z                         let result = "";
2024-08-30T19:43:30.9696470Z                         const shift = 7;
2024-08-30T19:43:30.9696562Z                     
2024-08-30T19:43:30.9696740Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9696885Z                             let c = input[i];
2024-08-30T19:43:30.9697237Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9697579Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9697699Z                                      
2024-08-30T19:43:30.9698036Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9698222Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9698543Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9698792Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9699123Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9699254Z                         let result = "";
2024-08-30T19:43:30.9699387Z                         const shift = 7;
2024-08-30T19:43:30.9699473Z                     
2024-08-30T19:43:30.9699652Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9699805Z                             let c = input[i];
2024-08-30T19:43:30.9700004Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9700349Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9700575Z                                       
2024-08-30T19:43:30.9703720Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9708166Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9708634Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9708764Z                         let result = "";
2024-08-30T19:43:30.9708898Z                         const shift = 7;
2024-08-30T19:43:30.9708987Z                     
2024-08-30T19:43:30.9709168Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9709315Z                             let c = input[i];
2024-08-30T19:43:30.9709590Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9709945Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9710185Z                                       -> function solution(input) {
2024-08-30T19:43:30.9710311Z                         let result = "";
2024-08-30T19:43:30.9710434Z                         const shift = 7;
2024-08-30T19:43:30.9710532Z                     
2024-08-30T19:43:30.9710776Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9710922Z                             let c = input[i];
2024-08-30T19:43:30.9711121Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9711460Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9711588Z                                       
2024-08-30T19:43:30.9711920Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9712113Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9712423Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9712663Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9712999Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9713132Z                         let result = "";
2024-08-30T19:43:30.9713275Z                         const shift = 7;
2024-08-30T19:43:30.9713365Z                     
2024-08-30T19:43:30.9713548Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9713690Z                             let c = input[i];
2024-08-30T19:43:30.9713888Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9714307Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9714429Z                                        
2024-08-30T19:43:30.9717569Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9721987Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9722446Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9722584Z                         let result = "";
2024-08-30T19:43:30.9722716Z                         const shift = 7;
2024-08-30T19:43:30.9722803Z                     
2024-08-30T19:43:30.9723051Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9723203Z                             let c = input[i];
2024-08-30T19:43:30.9723409Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9723754Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9723997Z                                        -> function solution(input) {
2024-08-30T19:43:30.9724127Z                         let result = "";
2024-08-30T19:43:30.9724319Z                         const shift = 7;
2024-08-30T19:43:30.9724409Z                     
2024-08-30T19:43:30.9724584Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9724725Z                             let c = input[i];
2024-08-30T19:43:30.9724927Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9725266Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9725391Z                                        
2024-08-30T19:43:30.9725718Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9725908Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9726216Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9726454Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9726789Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9726933Z                         let result = "";
2024-08-30T19:43:30.9727067Z                         const shift = 7;
2024-08-30T19:43:30.9727154Z                     
2024-08-30T19:43:30.9727332Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9727549Z                             let c = input[i];
2024-08-30T19:43:30.9727752Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9728102Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9728227Z                                         
2024-08-30T19:43:30.9731573Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9736055Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9736520Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9736652Z                         let result = "";
2024-08-30T19:43:30.9736944Z                         const shift = 7;
2024-08-30T19:43:30.9737034Z                     
2024-08-30T19:43:30.9737214Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9737358Z                             let c = input[i];
2024-08-30T19:43:30.9737562Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9737910Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9738237Z                                         -> function solution(input) {
2024-08-30T19:43:30.9738364Z                         let result = "";
2024-08-30T19:43:30.9738496Z                         const shift = 7;
2024-08-30T19:43:30.9738584Z                     
2024-08-30T19:43:30.9738766Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9738908Z                             let c = input[i];
2024-08-30T19:43:30.9739109Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9739455Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9739578Z                                         
2024-08-30T19:43:30.9739908Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9740099Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9740412Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9740662Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9740994Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9741127Z                         let result = "";
2024-08-30T19:43:30.9741347Z                         const shift = 7;
2024-08-30T19:43:30.9741433Z                     
2024-08-30T19:43:30.9741617Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9741764Z                             let c = input[i];
2024-08-30T19:43:30.9741972Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9742329Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9742449Z                                          
2024-08-30T19:43:30.9745590Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9750018Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9750543Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9750682Z                         let result = "";
2024-08-30T19:43:30.9750816Z                         const shift = 7;
2024-08-30T19:43:30.9750902Z                     
2024-08-30T19:43:30.9751081Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9751227Z                             let c = input[i];
2024-08-30T19:43:30.9751511Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9751873Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9752111Z                                          -> function solution(input) {
2024-08-30T19:43:30.9752242Z                         let result = "";
2024-08-30T19:43:30.9752372Z                         const shift = 7;
2024-08-30T19:43:30.9752459Z                     
2024-08-30T19:43:30.9752638Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9752785Z                             let c = input[i];
2024-08-30T19:43:30.9752984Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9753329Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9753456Z                                          
2024-08-30T19:43:30.9753786Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9753984Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9754290Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9754534Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9754931Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9755059Z                         let result = "";
2024-08-30T19:43:30.9755189Z                         const shift = 7;
2024-08-30T19:43:30.9755273Z                     
2024-08-30T19:43:30.9755458Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9755599Z                             let c = input[i];
2024-08-30T19:43:30.9755797Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9756145Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9756268Z                                           
2024-08-30T19:43:30.9759484Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9764105Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9764598Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9764734Z                         let result = "";
2024-08-30T19:43:30.9764868Z                         const shift = 7;
2024-08-30T19:43:30.9764954Z                     
2024-08-30T19:43:30.9765208Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9765394Z                             let c = input[i];
2024-08-30T19:43:30.9765603Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9765957Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9766202Z                                           -> function solution(input) {
2024-08-30T19:43:30.9766324Z                         let result = "";
2024-08-30T19:43:30.9766457Z                         const shift = 7;
2024-08-30T19:43:30.9766544Z                     
2024-08-30T19:43:30.9766727Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9766870Z                             let c = input[i];
2024-08-30T19:43:30.9767067Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9767418Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9767546Z                                           
2024-08-30T19:43:30.9767878Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9768070Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9768380Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9768718Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9769042Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9769178Z                         let result = "";
2024-08-30T19:43:30.9769308Z                         const shift = 7;
2024-08-30T19:43:30.9769393Z                     
2024-08-30T19:43:30.9769570Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9769713Z                             let c = input[i];
2024-08-30T19:43:30.9769912Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9770343Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9770464Z                                            
2024-08-30T19:43:30.9774058Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9778557Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9779029Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9779167Z                         let result = "";
2024-08-30T19:43:30.9779375Z                         const shift = 7;
2024-08-30T19:43:30.9779465Z                     
2024-08-30T19:43:30.9779657Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9779794Z                             let c = input[i];
2024-08-30T19:43:30.9780003Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9780358Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9780606Z                                            -> function solution(input) {
2024-08-30T19:43:30.9780734Z                         let result = "";
2024-08-30T19:43:30.9780866Z                         const shift = 7;
2024-08-30T19:43:30.9780953Z                     
2024-08-30T19:43:30.9781132Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9781277Z                             let c = input[i];
2024-08-30T19:43:30.9781484Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9781841Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9781966Z                                            
2024-08-30T19:43:30.9782386Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9782576Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9782885Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9783136Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9783459Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9783591Z                         let result = "";
2024-08-30T19:43:30.9783721Z                         const shift = 7;
2024-08-30T19:43:30.9783807Z                     
2024-08-30T19:43:30.9783994Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9784223Z                             let c = input[i];
2024-08-30T19:43:30.9784430Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9784780Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9784913Z                                             
2024-08-30T19:43:30.9788072Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9792839Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9793394Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9793533Z                         let result = "";
2024-08-30T19:43:30.9793665Z                         const shift = 7;
2024-08-30T19:43:30.9793756Z                     
2024-08-30T19:43:30.9793946Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9794085Z                             let c = input[i];
2024-08-30T19:43:30.9794289Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9794650Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9794897Z                                             -> function solution(input) {
2024-08-30T19:43:30.9795023Z                         let result = "";
2024-08-30T19:43:30.9795154Z                         const shift = 7;
2024-08-30T19:43:30.9795238Z                     
2024-08-30T19:43:30.9795432Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9795569Z                             let c = input[i];
2024-08-30T19:43:30.9795766Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9796115Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9796317Z                                             
2024-08-30T19:43:30.9796650Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9796846Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9797159Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9797406Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9797730Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9797865Z                         let result = "";
2024-08-30T19:43:30.9797991Z                         const shift = 7;
2024-08-30T19:43:30.9798146Z                     
2024-08-30T19:43:30.9798336Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9798472Z                             let c = input[i];
2024-08-30T19:43:30.9798675Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9799126Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9799355Z                                              
2024-08-30T19:43:30.9803304Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9807923Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9808407Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9808558Z                         let result = "";
2024-08-30T19:43:30.9808684Z                         const shift = 7;
2024-08-30T19:43:30.9808769Z                     
2024-08-30T19:43:30.9808963Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9809107Z                             let c = input[i];
2024-08-30T19:43:30.9809310Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9809669Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9809918Z                                              -> function solution(input) {
2024-08-30T19:43:30.9810048Z                         let result = "";
2024-08-30T19:43:30.9810181Z                         const shift = 7;
2024-08-30T19:43:30.9810268Z                     
2024-08-30T19:43:30.9810458Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9810600Z                             let c = input[i];
2024-08-30T19:43:30.9810874Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9811491Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9811633Z                                              
2024-08-30T19:43:30.9811985Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9812179Z [32m      cy:command ✔ [39m focus	
2024-08-30T19:43:30.9812493Z [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
2024-08-30T19:43:30.9812744Z [32m      cy:command ✔ [39m type	 , {force: true}
2024-08-30T19:43:30.9813074Z [37m        cons:log ✱ [39m codee update: function solution(input) {
2024-08-30T19:43:30.9813327Z                         let result = "";
2024-08-30T19:43:30.9813456Z                         const shift = 7;
2024-08-30T19:43:30.9813543Z                     
2024-08-30T19:43:30.9813731Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9813873Z                             let c = input[i];
2024-08-30T19:43:30.9814077Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9814435Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9814566Z                                               
2024-08-30T19:43:30.9817712Z [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
2024-08-30T19:43:30.9822199Z [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
2024-08-30T19:43:30.9822662Z [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
2024-08-30T19:43:30.9822802Z                         let result = "";
2024-08-30T19:43:30.9822931Z                         const shift = 7;
2024-08-30T19:43:30.9823017Z                     
2024-08-30T19:43:30.9823204Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9823342Z                             let c = input[i];
2024-08-30T19:43:30.9823542Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9823898Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19:43:30.9824154Z                                               -> function solution(input) {
2024-08-30T19:43:30.9824285Z                         let result = "";
2024-08-30T19:43:30.9824408Z                         const shift = 7;
2024-08-30T19:43:30.9824578Z                     
2024-08-30T19:43:30.9824763Z                         for (let i = 0; i < input.length; i++) {
2024-08-30T19:43:30.9824899Z                             let c = input[i];
2024-08-30T19:43:30.9825099Z                             if (/[a-zA-Z]/.test(c)) {
2024-08-30T19:43:30.9825458Z                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
2024-08-30T19: