 Current runner version: '2.319.1'
 ##[group]Operating System
 Ubuntu
 20.04.6
 LTS
 ##[endgroup]
 ##[group]Runner Image
 Image: ubuntu-20.04
 Version: 20240825.1.0
 Included Software: https://github.com/actions/runner-images/blob/ubuntu20/20240825.1/images/ubuntu/Ubuntu2004-Readme.md
 Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu20%2F20240825.1
 ##[endgroup]
 ##[group]Runner Image Provisioner
 2.0.384.1
 ##[endgroup]
 ##[group]GITHUB_TOKEN Permissions
 Actions: write
 Attestations: write
 Checks: write
 Contents: write
 Deployments: write
 Discussions: write
 Issues: write
 Metadata: read
 Packages: write
 Pages: write
 PullRequests: write
 RepositoryProjects: write
 SecurityEvents: write
 Statuses: write
 ##[endgroup]
 Secret source: Actions
 Prepare workflow directory
 Prepare all required actions
 Getting action download info
 Download action repository 'actions/checkout@v2' (SHA:ee0669bd1cc54295c223e0bb666b733df41de1c5)
 Download action repository 'actions/setup-node@v3' (SHA:1a4442cacd436585916779262731d5b162bc6ec7)
 Download action repository 'actions/upload-artifact@v4' (SHA:834a144ee995460fba8ed112a2fc961b36a5ec5a)
 Complete job name: docker_structure_test
 ##[group]Run actions/checkout@v2
 with:
   repository: Filomilo/RedoCode_website
   token: ***
   ssh-strict: true
   persist-credentials: true
   clean: true
   fetch-depth: 1
   lfs: false
   submodules: false
   set-safe-directory: true
 ##[endgroup]
 Syncing repository: Filomilo/RedoCode_website
 ##[group]Getting Git version info
 Working directory is '/home/runner/work/RedoCode_website/RedoCode_website'
 [command]/usr/bin/git version
 git version 2.46.0
 ##[endgroup]
 Temporarily overriding HOME='/home/runner/work/_temp/bdd46b99-5737-4a53-b7b8-94a2e10640d3' before making global git config changes
 Adding repository directory to the temporary git global config as a safe directory
 [command]/usr/bin/git config --global --add safe.directory /home/runner/work/RedoCode_website/RedoCode_website
 Deleting the contents of '/home/runner/work/RedoCode_website/RedoCode_website'
 ##[group]Initializing the repository
 [command]/usr/bin/git init /home/runner/work/RedoCode_website/RedoCode_website
 hint: Using 'master' as the name for the initial branch. This default branch name
 hint: is subject to change. To configure the initial branch name to use in all
 hint: of your new repositories, which will suppress this warning, call:
 hint:
 hint: 	git config --global init.defaultBranch <name>
 hint:
 hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
 hint: 'development'. The just-created branch can be renamed via this command:
 hint:
 hint: 	git branch -m <name>
 Initialized empty Git repository in /home/runner/work/RedoCode_website/RedoCode_website/.git/
 [command]/usr/bin/git remote add origin https://github.com/Filomilo/RedoCode_website
 ##[endgroup]
 ##[group]Disabling automatic garbage collection
 [command]/usr/bin/git config --local gc.auto 0
 ##[endgroup]
 ##[group]Setting up auth
 [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
 [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
 [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
 [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
 [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
 ##[endgroup]
 ##[group]Fetching the repository
 [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +d32c359ff46e91e0c9067b9af7d6089f0e22c51e:refs/remotes/origin/main
 remote: Enumerating objects: 616, done.        
 remote: Counting objects:   0% (1/616)        
 remote: Counting objects:   1% (7/616)        
 remote: Counting objects:   2% (13/616)        
 remote: Counting objects:   3% (19/616)        
 remote: Counting objects:   4% (25/616)        
 remote: Counting objects:   5% (31/616)        
 remote: Counting objects:   6% (37/616)        
 remote: Counting objects:   7% (44/616)        
 remote: Counting objects:   8% (50/616)        
 remote: Counting objects:   9% (56/616)        
 remote: Counting objects:  10% (62/616)        
 remote: Counting objects:  11% (68/616)        
 remote: Counting objects:  12% (74/616)        
 remote: Counting objects:  13% (81/616)        
 remote: Counting objects:  14% (87/616)        
 remote: Counting objects:  15% (93/616)        
 remote: Counting objects:  16% (99/616)        
 remote: Counting objects:  17% (105/616)        
 remote: Counting objects:  18% (111/616)        
 remote: Counting objects:  19% (118/616)        
 remote: Counting objects:  20% (124/616)        
 remote: Counting objects:  21% (130/616)        
 remote: Counting objects:  22% (136/616)        
 remote: Counting objects:  23% (142/616)        
 remote: Counting objects:  24% (148/616)        
 remote: Counting objects:  25% (154/616)        
 remote: Counting objects:  26% (161/616)        
 remote: Counting objects:  27% (167/616)        
 remote: Counting objects:  28% (173/616)        
 remote: Counting objects:  29% (179/616)        
 remote: Counting objects:  30% (185/616)        
 remote: Counting objects:  31% (191/616)        
 remote: Counting objects:  32% (198/616)        
 remote: Counting objects:  33% (204/616)        
 remote: Counting objects:  34% (210/616)        
 remote: Counting objects:  35% (216/616)        
 remote: Counting objects:  36% (222/616)        
 remote: Counting objects:  37% (228/616)        
 remote: Counting objects:  38% (235/616)        
 remote: Counting objects:  39% (241/616)        
 remote: Counting objects:  40% (247/616)        
 remote: Counting objects:  41% (253/616)        
 remote: Counting objects:  42% (259/616)        
 remote: Counting objects:  43% (265/616)        
 remote: Counting objects:  44% (272/616)        
 remote: Counting objects:  45% (278/616)        
 remote: Counting objects:  46% (284/616)        
 remote: Counting objects:  47% (290/616)        
 remote: Counting objects:  48% (296/616)        
 remote: Counting objects:  49% (302/616)        
 remote: Counting objects:  50% (308/616)        
 remote: Counting objects:  51% (315/616)        
 remote: Counting objects:  52% (321/616)        
 remote: Counting objects:  53% (327/616)        
 remote: Counting objects:  54% (333/616)        
 remote: Counting objects:  55% (339/616)        
 remote: Counting objects:  56% (345/616)        
 remote: Counting objects:  57% (352/616)        
 remote: Counting objects:  58% (358/616)        
 remote: Counting objects:  59% (364/616)        
 remote: Counting objects:  60% (370/616)        
 remote: Counting objects:  61% (376/616)        
 remote: Counting objects:  62% (382/616)        
 remote: Counting objects:  63% (389/616)        
 remote: Counting objects:  64% (395/616)        
 remote: Counting objects:  65% (401/616)        
 remote: Counting objects:  66% (407/616)        
 remote: Counting objects:  67% (413/616)        
 remote: Counting objects:  68% (419/616)        
 remote: Counting objects:  69% (426/616)        
 remote: Counting objects:  70% (432/616)        
 remote: Counting objects:  71% (438/616)        
 remote: Counting objects:  72% (444/616)        
 remote: Counting objects:  73% (450/616)        
 remote: Counting objects:  74% (456/616)        
 remote: Counting objects:  75% (462/616)        
 remote: Counting objects:  76% (469/616)        
 remote: Counting objects:  77% (475/616)        
 remote: Counting objects:  78% (481/616)        
 remote: Counting objects:  79% (487/616)        
 remote: Counting objects:  80% (493/616)        
 remote: Counting objects:  81% (499/616)        
 remote: Counting objects:  82% (506/616)        
 remote: Counting objects:  83% (512/616)        
 remote: Counting objects:  84% (518/616)        
 remote: Counting objects:  85% (524/616)        
 remote: Counting objects:  86% (530/616)        
 remote: Counting objects:  87% (536/616)        
 remote: Counting objects:  88% (543/616)        
 remote: Counting objects:  89% (549/616)        
 remote: Counting objects:  90% (555/616)        
 remote: Counting objects:  91% (561/616)        
 remote: Counting objects:  92% (567/616)        
 remote: Counting objects:  93% (573/616)        
 remote: Counting objects:  94% (580/616)        
 remote: Counting objects:  95% (586/616)        
 remote: Counting objects:  96% (592/616)        
 remote: Counting objects:  97% (598/616)        
 remote: Counting objects:  98% (604/616)        
 remote: Counting objects:  99% (610/616)        
 remote: Counting objects: 100% (616/616)        
 remote: Counting objects: 100% (616/616), done.        
 remote: Compressing objects:   0% (1/565)        
 remote: Compressing objects:   1% (6/565)        
 remote: Compressing objects:   2% (12/565)        
 remote: Compressing objects:   3% (17/565)        
 remote: Compressing objects:   4% (23/565)        
 remote: Compressing objects:   5% (29/565)        
 remote: Compressing objects:   6% (34/565)        
 remote: Compressing objects:   7% (40/565)        
 remote: Compressing objects:   8% (46/565)        
 remote: Compressing objects:   9% (51/565)        
 remote: Compressing objects:  10% (57/565)        
 remote: Compressing objects:  11% (63/565)        
 remote: Compressing objects:  12% (68/565)        
 remote: Compressing objects:  13% (74/565)        
 remote: Compressing objects:  14% (80/565)        
 remote: Compressing objects:  15% (85/565)        
 remote: Compressing objects:  16% (91/565)        
 remote: Compressing objects:  17% (97/565)        
 remote: Compressing objects:  18% (102/565)        
 remote: Compressing objects:  19% (108/565)        
 remote: Compressing objects:  20% (113/565)        
 remote: Compressing objects:  21% (119/565)        
 remote: Compressing objects:  22% (125/565)        
 remote: Compressing objects:  23% (130/565)        
 remote: Compressing objects:  24% (136/565)        
 remote: Compressing objects:  25% (142/565)        
 remote: Compressing objects:  26% (147/565)        
 remote: Compressing objects:  27% (153/565)        
 remote: Compressing objects:  28% (159/565)        
 remote: Compressing objects:  29% (164/565)        
 remote: Compressing objects:  30% (170/565)        
 remote: Compressing objects:  31% (176/565)        
 remote: Compressing objects:  32% (181/565)        
 remote: Compressing objects:  33% (187/565)        
 remote: Compressing objects:  34% (193/565)        
 remote: Compressing objects:  35% (198/565)        
 remote: Compressing objects:  36% (204/565)        
 remote: Compressing objects:  37% (210/565)        
 remote: Compressing objects:  38% (215/565)        
 remote: Compressing objects:  39% (221/565)        
 remote: Compressing objects:  40% (226/565)        
 remote: Compressing objects:  41% (232/565)        
 remote: Compressing objects:  42% (238/565)        
 remote: Compressing objects:  43% (243/565)        
 remote: Compressing objects:  44% (249/565)        
 remote: Compressing objects:  45% (255/565)        
 remote: Compressing objects:  46% (260/565)        
 remote: Compressing objects:  47% (266/565)        
 remote: Compressing objects:  48% (272/565)        
 remote: Compressing objects:  49% (277/565)        
 remote: Compressing objects:  50% (283/565)        
 remote: Compressing objects:  51% (289/565)        
 remote: Compressing objects:  52% (294/565)        
 remote: Compressing objects:  53% (300/565)        
 remote: Compressing objects:  54% (306/565)        
 remote: Compressing objects:  55% (311/565)        
 remote: Compressing objects:  56% (317/565)        
 remote: Compressing objects:  57% (323/565)        
 remote: Compressing objects:  58% (328/565)        
 remote: Compressing objects:  59% (334/565)        
 remote: Compressing objects:  60% (339/565)        
 remote: Compressing objects:  61% (345/565)        
 remote: Compressing objects:  62% (351/565)        
 remote: Compressing objects:  63% (356/565)        
 remote: Compressing objects:  64% (362/565)        
 remote: Compressing objects:  65% (368/565)        
 remote: Compressing objects:  66% (373/565)        
 remote: Compressing objects:  67% (379/565)        
 remote: Compressing objects:  68% (385/565)        
 remote: Compressing objects:  69% (390/565)        
 remote: Compressing objects:  70% (396/565)        
 remote: Compressing objects:  71% (402/565)        
 remote: Compressing objects:  72% (407/565)        
 remote: Compressing objects:  73% (413/565)        
 remote: Compressing objects:  74% (419/565)        
 remote: Compressing objects:  75% (424/565)        
 remote: Compressing objects:  76% (430/565)        
 remote: Compressing objects:  77% (436/565)        
 remote: Compressing objects:  78% (441/565)        
 remote: Compressing objects:  79% (447/565)        
 remote: Compressing objects:  80% (452/565)        
 remote: Compressing objects:  81% (458/565)        
 remote: Compressing objects:  82% (464/565)        
 remote: Compressing objects:  83% (469/565)        
 remote: Compressing objects:  84% (475/565)        
 remote: Compressing objects:  85% (481/565)        
 remote: Compressing objects:  86% (486/565)        
 remote: Compressing objects:  87% (492/565)        
 remote: Compressing objects:  88% (498/565)        
 remote: Compressing objects:  89% (503/565)        
 remote: Compressing objects:  90% (509/565)        
 remote: Compressing objects:  91% (515/565)        
 remote: Compressing objects:  92% (520/565)        
 remote: Compressing objects:  93% (526/565)        
 remote: Compressing objects:  94% (532/565)        
 remote: Compressing objects:  95% (537/565)        
 remote: Compressing objects:  96% (543/565)        
 remote: Compressing objects:  97% (549/565)        
 remote: Compressing objects:  98% (554/565)        
 remote: Compressing objects:  99% (560/565)        
 remote: Compressing objects: 100% (565/565)        
 remote: Compressing objects: 100% (565/565), done.        
 Receiving objects:   0% (1/616)
 Receiving objects:   1% (7/616)
 Receiving objects:   2% (13/616)
 Receiving objects:   3% (19/616)
 Receiving objects:   4% (25/616)
 Receiving objects:   5% (31/616)
 Receiving objects:   6% (37/616)
 Receiving objects:   7% (44/616)
 Receiving objects:   8% (50/616)
 Receiving objects:   9% (56/616)
 Receiving objects:  10% (62/616)
 Receiving objects:  11% (68/616)
 Receiving objects:  12% (74/616)
 Receiving objects:  13% (81/616)
 Receiving objects:  14% (87/616)
 Receiving objects:  15% (93/616)
 Receiving objects:  16% (99/616)
 Receiving objects:  17% (105/616)
 Receiving objects:  18% (111/616)
 Receiving objects:  19% (118/616)
 Receiving objects:  20% (124/616)
 Receiving objects:  21% (130/616)
 Receiving objects:  22% (136/616)
 Receiving objects:  23% (142/616)
 Receiving objects:  24% (148/616)
 Receiving objects:  25% (154/616)
 Receiving objects:  26% (161/616)
 Receiving objects:  27% (167/616)
 Receiving objects:  28% (173/616)
 Receiving objects:  29% (179/616)
 Receiving objects:  30% (185/616)
 Receiving objects:  31% (191/616)
 Receiving objects:  32% (198/616)
 Receiving objects:  33% (204/616)
 Receiving objects:  34% (210/616)
 Receiving objects:  35% (216/616)
 Receiving objects:  36% (222/616)
 Receiving objects:  37% (228/616)
 Receiving objects:  38% (235/616)
 Receiving objects:  39% (241/616)
 Receiving objects:  40% (247/616)
 Receiving objects:  41% (253/616)
 Receiving objects:  42% (259/616)
 Receiving objects:  43% (265/616)
 Receiving objects:  44% (272/616)
 Receiving objects:  45% (278/616)
 Receiving objects:  46% (284/616)
 Receiving objects:  47% (290/616)
 Receiving objects:  48% (296/616)
 Receiving objects:  49% (302/616)
 Receiving objects:  50% (308/616)
 Receiving objects:  51% (315/616)
 Receiving objects:  52% (321/616)
 Receiving objects:  53% (327/616)
 Receiving objects:  54% (333/616)
 Receiving objects:  55% (339/616)
 Receiving objects:  56% (345/616)
 Receiving objects:  57% (352/616)
 Receiving objects:  58% (358/616)
 Receiving objects:  59% (364/616)
 Receiving objects:  60% (370/616)
 Receiving objects:  61% (376/616)
 Receiving objects:  62% (382/616)
 Receiving objects:  63% (389/616)
 Receiving objects:  64% (395/616)
 Receiving objects:  65% (401/616)
 Receiving objects:  66% (407/616)
 Receiving objects:  67% (413/616)
 Receiving objects:  68% (419/616)
 Receiving objects:  69% (426/616)
 Receiving objects:  70% (432/616)
 Receiving objects:  71% (438/616)
 Receiving objects:  72% (444/616)
 Receiving objects:  73% (450/616)
 Receiving objects:  74% (456/616)
 Receiving objects:  75% (462/616)
 Receiving objects:  76% (469/616)
 Receiving objects:  77% (475/616)
 Receiving objects:  78% (481/616)
 Receiving objects:  79% (487/616)
 Receiving objects:  80% (493/616)
 Receiving objects:  81% (499/616)
 Receiving objects:  82% (506/616)
 Receiving objects:  83% (512/616)
 Receiving objects:  84% (518/616)
 Receiving objects:  85% (524/616)
 Receiving objects:  86% (530/616)
 Receiving objects:  87% (536/616)
 Receiving objects:  88% (543/616)
 Receiving objects:  89% (549/616)
 Receiving objects:  90% (555/616)
 Receiving objects:  91% (561/616)
 Receiving objects:  92% (567/616)
 Receiving objects:  93% (573/616)
 Receiving objects:  94% (580/616)
 Receiving objects:  95% (586/616)
 Receiving objects:  96% (592/616)
 Receiving objects:  97% (598/616)
 Receiving objects:  98% (604/616)
 Receiving objects:  99% (610/616)
 remote: Total 616 (delta 67), reused 270 (delta 26), pack-reused 0 (from 0)        
 Receiving objects: 100% (616/616), 25.57 MiB | 51.13 MiB/s
 Receiving objects: 100% (616/616), 32.42 MiB | 52.61 MiB/s, done.
 Resolving deltas:   0% (0/67)
 Resolving deltas:   1% (1/67)
 Resolving deltas:   2% (2/67)
 Resolving deltas:   4% (3/67)
 Resolving deltas:   5% (4/67)
 Resolving deltas:   7% (5/67)
 Resolving deltas:   8% (6/67)
 Resolving deltas:  10% (7/67)
 Resolving deltas:  11% (8/67)
 Resolving deltas:  13% (9/67)
 Resolving deltas:  14% (10/67)
 Resolving deltas:  16% (11/67)
 Resolving deltas:  17% (12/67)
 Resolving deltas:  19% (13/67)
 Resolving deltas:  20% (14/67)
 Resolving deltas:  22% (15/67)
 Resolving deltas:  23% (16/67)
 Resolving deltas:  25% (17/67)
 Resolving deltas:  26% (18/67)
 Resolving deltas:  28% (19/67)
 Resolving deltas:  29% (20/67)
 Resolving deltas:  31% (21/67)
 Resolving deltas:  32% (22/67)
 Resolving deltas:  34% (23/67)
 Resolving deltas:  35% (24/67)
 Resolving deltas:  37% (25/67)
 Resolving deltas:  38% (26/67)
 Resolving deltas:  40% (27/67)
 Resolving deltas:  41% (28/67)
 Resolving deltas:  43% (29/67)
 Resolving deltas:  44% (30/67)
 Resolving deltas:  46% (31/67)
 Resolving deltas:  47% (32/67)
 Resolving deltas:  49% (33/67)
 Resolving deltas:  50% (34/67)
 Resolving deltas:  52% (35/67)
 Resolving deltas:  53% (36/67)
 Resolving deltas:  55% (37/67)
 Resolving deltas:  56% (38/67)
 Resolving deltas:  58% (39/67)
 Resolving deltas:  59% (40/67)
 Resolving deltas:  61% (41/67)
 Resolving deltas:  62% (42/67)
 Resolving deltas:  64% (43/67)
 Resolving deltas:  65% (44/67)
 Resolving deltas:  67% (45/67)
 Resolving deltas:  68% (46/67)
 Resolving deltas:  70% (47/67)
 Resolving deltas:  71% (48/67)
 Resolving deltas:  73% (49/67)
 Resolving deltas:  74% (50/67)
 Resolving deltas:  76% (51/67)
 Resolving deltas:  77% (52/67)
 Resolving deltas:  79% (53/67)
 Resolving deltas:  80% (54/67)
 Resolving deltas:  82% (55/67)
 Resolving deltas:  83% (56/67)
 Resolving deltas:  85% (57/67)
 Resolving deltas:  86% (58/67)
 Resolving deltas:  88% (59/67)
 Resolving deltas:  89% (60/67)
 Resolving deltas:  91% (61/67)
 Resolving deltas:  92% (62/67)
 Resolving deltas:  94% (63/67)
 Resolving deltas:  95% (64/67)
 Resolving deltas:  97% (65/67)
 Resolving deltas:  98% (66/67)
 Resolving deltas: 100% (67/67)
 Resolving deltas: 100% (67/67), done.
 From https://github.com/Filomilo/RedoCode_website
  * [new ref]         d32c359ff46e91e0c9067b9af7d6089f0e22c51e -> origin/main
 ##[endgroup]
 ##[group]Determining the checkout info
 ##[endgroup]
 ##[group]Checking out the ref
 [command]/usr/bin/git checkout --progress --force -B main refs/remotes/origin/main
 Switched to a new branch 'main'
 branch 'main' set up to track 'origin/main'.
 ##[endgroup]
 [command]/usr/bin/git log -1 --format='%H'
 'd32c359ff46e91e0c9067b9af7d6089f0e22c51e'
 ##[group]Run sudo apt-get update
 [36;1msudo apt-get update[0m
 [36;1msudo apt-get install ca-certificates curl[0m
 [36;1msudo install -m 0755 -d /etc/apt/keyrings[0m
 [36;1msudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc[0m
 [36;1msudo chmod a+r /etc/apt/keyrings/docker.asc[0m
 [36;1mecho \[0m
 [36;1m  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \[0m
 [36;1m  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \[0m
 [36;1m  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null[0m
 [36;1msudo apt-get update[0m
 [36;1msudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y[0m
 shell: /usr/bin/bash -e {0}
 ##[endgroup]
 Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [142 B]
 Hit:6 https://packages.microsoft.com/repos/azure-cli focal InRelease
 Hit:2 http://azure.archive.ubuntu.com/ubuntu focal InRelease
 Get:7 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease [3632 B]
 Get:3 http://azure.archive.ubuntu.com/ubuntu focal-updates InRelease [128 kB]
 Hit:4 http://azure.archive.ubuntu.com/ubuntu focal-backports InRelease
 Hit:5 http://azure.archive.ubuntu.com/ubuntu focal-security InRelease
 Get:8 https://packages.microsoft.com/ubuntu/20.04/prod focal/main amd64 Packages [312 kB]
 Get:9 https://packages.microsoft.com/ubuntu/20.04/prod focal/main arm64 Packages [64.8 kB]
 Get:10 https://packages.microsoft.com/ubuntu/20.04/prod focal/main all Packages [2942 B]
 Get:11 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages [3533 kB]
 Get:12 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 c-n-f Metadata [17.7 kB]
 Get:13 http://azure.archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages [1220 kB]
 Get:14 http://azure.archive.ubuntu.com/ubuntu focal-updates/universe amd64 c-n-f Metadata [27.8 kB]
 Fetched 5310 kB in 1s (4985 kB/s)
 Reading package lists...
 Reading package lists...
 Building dependency tree...
 Reading state information...
 ca-certificates is already the newest version (20230311ubuntu0.20.04.1).
 curl is already the newest version (7.68.0-1ubuntu2.23).
 0 upgraded, 0 newly installed, 0 to remove and 10 not upgraded.
 Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [142 B]
 Get:6 https://download.docker.com/linux/ubuntu focal InRelease [57.7 kB]
 Hit:2 http://azure.archive.ubuntu.com/ubuntu focal InRelease
 Hit:3 http://azure.archive.ubuntu.com/ubuntu focal-updates InRelease
 Hit:4 http://azure.archive.ubuntu.com/ubuntu focal-backports InRelease
 Hit:5 http://azure.archive.ubuntu.com/ubuntu focal-security InRelease
 Hit:7 https://packages.microsoft.com/repos/azure-cli focal InRelease
 Hit:8 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease
 Get:9 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages [49.7 kB]
 Fetched 107 kB in 1s (169 kB/s)
 Reading package lists...
 Reading package lists...
 Building dependency tree...
 Reading state information...
 Suggested packages:
   aufs-tools cgroupfs-mount | cgroup-lite
 Recommended packages:
   docker-ce-rootless-extras
 The following NEW packages will be installed:
   docker-buildx-plugin docker-compose-plugin
 The following packages will be upgraded:
   containerd.io docker-ce docker-ce-cli
 3 upgraded, 2 newly installed, 0 to remove and 10 not upgraded.
 Need to get 112 MB of archives.
 After this operation, 144 MB of additional disk space will be used.
 Get:1 https://download.docker.com/linux/ubuntu focal/stable amd64 containerd.io amd64 1.7.21-1 [29.5 MB]
 Get:2 https://download.docker.com/linux/ubuntu focal/stable amd64 docker-buildx-plugin amd64 0.16.2-1~ubuntu.20.04~focal [29.9 MB]
 Get:3 https://download.docker.com/linux/ubuntu focal/stable amd64 docker-ce-cli amd64 5:27.2.0-1~ubuntu.20.04~focal [14.8 MB]
 Get:4 https://download.docker.com/linux/ubuntu focal/stable amd64 docker-ce amd64 5:27.2.0-1~ubuntu.20.04~focal [25.2 MB]
 Get:5 https://download.docker.com/linux/ubuntu focal/stable amd64 docker-compose-plugin amd64 2.29.2-1~ubuntu.20.04~focal [12.5 MB]
 Fetched 112 MB in 1s (103 MB/s)
 (Reading database ... 
 (Reading database ... 5%
 (Reading database ... 10%
 (Reading database ... 15%
 (Reading database ... 20%
 (Reading database ... 25%
 (Reading database ... 30%
 (Reading database ... 35%
 (Reading database ... 40%
 (Reading database ... 45%
 (Reading database ... 50%
 (Reading database ... 55%
 (Reading database ... 60%
 (Reading database ... 65%
 (Reading database ... 70%
 (Reading database ... 75%
 (Reading database ... 80%
 (Reading database ... 85%
 (Reading database ... 90%
 (Reading database ... 95%
 (Reading database ... 100%
 (Reading database ... 271096 files and directories currently installed.)
 Preparing to unpack .../containerd.io_1.7.21-1_amd64.deb ...
 Unpacking containerd.io (1.7.21-1) over (1.7.20-1) ...
 Selecting previously unselected package docker-buildx-plugin.
 Preparing to unpack .../docker-buildx-plugin_0.16.2-1~ubuntu.20.04~focal_amd64.deb ...
 Unpacking docker-buildx-plugin (0.16.2-1~ubuntu.20.04~focal) ...
 Preparing to unpack .../docker-ce-cli_5%3a27.2.0-1~ubuntu.20.04~focal_amd64.deb ...
 Unpacking docker-ce-cli (5:27.2.0-1~ubuntu.20.04~focal) over (5:26.1.3-1~ubuntu.20.04~focal) ...
 Preparing to unpack .../docker-ce_5%3a27.2.0-1~ubuntu.20.04~focal_amd64.deb ...
 Unpacking docker-ce (5:27.2.0-1~ubuntu.20.04~focal) over (5:26.1.3-1~ubuntu.20.04~focal) ...
 Selecting previously unselected package docker-compose-plugin.
 Preparing to unpack .../docker-compose-plugin_2.29.2-1~ubuntu.20.04~focal_amd64.deb ...
 Unpacking docker-compose-plugin (2.29.2-1~ubuntu.20.04~focal) ...
 Setting up docker-buildx-plugin (0.16.2-1~ubuntu.20.04~focal) ...
 Setting up containerd.io (1.7.21-1) ...
 Setting up docker-compose-plugin (2.29.2-1~ubuntu.20.04~focal) ...
 Setting up docker-ce-cli (5:27.2.0-1~ubuntu.20.04~focal) ...
 Setting up docker-ce (5:27.2.0-1~ubuntu.20.04~focal) ...
 Processing triggers for man-db (2.9.1-1) ...
 Processing triggers for systemd (245.4-4ubuntu3.23) ...
 ##[group]Run docker compose up -d
 [36;1mdocker compose up -d[0m
 [36;1mdocker ps[0m
 shell: /usr/bin/bash -e {0}
 ##[endgroup]
 time="2024-08-30T19:20:03Z" level=warning msg="/home/runner/work/RedoCode_website/RedoCode_website/ProjectSource/docker-compose.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion"
  db Pulling 
  e4fff0779e6d Pulling fs layer 
  3dd23fa89c28 Pulling fs layer 
  9110f5284332 Pulling fs layer 
  b2a5b191a941 Pulling fs layer 
  f0baaf1c42c6 Pulling fs layer 
  3c42bd6bf488 Pulling fs layer 
  cb55f9f5ebf8 Pulling fs layer 
  6eeec50ef8e1 Pulling fs layer 
  ba3d1f8aa002 Pulling fs layer 
  199cdf05dfec Pulling fs layer 
  438d147df750 Pulling fs layer 
  a2e706f2e593 Pulling fs layer 
  2505d0b60422 Pulling fs layer 
  f0baaf1c42c6 Waiting 
  133de8acf4aa Pulling fs layer 
  3c42bd6bf488 Waiting 
  cb55f9f5ebf8 Waiting 
  6eeec50ef8e1 Waiting 
  ba3d1f8aa002 Waiting 
  a2e706f2e593 Waiting 
  199cdf05dfec Waiting 
  2505d0b60422 Waiting 
  438d147df750 Waiting 
  133de8acf4aa Waiting 
  b2a5b191a941 Waiting 
  9110f5284332 Downloading [>                                                  ]  45.72kB/4.534MB
  3dd23fa89c28 Downloading [==============================>                    ]     719B/1.168kB
  3dd23fa89c28 Downloading [==================================================>]  1.168kB/1.168kB
  3dd23fa89c28 Verifying Checksum 
  3dd23fa89c28 Download complete 
  9110f5284332 Verifying Checksum 
  9110f5284332 Download complete 
  e4fff0779e6d Downloading [>                                                  ]  293.1kB/29.13MB
  b2a5b191a941 Downloading [>                                                  ]  15.78kB/1.447MB
  b2a5b191a941 Download complete 
  e4fff0779e6d Downloading [=============>                                     ]  7.699MB/29.13MB
  f0baaf1c42c6 Downloading [>                                                  ]  81.54kB/8.066MB
  3c42bd6bf488 Downloading [>                                                  ]  13.04kB/1.196MB
  e4fff0779e6d Downloading [===============================>                   ]  18.11MB/29.13MB
  3c42bd6bf488 Download complete 
  f0baaf1c42c6 Downloading [==============================================>    ]  7.572MB/8.066MB
  f0baaf1c42c6 Downloading [==================================================>]  8.066MB/8.066MB
  f0baaf1c42c6 Verifying Checksum 
  f0baaf1c42c6 Download complete 
  e4fff0779e6d Verifying Checksum 
  e4fff0779e6d Download complete 
  e4fff0779e6d Extracting [>                                                  ]  294.9kB/29.13MB
  cb55f9f5ebf8 Downloading [==================================================>]     116B/116B
  cb55f9f5ebf8 Verifying Checksum 
  cb55f9f5ebf8 Download complete 
  6eeec50ef8e1 Downloading [===========>                                       ]     719B/3.14kB
  6eeec50ef8e1 Downloading [==================================================>]   3.14kB/3.14kB
  6eeec50ef8e1 Verifying Checksum 
  6eeec50ef8e1 Download complete 
  ba3d1f8aa002 Downloading [>                                                  ]  540.7kB/109.1MB
  e4fff0779e6d Extracting [=========>                                         ]  5.603MB/29.13MB
  199cdf05dfec Downloading [===>                                               ]     719B/9.917kB
  199cdf05dfec Downloading [==================================================>]  9.917kB/9.917kB
  199cdf05dfec Verifying Checksum 
  199cdf05dfec Download complete 
  438d147df750 Downloading [==================================================>]     128B/128B
  438d147df750 Verifying Checksum 
  438d147df750 Download complete 
  ba3d1f8aa002 Downloading [=====>                                             ]  12.83MB/109.1MB
  e4fff0779e6d Extracting [================>                                  ]  9.732MB/29.13MB
  2505d0b60422 Downloading [======>                                            ]     719B/5.417kB
  a2e706f2e593 Downloading [==================================================>]     168B/168B
  2505d0b60422 Downloading [==================================================>]  5.417kB/5.417kB
  2505d0b60422 Verifying Checksum 
  a2e706f2e593 Verifying Checksum 
  2505d0b60422 Download complete 
  a2e706f2e593 Download complete 
  ba3d1f8aa002 Downloading [=========>                                         ]   21.4MB/109.1MB
  e4fff0779e6d Extracting [=======================>                           ]  13.57MB/29.13MB
  ba3d1f8aa002 Downloading [==============>                                    ]   32.1MB/109.1MB
  133de8acf4aa Downloading [==================================================>]     184B/184B
  133de8acf4aa Verifying Checksum 
  133de8acf4aa Download complete 
  e4fff0779e6d Extracting [====================================>              ]  21.23MB/29.13MB
  ba3d1f8aa002 Downloading [=================>                                 ]  38.55MB/109.1MB
  e4fff0779e6d Extracting [==========================================>        ]  24.77MB/29.13MB
  ba3d1f8aa002 Downloading [====================>                              ]  45.51MB/109.1MB
  e4fff0779e6d Extracting [===============================================>   ]  27.72MB/29.13MB
  ba3d1f8aa002 Downloading [=========================>                         ]  54.64MB/109.1MB
  ba3d1f8aa002 Downloading [==============================>                    ]  66.96MB/109.1MB
  ba3d1f8aa002 Downloading [===================================>               ]  77.65MB/109.1MB
  e4fff0779e6d Extracting [================================================>  ]  28.31MB/29.13MB
  ba3d1f8aa002 Downloading [=========================================>         ]  89.45MB/109.1MB
  e4fff0779e6d Extracting [==================================================>]  29.13MB/29.13MB
  e4fff0779e6d Pull complete 
  3dd23fa89c28 Extracting [==================================================>]  1.168kB/1.168kB
  3dd23fa89c28 Extracting [==================================================>]  1.168kB/1.168kB
  ba3d1f8aa002 Downloading [================================================>  ]  106.6MB/109.1MB
  ba3d1f8aa002 Verifying Checksum 
  ba3d1f8aa002 Download complete 
  3dd23fa89c28 Pull complete 
  9110f5284332 Extracting [>                                                  ]  65.54kB/4.534MB
  9110f5284332 Extracting [==================================================>]  4.534MB/4.534MB
  9110f5284332 Pull complete 
  b2a5b191a941 Extracting [=>                                                 ]  32.77kB/1.447MB
  b2a5b191a941 Extracting [==================================================>]  1.447MB/1.447MB
  b2a5b191a941 Pull complete 
  f0baaf1c42c6 Extracting [>                                                  ]   98.3kB/8.066MB
  f0baaf1c42c6 Extracting [========================>                          ]  3.932MB/8.066MB
  f0baaf1c42c6 Extracting [=====================================>             ]  5.997MB/8.066MB
  f0baaf1c42c6 Extracting [==================================================>]  8.066MB/8.066MB
  f0baaf1c42c6 Pull complete 
  3c42bd6bf488 Extracting [=>                                                 ]  32.77kB/1.196MB
  3c42bd6bf488 Extracting [==================================================>]  1.196MB/1.196MB
  3c42bd6bf488 Extracting [==================================================>]  1.196MB/1.196MB
  3c42bd6bf488 Pull complete 
  cb55f9f5ebf8 Extracting [==================================================>]     116B/116B
  cb55f9f5ebf8 Extracting [==================================================>]     116B/116B
  cb55f9f5ebf8 Pull complete 
  6eeec50ef8e1 Extracting [==================================================>]   3.14kB/3.14kB
  6eeec50ef8e1 Extracting [==================================================>]   3.14kB/3.14kB
  6eeec50ef8e1 Pull complete 
  ba3d1f8aa002 Extracting [>                                                  ]  557.1kB/109.1MB
  ba3d1f8aa002 Extracting [===>                                               ]  7.242MB/109.1MB
  ba3d1f8aa002 Extracting [====>                                              ]  10.58MB/109.1MB
  ba3d1f8aa002 Extracting [=======>                                           ]  16.15MB/109.1MB
  ba3d1f8aa002 Extracting [=========>                                         ]  21.73MB/109.1MB
  ba3d1f8aa002 Extracting [============>                                      ]  26.18MB/109.1MB
  ba3d1f8aa002 Extracting [================>                                  ]  35.09MB/109.1MB
  ba3d1f8aa002 Extracting [===================>                               ]  43.45MB/109.1MB
  ba3d1f8aa002 Extracting [=======================>                           ]  51.81MB/109.1MB
  ba3d1f8aa002 Extracting [=========================>                         ]  55.15MB/109.1MB
  ba3d1f8aa002 Extracting [===========================>                       ]  60.16MB/109.1MB
  ba3d1f8aa002 Extracting [================================>                  ]  70.75MB/109.1MB
  ba3d1f8aa002 Extracting [====================================>              ]   79.1MB/109.1MB
  ba3d1f8aa002 Extracting [========================================>          ]  88.01MB/109.1MB
  ba3d1f8aa002 Extracting [==========================================>        ]  93.03MB/109.1MB
  ba3d1f8aa002 Extracting [============================================>      ]  96.93MB/109.1MB
  ba3d1f8aa002 Extracting [=============================================>     ]  100.3MB/109.1MB
  ba3d1f8aa002 Extracting [===============================================>   ]  103.6MB/109.1MB
  ba3d1f8aa002 Extracting [================================================>  ]  105.3MB/109.1MB
  ba3d1f8aa002 Extracting [=================================================> ]  107.5MB/109.1MB
  ba3d1f8aa002 Extracting [==================================================>]  109.1MB/109.1MB
  ba3d1f8aa002 Pull complete 
  199cdf05dfec Extracting [==================================================>]  9.917kB/9.917kB
  199cdf05dfec Extracting [==================================================>]  9.917kB/9.917kB
  199cdf05dfec Pull complete 
  438d147df750 Extracting [==================================================>]     128B/128B
  438d147df750 Extracting [==================================================>]     128B/128B
  438d147df750 Pull complete 
  a2e706f2e593 Extracting [==================================================>]     168B/168B
  a2e706f2e593 Extracting [==================================================>]     168B/168B
  a2e706f2e593 Pull complete 
  2505d0b60422 Extracting [==================================================>]  5.417kB/5.417kB
  2505d0b60422 Extracting [==================================================>]  5.417kB/5.417kB
  2505d0b60422 Pull complete 
  133de8acf4aa Extracting [==================================================>]     184B/184B
  133de8acf4aa Extracting [==================================================>]     184B/184B
  133de8acf4aa Pull complete 
  db Pulled 
 #0 building with "default" instance using docker driver
 
 #1 [dockerrunner internal] load build definition from Dockerfile
 #1 transferring dockerfile: 295B done
 #1 DONE 0.0s
 
 #2 [dockerrunner auth] library/docker:pull token for registry-1.docker.io
 #2 DONE 0.0s
 
 #3 [dockerrunner internal] load metadata for docker.io/library/docker:25.0.2-dind
 #3 DONE 0.4s
 
 #4 [dockerrunner internal] load .dockerignore
 #4 transferring context: 2B done
 #4 DONE 0.0s
 
 #5 [dockerrunner internal] load build context
 #5 transferring context: 480B done
 #5 DONE 0.0s
 
 #6 [dockerrunner 1/3] FROM docker.io/library/docker:25.0.2-dind@sha256:fed3a24717ab1f0ba660bf2a7a8960743f7d5facd3a2f27b6da8bcae3bcf7409
 #6 resolve docker.io/library/docker:25.0.2-dind@sha256:fed3a24717ab1f0ba660bf2a7a8960743f7d5facd3a2f27b6da8bcae3bcf7409 done
 #6 extracting sha256:4abcf20661432fb2d719aaf90656f55c287f8ca915dc1c92ec14ff61e67fbaf8
 #6 extracting sha256:4abcf20661432fb2d719aaf90656f55c287f8ca915dc1c92ec14ff61e67fbaf8 0.1s done
 #6 sha256:ff7da5c2b684680135f3c21ff5550f166c3100f3a664292c24b8d4491591157c 12.13kB / 12.13kB done
 #6 sha256:4abcf20661432fb2d719aaf90656f55c287f8ca915dc1c92ec14ff61e67fbaf8 3.41MB / 3.41MB 0.1s done
 #6 sha256:fd6da5881d23400be91f76c66fa158878376ddadc8092ac43cd9fc788aad141e 0B / 549B 0.1s
 #6 sha256:294bfcbbc5589fdc4f7e32864b08eee7d41a45856af541e1b000f8038ebf3c25 3.95kB / 3.95kB done
 #6 sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 32B / 32B 0.1s done
 #6 sha256:fed3a24717ab1f0ba660bf2a7a8960743f7d5facd3a2f27b6da8bcae3bcf7409 4.80kB / 4.80kB done
 #6 sha256:d339c902f7d76917f54985966131501fd11a25559762adff7275666ad750e295 0B / 2.02MB 0.1s
 #6 sha256:b6168663bbb0ae2a9f1a9704bfa7cdacac55433b1e8631328867a17244bc666d 0B / 16.89MB 0.1s
 #6 extracting sha256:d339c902f7d76917f54985966131501fd11a25559762adff7275666ad750e295
 #6 sha256:fd6da5881d23400be91f76c66fa158878376ddadc8092ac43cd9fc788aad141e 549B / 549B 0.1s done
 #6 sha256:d339c902f7d76917f54985966131501fd11a25559762adff7275666ad750e295 2.02MB / 2.02MB 0.1s done
 #6 sha256:b6168663bbb0ae2a9f1a9704bfa7cdacac55433b1e8631328867a17244bc666d 16.89MB / 16.89MB 0.3s done
 #6 extracting sha256:d339c902f7d76917f54985966131501fd11a25559762adff7275666ad750e295 0.1s done
 #6 sha256:b48a81fca6fc57f6bf47f0e7c3e4c0a8be2f25cd562b4a5cef90d2165bc57701 11.53MB / 18.20MB 0.3s
 #6 sha256:a54bc4c52de5cd0d13b71e2b1717852501f664d523bbe2a1b9d8c0ecff365624 10.49MB / 17.20MB 0.3s
 #6 sha256:c7f4b43f6a86af4e78ac5674307f9453e05cb7095dd1f303f67a1c01f988c5e1 0B / 543B 0.3s
 #6 sha256:b48a81fca6fc57f6bf47f0e7c3e4c0a8be2f25cd562b4a5cef90d2165bc57701 18.20MB / 18.20MB 0.4s done
 #6 sha256:a54bc4c52de5cd0d13b71e2b1717852501f664d523bbe2a1b9d8c0ecff365624 17.20MB / 17.20MB 0.4s done
 #6 sha256:c7f4b43f6a86af4e78ac5674307f9453e05cb7095dd1f303f67a1c01f988c5e1 543B / 543B 0.4s done
 #6 extracting sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 done
 #6 extracting sha256:fd6da5881d23400be91f76c66fa158878376ddadc8092ac43cd9fc788aad141e done
 #6 sha256:241e19d5bb55e813177832b0c5cacbe11121425b82f9711b266abea2c793cfe3 0B / 1.02kB 0.4s
 #6 sha256:a18d6143d160d9220d446e915dd6fead256d9f28608917d182644f3c6474e100 0B / 116B 0.4s
 #6 sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 0B / 7.07MB 0.4s
 #6 extracting sha256:b6168663bbb0ae2a9f1a9704bfa7cdacac55433b1e8631328867a17244bc666d
 #6 sha256:241e19d5bb55e813177832b0c5cacbe11121425b82f9711b266abea2c793cfe3 1.02kB / 1.02kB 0.5s done
 #6 sha256:a18d6143d160d9220d446e915dd6fead256d9f28608917d182644f3c6474e100 116B / 116B 0.4s done
 #6 sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 4.19MB / 7.07MB 0.5s
 #6 sha256:2b031a68dd1131ad731d6c79630b223a7d3d741d687ca26193c714bc4febd62d 0B / 83.65kB 0.5s
 #6 sha256:8921a83f1d31a536bf78b45436d0cadd5cfdd2a56958a82c7966aa094b4e2b8a 0B / 1.30kB 0.5s
 #6 sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 7.07MB / 7.07MB 0.5s done
 #6 extracting sha256:b6168663bbb0ae2a9f1a9704bfa7cdacac55433b1e8631328867a17244bc666d 0.2s done
 #6 sha256:2b031a68dd1131ad731d6c79630b223a7d3d741d687ca26193c714bc4febd62d 83.65kB / 83.65kB 0.5s done
 #6 sha256:8921a83f1d31a536bf78b45436d0cadd5cfdd2a56958a82c7966aa094b4e2b8a 1.30kB / 1.30kB 0.5s done
 #6 sha256:3701828773b1739bd502bb852cfc28c9b9ae88d96b78697f2d536a63cc29a91f 1.51kB / 1.51kB 0.6s done
 #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 5.24MB / 55.65MB 0.6s
 #6 sha256:f810b3a3d2303285e785b87ed3a8d2bc904f9bb603e7668b03ef9d6024f1e758 3.25kB / 3.25kB 0.6s done
 #6 extracting sha256:a54bc4c52de5cd0d13b71e2b1717852501f664d523bbe2a1b9d8c0ecff365624
 #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 22.02MB / 55.65MB 0.7s
 #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 35.65MB / 55.65MB 0.8s
 #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 47.19MB / 55.65MB 1.0s
 #6 extracting sha256:a54bc4c52de5cd0d13b71e2b1717852501f664d523bbe2a1b9d8c0ecff365624 0.3s done
 #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 54.53MB / 55.65MB 1.1s
 #6 extracting sha256:b48a81fca6fc57f6bf47f0e7c3e4c0a8be2f25cd562b4a5cef90d2165bc57701 0.1s
 #6 sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 55.65MB / 55.65MB 1.1s done
 #6 extracting sha256:b48a81fca6fc57f6bf47f0e7c3e4c0a8be2f25cd562b4a5cef90d2165bc57701 0.3s done
 #6 extracting sha256:c7f4b43f6a86af4e78ac5674307f9453e05cb7095dd1f303f67a1c01f988c5e1
 #6 extracting sha256:c7f4b43f6a86af4e78ac5674307f9453e05cb7095dd1f303f67a1c01f988c5e1 done
 #6 extracting sha256:241e19d5bb55e813177832b0c5cacbe11121425b82f9711b266abea2c793cfe3 done
 #6 extracting sha256:a18d6143d160d9220d446e915dd6fead256d9f28608917d182644f3c6474e100 done
 #6 extracting sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 0.1s
 #6 extracting sha256:faef9d990511b252cd2785273a16d5abecedce46f627e1b8635f7ed0aa01fe11 0.2s done
 #6 extracting sha256:2b031a68dd1131ad731d6c79630b223a7d3d741d687ca26193c714bc4febd62d
 #6 extracting sha256:2b031a68dd1131ad731d6c79630b223a7d3d741d687ca26193c714bc4febd62d done
 #6 extracting sha256:8921a83f1d31a536bf78b45436d0cadd5cfdd2a56958a82c7966aa094b4e2b8a done
 #6 extracting sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 0.1s
 #6 extracting sha256:1f6bae68ae7274d984f9d5e111c19bcb72d56cc7359f09057b518318ae5489c4 0.7s done
 #6 extracting sha256:3701828773b1739bd502bb852cfc28c9b9ae88d96b78697f2d536a63cc29a91f
 #6 extracting sha256:3701828773b1739bd502bb852cfc28c9b9ae88d96b78697f2d536a63cc29a91f done
 #6 extracting sha256:f810b3a3d2303285e785b87ed3a8d2bc904f9bb603e7668b03ef9d6024f1e758 done
 #6 DONE 2.6s
 
 #7 [dockerrunner 2/3] COPY entrypoint.sh /usr/local/bin/
 #7 DONE 0.0s
 
 #8 [dockerrunner 3/3] RUN ls /usr/local/bin/
 #8 0.177 containerd
 #8 0.177 containerd-shim-runc-v2
 #8 0.177 ctr
 #8 0.177 dind
 #8 0.177 docker
 #8 0.177 docker-compose
 #8 0.177 docker-entrypoint.sh
 #8 0.177 docker-init
 #8 0.177 docker-proxy
 #8 0.177 dockerd
 #8 0.177 dockerd-entrypoint.sh
 #8 0.177 entrypoint.sh
 #8 0.177 modprobe
 #8 0.177 runc
 #8 DONE 0.2s
 
 #9 [dockerrunner] exporting to image
 #9 exporting layers 0.1s done
 #9 writing image sha256:92e5e36f694b1c9e3b103536aa7b9fe94c12bc0e5fb1d90719585e499be0fae3 done
 #9 naming to docker.io/library/projectsource-dockerrunner done
 #9 DONE 0.1s
 
 #10 [dockerrunner] resolving provenance for metadata file
 #10 DONE 0.0s
 
 #11 [api internal] load build definition from Dockerfile
 #11 transferring dockerfile: 591B done
 #11 WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 2)
 #11 WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 9)
 #11 DONE 0.0s
 
 #12 [api auth] library/maven:pull token for registry-1.docker.io
 #12 DONE 0.0s
 
 #13 [api auth] library/eclipse-temurin:pull token for registry-1.docker.io
 #13 DONE 0.0s
 
 #14 [api internal] load metadata for docker.io/library/maven:latest
 #14 DONE 0.5s
 
 #15 [api internal] load metadata for docker.io/library/eclipse-temurin:17-jdk-alpine
 #15 DONE 0.5s
 
 #16 [api internal] load .dockerignore
 #16 transferring context: 34B done
 #16 DONE 0.0s
 
 #17 [api internal] load build context
 #17 transferring context: 751.85kB 0.0s done
 #17 DONE 0.0s
 
 #18 [api build-stage 1/4] FROM docker.io/library/maven:latest@sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14
 #18 resolve docker.io/library/maven:latest@sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14 done
 #18 sha256:ec7dd0b9221516104f68da637bf3733fdc9b3d43d60e00d5c9f41e07381f0546 2.90kB / 2.90kB done
 #18 sha256:c3b8e0feb0957694b9801367def14425845c1850de0eab772366283b306a8010 9.23kB / 9.23kB done
 #18 sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14 5.26kB / 5.26kB done
 #18 sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 0B / 30.57MB 0.1s
 #18 sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d 0B / 19.77MB 0.1s
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 0B / 158.59MB 0.1s
 #18 sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 10.49MB / 30.57MB 0.2s
 #18 sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d 6.29MB / 19.77MB 0.2s
 #18 sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 30.57MB / 30.57MB 0.4s
 #18 sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d 19.77MB / 19.77MB 0.4s done
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 16.78MB / 158.59MB 0.4s
 #18 sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 30.57MB / 30.57MB 0.4s done
 #18 extracting sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 0.1s
 #18 sha256:bb3fe075c198ddd7a31193d47754cdb43d384b3bcd7585284f478d8bd5fa5107 175B / 175B 0.5s done
 #18 sha256:050e771ccdefcb1b205ba5a1a24919d9906e2d733ac9c51954e7300786806f30 0B / 9.17MB 0.5s
 #18 sha256:ad28f0ce2ee5faf000467e3072dbaa09ec07d716c591a6871791efa036d05e9d 2.11kB / 2.11kB 0.5s done
 #18 sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 0B / 23.12MB 0.5s
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 26.21MB / 158.59MB 0.6s
 #18 sha256:050e771ccdefcb1b205ba5a1a24919d9906e2d733ac9c51954e7300786806f30 7.34MB / 9.17MB 0.6s
 #18 sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 9.44MB / 23.12MB 0.6s
 #18 sha256:050e771ccdefcb1b205ba5a1a24919d9906e2d733ac9c51954e7300786806f30 9.17MB / 9.17MB 0.6s done
 #18 sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 23.12MB / 23.12MB 0.7s
 #18 sha256:3af36d13e53b0ef255380683b1edb913deef17c1982b62f31347f9cc2e69475b 851B / 851B 0.7s done
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 35.65MB / 158.59MB 0.8s
 #18 sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 23.12MB / 23.12MB 0.7s done
 #18 sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 32B / 32B 0.7s done
 #18 sha256:d9dd4afecf7af20948979e1239cc0d30ee5d37d1db4dea47cf7c549e09ac1bde 155B / 155B 0.8s done
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 50.33MB / 158.59MB 1.0s
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 61.25MB / 158.59MB 1.1s
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 76.55MB / 158.59MB 1.2s
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 87.03MB / 158.59MB 1.3s
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 102.76MB / 158.59MB 1.5s
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 114.29MB / 158.59MB 1.6s
 #18 extracting sha256:eb993dcd6942ffcb7633f2cb271bd4b0a275fc9bdc8f5100c5b4d24694cacf50 1.2s done
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 128.97MB / 158.59MB 1.9s
 #18 extracting sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 137.36MB / 158.59MB 2.0s
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 152.04MB / 158.59MB 2.2s
 #18 sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 158.59MB / 158.59MB 2.6s done
 #18 extracting sha256:ef6d67df44ebaf68af30549648235de86e15355c7fc9afc496d8d73df71a7a3d 0.8s done
 #18 extracting sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031
 #18 extracting sha256:facf7d693a40c7b09d711beecddef9142e6074a9d517b5b2f44a16299654b031 2.0s done
 #18 extracting sha256:bb3fe075c198ddd7a31193d47754cdb43d384b3bcd7585284f478d8bd5fa5107
 #18 extracting sha256:bb3fe075c198ddd7a31193d47754cdb43d384b3bcd7585284f478d8bd5fa5107 done
 #18 extracting sha256:ad28f0ce2ee5faf000467e3072dbaa09ec07d716c591a6871791efa036d05e9d
 #18 ...
 
 #19 [api production-stage 1/5] FROM docker.io/library/eclipse-temurin:17-jdk-alpine@sha256:740ba0fb33e9a0264b576856ac9f7653121d96e23d35de43296ea4428f21d124
 #19 resolve docker.io/library/eclipse-temurin:17-jdk-alpine@sha256:740ba0fb33e9a0264b576856ac9f7653121d96e23d35de43296ea4428f21d124 done
 #19 sha256:b6508e7110ae0d56fc66f68c08fefd424efff29bfa0e34d10b31a4ff340dc8f5 1.37kB / 1.37kB done
 #19 sha256:5ac3d50654b59a557367b6d638bf5171ae1fdb731ee5cf3cb6d291adef089390 4.58kB / 4.58kB done
 #19 sha256:740ba0fb33e9a0264b576856ac9f7653121d96e23d35de43296ea4428f21d124 320B / 320B done
 #19 sha256:479e64820c602a6421582ff22341d66b5c6938bee2115d203f3d03147a89505e 14.04MB / 14.04MB 1.0s done
 #19 sha256:4e384a19a9b0cde9f53fc5c79a581f80b1606cb9b0c477b8019b1716ffe026fe 144.39MB / 144.39MB 2.6s done
 #19 sha256:7ed71e81fa34c6c2e7902182aaf9da971d499b0e58d2dfcc2c789535bc6768e0 159B / 159B 1.0s done
 #19 extracting sha256:479e64820c602a6421582ff22341d66b5c6938bee2115d203f3d03147a89505e 0.6s done
 #19 sha256:7beb93379603195c1cd0e0fa2dfd4b31ab5a9580ed4dd4cc301f4ca12c31c1ff 2.11kB / 2.11kB 1.1s done
 #19 extracting sha256:4e384a19a9b0cde9f53fc5c79a581f80b1606cb9b0c477b8019b1716ffe026fe 1.9s done
 #19 extracting sha256:7ed71e81fa34c6c2e7902182aaf9da971d499b0e58d2dfcc2c789535bc6768e0 done
 #19 extracting sha256:7beb93379603195c1cd0e0fa2dfd4b31ab5a9580ed4dd4cc301f4ca12c31c1ff done
 #19 DONE 5.8s
 
 #18 [api build-stage 1/4] FROM docker.io/library/maven:latest@sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14
 #18 extracting sha256:ad28f0ce2ee5faf000467e3072dbaa09ec07d716c591a6871791efa036d05e9d done
 #18 extracting sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 0.1s
 #18 ...
 
 #20 [api production-stage 2/5] RUN apk update
 #20 0.663 fetch https://dl-cdn.alpinelinux.org/alpine/v3.20/main/x86_64/APKINDEX.tar.gz
 #20 0.814 fetch https://dl-cdn.alpinelinux.org/alpine/v3.20/community/x86_64/APKINDEX.tar.gz
 #20 1.137 v3.20.2-194-gc155d8b610b [https://dl-cdn.alpinelinux.org/alpine/v3.20/main]
 #20 1.137 v3.20.2-193-g6407a2f28c2 [https://dl-cdn.alpinelinux.org/alpine/v3.20/community]
 #20 1.137 OK: 24162 distinct packages available
 #20 DONE 1.2s
 
 #18 [api build-stage 1/4] FROM docker.io/library/maven:latest@sha256:e895a7e85a1acb128d3670fa3ee45f2a9f07836b28364d19a4ab2916f9dd2e14
 #18 extracting sha256:19b32e09236a562ea47c0d19fa8c9be4ab5ed9f5bb87345b6c75324f1d470f44 0.9s done
 #18 extracting sha256:050e771ccdefcb1b205ba5a1a24919d9906e2d733ac9c51954e7300786806f30 0.1s done
 #18 extracting sha256:3af36d13e53b0ef255380683b1edb913deef17c1982b62f31347f9cc2e69475b done
 #18 extracting sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 done
 #18 extracting sha256:d9dd4afecf7af20948979e1239cc0d30ee5d37d1db4dea47cf7c549e09ac1bde done
 #18 DONE 7.0s
 
 #21 [api production-stage 3/5] RUN apk upgrade
 #21 ...
 
 #22 [api build-stage 2/4] WORKDIR /backend/
 #22 DONE 0.0s
 
 #23 [api build-stage 3/4] COPY . ./
 #23 DONE 0.1s
 
 #24 [api build-stage 4/4] RUN mvn clean install -DskipTests
 #24 ...
 
 #21 [api production-stage 3/5] RUN apk upgrade
 #21 0.638 OK: 41 MiB in 47 packages
 #21 DONE 0.8s
 
 #25 [api production-stage 4/5] RUN apk add curl
 #25 0.731 (1/7) Installing c-ares (1.28.1-r0)
 #25 0.778 (2/7) Installing libunistring (1.2-r0)
 #25 0.801 (3/7) Installing libidn2 (2.3.7-r0)
 #25 0.806 (4/7) Installing nghttp2-libs (1.62.1-r0)
 #25 0.811 (5/7) Installing libpsl (0.21.5-r1)
 #25 0.816 (6/7) Installing libcurl (8.9.1-r1)
 #25 0.824 (7/7) Installing curl (8.9.1-r1)
 #25 0.830 Executing busybox-1.36.1-r29.trigger
 #25 0.861 OK: 44 MiB in 54 packages
 #25 DONE 1.0s
 
 #24 [api build-stage 4/4] RUN mvn clean install -DskipTests
 #24 2.078 [INFO] Scanning for projects...
 #24 2.315 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/3.2.2/spring-boot-starter-parent-3.2.2.pom
 #24 2.605 Progress (1): 1.4/13 kB
 Progress (1): 2.8/13 kB
 Progress (1): 4.1/13 kB
 Progress (1): 5.5/13 kB
 Progress (1): 6.9/13 kB
 Progress (1): 8.3/13 kB
 Progress (1): 9.7/13 kB
 Progress (1): 11/13 kB 
 Progress (1): 12/13 kB
 Progress (1): 13 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/3.2.2/spring-boot-starter-parent-3.2.2.pom (13 kB at 41 kB/s)
 #24 2.651 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-dependencies/3.2.2/spring-boot-dependencies-3.2.2.pom
 #24 2.673 Progress (1): 16/111 kB
 Progress (1): 33/111 kB
 Progress (1): 49/111 kB
 Progress (1): 66/111 kB
 Progress (1): 82/111 kB
 Progress (1): 98/111 kB
 Progress (1): 111 kB   
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-dependencies/3.2.2/spring-boot-dependencies-3.2.2.pom (111 kB at 1.8 MB/s)
 #24 2.800 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-bom/3.24.2/assertj-bom-3.24.2.pom
 #24 2.806 Progress (1): 3.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-bom/3.24.2/assertj-bom-3.24.2.pom (3.7 kB at 456 kB/s)
 #24 2.814 Downloading from central: https://repo.maven.apache.org/maven2/io/zipkin/brave/brave-bom/5.16.0/brave-bom-5.16.0.pom
 #24 2.824 Progress (1): 12 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/zipkin/brave/brave-bom/5.16.0/brave-bom-5.16.0.pom (12 kB at 1.0 MB/s)
 #24 2.835 Downloading from central: https://repo.maven.apache.org/maven2/io/zipkin/reporter2/zipkin-reporter-bom/2.16.3/zipkin-reporter-bom-2.16.3.pom
 #24 2.843 Progress (1): 6.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/zipkin/reporter2/zipkin-reporter-bom/2.16.3/zipkin-reporter-bom-2.16.3.pom (6.9 kB at 626 kB/s)
 #24 2.858 Downloading from central: https://repo.maven.apache.org/maven2/com/datastax/oss/java-driver-bom/4.17.0/java-driver-bom-4.17.0.pom
 #24 2.867 Progress (1): 4.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/datastax/oss/java-driver-bom/4.17.0/java-driver-bom-4.17.0.pom (4.1 kB at 377 kB/s)
 #24 2.877 Downloading from central: https://repo.maven.apache.org/maven2/io/dropwizard/metrics/metrics-bom/4.2.23/metrics-bom-4.2.23.pom
 #24 2.883 Progress (1): 8.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/dropwizard/metrics/metrics-bom/4.2.23/metrics-bom-4.2.23.pom (8.2 kB at 1.0 MB/s)
 #24 2.889 Downloading from central: https://repo.maven.apache.org/maven2/io/dropwizard/metrics/metrics-parent/4.2.23/metrics-parent-4.2.23.pom
 #24 2.896 Progress (1): 16/21 kB
 Progress (1): 21 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/dropwizard/metrics/metrics-parent/4.2.23/metrics-parent-4.2.23.pom (21 kB at 2.3 MB/s)
 #24 2.912 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-bom/4.0.4/jaxb-bom-4.0.4.pom
 #24 2.923 Progress (1): 12 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-bom/4.0.4/jaxb-bom-4.0.4.pom (12 kB at 992 kB/s)
 #24 2.929 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.8/project-1.0.8.pom
 #24 2.937 Progress (1): 15 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.8/project-1.0.8.pom (15 kB at 1.3 MB/s)
 #24 2.951 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/groovy/groovy-bom/4.0.17/groovy-bom-4.0.17.pom
 #24 2.961 Progress (1): 16/27 kB
 Progress (1): 27 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/groovy/groovy-bom/4.0.17/groovy-bom-4.0.17.pom (27 kB at 1.9 MB/s)
 #24 2.975 Downloading from central: https://repo.maven.apache.org/maven2/org/infinispan/infinispan-bom/14.0.21.Final/infinispan-bom-14.0.21.Final.pom
 #24 2.981 Progress (1): 16/24 kB
 Progress (1): 24 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/infinispan/infinispan-bom/14.0.21.Final/infinispan-bom-14.0.21.Final.pom (24 kB at 2.7 MB/s)
 #24 2.991 Downloading from central: https://repo.maven.apache.org/maven2/org/infinispan/infinispan-build-configuration-parent/14.0.21.Final/infinispan-build-configuration-parent-14.0.21.Final.pom
 #24 2.997 Progress (1): 16/24 kB
 Progress (1): 24 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/infinispan/infinispan-build-configuration-parent/14.0.21.Final/infinispan-build-configuration-parent-14.0.21.Final.pom (24 kB at 2.6 MB/s)
 #24 3.006 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/jboss-parent/39/jboss-parent-39.pom
 #24 3.013 Progress (1): 16/68 kB
 Progress (1): 33/68 kB
 Progress (1): 49/68 kB
 Progress (1): 66/68 kB
 Progress (1): 68 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/jboss-parent/39/jboss-parent-39.pom (68 kB at 6.2 MB/s)
 #24 3.033 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.15.3/jackson-bom-2.15.3.pom
 #24 3.040 Progress (1): 16/18 kB
 Progress (1): 18 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.15.3/jackson-bom-2.15.3.pom (18 kB at 1.6 MB/s)
 #24 3.051 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.15/jackson-parent-2.15.pom
 #24 3.059 Progress (1): 6.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.15/jackson-parent-2.15.pom (6.5 kB at 725 kB/s)
 #24 3.064 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/50/oss-parent-50.pom
 #24 3.070 Progress (1): 16/24 kB
 Progress (1): 24 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/50/oss-parent-50.pom (24 kB at 3.0 MB/s)
 #24 3.084 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/jersey-bom/3.1.5/jersey-bom-3.1.5.pom
 #24 3.091 Progress (1): 16/21 kB
 Progress (1): 21 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/jersey-bom/3.1.5/jersey-bom-3.1.5.pom (21 kB at 2.3 MB/s)
 #24 3.097 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/ee10/jetty-ee10-bom/12.0.5/jetty-ee10-bom-12.0.5.pom
 #24 3.103 Progress (1): 9.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/ee10/jetty-ee10-bom/12.0.5/jetty-ee10-bom-12.0.5.pom (9.2 kB at 1.5 MB/s)
 #24 3.108 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-bom/12.0.5/jetty-bom-12.0.5.pom
 #24 3.114 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-bom/12.0.5/jetty-bom-12.0.5.pom (14 kB at 2.0 MB/s)
 #24 3.120 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.10.1/junit-bom-5.10.1.pom
 #24 3.125 Progress (1): 5.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.10.1/junit-bom-5.10.1.pom (5.6 kB at 942 kB/s)
 #24 3.130 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-bom/1.9.22/kotlin-bom-1.9.22.pom
 #24 3.134 Progress (1): 9.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-bom/1.9.22/kotlin-bom-1.9.22.pom (9.1 kB at 1.5 MB/s)
 #24 3.143 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlinx/kotlinx-coroutines-bom/1.7.3/kotlinx-coroutines-bom-1.7.3.pom
 #24 3.150 Progress (1): 4.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlinx/kotlinx-coroutines-bom/1.7.3/kotlinx-coroutines-bom-1.7.3.pom (4.3 kB at 477 kB/s)
 #24 3.155 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlinx/kotlinx-serialization-bom/1.6.2/kotlinx-serialization-bom-1.6.2.pom
 #24 3.161 Progress (1): 3.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlinx/kotlinx-serialization-bom/1.6.2/kotlinx-serialization-bom-1.6.2.pom (3.8 kB at 538 kB/s)
 #24 3.165 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-bom/2.21.1/log4j-bom-2.21.1.pom
 #24 3.172 Progress (1): 12 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-bom/2.21.1/log4j-bom-2.21.1.pom (12 kB at 1.6 MB/s)
 #24 3.177 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/logging-parent/10.1.1/logging-parent-10.1.1.pom
 #24 3.182 Progress (1): 16/39 kB
 Progress (1): 33/39 kB
 Progress (1): 39 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/logging-parent/10.1.1/logging-parent-10.1.1.pom (39 kB at 6.5 MB/s)
 #24 3.191 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/30/apache-30.pom
 #24 3.198 Progress (1): 16/23 kB
 Progress (1): 23 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/30/apache-30.pom (23 kB at 2.6 MB/s)
 #24 3.206 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-bom/1.12.2/micrometer-bom-1.12.2.pom
 #24 3.213 Progress (1): 8.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-bom/1.12.2/micrometer-bom-1.12.2.pom (8.0 kB at 1.0 MB/s)
 #24 3.218 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-tracing-bom/1.2.2/micrometer-tracing-bom-1.2.2.pom
 #24 3.225 Progress (1): 4.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-tracing-bom/1.2.2/micrometer-tracing-bom-1.2.2.pom (4.7 kB at 667 kB/s)
 #24 3.229 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/5.7.0/mockito-bom-5.7.0.pom
 #24 3.233 Progress (1): 3.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/5.7.0/mockito-bom-5.7.0.pom (3.0 kB at 591 kB/s)
 #24 3.237 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-bom/4.1.105.Final/netty-bom-4.1.105.Final.pom
 #24 3.243 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-bom/4.1.105.Final/netty-bom-4.1.105.Final.pom (14 kB at 2.3 MB/s)
 #24 3.246 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/7/oss-parent-7.pom
 #24 3.251 Progress (1): 4.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/7/oss-parent-7.pom (4.8 kB at 804 kB/s)
 #24 3.256 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp-bom/4.12.0/okhttp-bom-4.12.0.pom
 #24 3.261 Progress (1): 3.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp-bom/4.12.0/okhttp-bom-4.12.0.pom (3.1 kB at 436 kB/s)
 #24 3.267 Downloading from central: https://repo.maven.apache.org/maven2/io/opentelemetry/opentelemetry-bom/1.31.0/opentelemetry-bom-1.31.0.pom
 #24 3.275 Progress (1): 7.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/opentelemetry/opentelemetry-bom/1.31.0/opentelemetry-bom-1.31.0.pom (7.0 kB at 872 kB/s)
 #24 3.280 Downloading from central: https://repo.maven.apache.org/maven2/com/oracle/database/jdbc/ojdbc-bom/21.9.0.0/ojdbc-bom-21.9.0.0.pom
 #24 3.284 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/oracle/database/jdbc/ojdbc-bom/21.9.0.0/ojdbc-bom-21.9.0.0.pom (13 kB at 2.1 MB/s)
 #24 3.293 Downloading from central: https://repo.maven.apache.org/maven2/io/prometheus/simpleclient_bom/0.16.0/simpleclient_bom-0.16.0.pom
 #24 3.298 Progress (1): 6.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/prometheus/simpleclient_bom/0.16.0/simpleclient_bom-0.16.0.pom (6.0 kB at 1.0 MB/s)
 #24 3.302 Downloading from central: https://repo.maven.apache.org/maven2/io/prometheus/parent/0.16.0/parent-0.16.0.pom
 #24 3.307 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/prometheus/parent/0.16.0/parent-0.16.0.pom (13 kB at 1.8 MB/s)
 #24 3.312 Downloading from central: https://repo.maven.apache.org/maven2/com/querydsl/querydsl-bom/5.0.0/querydsl-bom-5.0.0.pom
 #24 3.317 Progress (1): 7.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/querydsl/querydsl-bom/5.0.0/querydsl-bom-5.0.0.pom (7.2 kB at 1.2 MB/s)
 #24 3.323 Downloading from central: https://repo.maven.apache.org/maven2/io/projectreactor/reactor-bom/2023.0.2/reactor-bom-2023.0.2.pom
 #24 3.330 Progress (1): 4.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/projectreactor/reactor-bom/2023.0.2/reactor-bom-2023.0.2.pom (4.8 kB at 596 kB/s)
 #24 3.343 Downloading from central: https://repo.maven.apache.org/maven2/io/rest-assured/rest-assured-bom/5.3.2/rest-assured-bom-5.3.2.pom
 #24 3.346 Progress (1): 4.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/rest-assured/rest-assured-bom/5.3.2/rest-assured-bom-5.3.2.pom (4.3 kB at 711 kB/s)
 #24 3.352 Downloading from central: https://repo.maven.apache.org/maven2/io/rsocket/rsocket-bom/1.1.3/rsocket-bom-1.1.3.pom
 #24 3.356 Progress (1): 2.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/rsocket/rsocket-bom/1.1.3/rsocket-bom-1.1.3.pom (2.6 kB at 439 kB/s)
 #24 3.362 Downloading from central: https://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-bom/4.14.1/selenium-bom-4.14.1.pom
 #24 3.366 Progress (1): 6.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-bom/4.14.1/selenium-bom-4.14.1.pom (6.0 kB at 1.0 MB/s)
 #24 3.372 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/amqp/spring-amqp-bom/3.1.1/spring-amqp-bom-3.1.1.pom
 #24 3.376 Progress (1): 3.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/amqp/spring-amqp-bom/3.1.1/spring-amqp-bom-3.1.1.pom (3.9 kB at 645 kB/s)
 #24 3.381 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/batch/spring-batch-bom/5.1.0/spring-batch-bom-5.1.0.pom
 #24 3.386 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/batch/spring-batch-bom/5.1.0/spring-batch-bom-5.1.0.pom (3.2 kB at 540 kB/s)
 #24 3.396 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-bom/2023.1.2/spring-data-bom-2023.1.2.pom
 #24 3.402 Progress (1): 5.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-bom/2023.1.2/spring-data-bom-2023.1.2.pom (5.5 kB at 688 kB/s)
 #24 3.408 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-framework-bom/6.1.3/spring-framework-bom-6.1.3.pom
 #24 3.411 Progress (1): 5.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-framework-bom/6.1.3/spring-framework-bom-6.1.3.pom (5.8 kB at 829 kB/s)
 #24 3.418 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/integration/spring-integration-bom/6.2.1/spring-integration-bom-6.2.1.pom
 #24 3.425 Progress (1): 10 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/integration/spring-integration-bom/6.2.1/spring-integration-bom-6.2.1.pom (10 kB at 1.2 MB/s)
 #24 3.431 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/pulsar/spring-pulsar-bom/1.0.2/spring-pulsar-bom-1.0.2.pom
 #24 3.439 Progress (1): 2.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/pulsar/spring-pulsar-bom/1.0.2/spring-pulsar-bom-1.0.2.pom (2.7 kB at 274 kB/s)
 #24 3.445 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/restdocs/spring-restdocs-bom/3.0.1/spring-restdocs-bom-3.0.1.pom
 #24 3.453 Progress (1): 2.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/restdocs/spring-restdocs-bom/3.0.1/spring-restdocs-bom-3.0.1.pom (2.6 kB at 234 kB/s)
 #24 3.459 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-bom/6.2.1/spring-security-bom-6.2.1.pom
 #24 3.463 Progress (1): 5.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-bom/6.2.1/spring-security-bom-6.2.1.pom (5.3 kB at 888 kB/s)
 #24 3.468 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/session/spring-session-bom/3.2.1/spring-session-bom-3.2.1.pom
 #24 3.477 Progress (1): 2.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/session/spring-session-bom/3.2.1/spring-session-bom-3.2.1.pom (2.9 kB at 289 kB/s)
 #24 3.482 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/ws/spring-ws-bom/4.0.10/spring-ws-bom-4.0.10.pom
 #24 3.487 Progress (1): 3.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/ws/spring-ws-bom/4.0.10/spring-ws-bom-4.0.10.pom (3.5 kB at 583 kB/s)
 #24 3.493 Downloading from central: https://repo.maven.apache.org/maven2/org/testcontainers/testcontainers-bom/1.19.3/testcontainers-bom-1.19.3.pom
 #24 3.498 Progress (1): 9.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/testcontainers/testcontainers-bom/1.19.3/testcontainers-bom-1.19.3.pom (9.0 kB at 1.5 MB/s)
 #24 3.528 [WARNING] 
 #24 3.534 [WARNING] Some problems were encountered while building the effective model for com.redocode:backend:jar:0.0.1-SNAPSHOT
 #24 3.534 [WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.springframework.boot:spring-boot-starter-test:jar -> version 2.5.0 vs 3.3.1 @ line 136, column 15
 #24 3.534 [WARNING] 
 #24 3.534 [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
 #24 3.534 [WARNING] 
 #24 3.534 [WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
 #24 3.534 [WARNING] 
 #24 3.549 [INFO] 
 #24 3.550 [INFO] ------------------------< com.redocode:backend >------------------------
 #24 3.550 [INFO] Building backend 0.0.1-SNAPSHOT
 #24 3.551 [INFO]   from pom.xml
 #24 3.551 [INFO] --------------------------------[ jar ]---------------------------------
 #24 3.555 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-maven-plugin/3.2.2/spring-boot-maven-plugin-3.2.2.pom
 #24 3.560 Progress (1): 4.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-maven-plugin/3.2.2/spring-boot-maven-plugin-3.2.2.pom (4.0 kB at 572 kB/s)
 #24 3.574 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-maven-plugin/3.2.2/spring-boot-maven-plugin-3.2.2.jar
 #24 3.581 Progress (1): 15/134 kB
 Progress (1): 31/134 kB
 Progress (1): 48/134 kB
 Progress (1): 64/134 kB
 Progress (1): 81/134 kB
 Progress (1): 93/134 kB
 Progress (1): 110/134 kB
 Progress (1): 126/134 kB
 Progress (1): 134 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-maven-plugin/3.2.2/spring-boot-maven-plugin-3.2.2.jar (134 kB at 9.6 MB/s)
 #24 3.618 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.3.2/maven-clean-plugin-3.3.2.pom
 #24 3.624 Progress (1): 5.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.3.2/maven-clean-plugin-3.3.2.pom (5.3 kB at 761 kB/s)
 #24 3.629 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/40/maven-plugins-40.pom
 #24 3.633 Progress (1): 8.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/40/maven-plugins-40.pom (8.1 kB at 1.6 MB/s)
 #24 3.636 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/40/maven-parent-40.pom
 #24 3.641 Progress (1): 16/49 kB
 Progress (1): 33/49 kB
 Progress (1): 49 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/40/maven-parent-40.pom (49 kB at 7.0 MB/s)
 #24 3.651 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.3.2/maven-clean-plugin-3.3.2.jar
 #24 3.659 Progress (1): 16/36 kB
 Progress (1): 33/36 kB
 Progress (1): 36 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.3.2/maven-clean-plugin-3.3.2.jar (36 kB at 3.6 MB/s)
 #24 3.667 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.pom
 #24 3.672 Progress (1): 8.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.pom (8.2 kB at 1.6 MB/s)
 #24 3.680 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/39/maven-plugins-39.pom
 #24 3.686 Progress (1): 8.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/39/maven-plugins-39.pom (8.1 kB at 1.2 MB/s)
 #24 3.694 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/39/maven-parent-39.pom
 #24 3.700 Progress (1): 16/48 kB
 Progress (1): 33/48 kB
 Progress (1): 48 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/39/maven-parent-39.pom (48 kB at 6.9 MB/s)
 #24 3.706 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/29/apache-29.pom
 #24 3.712 Progress (1): 16/21 kB
 Progress (1): 21 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/29/apache-29.pom (21 kB at 2.1 MB/s)
 #24 3.724 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.jar
 #24 3.735 Progress (1): 16/31 kB
 Progress (1): 31 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.jar (31 kB at 2.6 MB/s)
 #24 3.749 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.11.0/maven-compiler-plugin-3.11.0.pom
 #24 3.754 Progress (1): 9.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.11.0/maven-compiler-plugin-3.11.0.pom (9.8 kB at 1.6 MB/s)
 #24 3.773 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.11.0/maven-compiler-plugin-3.11.0.jar
 #24 3.778 Progress (1): 16/66 kB
 Progress (1): 32/66 kB
 Progress (1): 49/66 kB
 Progress (1): 65/66 kB
 Progress (1): 66 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.11.0/maven-compiler-plugin-3.11.0.jar (66 kB at 5.5 MB/s)
 #24 3.798 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/3.1.2/maven-surefire-plugin-3.1.2.pom
 #24 3.804 Progress (1): 5.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/3.1.2/maven-surefire-plugin-3.1.2.pom (5.5 kB at 779 kB/s)
 #24 3.811 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire/3.1.2/surefire-3.1.2.pom
 #24 3.818 Progress (1): 16/22 kB
 Progress (1): 22 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire/3.1.2/surefire-3.1.2.pom (22 kB at 1.8 MB/s)
 #24 3.835 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/3.1.2/maven-surefire-plugin-3.1.2.jar
 #24 3.843 Progress (1): 16/43 kB
 Progress (1): 33/43 kB
 Progress (1): 43 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/3.1.2/maven-surefire-plugin-3.1.2.jar (43 kB at 4.8 MB/s)
 #24 3.852 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/3.3.0/maven-jar-plugin-3.3.0.pom
 #24 3.857 Progress (1): 6.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/3.3.0/maven-jar-plugin-3.3.0.pom (6.8 kB at 1.4 MB/s)
 #24 3.861 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/37/maven-plugins-37.pom
 #24 3.866 Progress (1): 9.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/37/maven-plugins-37.pom (9.9 kB at 2.0 MB/s)
 #24 3.870 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/37/maven-parent-37.pom
 #24 3.875 Progress (1): 16/46 kB
 Progress (1): 32/46 kB
 Progress (1): 46 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/37/maven-parent-37.pom (46 kB at 7.6 MB/s)
 #24 3.882 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/27/apache-27.pom
 #24 3.887 Progress (1): 16/20 kB
 Progress (1): 20 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/27/apache-27.pom (20 kB at 4.1 MB/s)
 #24 3.893 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/3.3.0/maven-jar-plugin-3.3.0.jar
 #24 3.898 Progress (1): 16/27 kB
 Progress (1): 27 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/3.3.0/maven-jar-plugin-3.3.0.jar (27 kB at 5.5 MB/s)
 #24 3.902 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/3.1.1/maven-install-plugin-3.1.1.pom
 #24 3.908 Progress (1): 7.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/3.1.1/maven-install-plugin-3.1.1.pom (7.8 kB at 1.1 MB/s)
 #24 3.915 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/3.1.1/maven-install-plugin-3.1.1.jar
 #24 3.920 Progress (1): 16/31 kB
 Progress (1): 31 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/3.1.1/maven-install-plugin-3.1.1.jar (31 kB at 4.5 MB/s)
 #24 3.943 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter/3.2.2/spring-boot-starter-3.2.2.pom
 #24 3.949 Progress (1): 3.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter/3.2.2/spring-boot-starter-3.2.2.pom (3.0 kB at 434 kB/s)
 #24 3.957 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.pom
 #24 3.962 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.pom (2.2 kB at 314 kB/s)
 #24 3.966 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.1.3/spring-core-6.1.3.pom
 #24 3.971 Progress (1): 2.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.1.3/spring-core-6.1.3.pom (2.0 kB at 336 kB/s)
 #24 3.976 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.1.3/spring-jcl-6.1.3.pom
 #24 3.981 Progress (1): 1.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.1.3/spring-jcl-6.1.3.pom (1.8 kB at 306 kB/s)
 #24 3.984 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-context/6.1.3/spring-context-6.1.3.pom
 #24 3.989 Progress (1): 2.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-context/6.1.3/spring-context-6.1.3.pom (2.8 kB at 462 kB/s)
 #24 3.993 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aop/6.1.3/spring-aop-6.1.3.pom
 #24 3.998 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aop/6.1.3/spring-aop-6.1.3.pom (2.2 kB at 366 kB/s)
 #24 4.003 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-beans/6.1.3/spring-beans-6.1.3.pom
 #24 4.009 Progress (1): 2.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-beans/6.1.3/spring-beans-6.1.3.pom (2.0 kB at 288 kB/s)
 #24 4.013 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-expression/6.1.3/spring-expression-6.1.3.pom
 #24 4.017 Progress (1): 2.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-expression/6.1.3/spring-expression-6.1.3.pom (2.1 kB at 344 kB/s)
 #24 4.022 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-observation/1.12.2/micrometer-observation-1.12.2.pom
 #24 4.028 Progress (1): 3.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-observation/1.12.2/micrometer-observation-1.12.2.pom (3.8 kB at 548 kB/s)
 #24 4.032 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-commons/1.12.2/micrometer-commons-1.12.2.pom
 #24 4.038 Progress (1): 3.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-commons/1.12.2/micrometer-commons-1.12.2.pom (3.4 kB at 487 kB/s)
 #24 4.042 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-autoconfigure/3.2.2/spring-boot-autoconfigure-3.2.2.pom
 #24 4.047 Progress (1): 2.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-autoconfigure/3.2.2/spring-boot-autoconfigure-3.2.2.pom (2.1 kB at 343 kB/s)
 #24 4.051 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-logging/3.2.2/spring-boot-starter-logging-3.2.2.pom
 #24 4.055 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-logging/3.2.2/spring-boot-starter-logging-3.2.2.pom (2.5 kB at 492 kB/s)
 #24 4.058 Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.pom
 #24 4.064 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.pom (13 kB at 1.9 MB/s)
 #24 4.069 Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-parent/1.4.14/logback-parent-1.4.14.pom
 #24 4.073 Progress (1): 16/20 kB
 Progress (1): 20 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-parent/1.4.14/logback-parent-1.4.14.pom (20 kB at 3.3 MB/s)
 #24 4.083 Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.pom
 #24 4.087 Progress (1): 5.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.pom (5.0 kB at 842 kB/s)
 #24 4.093 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/2.0.11/slf4j-api-2.0.11.pom
 #24 4.099 Progress (1): 2.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/2.0.11/slf4j-api-2.0.11.pom (2.8 kB at 353 kB/s)
 #24 4.104 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/2.0.11/slf4j-parent-2.0.11.pom
 #24 4.108 Progress (1): 15 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/2.0.11/slf4j-parent-2.0.11.pom (15 kB at 2.6 MB/s)
 #24 4.126 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-bom/2.0.11/slf4j-bom-2.0.11.pom
 #24 4.130 Progress (1): 7.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-bom/2.0.11/slf4j-bom-2.0.11.pom (7.3 kB at 1.5 MB/s)
 #24 4.136 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.pom
 #24 4.140 Progress (1): 4.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.pom (4.2 kB at 846 kB/s)
 #24 4.147 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j/2.21.1/log4j-2.21.1.pom
 #24 4.153 Progress (1): 16/35 kB
 Progress (1): 32/35 kB
 Progress (1): 35 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j/2.21.1/log4j-2.21.1.pom (35 kB at 4.4 MB/s)
 #24 4.161 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-bom/9.5/asm-bom-9.5.pom
 #24 4.166 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-bom/9.5/asm-bom-9.5.pom (3.2 kB at 538 kB/s)
 #24 4.169 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5.1/ow2-1.5.1.pom
 #24 4.174 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5.1/ow2-1.5.1.pom (11 kB at 1.9 MB/s)
 #24 4.178 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-bom/3.0.19/groovy-bom-3.0.19.pom
 #24 4.182 Progress (1): 16/26 kB
 Progress (1): 26 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-bom/3.0.19/groovy-bom-3.0.19.pom (26 kB at 4.4 MB/s)
 #24 4.187 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.15.2/jackson-bom-2.15.2.pom
 #24 4.191 Progress (1): 16/18 kB
 Progress (1): 18 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.15.2/jackson-bom-2.15.2.pom (18 kB at 3.0 MB/s)
 #24 4.196 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/platform/jakarta.jakartaee-bom/9.1.0/jakarta.jakartaee-bom-9.1.0.pom
 #24 4.200 Progress (1): 9.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/platform/jakarta.jakartaee-bom/9.1.0/jakarta.jakartaee-bom-9.1.0.pom (9.6 kB at 1.9 MB/s)
 #24 4.204 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/platform/jakartaee-api-parent/9.1.0/jakartaee-api-parent-9.1.0.pom
 #24 4.208 Progress (1): 15 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/platform/jakartaee-api-parent/9.1.0/jakartaee-api-parent-9.1.0.pom (15 kB at 3.0 MB/s)
 #24 4.211 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom
 #24 4.215 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom (14 kB at 3.5 MB/s)
 #24 4.221 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-bom/9.4.53.v20231009/jetty-bom-9.4.53.v20231009.pom
 #24 4.225 Progress (1): 16/18 kB
 Progress (1): 18 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-bom/9.4.53.v20231009/jetty-bom-9.4.53.v20231009.pom (18 kB at 3.5 MB/s)
 #24 4.229 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.10.0/junit-bom-5.10.0.pom
 #24 4.233 Progress (1): 5.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.10.0/junit-bom-5.10.0.pom (5.6 kB at 1.1 MB/s)
 #24 4.236 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-bom/5.12.4/kubernetes-client-bom-5.12.4.pom
 #24 4.240 Progress (1): 16/26 kB
 Progress (1): 26 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-bom/5.12.4/kubernetes-client-bom-5.12.4.pom (26 kB at 6.4 MB/s)
 #24 4.244 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/4.11.0/mockito-bom-4.11.0.pom
 #24 4.247 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/4.11.0/mockito-bom-4.11.0.pom (3.2 kB at 788 kB/s)
 #24 4.251 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-bom/4.1.97.Final/netty-bom-4.1.97.Final.pom
 #24 4.254 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-bom/4.1.97.Final/netty-bom-4.1.97.Final.pom (13 kB at 2.7 MB/s)
 #24 4.258 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-framework-bom/5.3.29/spring-framework-bom-5.3.29.pom
 #24 4.262 Progress (1): 5.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-framework-bom/5.3.29/spring-framework-bom-5.3.29.pom (5.7 kB at 1.1 MB/s)
 #24 4.269 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.pom
 #24 4.273 Progress (1): 4.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.pom (4.0 kB at 802 kB/s)
 #24 4.283 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/jul-to-slf4j/2.0.11/jul-to-slf4j-2.0.11.pom
 #24 4.287 Progress (1): 1.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/jul-to-slf4j/2.0.11/jul-to-slf4j-2.0.11.pom (1.1 kB at 219 kB/s)
 #24 4.292 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.pom
 #24 4.304 Progress (1): 16 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.pom (16 kB at 1.2 MB/s)
 #24 4.309 Downloading from central: https://repo.maven.apache.org/maven2/org/yaml/snakeyaml/2.2/snakeyaml-2.2.pom
 #24 4.314 Progress (1): 16/21 kB
 Progress (1): 21 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/yaml/snakeyaml/2.2/snakeyaml-2.2.pom (21 kB at 3.5 MB/s)
 #24 4.319 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-test/3.3.1/spring-boot-starter-test-3.3.1.pom
 #24 4.323 Progress (1): 5.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-test/3.3.1/spring-boot-starter-test-3.3.1.pom (5.1 kB at 1.0 MB/s)
 #24 4.329 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test/3.2.2/spring-boot-test-3.2.2.pom
 #24 4.334 Progress (1): 2.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test/3.2.2/spring-boot-test-3.2.2.pom (2.0 kB at 338 kB/s)
 #24 4.338 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test-autoconfigure/3.2.2/spring-boot-test-autoconfigure-3.2.2.pom
 #24 4.343 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test-autoconfigure/3.2.2/spring-boot-test-autoconfigure-3.2.2.pom (2.5 kB at 412 kB/s)
 #24 4.348 Downloading from central: https://repo.maven.apache.org/maven2/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.pom
 #24 4.353 Progress (1): 1.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.pom (1.9 kB at 320 kB/s)
 #24 4.357 Downloading from central: https://repo.maven.apache.org/maven2/net/minidev/json-smart/2.5.0/json-smart-2.5.0.pom
 #24 4.361 Progress (1): 9.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/net/minidev/json-smart/2.5.0/json-smart-2.5.0.pom (9.2 kB at 1.5 MB/s)
 #24 4.366 Downloading from central: https://repo.maven.apache.org/maven2/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.pom
 #24 4.374 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.pom (11 kB at 1.2 MB/s)
 #24 4.378 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.3/asm-9.3.pom
 #24 4.383 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.3/asm-9.3.pom (2.4 kB at 474 kB/s)
 #24 4.386 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5/ow2-1.5.pom
 #24 4.390 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5/ow2-1.5.pom (11 kB at 2.2 MB/s)
 #24 4.395 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.pom
 #24 4.400 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.pom (13 kB at 2.1 MB/s)
 #24 4.404 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api-parent/4.0.1/jakarta.xml.bind-api-parent-4.0.1.pom
 #24 4.408 Progress (1): 9.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api-parent/4.0.1/jakarta.xml.bind-api-parent-4.0.1.pom (9.2 kB at 1.5 MB/s)
 #24 4.414 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.pom
 #24 4.419 Progress (1): 16/18 kB
 Progress (1): 18 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.pom (18 kB at 3.7 MB/s)
 #24 4.424 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.pom
 #24 4.429 Progress (1): 16/19 kB
 Progress (1): 19 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.pom (19 kB at 3.2 MB/s)
 #24 4.433 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-parent/3.24.2/assertj-parent-3.24.2.pom
 #24 4.437 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-parent/3.24.2/assertj-parent-3.24.2.pom (13 kB at 2.7 MB/s)
 #24 4.441 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-build/3.24.2/assertj-build-3.24.2.pom
 #24 4.445 Progress (1): 8.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-build/3.24.2/assertj-build-3.24.2.pom (8.8 kB at 1.8 MB/s)
 #24 4.451 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.1/junit-bom-5.9.1.pom
 #24 4.457 Progress (1): 5.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.1/junit-bom-5.9.1.pom (5.6 kB at 626 kB/s)
 #24 4.463 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.14.11/byte-buddy-1.14.11.pom
 #24 4.468 Progress (1): 16 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.14.11/byte-buddy-1.14.11.pom (16 kB at 2.3 MB/s)
 #24 4.473 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-parent/1.14.11/byte-buddy-parent-1.14.11.pom
 #24 4.477 Progress (1): 16/62 kB
 Progress (1): 33/62 kB
 Progress (1): 49/62 kB
 Progress (1): 62 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-parent/1.14.11/byte-buddy-parent-1.14.11.pom (62 kB at 8.8 MB/s)
 #24 4.485 Downloading from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.pom
 #24 4.491 Progress (1): 3.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.pom (3.5 kB at 591 kB/s)
 #24 4.494 Downloading from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility-parent/4.2.0/awaitility-parent-4.2.0.pom
 #24 4.498 Progress (1): 10 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility-parent/4.2.0/awaitility-parent-4.2.0.pom (10 kB at 2.1 MB/s)
 #24 4.502 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/9/oss-parent-9.pom
 #24 4.506 Progress (1): 6.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/9/oss-parent-9.pom (6.6 kB at 1.1 MB/s)
 #24 4.511 Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.pom
 #24 4.523 Progress (1): 1.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.pom (1.1 kB at 87 kB/s)
 #24 4.527 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.pom
 #24 4.531 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.pom (3.2 kB at 801 kB/s)
 #24 4.534 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.pom
 #24 4.538 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.pom (3.2 kB at 796 kB/s)
 #24 4.542 Downloading from central: https://repo.maven.apache.org/maven2/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.pom
 #24 4.546 Progress (1): 2.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.pom (2.0 kB at 407 kB/s)
 #24 4.548 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.pom
 #24 4.552 Progress (1): 2.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.pom (2.8 kB at 567 kB/s)
 #24 4.557 Downloading from central: https://repo.maven.apache.org/maven2/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.pom
 #24 4.561 Progress (1): 1.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.pom (1.5 kB at 305 kB/s)
 #24 4.564 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.pom
 #24 4.568 Progress (1): 3.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.pom (3.0 kB at 752 kB/s)
 #24 4.571 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.pom
 #24 4.576 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.pom (3.2 kB at 641 kB/s)
 #24 4.579 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.pom
 #24 4.582 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.pom (3.2 kB at 641 kB/s)
 #24 4.585 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.pom
 #24 4.589 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.pom (2.5 kB at 616 kB/s)
 #24 4.592 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-agent/1.14.11/byte-buddy-agent-1.14.11.pom
 #24 4.597 Progress (1): 10 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-agent/1.14.11/byte-buddy-agent-1.14.11.pom (10 kB at 1.7 MB/s)
 #24 4.603 Downloading from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/3.3/objenesis-3.3.pom
 #24 4.607 Progress (1): 3.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/3.3/objenesis-3.3.pom (3.0 kB at 501 kB/s)
 #24 4.610 Downloading from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis-parent/3.3/objenesis-parent-3.3.pom
 #24 4.614 Progress (1): 16/19 kB
 Progress (1): 19 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis-parent/3.3/objenesis-parent-3.3.pom (19 kB at 3.8 MB/s)
 #24 4.618 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.pom
 #24 4.622 Progress (1): 2.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.pom (2.3 kB at 456 kB/s)
 #24 4.627 Downloading from central: https://repo.maven.apache.org/maven2/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.pom
 #24 4.631 Progress (1): 5.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.pom (5.2 kB at 1.0 MB/s)
 #24 4.635 Downloading from central: https://repo.maven.apache.org/maven2/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.pom
 #24 4.639 Progress (1): 2.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.pom (2.8 kB at 557 kB/s)
 #24 4.644 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-test/6.1.3/spring-test-6.1.3.pom
 #24 4.649 Progress (1): 2.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-test/6.1.3/spring-test-6.1.3.pom (2.0 kB at 293 kB/s)
 #24 4.653 Downloading from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.pom
 #24 4.661 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.pom (2.4 kB at 271 kB/s)
 #24 4.664 Downloading from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-parent/2.9.1/xmlunit-parent-2.9.1.pom
 #24 4.668 Progress (1): 16/21 kB
 Progress (1): 21 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-parent/2.9.1/xmlunit-parent-2.9.1.pom (21 kB at 5.2 MB/s)
 #24 4.672 Downloading from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.7.1/postgresql-42.7.1.pom
 #24 4.676 Progress (1): 2.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.7.1/postgresql-42.7.1.pom (2.9 kB at 581 kB/s)
 #24 4.680 Downloading from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.41.0/checker-qual-3.41.0.pom
 #24 4.686 Progress (1): 2.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.41.0/checker-qual-3.41.0.pom (2.1 kB at 299 kB/s)
 #24 4.690 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.pom
 #24 4.693 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.pom (3.2 kB at 800 kB/s)
 #24 4.697 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.2/junit-bom-5.9.2.pom
 #24 4.701 Progress (1): 5.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.2/junit-bom-5.9.2.pom (5.6 kB at 1.1 MB/s)
 #24 4.706 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-data-jpa/3.2.2/spring-boot-starter-data-jpa-3.2.2.pom
 #24 4.710 Progress (1): 2.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-data-jpa/3.2.2/spring-boot-starter-data-jpa-3.2.2.pom (2.9 kB at 574 kB/s)
 #24 4.714 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-aop/3.2.2/spring-boot-starter-aop-3.2.2.pom
 #24 4.720 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-aop/3.2.2/spring-boot-starter-aop-3.2.2.pom (2.5 kB at 352 kB/s)
 #24 4.723 Downloading from central: https://repo.maven.apache.org/maven2/org/aspectj/aspectjweaver/1.9.21/aspectjweaver-1.9.21.pom
 #24 4.728 Progress (1): 2.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/aspectj/aspectjweaver/1.9.21/aspectjweaver-1.9.21.pom (2.1 kB at 344 kB/s)
 #24 4.735 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-jdbc/3.2.2/spring-boot-starter-jdbc-3.2.2.pom
 #24 4.740 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-jdbc/3.2.2/spring-boot-starter-jdbc-3.2.2.pom (2.5 kB at 408 kB/s)
 #24 4.744 Downloading from central: https://repo.maven.apache.org/maven2/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.pom
 #24 4.747 Progress (1): 16/25 kB
 Progress (1): 25 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.pom (25 kB at 4.9 MB/s)
 #24 4.752 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jdbc/6.1.3/spring-jdbc-6.1.3.pom
 #24 4.757 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jdbc/6.1.3/spring-jdbc-6.1.3.pom (2.4 kB at 340 kB/s)
 #24 4.761 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-tx/6.1.3/spring-tx-6.1.3.pom
 #24 4.766 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-tx/6.1.3/spring-tx-6.1.3.pom (2.2 kB at 442 kB/s)
 #24 4.769 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.4.1.Final/hibernate-core-6.4.1.Final.pom
 #24 4.774 Progress (1): 5.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.4.1.Final/hibernate-core-6.4.1.Final.pom (5.8 kB at 1.2 MB/s)
 #24 4.777 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.pom
 #24 4.781 Progress (1): 16 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.pom (16 kB at 3.9 MB/s)
 #24 4.785 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.pom
 #24 4.789 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.pom (14 kB at 2.7 MB/s)
 #24 4.792 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.6/project-1.0.6.pom
 #24 4.795 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.6/project-1.0.6.pom (13 kB at 2.7 MB/s)
 #24 4.799 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.pom
 #24 4.805 Progress (1): 16/19 kB
 Progress (1): 19 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.pom (19 kB at 3.1 MB/s)
 #24 4.808 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/logging/logging-parent/1.0.1.Final/logging-parent-1.0.1.Final.pom
 #24 4.811 Progress (1): 6.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/logging/logging-parent/1.0.1.Final/logging-parent-1.0.1.Final.pom (6.0 kB at 1.2 MB/s)
 #24 4.816 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.3/junit-bom-5.9.3.pom
 #24 4.821 Progress (1): 5.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.9.3/junit-bom-5.9.3.pom (5.6 kB at 1.1 MB/s)
 #24 4.825 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.pom
 #24 4.830 Progress (1): 2.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.pom (2.1 kB at 346 kB/s)
 #24 4.834 Downloading from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex/3.1.2/jandex-3.1.2.pom
 #24 4.839 Progress (1): 7.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex/3.1.2/jandex-3.1.2.pom (7.0 kB at 1.4 MB/s)
 #24 4.842 Downloading from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex-parent/3.1.2/jandex-parent-3.1.2.pom
 #24 4.845 Progress (1): 7.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex-parent/3.1.2/jandex-parent-3.1.2.pom (7.2 kB at 1.4 MB/s)
 #24 4.848 Downloading from central: https://repo.maven.apache.org/maven2/io/smallrye/smallrye-build-parent/39/smallrye-build-parent-39.pom
 #24 4.852 Progress (1): 16/28 kB
 Progress (1): 28 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/smallrye/smallrye-build-parent/39/smallrye-build-parent-39.pom (28 kB at 7.1 MB/s)
 #24 4.857 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.6.0/classmate-1.6.0.pom
 #24 4.867 Progress (1): 6.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.6.0/classmate-1.6.0.pom (6.6 kB at 604 kB/s)
 #24 4.870 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/55/oss-parent-55.pom
 #24 4.874 Progress (1): 16/24 kB
 Progress (1): 24 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/55/oss-parent-55.pom (24 kB at 4.7 MB/s)
 #24 4.878 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.pom
 #24 4.883 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.pom (11 kB at 1.8 MB/s)
 #24 4.886 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-runtime-parent/4.0.4/jaxb-runtime-parent-4.0.4.pom
 #24 4.891 Progress (1): 1.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-runtime-parent/4.0.4/jaxb-runtime-parent-4.0.4.pom (1.2 kB at 238 kB/s)
 #24 4.893 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-parent/4.0.4/jaxb-parent-4.0.4.pom
 #24 4.898 Progress (1): 16/35 kB
 Progress (1): 33/35 kB
 Progress (1): 35 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-parent/4.0.4/jaxb-parent-4.0.4.pom (35 kB at 5.8 MB/s)
 #24 4.901 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/jaxb-bom-ext/4.0.4/jaxb-bom-ext-4.0.4.pom
 #24 4.906 Progress (1): 3.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/jaxb-bom-ext/4.0.4/jaxb-bom-ext-4.0.4.pom (3.5 kB at 579 kB/s)
 #24 4.913 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.pom
 #24 4.918 Progress (1): 3.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.pom (3.7 kB at 534 kB/s)
 #24 4.924 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.pom
 #24 4.928 Progress (1): 4.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.pom (4.0 kB at 798 kB/s)
 #24 4.931 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation-project/2.0.1/angus-activation-project-2.0.1.pom
 #24 4.936 Progress (1): 16/20 kB
 Progress (1): 20 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation-project/2.0.1/angus-activation-project-2.0.1.pom (20 kB at 2.9 MB/s)
 #24 4.941 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.pom
 #24 4.946 Progress (1): 1.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.pom (1.8 kB at 297 kB/s)
 #24 4.948 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-txw-parent/4.0.4/jaxb-txw-parent-4.0.4.pom
 #24 4.953 Progress (1): 1.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/xml/bind/mvn/jaxb-txw-parent/4.0.4/jaxb-txw-parent-4.0.4.pom (1.2 kB at 240 kB/s)
 #24 4.957 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.pom
 #24 4.962 Progress (1): 1.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.pom (1.6 kB at 267 kB/s)
 #24 4.966 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons/4.1.2/istack-commons-4.1.2.pom
 #24 4.971 Progress (1): 16/26 kB
 Progress (1): 26 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons/4.1.2/istack-commons-4.1.2.pom (26 kB at 4.4 MB/s)
 #24 4.975 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.pom
 #24 4.979 Progress (1): 5.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.pom (5.9 kB at 1.2 MB/s)
 #24 4.982 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.pom
 #24 4.986 Progress (1): 3.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.pom (3.6 kB at 710 kB/s)
 #24 4.988 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-master/4.13.0/antlr4-master-4.13.0.pom
 #24 4.992 Progress (1): 4.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-master/4.13.0/antlr4-master-4.13.0.pom (4.8 kB at 964 kB/s)
 #24 4.996 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa/3.2.2/spring-data-jpa-3.2.2.pom
 #24 5.002 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa/3.2.2/spring-data-jpa-3.2.2.pom (11 kB at 1.8 MB/s)
 #24 5.006 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa-parent/3.2.2/spring-data-jpa-parent-3.2.2.pom
 #24 5.011 Progress (1): 6.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa-parent/3.2.2/spring-data-jpa-parent-3.2.2.pom (6.9 kB at 981 kB/s)
 #24 5.015 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/build/spring-data-parent/3.2.2/spring-data-parent-3.2.2.pom
 #24 5.020 Progress (1): 16/41 kB
 Progress (1): 33/41 kB
 Progress (1): 41 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/build/spring-data-parent/3.2.2/spring-data-parent-3.2.2.pom (41 kB at 6.8 MB/s)
 #24 5.024 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/build/spring-data-build/3.2.2/spring-data-build-3.2.2.pom
 #24 5.029 Progress (1): 7.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/build/spring-data-build/3.2.2/spring-data-build-3.2.2.pom (7.3 kB at 1.2 MB/s)
 #24 5.034 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-commons/3.2.2/spring-data-commons-3.2.2.pom
 #24 5.042 Progress (1): 9.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-commons/3.2.2/spring-data-commons-3.2.2.pom (9.9 kB at 991 kB/s)
 #24 5.048 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-orm/6.1.3/spring-orm-6.1.3.pom
 #24 5.053 Progress (1): 2.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-orm/6.1.3/spring-orm-6.1.3.pom (2.6 kB at 373 kB/s)
 #24 5.058 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aspects/6.1.3/spring-aspects-6.1.3.pom
 #24 5.062 Progress (1): 2.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aspects/6.1.3/spring-aspects-6.1.3.pom (2.0 kB at 405 kB/s)
 #24 5.066 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5-jakarta/2.13.5/jackson-datatype-hibernate5-jakarta-2.13.5.pom
 #24 5.071 Progress (1): 4.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5-jakarta/2.13.5/jackson-datatype-hibernate5-jakarta-2.13.5.pom (4.1 kB at 690 kB/s)
 #24 5.074 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate-parent/2.13.5/jackson-datatype-hibernate-parent-2.13.5.pom
 #24 5.079 Progress (1): 4.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate-parent/2.13.5/jackson-datatype-hibernate-parent-2.13.5.pom (4.5 kB at 753 kB/s)
 #24 5.082 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.13.5/jackson-base-2.13.5.pom
 #24 5.086 Progress (1): 10 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.13.5/jackson-base-2.13.5.pom (10 kB at 2.5 MB/s)
 #24 5.089 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.13.5/jackson-bom-2.13.5.pom
 #24 5.093 Progress (1): 16/17 kB
 Progress (1): 17 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.13.5/jackson-bom-2.13.5.pom (17 kB at 2.9 MB/s)
 #24 5.096 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.13/jackson-parent-2.13.pom
 #24 5.099 Progress (1): 7.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.13/jackson-parent-2.13.pom (7.4 kB at 1.9 MB/s)
 #24 5.102 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/43/oss-parent-43.pom
 #24 5.105 Progress (1): 16/24 kB
 Progress (1): 24 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/43/oss-parent-43.pom (24 kB at 4.7 MB/s)
 #24 5.112 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.pom
 #24 5.116 Progress (1): 9.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.pom (9.8 kB at 1.2 MB/s)
 #24 5.124 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.15.3/jackson-base-2.15.3.pom
 #24 5.128 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.15.3/jackson-base-2.15.3.pom (11 kB at 2.3 MB/s)
 #24 5.134 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.pom
 #24 5.138 Progress (1): 16/19 kB
 Progress (1): 19 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.pom (19 kB at 3.9 MB/s)
 #24 5.144 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.pom
 #24 5.149 Progress (1): 7.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.pom (7.1 kB at 1.4 MB/s)
 #24 5.153 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-web/3.2.2/spring-boot-starter-web-3.2.2.pom
 #24 5.156 Progress (1): 2.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-web/3.2.2/spring-boot-starter-web-3.2.2.pom (2.9 kB at 586 kB/s)
 #24 5.160 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-json/3.2.2/spring-boot-starter-json-3.2.2.pom
 #24 5.166 Progress (1): 3.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-json/3.2.2/spring-boot-starter-json-3.2.2.pom (3.1 kB at 440 kB/s)
 #24 5.171 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-web/6.1.3/spring-web-6.1.3.pom
 #24 5.175 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-web/6.1.3/spring-web-6.1.3.pom (2.4 kB at 398 kB/s)
 #24 5.179 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.pom
 #24 5.184 Progress (1): 2.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.pom (2.6 kB at 429 kB/s)
 #24 5.187 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-java8/2.15.3/jackson-modules-java8-2.15.3.pom
 #24 5.191 Progress (1): 3.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-java8/2.15.3/jackson-modules-java8-2.15.3.pom (3.1 kB at 775 kB/s)
 #24 5.196 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.pom
 #24 5.201 Progress (1): 4.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.pom (4.9 kB at 981 kB/s)
 #24 5.206 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.pom
 #24 5.210 Progress (1): 4.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.pom (4.4 kB at 872 kB/s)
 #24 5.214 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-tomcat/3.2.2/spring-boot-starter-tomcat-3.2.2.pom
 #24 5.218 Progress (1): 3.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-tomcat/3.2.2/spring-boot-starter-tomcat-3.2.2.pom (3.1 kB at 781 kB/s)
 #24 5.221 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-core/10.1.18/tomcat-embed-core-10.1.18.pom
 #24 5.225 Progress (1): 1.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-core/10.1.18/tomcat-embed-core-10.1.18.pom (1.8 kB at 356 kB/s)
 #24 5.227 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-el/10.1.18/tomcat-embed-el-10.1.18.pom
 #24 5.232 Progress (1): 1.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-el/10.1.18/tomcat-embed-el-10.1.18.pom (1.5 kB at 308 kB/s)
 #24 5.235 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.18/tomcat-embed-websocket-10.1.18.pom
 #24 5.240 Progress (1): 1.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.18/tomcat-embed-websocket-10.1.18.pom (1.8 kB at 298 kB/s)
 #24 5.243 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-webmvc/6.1.3/spring-webmvc-6.1.3.pom
 #24 5.248 Progress (1): 2.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-webmvc/6.1.3/spring-webmvc-6.1.3.pom (2.9 kB at 491 kB/s)
 #24 5.252 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.3.1/spring-security-core-6.3.1.pom
 #24 5.256 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.3.1/spring-security-core-6.3.1.pom (3.2 kB at 643 kB/s)
 #24 5.264 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-crypto/6.2.1/spring-security-crypto-6.2.1.pom
 #24 5.269 Progress (1): 1.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-crypto/6.2.1/spring-security-crypto-6.2.1.pom (1.9 kB at 311 kB/s)
 #24 5.272 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java/3.3.4/docker-java-3.3.4.pom
 #24 5.277 Progress (1): 5.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java/3.3.4/docker-java-3.3.4.pom (5.7 kB at 1.1 MB/s)
 #24 5.279 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-parent/3.3.4/docker-java-parent-3.3.4.pom
 #24 5.285 Progress (1): 12 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-parent/3.3.4/docker-java-parent-3.3.4.pom (12 kB at 1.7 MB/s)
 #24 5.288 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-core/3.3.4/docker-java-core-3.3.4.pom
 #24 5.293 Progress (1): 2.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-core/3.3.4/docker-java-core-3.3.4.pom (2.9 kB at 587 kB/s)
 #24 5.297 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.pom
 #24 5.302 Progress (1): 2.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.pom (2.3 kB at 380 kB/s)
 #24 5.305 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.pom
 #24 5.309 Progress (1): 1.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.pom (1.6 kB at 410 kB/s)
 #24 5.312 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.pom
 #24 5.316 Progress (1): 16/20 kB
 Progress (1): 20 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.pom (20 kB at 4.1 MB/s)
 #24 5.319 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/58/commons-parent-58.pom
 #24 5.324 Progress (1): 16/83 kB
 Progress (1): 33/83 kB
 Progress (1): 37/83 kB
 Progress (1): 53/83 kB
 Progress (1): 69/83 kB
 Progress (1): 83 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/58/commons-parent-58.pom (83 kB at 14 MB/s)
 #24 5.330 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.21/commons-compress-1.21.pom
 #24 5.333 Progress (1): 16/20 kB
 Progress (1): 20 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.21/commons-compress-1.21.pom (20 kB at 4.9 MB/s)
 #24 5.336 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/52/commons-parent-52.pom
 #24 5.340 Progress (1): 16/79 kB
 Progress (1): 32/79 kB
 Progress (1): 49/79 kB
 Progress (1): 65/79 kB
 Progress (1): 79 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/52/commons-parent-52.pom (79 kB at 16 MB/s)
 #24 5.344 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/23/apache-23.pom
 #24 5.348 Progress (1): 16/18 kB
 Progress (1): 18 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/23/apache-23.pom (18 kB at 4.6 MB/s)
 #24 5.352 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.pom
 #24 5.357 Progress (1): 16/31 kB
 Progress (1): 31 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.pom (31 kB at 5.2 MB/s)
 #24 5.366 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/19.0/guava-19.0.pom
 #24 5.368 Progress (1): 6.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/19.0/guava-19.0.pom (6.8 kB at 1.4 MB/s)
 #24 5.374 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/19.0/guava-parent-19.0.pom
 #24 5.377 Progress (1): 9.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/19.0/guava-parent-19.0.pom (9.9 kB at 2.5 MB/s)
 #24 5.381 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk18on/1.76/bcpkix-jdk18on-1.76.pom
 #24 5.386 Progress (1): 1.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk18on/1.76/bcpkix-jdk18on-1.76.pom (1.6 kB at 274 kB/s)
 #24 5.390 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk18on/1.76/bcprov-jdk18on-1.76.pom
 #24 5.393 Progress (1): 1.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk18on/1.76/bcprov-jdk18on-1.76.pom (1.1 kB at 228 kB/s)
 #24 5.398 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcutil-jdk18on/1.76/bcutil-jdk18on-1.76.pom
 #24 5.402 Progress (1): 1.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcutil-jdk18on/1.76/bcutil-jdk18on-1.76.pom (1.3 kB at 264 kB/s)
 #24 5.405 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-jersey/3.3.4/docker-java-transport-jersey-3.3.4.pom
 #24 5.409 Progress (1): 4.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-jersey/3.3.4/docker-java-transport-jersey-3.3.4.pom (4.4 kB at 877 kB/s)
 #24 5.413 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.15.3/jackson-jaxrs-json-provider-2.15.3.pom
 #24 5.417 Progress (1): 4.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.15.3/jackson-jaxrs-json-provider-2.15.3.pom (4.5 kB at 901 kB/s)
 #24 5.420 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-providers/2.15.3/jackson-jaxrs-providers-2.15.3.pom
 #24 5.424 Progress (1): 5.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-providers/2.15.3/jackson-jaxrs-providers-2.15.3.pom (5.8 kB at 1.2 MB/s)
 #24 5.429 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.15.3/jackson-jaxrs-base-2.15.3.pom
 #24 5.434 Progress (1): 2.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.15.3/jackson-jaxrs-base-2.15.3.pom (2.3 kB at 379 kB/s)
 #24 5.439 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.15.3/jackson-module-jaxb-annotations-2.15.3.pom
 #24 5.444 Progress (1): 3.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.15.3/jackson-module-jaxb-annotations-2.15.3.pom (3.8 kB at 757 kB/s)
 #24 5.447 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-base/2.15.3/jackson-modules-base-2.15.3.pom
 #24 5.450 Progress (1): 3.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-base/2.15.3/jackson-modules-base-2.15.3.pom (3.8 kB at 944 kB/s)
 #24 5.456 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/jersey-apache-connector/3.1.5/jersey-apache-connector-3.1.5.pom
 #24 5.461 Progress (1): 3.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/jersey-apache-connector/3.1.5/jersey-apache-connector-3.1.5.pom (3.0 kB at 504 kB/s)
 #24 5.465 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/project/3.1.5/project-3.1.5.pom
 #24 5.470 Progress (1): 3.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/project/3.1.5/project-3.1.5.pom (3.4 kB at 674 kB/s)
 #24 5.473 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/project/3.1.5/project-3.1.5.pom
 #24 5.478 Progress (1): 12/110 kB
 Progress (1): 15/110 kB
 Progress (1): 31/110 kB
 Progress (1): 48/110 kB
 Progress (1): 64/110 kB
 Progress (1): 80/110 kB
 Progress (1): 96/110 kB
 Progress (1): 110 kB   
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/project/3.1.5/project-3.1.5.pom (110 kB at 12 MB/s)
 #24 5.485 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.9/project-1.0.9.pom
 #24 5.489 Progress (1): 16 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.9/project-1.0.9.pom (16 kB at 3.2 MB/s)
 #24 5.494 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.14/httpclient-4.5.14.pom
 #24 5.500 Progress (1): 6.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.14/httpclient-4.5.14.pom (6.6 kB at 828 kB/s)
 #24 5.505 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.5.14/httpcomponents-client-4.5.14.pom
 #24 5.509 Progress (1): 15 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.5.14/httpcomponents-client-4.5.14.pom (15 kB at 2.5 MB/s)
 #24 5.513 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-parent/11/httpcomponents-parent-11.pom
 #24 5.517 Progress (1): 16/35 kB
 Progress (1): 33/35 kB
 Progress (1): 35 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-parent/11/httpcomponents-parent-11.pom (35 kB at 6.9 MB/s)
 #24 5.521 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/21/apache-21.pom
 #24 5.525 Progress (1): 16/17 kB
 Progress (1): 17 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/21/apache-21.pom (17 kB at 4.3 MB/s)
 #24 5.530 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.pom
 #24 5.535 Progress (1): 5.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.pom (5.0 kB at 993 kB/s)
 #24 5.539 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-core/4.4.16/httpcomponents-core-4.4.16.pom
 #24 5.543 Progress (1): 12 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-core/4.4.16/httpcomponents-core-4.4.16.pom (12 kB at 2.4 MB/s)
 #24 5.548 Downloading from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.pom
 #24 5.552 Progress (1): 16/19 kB
 Progress (1): 19 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.pom (19 kB at 3.8 MB/s)
 #24 5.557 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/34/commons-parent-34.pom
 #24 5.561 Progress (1): 16/56 kB
 Progress (1): 33/56 kB
 Progress (1): 49/56 kB
 Progress (1): 56 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/34/commons-parent-34.pom (56 kB at 8.0 MB/s)
 #24 5.568 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/13/apache-13.pom
 #24 5.573 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/13/apache-13.pom (14 kB at 1.2 MB/s)
 #24 5.589 Downloading from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.pom
 #24 5.594 Progress (1): 16 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.pom (16 kB at 2.3 MB/s)
 #24 5.600 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-common/3.1.5/jersey-common-3.1.5.pom
 #24 5.605 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-common/3.1.5/jersey-common-3.1.5.pom (13 kB at 1.8 MB/s)
 #24 5.612 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.pom
 #24 5.617 Progress (1): 16/18 kB
 Progress (1): 18 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.pom (18 kB at 2.9 MB/s)
 #24 5.621 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/all/3.1.0/all-3.1.0.pom
 #24 5.626 Progress (1): 2.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/all/3.1.0/all-3.1.0.pom (2.8 kB at 471 kB/s)
 #24 5.630 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.pom
 #24 5.634 Progress (1): 7.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.pom (7.4 kB at 1.5 MB/s)
 #24 5.637 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.5/project-1.0.5.pom
 #24 5.641 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/ee4j/project/1.0.5/project-1.0.5.pom (13 kB at 2.2 MB/s)
 #24 5.645 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-client/3.1.5/jersey-client-3.1.5.pom
 #24 5.649 Progress (1): 6.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-client/3.1.5/jersey-client-3.1.5.pom (6.8 kB at 1.4 MB/s)
 #24 5.655 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.pom
 #24 5.658 Progress (1): 6.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.pom (6.6 kB at 1.3 MB/s)
 #24 5.662 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.5.12/httpcomponents-client-4.5.12.pom
 #24 5.666 Progress (1): 16 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.5.12/httpcomponents-client-4.5.12.pom (16 kB at 4.1 MB/s)
 #24 5.672 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/jersey-hk2/3.1.5/jersey-hk2-3.1.5.pom
 #24 5.679 Progress (1): 4.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/jersey-hk2/3.1.5/jersey-hk2-3.1.5.pom (4.9 kB at 449 kB/s)
 #24 5.685 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/project/3.1.5/project-3.1.5.pom
 #24 5.690 Progress (1): 1.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/project/3.1.5/project-3.1.5.pom (1.5 kB at 246 kB/s)
 #24 5.696 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-locator/3.0.5/hk2-locator-3.0.5.pom
 #24 5.702 Progress (1): 4.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-locator/3.0.5/hk2-locator-3.0.5.pom (4.5 kB at 643 kB/s)
 #24 5.705 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-parent/3.0.5/hk2-parent-3.0.5.pom
 #24 5.710 Progress (1): 16/41 kB
 Progress (1): 33/41 kB
 Progress (1): 41 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-parent/3.0.5/hk2-parent-3.0.5.pom (41 kB at 5.9 MB/s)
 #24 5.716 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/3.0.5/aopalliance-repackaged-3.0.5.pom
 #24 5.723 Progress (1): 6.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/3.0.5/aopalliance-repackaged-3.0.5.pom (6.1 kB at 865 kB/s)
 #24 5.725 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/3.0.5/external-3.0.5.pom
 #24 5.731 Progress (1): 1.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/3.0.5/external-3.0.5.pom (1.4 kB at 205 kB/s)
 #24 5.735 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-api/3.0.5/hk2-api-3.0.5.pom
 #24 5.740 Progress (1): 4.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-api/3.0.5/hk2-api-3.0.5.pom (4.0 kB at 660 kB/s)
 #24 5.744 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-utils/3.0.5/hk2-utils-3.0.5.pom
 #24 5.749 Progress (1): 4.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-utils/3.0.5/hk2-utils-3.0.5.pom (4.8 kB at 684 kB/s)
 #24 5.754 Downloading from central: https://repo.maven.apache.org/maven2/org/javassist/javassist/3.29.2-GA/javassist-3.29.2-GA.pom
 #24 5.758 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/javassist/javassist/3.29.2-GA/javassist-3.29.2-GA.pom (11 kB at 2.2 MB/s)
 #24 5.762 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-common/2.6.1/junixsocket-common-2.6.1.pom
 #24 5.767 Progress (1): 2.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-common/2.6.1/junixsocket-common-2.6.1.pom (2.9 kB at 420 kB/s)
 #24 5.770 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket/2.6.1/junixsocket-2.6.1.pom
 #24 5.775 Progress (1): 16 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket/2.6.1/junixsocket-2.6.1.pom (16 kB at 3.2 MB/s)
 #24 5.785 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/kohlschutter-parent-multirelease/1.5.1/kohlschutter-parent-multirelease-1.5.1.pom
 #24 5.789 Progress (1): 10 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/kohlschutter-parent-multirelease/1.5.1/kohlschutter-parent-multirelease-1.5.1.pom (10 kB at 2.1 MB/s)
 #24 5.793 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/kohlschutter-parent/1.5.1/kohlschutter-parent-1.5.1.pom
 #24 5.798 Progress (1): 15/62 kB
 Progress (1): 31/62 kB
 Progress (1): 48/62 kB
 Progress (1): 62 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/kohlschutter-parent/1.5.1/kohlschutter-parent-1.5.1.pom (62 kB at 8.8 MB/s)
 #24 5.804 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-native-common/2.6.1/junixsocket-native-common-2.6.1.pom
 #24 5.812 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-native-common/2.6.1/junixsocket-native-common-2.6.1.pom (11 kB at 1.2 MB/s)
 #24 5.817 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-netty/3.3.4/docker-java-transport-netty-3.3.4.pom
 #24 5.823 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-netty/3.3.4/docker-java-transport-netty-3.3.4.pom (2.4 kB at 339 kB/s)
 #24 5.828 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-http/4.1.105.Final/netty-codec-http-4.1.105.Final.pom
 #24 5.832 Progress (1): 4.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-http/4.1.105.Final/netty-codec-http-4.1.105.Final.pom (4.4 kB at 728 kB/s)
 #24 5.836 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-parent/4.1.105.Final/netty-parent-4.1.105.Final.pom
 #24 5.842 Progress (1): 16/85 kB
 Progress (1): 33/85 kB
 Progress (1): 49/85 kB
 Progress (1): 64/85 kB
 Progress (1): 80/85 kB
 Progress (1): 85 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-parent/4.1.105.Final/netty-parent-4.1.105.Final.pom (85 kB at 11 MB/s)
 #24 5.851 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-common/4.1.105.Final/netty-common-4.1.105.Final.pom
 #24 5.857 Progress (1): 12 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-common/4.1.105.Final/netty-common-4.1.105.Final.pom (12 kB at 1.7 MB/s)
 #24 5.862 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-buffer/4.1.105.Final/netty-buffer-4.1.105.Final.pom
 #24 5.867 Progress (1): 1.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-buffer/4.1.105.Final/netty-buffer-4.1.105.Final.pom (1.6 kB at 316 kB/s)
 #24 5.872 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport/4.1.105.Final/netty-transport-4.1.105.Final.pom
 #24 5.877 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport/4.1.105.Final/netty-transport-4.1.105.Final.pom (2.2 kB at 309 kB/s)
 #24 5.882 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-resolver/4.1.105.Final/netty-resolver-4.1.105.Final.pom
 #24 5.888 Progress (1): 1.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-resolver/4.1.105.Final/netty-resolver-4.1.105.Final.pom (1.6 kB at 198 kB/s)
 #24 5.894 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec/4.1.105.Final/netty-codec-4.1.105.Final.pom
 #24 5.911 Progress (1): 5.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec/4.1.105.Final/netty-codec-4.1.105.Final.pom (5.5 kB at 304 kB/s)
 #24 5.916 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler/4.1.105.Final/netty-handler-4.1.105.Final.pom
 #24 5.920 Progress (1): 4.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler/4.1.105.Final/netty-handler-4.1.105.Final.pom (4.6 kB at 770 kB/s)
 #24 5.925 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-unix-common/4.1.105.Final/netty-transport-native-unix-common-4.1.105.Final.pom
 #24 5.931 Progress (1): 16/33 kB
 Progress (1): 33/33 kB
 Progress (1): 33 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-unix-common/4.1.105.Final/netty-transport-native-unix-common-4.1.105.Final.pom (33 kB at 4.7 MB/s)
 #24 5.937 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler-proxy/4.1.105.Final/netty-handler-proxy-4.1.105.Final.pom
 #24 5.942 Progress (1): 3.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler-proxy/4.1.105.Final/netty-handler-proxy-4.1.105.Final.pom (3.6 kB at 592 kB/s)
 #24 5.947 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-socks/4.1.105.Final/netty-codec-socks-4.1.105.Final.pom
 #24 5.952 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-socks/4.1.105.Final/netty-codec-socks-4.1.105.Final.pom (2.5 kB at 423 kB/s)
 #24 5.957 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-epoll/4.1.105.Final/netty-transport-native-epoll-4.1.105.Final.pom
 #24 5.962 Progress (1): 16/27 kB
 Progress (1): 27 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-epoll/4.1.105.Final/netty-transport-native-epoll-4.1.105.Final.pom (27 kB at 5.3 MB/s)
 #24 5.968 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-epoll/4.1.105.Final/netty-transport-classes-epoll-4.1.105.Final.pom
 #24 5.973 Progress (1): 2.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-epoll/4.1.105.Final/netty-transport-classes-epoll-4.1.105.Final.pom (2.1 kB at 356 kB/s)
 #24 5.977 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-kqueue/4.1.105.Final/netty-transport-native-kqueue-4.1.105.Final.pom
 #24 5.982 Progress (1): 16/31 kB
 Progress (1): 31 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-kqueue/4.1.105.Final/netty-transport-native-kqueue-4.1.105.Final.pom (31 kB at 5.1 MB/s)
 #24 5.988 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-kqueue/4.1.105.Final/netty-transport-classes-kqueue-4.1.105.Final.pom
 #24 5.997 Progress (1): 2.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-kqueue/4.1.105.Final/netty-transport-classes-kqueue-4.1.105.Final.pom (2.1 kB at 214 kB/s)
 #24 6.002 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/2.0.11/jcl-over-slf4j-2.0.11.pom
 #24 6.008 Progress (1): 1.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/2.0.11/jcl-over-slf4j-2.0.11.pom (1.7 kB at 288 kB/s)
 #24 6.012 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-httpclient5/3.3.4/docker-java-transport-httpclient5-3.3.4.pom
 #24 6.017 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-httpclient5/3.3.4/docker-java-transport-httpclient5-3.3.4.pom (2.2 kB at 320 kB/s)
 #24 6.021 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.2.3/httpclient5-5.2.3.pom
 #24 6.025 Progress (1): 6.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.2.3/httpclient5-5.2.3.pom (6.0 kB at 1.5 MB/s)
 #24 6.027 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5-parent/5.2.3/httpclient5-parent-5.2.3.pom
 #24 6.031 Progress (1): 16/17 kB
 Progress (1): 17 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5-parent/5.2.3/httpclient5-parent-5.2.3.pom (17 kB at 4.2 MB/s)
 #24 6.034 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-parent/13/httpcomponents-parent-13.pom
 #24 6.038 Progress (1): 16/30 kB
 Progress (1): 30 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-parent/13/httpcomponents-parent-13.pom (30 kB at 6.0 MB/s)
 #24 6.042 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.pom
 #24 6.045 Progress (1): 3.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.pom (3.9 kB at 986 kB/s)
 #24 6.047 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-parent/5.2.4/httpcore5-parent-5.2.4.pom
 #24 6.051 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-parent/5.2.4/httpcore5-parent-5.2.4.pom (14 kB at 3.4 MB/s)
 #24 6.055 Downloading from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna/5.13.0/jna-5.13.0.pom
 #24 6.060 Progress (1): 2.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna/5.13.0/jna-5.13.0.pom (2.0 kB at 406 kB/s)
 #24 6.063 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.pom
 #24 6.067 Progress (1): 6.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.pom (6.0 kB at 1.2 MB/s)
 #24 6.069 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5-parent/5.3.1/httpclient5-parent-5.3.1.pom
 #24 6.073 Progress (1): 16/17 kB
 Progress (1): 17 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5-parent/5.3.1/httpclient5-parent-5.3.1.pom (17 kB at 4.2 MB/s)
 #24 6.079 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.pom
 #24 6.082 Progress (1): 3.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.pom (3.6 kB at 904 kB/s)
 #24 6.087 Downloading from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.pom
 #24 6.091 Progress (1): 16/23 kB
 Progress (1): 23 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.pom (23 kB at 4.6 MB/s)
 #24 6.097 Downloading from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api-parent/2.3.0/jaxb-api-parent-2.3.0.pom
 #24 6.100 Progress (1): 5.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api-parent/2.3.0/jaxb-api-parent-2.3.0.pom (5.6 kB at 940 kB/s)
 #24 6.104 Downloading from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/5/jvnet-parent-5.pom
 #24 6.108 Progress (1): 8.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/5/jvnet-parent-5.pom (8.9 kB at 1.8 MB/s)
 #24 6.112 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client/6.10.0/kubernetes-client-6.10.0.pom
 #24 6.117 Progress (1): 9.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client/6.10.0/kubernetes-client-6.10.0.pom (9.4 kB at 1.9 MB/s)
 #24 6.120 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-project/6.10.0/kubernetes-client-project-6.10.0.pom
 #24 6.125 Progress (1): 16/58 kB
 Progress (1): 33/58 kB
 Progress (1): 49/58 kB
 Progress (1): 58 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-project/6.10.0/kubernetes-client-project-6.10.0.pom (58 kB at 7.2 MB/s)
 #24 6.131 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.16.0/jackson-bom-2.16.0.pom
 #24 6.135 Progress (1): 16/18 kB
 Progress (1): 18 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.16.0/jackson-bom-2.16.0.pom (18 kB at 3.6 MB/s)
 #24 6.139 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.16/jackson-parent-2.16.pom
 #24 6.143 Progress (1): 6.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.16/jackson-parent-2.16.pom (6.5 kB at 1.3 MB/s)
 #24 6.146 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/56/oss-parent-56.pom
 #24 6.150 Progress (1): 16/24 kB
 Progress (1): 24 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/56/oss-parent-56.pom (24 kB at 4.7 MB/s)
 #24 6.156 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-api/6.10.0/kubernetes-client-api-6.10.0.pom
 #24 6.165 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-api/6.10.0/kubernetes-client-api-6.10.0.pom (11 kB at 1.3 MB/s)
 #24 6.170 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-core/6.10.0/kubernetes-model-core-6.10.0.pom
 #24 6.176 Progress (1): 8.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-core/6.10.0/kubernetes-model-core-6.10.0.pom (8.9 kB at 1.3 MB/s)
 #24 6.179 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-generator/6.10.0/kubernetes-model-generator-6.10.0.pom
 #24 6.186 Progress (1): 9.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-generator/6.10.0/kubernetes-model-generator-6.10.0.pom (9.1 kB at 1.3 MB/s)
 #24 6.191 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-common/6.10.0/kubernetes-model-common-6.10.0.pom
 #24 6.197 Progress (1): 3.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-common/6.10.0/kubernetes-model-common-6.10.0.pom (3.5 kB at 494 kB/s)
 #24 6.208 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-gatewayapi/6.10.0/kubernetes-model-gatewayapi-6.10.0.pom
 #24 6.213 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-gatewayapi/6.10.0/kubernetes-model-gatewayapi-6.10.0.pom (2.5 kB at 422 kB/s)
 #24 6.219 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-resource/6.10.0/kubernetes-model-resource-6.10.0.pom
 #24 6.225 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-resource/6.10.0/kubernetes-model-resource-6.10.0.pom (2.5 kB at 360 kB/s)
 #24 6.230 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-rbac/6.10.0/kubernetes-model-rbac-6.10.0.pom
 #24 6.234 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-rbac/6.10.0/kubernetes-model-rbac-6.10.0.pom (2.4 kB at 394 kB/s)
 #24 6.240 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-admissionregistration/6.10.0/kubernetes-model-admissionregistration-6.10.0.pom
 #24 6.246 Progress (1): 3.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-admissionregistration/6.10.0/kubernetes-model-admissionregistration-6.10.0.pom (3.6 kB at 518 kB/s)
 #24 6.251 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apps/6.10.0/kubernetes-model-apps-6.10.0.pom
 #24 6.256 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apps/6.10.0/kubernetes-model-apps-6.10.0.pom (2.4 kB at 394 kB/s)
 #24 6.261 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-autoscaling/6.10.0/kubernetes-model-autoscaling-6.10.0.pom
 #24 6.266 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-autoscaling/6.10.0/kubernetes-model-autoscaling-6.10.0.pom (2.4 kB at 477 kB/s)
 #24 6.271 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apiextensions/6.10.0/kubernetes-model-apiextensions-6.10.0.pom
 #24 6.277 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apiextensions/6.10.0/kubernetes-model-apiextensions-6.10.0.pom (2.5 kB at 362 kB/s)
 #24 6.282 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-batch/6.10.0/kubernetes-model-batch-6.10.0.pom
 #24 6.287 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-batch/6.10.0/kubernetes-model-batch-6.10.0.pom (2.4 kB at 394 kB/s)
 #24 6.292 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-certificates/6.10.0/kubernetes-model-certificates-6.10.0.pom
 #24 6.297 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-certificates/6.10.0/kubernetes-model-certificates-6.10.0.pom (2.5 kB at 421 kB/s)
 #24 6.302 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-coordination/6.10.0/kubernetes-model-coordination-6.10.0.pom
 #24 6.307 Progress (1): 3.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-coordination/6.10.0/kubernetes-model-coordination-6.10.0.pom (3.1 kB at 436 kB/s)
 #24 6.312 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-discovery/6.10.0/kubernetes-model-discovery-6.10.0.pom
 #24 6.317 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-discovery/6.10.0/kubernetes-model-discovery-6.10.0.pom (2.4 kB at 396 kB/s)
 #24 6.322 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-events/6.10.0/kubernetes-model-events-6.10.0.pom
 #24 6.327 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-events/6.10.0/kubernetes-model-events-6.10.0.pom (2.4 kB at 338 kB/s)
 #24 6.332 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-extensions/6.10.0/kubernetes-model-extensions-6.10.0.pom
 #24 6.337 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-extensions/6.10.0/kubernetes-model-extensions-6.10.0.pom (2.4 kB at 340 kB/s)
 #24 6.342 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-flowcontrol/6.10.0/kubernetes-model-flowcontrol-6.10.0.pom
 #24 6.347 Progress (1): 2.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-flowcontrol/6.10.0/kubernetes-model-flowcontrol-6.10.0.pom (2.6 kB at 518 kB/s)
 #24 6.351 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-networking/6.10.0/kubernetes-model-networking-6.10.0.pom
 #24 6.356 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-networking/6.10.0/kubernetes-model-networking-6.10.0.pom (2.5 kB at 420 kB/s)
 #24 6.361 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-metrics/6.10.0/kubernetes-model-metrics-6.10.0.pom
 #24 6.366 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-metrics/6.10.0/kubernetes-model-metrics-6.10.0.pom (2.5 kB at 503 kB/s)
 #24 6.371 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-policy/6.10.0/kubernetes-model-policy-6.10.0.pom
 #24 6.376 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-policy/6.10.0/kubernetes-model-policy-6.10.0.pom (2.5 kB at 418 kB/s)
 #24 6.380 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-scheduling/6.10.0/kubernetes-model-scheduling-6.10.0.pom
 #24 6.385 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-scheduling/6.10.0/kubernetes-model-scheduling-6.10.0.pom (2.4 kB at 397 kB/s)
 #24 6.390 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-storageclass/6.10.0/kubernetes-model-storageclass-6.10.0.pom
 #24 6.398 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-storageclass/6.10.0/kubernetes-model-storageclass-6.10.0.pom (2.5 kB at 281 kB/s)
 #24 6.403 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-node/6.10.0/kubernetes-model-node-6.10.0.pom
 #24 6.408 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-node/6.10.0/kubernetes-model-node-6.10.0.pom (2.4 kB at 338 kB/s)
 #24 6.413 Downloading from central: https://repo.maven.apache.org/maven2/org/snakeyaml/snakeyaml-engine/2.7/snakeyaml-engine-2.7.pom
 #24 6.419 Progress (1): 1.7/23 kB
 Progress (1): 18/23 kB 
 Progress (1): 23 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/snakeyaml/snakeyaml-engine/2.7/snakeyaml-engine-2.7.pom (23 kB at 3.3 MB/s)
 #24 6.423 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.pom
 #24 6.427 Progress (1): 2.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.pom (2.6 kB at 526 kB/s)
 #24 6.430 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformats-text/2.15.3/jackson-dataformats-text-2.15.3.pom
 #24 6.434 Progress (1): 3.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformats-text/2.15.3/jackson-dataformats-text-2.15.3.pom (3.5 kB at 869 kB/s)
 #24 6.438 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-httpclient-okhttp/6.10.0/kubernetes-httpclient-okhttp-6.10.0.pom
 #24 6.444 Progress (1): 6.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-httpclient-okhttp/6.10.0/kubernetes-httpclient-okhttp-6.10.0.pom (6.9 kB at 986 kB/s)
 #24 6.449 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp/4.12.0/okhttp-4.12.0.pom
 #24 6.453 Progress (1): 1.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp/4.12.0/okhttp-4.12.0.pom (1.8 kB at 363 kB/s)
 #24 6.456 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio/3.6.0/okio-3.6.0.pom
 #24 6.460 Progress (1): 1.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio/3.6.0/okio-3.6.0.pom (1.7 kB at 421 kB/s)
 #24 6.462 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio-jvm/3.6.0/okio-jvm-3.6.0.pom
 #24 6.466 Progress (1): 1.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio-jvm/3.6.0/okio-jvm-3.6.0.pom (1.9 kB at 379 kB/s)
 #24 6.470 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.22/kotlin-stdlib-jdk8-1.9.22.pom
 #24 6.474 Progress (1): 1.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.22/kotlin-stdlib-jdk8-1.9.22.pom (1.6 kB at 316 kB/s)
 #24 6.477 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.9.22/kotlin-stdlib-1.9.22.pom
 #24 6.481 Progress (1): 2.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.9.22/kotlin-stdlib-1.9.22.pom (2.8 kB at 712 kB/s)
 #24 6.484 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.pom
 #24 6.489 Progress (1): 4.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.pom (4.9 kB at 822 kB/s)
 #24 6.493 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.22/kotlin-stdlib-jdk7-1.9.22.pom
 #24 6.497 Progress (1): 1.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.22/kotlin-stdlib-jdk7-1.9.22.pom (1.4 kB at 232 kB/s)
 #24 6.510 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-common/1.9.22/kotlin-stdlib-common-1.9.22.pom
 #24 6.514 Progress (1): 1.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-common/1.9.22/kotlin-stdlib-common-1.9.22.pom (1.8 kB at 302 kB/s)
 #24 6.518 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/logging-interceptor/4.12.0/logging-interceptor-4.12.0.pom
 #24 6.523 Progress (1): 1.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/logging-interceptor/4.12.0/logging-interceptor-4.12.0.pom (1.9 kB at 265 kB/s)
 #24 6.527 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/zjsonpatch/0.3.0/zjsonpatch-0.3.0.pom
 #24 6.532 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/zjsonpatch/0.3.0/zjsonpatch-0.3.0.pom (14 kB at 2.3 MB/s)
 #24 6.536 Downloading from central: https://repo.maven.apache.org/maven2/org/projectlombok/lombok/1.18.30/lombok-1.18.30.pom
 #24 6.540 Progress (1): 1.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/projectlombok/lombok/1.18.30/lombok-1.18.30.pom (1.5 kB at 371 kB/s)
 #24 6.543 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-websocket/3.2.2/spring-boot-starter-websocket-3.2.2.pom
 #24 6.547 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-websocket/3.2.2/spring-boot-starter-websocket-3.2.2.pom (2.5 kB at 420 kB/s)
 #24 6.551 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.3/spring-messaging-6.1.3.pom
 #24 6.556 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.3/spring-messaging-6.1.3.pom (2.2 kB at 443 kB/s)
 #24 6.559 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-websocket/6.1.3/spring-websocket-6.1.3.pom
 #24 6.563 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-websocket/6.1.3/spring-websocket-6.1.3.pom (2.4 kB at 481 kB/s)
 #24 6.566 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-devtools/3.2.2/spring-boot-devtools-3.2.2.pom
 #24 6.570 Progress (1): 2.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-devtools/3.2.2/spring-boot-devtools-3.2.2.pom (2.3 kB at 451 kB/s)
 #24 6.574 Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.pom
 #24 6.578 Progress (1): 16/27 kB
 Progress (1): 27 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.pom (27 kB at 5.4 MB/s)
 #24 6.582 Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.pom
 #24 6.586 Progress (1): 1.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.pom (1.4 kB at 270 kB/s)
 #24 6.589 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-validation/3.2.2/spring-boot-starter-validation-3.2.2.pom
 #24 6.593 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-validation/3.2.2/spring-boot-starter-validation-3.2.2.pom (2.5 kB at 418 kB/s)
 #24 6.598 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.pom
 #24 6.602 Progress (1): 15 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.pom (15 kB at 2.9 MB/s)
 #24 6.605 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator-parent/8.0.1.Final/hibernate-validator-parent-8.0.1.Final.pom
 #24 6.610 Progress (1): 16/81 kB
 Progress (1): 33/81 kB
 Progress (1): 49/81 kB
 Progress (1): 66/81 kB
 Progress (1): 81 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator-parent/8.0.1.Final/hibernate-validator-parent-8.0.1.Final.pom (81 kB at 16 MB/s)
 #24 6.614 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/arquillian/arquillian-bom/1.7.0.Alpha10/arquillian-bom-1.7.0.Alpha10.pom
 #24 6.618 Progress (1): 10 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/arquillian/arquillian-bom/1.7.0.Alpha10/arquillian-bom-1.7.0.Alpha10.pom (10 kB at 2.1 MB/s)
 #24 6.620 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/shrinkwrap-bom/1.2.6/shrinkwrap-bom-1.2.6.pom
 #24 6.623 Progress (1): 4.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/shrinkwrap-bom/1.2.6/shrinkwrap-bom-1.2.6.pom (4.0 kB at 996 kB/s)
 #24 6.626 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-bom/3.1.4/shrinkwrap-resolver-bom-3.1.4.pom
 #24 6.629 Progress (1): 7.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-bom/3.1.4/shrinkwrap-resolver-bom-3.1.4.pom (7.0 kB at 1.4 MB/s)
 #24 6.632 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/3.6.3/maven-3.6.3.pom
 #24 6.635 Progress (1): 16/26 kB
 Progress (1): 26 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/3.6.3/maven-3.6.3.pom (26 kB at 5.3 MB/s)
 #24 6.638 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/33/maven-parent-33.pom
 #24 6.642 Progress (1): 16/44 kB
 Progress (1): 33/44 kB
 Progress (1): 44 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/33/maven-parent-33.pom (44 kB at 11 MB/s)
 #24 6.646 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/descriptors/shrinkwrap-descriptors-bom/2.0.0/shrinkwrap-descriptors-bom-2.0.0.pom
 #24 6.650 Progress (1): 5.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/descriptors/shrinkwrap-descriptors-bom/2.0.0/shrinkwrap-descriptors-bom-2.0.0.pom (5.2 kB at 1.3 MB/s)
 #24 6.653 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.pom
 #24 6.661 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.pom (11 kB at 1.2 MB/s)
 #24 6.665 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.pom
 #24 6.668 Progress (1): 5.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.pom (5.8 kB at 1.2 MB/s)
 #24 6.673 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-annotations/3.5.6-Final/hibernate-annotations-3.5.6-Final.pom
 #24 6.678 Progress (1): 7.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-annotations/3.5.6-Final/hibernate-annotations-3.5.6-Final.pom (7.4 kB at 1.2 MB/s)
 #24 6.681 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-parent/3.5.6-Final/hibernate-parent-3.5.6-Final.pom
 #24 6.687 Progress (1): 16/43 kB
 Progress (1): 33/43 kB
 Progress (1): 43 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-parent/3.5.6-Final/hibernate-parent-3.5.6-Final.pom (43 kB at 5.4 MB/s)
 #24 6.694 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-core/3.5.6-Final/hibernate-core-3.5.6-Final.pom
 #24 6.699 Progress (1): 7.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-core/3.5.6-Final/hibernate-core-3.5.6-Final.pom (7.3 kB at 1.2 MB/s)
 #24 6.704 Downloading from central: https://repo.maven.apache.org/maven2/antlr/antlr/2.7.6/antlr-2.7.6.pom
 #24 6.708 Progress (1): 230 B
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/antlr/antlr/2.7.6/antlr-2.7.6.pom (230 B at 46 kB/s)
 #24 6.711 Downloading from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.pom
 #24 6.717 Progress (1): 6.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.pom (6.1 kB at 869 kB/s)
 #24 6.720 Downloading from central: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.pom
 #24 6.724 Progress (1): 6.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.pom (6.8 kB at 1.7 MB/s)
 #24 6.727 Downloading from central: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.pom
 #24 6.730 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.pom (2.2 kB at 450 kB/s)
 #24 6.734 Downloading from central: https://repo.maven.apache.org/maven2/javax/transaction/jta/1.1/jta-1.1.pom
 #24 6.738 Progress (1): 598 B
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/javax/transaction/jta/1.1/jta-1.1.pom (598 B at 100 kB/s)
 #24 6.741 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-commons-annotations/3.2.0.Final/hibernate-commons-annotations-3.2.0.Final.pom
 #24 6.747 Progress (1): 6.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-commons-annotations/3.2.0.Final/hibernate-commons-annotations-3.2.0.Final.pom (6.6 kB at 1.1 MB/s)
 #24 6.751 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/javax/persistence/hibernate-jpa-2.0-api/1.0.0.Final/hibernate-jpa-2.0-api-1.0.0.Final.pom
 #24 6.757 Progress (1): 6.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/javax/persistence/hibernate-jpa-2.0-api/1.0.0.Final/hibernate-jpa-2.0-api-1.0.0.Final.pom (6.0 kB at 859 kB/s)
 #24 6.760 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.10/spring-messaging-6.1.10.pom
 #24 6.763 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.10/spring-messaging-6.1.10.pom (2.2 kB at 445 kB/s)
 #24 6.767 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-api/0.12.6/jjwt-api-0.12.6.pom
 #24 6.773 Progress (1): 1.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-api/0.12.6/jjwt-api-0.12.6.pom (1.8 kB at 254 kB/s)
 #24 6.776 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-root/0.12.6/jjwt-root-0.12.6.pom
 #24 6.782 Progress (1): 16/37 kB
 Progress (1): 32/37 kB
 Progress (1): 37 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-root/0.12.6/jjwt-root-0.12.6.pom (37 kB at 5.3 MB/s)
 #24 6.788 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-impl/0.12.6/jjwt-impl-0.12.6.pom
 #24 6.795 Progress (1): 2.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-impl/0.12.6/jjwt-impl-0.12.6.pom (2.5 kB at 362 kB/s)
 #24 6.801 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-jackson/0.12.6/jjwt-jackson-0.12.6.pom
 #24 6.807 Progress (1): 2.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-jackson/0.12.6/jjwt-jackson-0.12.6.pom (2.9 kB at 412 kB/s)
 #24 6.811 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-web/6.3.1/spring-security-web-6.3.1.pom
 #24 6.816 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-web/6.3.1/spring-security-web-6.3.1.pom (3.2 kB at 641 kB/s)
 #24 6.819 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.2.1/spring-security-core-6.2.1.pom
 #24 6.823 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.2.1/spring-security-core-6.2.1.pom (3.2 kB at 536 kB/s)
 #24 6.827 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-config/6.3.1/spring-security-config-6.3.1.pom
 #24 6.831 Progress (1): 2.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-config/6.3.1/spring-security-config-6.3.1.pom (2.8 kB at 567 kB/s)
 #24 6.880 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter/3.2.2/spring-boot-starter-3.2.2.jar
 #24 6.885 Progress (1): 4.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter/3.2.2/spring-boot-starter-3.2.2.jar (4.8 kB at 954 kB/s)
 #24 6.887 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.jar
 #24 6.888 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-autoconfigure/3.2.2/spring-boot-autoconfigure-3.2.2.jar
 #24 6.889 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-logging/3.2.2/spring-boot-starter-logging-3.2.2.jar
 #24 6.890 Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.jar
 #24 6.893 Progress (1): 0/1.6 MB
 Progress (1): 0/1.6 MB
 Progress (1): 0/1.6 MB
 Progress (1): 0.1/1.6 MB
 Progress (1): 0.1/1.6 MB
 Progress (1): 0.1/1.6 MB
 Progress (1): 0.1/1.6 MB
 Progress (1): 0.1/1.6 MB
 Progress (1): 0.1/1.6 MB
                         
 Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.jar
 #24 6.909 Progress (1): 0.2/1.6 MB
 Progress (1): 0.2/1.6 MB
 Progress (1): 0.2/1.6 MB
 Progress (1): 0.2/1.6 MB
 Progress (2): 0.2/1.6 MB | 1.4/4.8 kB
 Progress (2): 0.2/1.6 MB | 2.8/4.8 kB
 Progress (2): 0.2/1.6 MB | 2.8/4.8 kB
 Progress (2): 0.2/1.6 MB | 4.1/4.8 kB
 Progress (2): 0.2/1.6 MB | 4.8 kB    
 Progress (2): 0.2/1.6 MB | 4.8 kB
 Progress (2): 0.3/1.6 MB | 4.8 kB
 Progress (2): 0.3/1.6 MB | 4.8 kB
 Progress (2): 0.3/1.6 MB | 4.8 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-logging/3.2.2/spring-boot-starter-logging-3.2.2.jar (4.8 kB at 190 kB/s)
 #24 6.913 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar
 #24 6.913 Progress (1): 0.3/1.6 MB
 Progress (1): 0.3/1.6 MB
 Progress (1): 0.3/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (2): 0.4/1.6 MB | 1.4/284 kB
 Progress (2): 0.4/1.6 MB | 2.8/284 kB
 Progress (2): 0.4/1.6 MB | 4.1/284 kB
 Progress (2): 0.4/1.6 MB | 5.5/284 kB
 Progress (2): 0.4/1.6 MB | 6.9/284 kB
 Progress (2): 0.4/1.6 MB | 8.3/284 kB
 Progress (2): 0.4/1.6 MB | 9.7/284 kB
 Progress (2): 0.4/1.6 MB | 11/284 kB 
 Progress (2): 0.4/1.6 MB | 12/284 kB
 Progress (2): 0.4/1.6 MB | 14/284 kB
 Progress (2): 0.4/1.6 MB | 15/284 kB
 Progress (2): 0.4/1.6 MB | 17/284 kB
 Progress (2): 0.4/1.6 MB | 18/284 kB
 Progress (2): 0.4/1.6 MB | 19/284 kB
 Progress (2): 0.4/1.6 MB | 21/284 kB
 Progress (2): 0.5/1.6 MB | 21/284 kB
 Progress (2): 0.5/1.6 MB | 21/284 kB
 Progress (3): 0.5/1.6 MB | 21/284 kB | 1.4/23 kB
 Progress (3): 0.5/1.6 MB | 21/284 kB | 2.8/23 kB
 Progress (3): 0.5/1.6 MB | 22/284 kB | 2.8/23 kB
 Progress (3): 0.5/1.6 MB | 22/284 kB | 4.1/23 kB
 Progress (3): 0.5/1.6 MB | 22/284 kB | 5.5/23 kB
 Progress (3): 0.5/1.6 MB | 23/284 kB | 5.5/23 kB
 Progress (3): 0.5/1.6 MB | 23/284 kB | 6.9/23 kB
 Progress (3): 0.5/1.6 MB | 25/284 kB | 6.9/23 kB
 Progress (3): 0.5/1.6 MB | 25/284 kB | 8.3/23 kB
 Progress (3): 0.5/1.6 MB | 25/284 kB | 9.7/23 kB
 Progress (3): 0.5/1.6 MB | 25/284 kB | 11/23 kB 
 Progress (3): 0.5/1.6 MB | 25/284 kB | 12/23 kB
 Progress (3): 0.5/1.6 MB | 25/284 kB | 14/23 kB
 Progress (3): 0.5/1.6 MB | 25/284 kB | 15/23 kB
 Progress (3): 0.5/1.6 MB | 25/284 kB | 16/23 kB
 Progress (3): 0.5/1.6 MB | 26/284 kB | 16/23 kB
 Progress (3): 0.5/1.6 MB | 28/284 kB | 16/23 kB
 Progress (3): 0.5/1.6 MB | 28/284 kB | 18/23 kB
 Progress (3): 0.5/1.6 MB | 29/284 kB | 18/23 kB
 Progress (3): 0.5/1.6 MB | 29/284 kB | 19/23 kB
 Progress (3): 0.5/1.6 MB | 29/284 kB | 21/23 kB
 Progress (3): 0.5/1.6 MB | 29/284 kB | 22/23 kB
 Progress (3): 0.5/1.6 MB | 29/284 kB | 23 kB   
 Progress (3): 0.5/1.6 MB | 30/284 kB | 23 kB
 Progress (3): 0.5/1.6 MB | 32/284 kB | 23 kB
 Progress (3): 0.5/1.6 MB | 33/284 kB | 23 kB
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar (23 kB at 741 kB/s)
 #24 6.922 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar
 #24 6.922 Progress (2): 0.5/1.6 MB | 34/284 kB
 Progress (2): 0.5/1.6 MB | 36/284 kB
 Progress (2): 0.5/1.6 MB | 37/284 kB
 Progress (2): 0.5/1.6 MB | 39/284 kB
 Progress (2): 0.5/1.6 MB | 40/284 kB
 Progress (2): 0.5/1.6 MB | 41/284 kB
 Progress (2): 0.5/1.6 MB | 43/284 kB
 Progress (2): 0.5/1.6 MB | 44/284 kB
 Progress (2): 0.5/1.6 MB | 46/284 kB
 Progress (2): 0.5/1.6 MB | 47/284 kB
 Progress (3): 0.5/1.6 MB | 47/284 kB | 16/317 kB
 Progress (3): 0.5/1.6 MB | 47/284 kB | 16/317 kB
 Progress (3): 0.5/1.6 MB | 48/284 kB | 16/317 kB
 Progress (3): 0.5/1.6 MB | 48/284 kB | 33/317 kB
 Progress (3): 0.5/1.6 MB | 50/284 kB | 33/317 kB
 Progress (3): 0.5/1.6 MB | 51/284 kB | 33/317 kB
 Progress (3): 0.5/1.6 MB | 51/284 kB | 49/317 kB
 Progress (3): 0.5/1.6 MB | 51/284 kB | 49/317 kB
 Progress (3): 0.5/1.6 MB | 52/284 kB | 49/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 49/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 64/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 80/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 97/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 113/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 130/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 146/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 162/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 179/317 kB
 Progress (3): 0.5/1.6 MB | 54/284 kB | 195/317 kB
 Progress (3): 0.5/1.6 MB | 55/284 kB | 195/317 kB
 Progress (3): 0.5/1.6 MB | 57/284 kB | 195/317 kB
 Progress (3): 0.5/1.6 MB | 57/284 kB | 211/317 kB
 Progress (3): 0.5/1.6 MB | 57/284 kB | 211/317 kB
 Progress (3): 0.5/1.6 MB | 57/284 kB | 228/317 kB
 Progress (3): 0.5/1.6 MB | 58/284 kB | 228/317 kB
 Progress (3): 0.5/1.6 MB | 58/284 kB | 244/317 kB
 Progress (3): 0.5/1.6 MB | 58/284 kB | 261/317 kB
 Progress (3): 0.5/1.6 MB | 58/284 kB | 277/317 kB
 Progress (3): 0.5/1.6 MB | 58/284 kB | 293/317 kB
 Progress (3): 0.5/1.6 MB | 58/284 kB | 310/317 kB
 Progress (3): 0.5/1.6 MB | 58/284 kB | 317 kB    
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar (317 kB at 8.4 MB/s)
 #24 6.930 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/jul-to-slf4j/2.0.11/jul-to-slf4j-2.0.11.jar
 #24 6.930 Progress (2): 0.5/1.6 MB | 59/284 kB
 Progress (2): 0.5/1.6 MB | 61/284 kB
 Progress (2): 0.5/1.6 MB | 61/284 kB
 Progress (3): 0.5/1.6 MB | 61/284 kB | 6.3 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/jul-to-slf4j/2.0.11/jul-to-slf4j-2.0.11.jar (6.3 kB at 155 kB/s)
 #24 6.932 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar
 #24 6.932 Progress (2): 0.5/1.6 MB | 62/284 kB
 Progress (2): 0.5/1.6 MB | 63/284 kB
 Progress (2): 0.5/1.6 MB | 65/284 kB
 Progress (2): 0.5/1.6 MB | 65/284 kB
 Progress (2): 0.6/1.6 MB | 65/284 kB
 Progress (2): 0.6/1.6 MB | 65/284 kB
 Progress (2): 0.6/1.6 MB | 65/284 kB
 Progress (2): 0.6/1.6 MB | 65/284 kB
 Progress (2): 0.6/1.6 MB | 81/284 kB
 Progress (2): 0.6/1.6 MB | 81/284 kB
 Progress (3): 0.6/1.6 MB | 81/284 kB | 16/26 kB
 Progress (3): 0.6/1.6 MB | 98/284 kB | 16/26 kB
 Progress (3): 0.6/1.6 MB | 98/284 kB | 26 kB   
 Progress (3): 0.6/1.6 MB | 114/284 kB | 26 kB
 Progress (3): 0.6/1.6 MB | 130/284 kB | 26 kB
 Progress (3): 0.6/1.6 MB | 147/284 kB | 26 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar (26 kB at 581 kB/s)
 #24 6.937 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.1.3/spring-core-6.1.3.jar
 #24 6.937 Progress (2): 0.6/1.6 MB | 147/284 kB
 Progress (2): 0.7/1.6 MB | 147/284 kB
 Progress (2): 0.7/1.6 MB | 147/284 kB
 Progress (2): 0.7/1.6 MB | 147/284 kB
 Progress (2): 0.7/1.6 MB | 147/284 kB
 Progress (2): 0.7/1.6 MB | 147/284 kB
 Progress (2): 0.7/1.6 MB | 147/284 kB
 Progress (2): 0.8/1.6 MB | 147/284 kB
 Progress (2): 0.8/1.6 MB | 147/284 kB
 Progress (2): 0.8/1.6 MB | 163/284 kB
 Progress (2): 0.8/1.6 MB | 163/284 kB
 Progress (2): 0.8/1.6 MB | 180/284 kB
 Progress (2): 0.8/1.6 MB | 180/284 kB
 Progress (2): 0.8/1.6 MB | 196/284 kB
 Progress (2): 0.8/1.6 MB | 196/284 kB
 Progress (2): 0.8/1.6 MB | 212/284 kB
 Progress (2): 0.8/1.6 MB | 212/284 kB
 Progress (2): 0.8/1.6 MB | 229/284 kB
 Progress (2): 0.9/1.6 MB | 229/284 kB
 Progress (2): 0.9/1.6 MB | 245/284 kB
 Progress (2): 0.9/1.6 MB | 245/284 kB
 Progress (2): 0.9/1.6 MB | 262/284 kB
 Progress (2): 0.9/1.6 MB | 262/284 kB
 Progress (2): 0.9/1.6 MB | 278/284 kB
 Progress (2): 0.9/1.6 MB | 284 kB    
 Progress (2): 0.9/1.6 MB | 284 kB
 Progress (2): 0.9/1.6 MB | 284 kB
 Progress (2): 0.9/1.6 MB | 284 kB
 Progress (2): 0.9/1.6 MB | 284 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.jar (284 kB at 4.6 MB/s)
 #24 6.951 Progress (1): 1.0/1.6 MB
                         
 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.1.3/spring-jcl-6.1.3.jar
 #24 6.953 Progress (1): 1.0/1.6 MB
 Progress (1): 1.0/1.6 MB
 Progress (1): 1.0/1.6 MB
 Progress (1): 1.0/1.6 MB
 Progress (1): 1.0/1.6 MB
 Progress (2): 1.0/1.6 MB | 0/1.9 MB
 Progress (2): 1.1/1.6 MB | 0/1.9 MB
 Progress (2): 1.1/1.6 MB | 0/1.9 MB
 Progress (2): 1.1/1.6 MB | 0/1.9 MB
 Progress (2): 1.1/1.6 MB | 0/1.9 MB
 Progress (2): 1.1/1.6 MB | 0/1.9 MB
 Progress (2): 1.1/1.6 MB | 0/1.9 MB
 Progress (2): 1.1/1.6 MB | 0/1.9 MB
 Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
 Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
 Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
 Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
 Progress (2): 1.1/1.6 MB | 0.1/1.9 MB
 Progress (2): 1.2/1.6 MB | 0.1/1.9 MB
 Progress (2): 1.2/1.6 MB | 0.1/1.9 MB
 Progress (2): 1.2/1.6 MB | 0.1/1.9 MB
 Progress (2): 1.2/1.6 MB | 0.1/1.9 MB
 Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
 Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
 Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
 Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
 Progress (2): 1.2/1.6 MB | 0.2/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (3): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB
 Progress (4): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB | 16/25 kB
 Progress (4): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB | 25 kB   
 Progress (4): 1.2/1.6 MB | 0.2/1.9 MB | 0/1.9 MB | 25 kB
 Progress (4): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB
 Progress (4): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB
 Progress (4): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB
 Progress (4): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB
 Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 1.4/597 kB
 Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 1.4/597 kB
 Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 1.4/597 kB
 Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 1.4/597 kB
 Progress (5): 1.2/1.6 MB | 0.3/1.9 MB | 0/1.9 MB | 25 kB | 2.8/597 kB
 Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 2.8/597 kB
 Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 2.8/597 kB
 Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 4.1/597 kB
 Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 4.1/597 kB
 Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 5.5/597 kB
 Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 5.5/597 kB
 Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 6.9/597 kB
 Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 8.3/597 kB
 Progress (5): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 25 kB | 8.3/597 kB
                                                                      
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.1.3/spring-jcl-6.1.3.jar (25 kB at 292 kB/s)
 #24 6.976 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-test/3.3.1/spring-boot-starter-test-3.3.1.jar
 #24 6.976 Progress (4): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 9.7/597 kB
 Progress (4): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 9.7/597 kB
 Progress (4): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 11/597 kB 
 Progress (4): 1.2/1.6 MB | 0.4/1.9 MB | 0/1.9 MB | 12/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 12/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 14/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 15/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 17/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 17/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 17/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 18/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 18/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 19/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 19/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 21/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 21/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 22/597 kB
 Progress (4): 1.2/1.6 MB | 0.5/1.9 MB | 0/1.9 MB | 23/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 23/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 25/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 26/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 26/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 28/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 29/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 29/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 30/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 32/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 33/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 33/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 34/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 36/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 36/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 37/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.6/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.2/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.3/1.6 MB | 0.7/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 39/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 40/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 40/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 41/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 41/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 43/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 43/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 44/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 46/597 kB
 Progress (4): 1.3/1.6 MB | 0.8/1.9 MB | 0/1.9 MB | 47/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 47/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 48/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 50/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 51/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 51/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 52/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
 Progress (4): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB
 Progress (5): 1.3/1.6 MB | 0.9/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
 Progress (5): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
 Progress (5): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
 Progress (5): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
 Progress (5): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 54/597 kB | 4.8 kB
                                                                      
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-test/3.3.1/spring-boot-starter-test-3.3.1.jar (4.8 kB at 42 kB/s)
 #24 7.005 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 55/597 kB
                                                             
 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test/3.2.2/spring-boot-test-3.2.2.jar
 #24 7.005 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 57/597 kB
 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 58/597 kB
 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 59/597 kB
 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 61/597 kB
 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 62/597 kB
 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 63/597 kB
 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.3/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.4/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 64/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB | 15/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 80/597 kB | 31/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 31/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 48/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 64/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 78/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 94/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 111/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 96/597 kB | 127/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 127/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 144/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 160/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 176/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 193/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 209/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 225/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 113/597 kB | 242/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 129/597 kB | 242/245 kB
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 129/597 kB | 245 kB    
 Progress (5): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 146/597 kB | 245 kB
                                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test/3.2.2/spring-boot-test-3.2.2.jar (245 kB at 1.9 MB/s)
 #24 7.023 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test-autoconfigure/3.2.2/spring-boot-test-autoconfigure-3.2.2.jar
 #24 7.023 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0/1.9 MB | 162/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 162/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 162/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 162/597 kB
 Progress (4): 1.5/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 178/597 kB
 Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 178/597 kB
 Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
 Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
 Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
 Progress (4): 1.6/1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
 Progress (4): 1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB    
 Progress (4): 1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 195/597 kB
 Progress (4): 1.6 MB | 1.0/1.9 MB | 0.1/1.9 MB | 211/597 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.jar (1.6 MB at 12 MB/s)
 #24 7.025 Downloading from central: https://repo.maven.apache.org/maven2/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar
 #24 7.025 Progress (3): 1.0/1.9 MB | 0.1/1.9 MB | 211/597 kB
 Progress (3): 1.0/1.9 MB | 0.1/1.9 MB | 211/597 kB
 Progress (3): 1.1/1.9 MB | 0.1/1.9 MB | 211/597 kB
 Progress (3): 1.1/1.9 MB | 0.1/1.9 MB | 211/597 kB
 Progress (3): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB
 Progress (3): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB
 Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 16/219 kB
 Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 16/219 kB
 Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 33/219 kB
 Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 33/219 kB
 Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 33/219 kB
 Progress (4): 1.1/1.9 MB | 0.1/1.9 MB | 228/597 kB | 49/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 228/597 kB | 49/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 49/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 49/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 49/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 49/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 62/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 62/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 244/597 kB | 62/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 260/597 kB | 62/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 260/597 kB | 62/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 277/597 kB | 62/219 kB
 Progress (4): 1.2/1.9 MB | 0.1/1.9 MB | 277/597 kB | 62/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 277/597 kB | 62/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 62/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 78/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 78/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 95/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 95/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 95/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 111/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 111/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 127/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 127/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 144/219 kB
 Progress (4): 1.3/1.9 MB | 0.1/1.9 MB | 293/597 kB | 144/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 293/597 kB | 144/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 293/597 kB | 160/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 160/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 160/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 177/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 177/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 177/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 193/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 309/597 kB | 193/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 326/597 kB | 193/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 326/597 kB | 209/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 326/597 kB | 209/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 342/597 kB | 209/219 kB
 Progress (4): 1.4/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB    
 Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
 Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
 Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
 Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
 Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
 Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
 Progress (4): 1.5/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 342/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 359/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 359/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 359/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.1/1.9 MB | 375/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 375/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 375/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 375/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 391/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 391/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 408/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 408/597 kB | 219 kB
 Progress (4): 1.6/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
 Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
 Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
 Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
 Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
 Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 424/597 kB | 219 kB
 Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 440/597 kB | 219 kB
 Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 440/597 kB | 219 kB
 Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 440/597 kB | 219 kB
 Progress (4): 1.7/1.9 MB | 0.2/1.9 MB | 440/597 kB | 219 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-test-autoconfigure/3.2.2/spring-boot-test-autoconfigure-3.2.2.jar (219 kB at 1.5 MB/s)
 #24 7.045 Progress (3): 1.7/1.9 MB | 0.2/1.9 MB | 457/597 kB
 Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 457/597 kB
                                                   
 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar
 #24 7.045 Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
 Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
 Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
 Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
 Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 473/597 kB
 Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 490/597 kB
 Progress (3): 1.8/1.9 MB | 0.2/1.9 MB | 490/597 kB
 Progress (3): 1.9/1.9 MB | 0.2/1.9 MB | 490/597 kB
 Progress (3): 1.9/1.9 MB | 0.2/1.9 MB | 506/597 kB
 Progress (3): 1.9/1.9 MB | 0.2/1.9 MB | 506/597 kB
 Progress (3): 1.9/1.9 MB | 0.2/1.9 MB | 522/597 kB
 Progress (3): 1.9 MB | 0.2/1.9 MB | 522/597 kB    
 Progress (3): 1.9 MB | 0.2/1.9 MB | 539/597 kB
 Progress (3): 1.9 MB | 0.2/1.9 MB | 555/597 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.1.3/spring-core-6.1.3.jar (1.9 MB at 12 MB/s)
 #24 7.045 Progress (2): 0.2/1.9 MB | 572/597 kB
 Progress (2): 0.2/1.9 MB | 588/597 kB
 Progress (2): 0.2/1.9 MB | 597 kB    
 Progress (2): 0.2/1.9 MB | 597 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.jar (597 kB at 3.9 MB/s)
 #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar
 #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar
 #24 7.045 Progress (1): 0.2/1.9 MB
 Progress (1): 0.2/1.9 MB
 Progress (1): 0.3/1.9 MB
 Progress (2): 0.3/1.9 MB | 16/278 kB
 Progress (2): 0.3/1.9 MB | 16/278 kB
 Progress (2): 0.3/1.9 MB | 33/278 kB
 Progress (2): 0.3/1.9 MB | 33/278 kB
 Progress (2): 0.3/1.9 MB | 33/278 kB
 Progress (2): 0.3/1.9 MB | 49/278 kB
 Progress (2): 0.3/1.9 MB | 49/278 kB
 Progress (2): 0.3/1.9 MB | 64/278 kB
 Progress (2): 0.3/1.9 MB | 64/278 kB
 Progress (2): 0.3/1.9 MB | 81/278 kB
 Progress (2): 0.4/1.9 MB | 81/278 kB
 Progress (2): 0.4/1.9 MB | 97/278 kB
 Progress (2): 0.4/1.9 MB | 113/278 kB
 Progress (2): 0.4/1.9 MB | 113/278 kB
 Progress (2): 0.4/1.9 MB | 130/278 kB
 Progress (2): 0.4/1.9 MB | 130/278 kB
 Progress (2): 0.4/1.9 MB | 146/278 kB
 Progress (2): 0.4/1.9 MB | 146/278 kB
 Progress (2): 0.4/1.9 MB | 163/278 kB
 Progress (2): 0.4/1.9 MB | 163/278 kB
 Progress (2): 0.4/1.9 MB | 179/278 kB
 Progress (2): 0.4/1.9 MB | 179/278 kB
 Progress (2): 0.4/1.9 MB | 195/278 kB
 Progress (2): 0.5/1.9 MB | 195/278 kB
 Progress (2): 0.5/1.9 MB | 195/278 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 16/66 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 16/66 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 32/66 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 49/66 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 65/66 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 66 kB   
 Progress (3): 0.5/1.9 MB | 195/278 kB | 66 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar (66 kB at 435 kB/s)
 #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar
 #24 7.045 Progress (2): 0.5/1.9 MB | 195/278 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 16/120 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 16/120 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 33/120 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 49/120 kB
 Progress (3): 0.5/1.9 MB | 195/278 kB | 66/120 kB
 Progress (3): 0.6/1.9 MB | 195/278 kB | 66/120 kB
 Progress (3): 0.6/1.9 MB | 195/278 kB | 82/120 kB
 Progress (3): 0.6/1.9 MB | 195/278 kB | 98/120 kB
 Progress (3): 0.6/1.9 MB | 195/278 kB | 98/120 kB
 Progress (3): 0.6/1.9 MB | 195/278 kB | 115/120 kB
 Progress (3): 0.6/1.9 MB | 195/278 kB | 120 kB    
 Progress (3): 0.6/1.9 MB | 195/278 kB | 120 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar (120 kB at 791 kB/s)
 #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.3/asm-9.3.jar
 #24 7.045 Progress (2): 0.6/1.9 MB | 195/278 kB
 Progress (2): 0.6/1.9 MB | 195/278 kB
 Progress (2): 0.6/1.9 MB | 195/278 kB
 Progress (3): 0.6/1.9 MB | 195/278 kB | 16/30 kB
 Progress (3): 0.6/1.9 MB | 195/278 kB | 30 kB   
 Progress (3): 0.7/1.9 MB | 195/278 kB | 30 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar (30 kB at 197 kB/s)
 #24 7.045 Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar
 #24 7.045 Progress (2): 0.7/1.9 MB | 195/278 kB
 Progress (2): 0.7/1.9 MB | 195/278 kB
 Progress (2): 0.7/1.9 MB | 195/278 kB
 Progress (2): 0.7/1.9 MB | 212/278 kB
 Progress (2): 0.7/1.9 MB | 212/278 kB
 Progress (2): 0.7/1.9 MB | 228/278 kB
 Progress (2): 0.7/1.9 MB | 228/278 kB
 Progress (2): 0.7/1.9 MB | 245/278 kB
 Progress (2): 0.7/1.9 MB | 261/278 kB
 Progress (2): 0.7/1.9 MB | 261/278 kB
 Progress (2): 0.7/1.9 MB | 277/278 kB
 Progress (2): 0.8/1.9 MB | 277/278 kB
 Progress (3): 0.8/1.9 MB | 277/278 kB | 16/122 kB
 Progress (3): 0.8/1.9 MB | 278 kB | 16/122 kB    
 Progress (3): 0.8/1.9 MB | 278 kB | 16/122 kB
 Progress (3): 0.8/1.9 MB | 278 kB | 33/122 kB
 Progress (3): 0.8/1.9 MB | 278 kB | 49/122 kB
 Progress (3): 0.8/1.9 MB | 278 kB | 49/122 kB
 Progress (3): 0.8/1.9 MB | 278 kB | 66/122 kB
 Progress (3): 0.8/1.9 MB | 278 kB | 66/122 kB
 Progress (3): 0.8/1.9 MB | 278 kB | 82/122 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar (278 kB at 1.8 MB/s)
 #24 7.047 Downloading from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar
 #24 7.047 Progress (2): 0.8/1.9 MB | 82/122 kB
 Progress (2): 0.8/1.9 MB | 98/122 kB
 Progress (2): 0.8/1.9 MB | 98/122 kB
 Progress (2): 0.8/1.9 MB | 115/122 kB
 Progress (2): 0.8/1.9 MB | 122 kB    
 Progress (2): 0.9/1.9 MB | 122 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.3/asm-9.3.jar (122 kB at 788 kB/s)
 #24 7.047 Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar
 #24 7.047 Progress (2): 0.9/1.9 MB | 0/1.3 MB
 Progress (3): 0.9/1.9 MB | 0/1.3 MB | 16/130 kB
 Progress (3): 0.9/1.9 MB | 0/1.3 MB | 16/130 kB
 Progress (3): 0.9/1.9 MB | 0/1.3 MB | 16/130 kB
 Progress (3): 0.9/1.9 MB | 0/1.3 MB | 33/130 kB
 Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
 Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
 Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
 Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
 Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
 Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 33/130 kB
 Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 49/130 kB
 Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 49/130 kB
 Progress (3): 0.9/1.9 MB | 0.1/1.3 MB | 49/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 49/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 66/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 66/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 66/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 66/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.2/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
 Progress (3): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB
 Progress (4): 0.9/1.9 MB | 0.3/1.3 MB | 82/130 kB | 16/123 kB
 Progress (4): 0.9/1.9 MB | 0.3/1.3 MB | 98/130 kB | 16/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 16/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 33/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 33/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 49/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 49/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 66/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 66/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 82/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 82/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 98/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 115/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 98/130 kB | 115/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 115/130 kB | 115/123 kB
 Progress (4): 0.9/1.9 MB | 0.4/1.3 MB | 115/130 kB | 123 kB    
 Progress (4): 0.9/1.9 MB | 0.5/1.3 MB | 115/130 kB | 123 kB
 Progress (4): 0.9/1.9 MB | 0.5/1.3 MB | 115/130 kB | 123 kB
 Progress (4): 0.9/1.9 MB | 0.5/1.3 MB | 115/130 kB | 123 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar (123 kB at 766 kB/s)
 #24 7.054 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar
 #24 7.054 Progress (3): 0.9/1.9 MB | 0.5/1.3 MB | 130 kB
 Progress (3): 0.9/1.9 MB | 0.5/1.3 MB | 130 kB
 Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
 Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
 Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
 Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
 Progress (3): 1.0/1.9 MB | 0.5/1.3 MB | 130 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar (130 kB at 798 kB/s)
 #24 7.055 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar
 #24 7.055 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
 Progress (2): 1.0/1.9 MB | 0.6/1.3 MB
 Progress (2): 1.0/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.7/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.8/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.8/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.8/1.3 MB
 Progress (2): 1.1/1.9 MB | 0.8/1.3 MB
 Progress (3): 1.1/1.9 MB | 0.8/1.3 MB | 6.4 kB
 Progress (3): 1.1/1.9 MB | 0.8/1.3 MB | 6.4 kB
 Progress (3): 1.1/1.9 MB | 0.8/1.3 MB | 6.4 kB
 Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
 Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
 Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
 Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
 Progress (3): 1.1/1.9 MB | 0.9/1.3 MB | 6.4 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar (6.4 kB at 38 kB/s)
 #24 7.060 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar
 #24 7.060 Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.2/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.3/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.4/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.5/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.6/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.6/1.9 MB | 0.9/1.3 MB
 Progress (2): 1.6/1.9 MB | 0.9/1.3 MB
 Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 16/586 kB
 Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 16/586 kB
 Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 33/586 kB
 Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 33/586 kB
 Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 49/586 kB
 Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 49/586 kB
 Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 64/586 kB
 Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 64/586 kB
 Progress (3): 1.6/1.9 MB | 0.9/1.3 MB | 81/586 kB
 Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 81/586 kB
 Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 97/586 kB
 Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 97/586 kB
 Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 113/586 kB
 Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 113/586 kB
 Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 130/586 kB
 Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 130/586 kB
 Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 130/586 kB
 Progress (3): 1.7/1.9 MB | 0.9/1.3 MB | 130/586 kB
 Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
 Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
 Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
 Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
 Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 130/586 kB
 Progress (3): 1.8/1.9 MB | 0.9/1.3 MB | 146/586 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 146/586 kB | 16/96 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 163/586 kB | 16/96 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 163/586 kB | 33/96 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 179/586 kB | 33/96 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 179/586 kB | 49/96 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 49/96 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 66/96 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 82/96 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 96 kB   
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 96 kB | 16/700 kB
                                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar (96 kB at 532 kB/s)
 #24 7.073 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-agent/1.14.11/byte-buddy-agent-1.14.11.jar
 #24 7.073 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 33/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 49/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 66/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 82/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 98/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 115/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 131/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 147/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 164/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 180/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 197/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 213/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 229/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 246/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 256/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 272/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 289/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 305/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 321/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 338/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 354/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 370/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 387/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 403/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 420/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 436/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 452/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 469/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 485/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 502/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 518/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 534/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 551/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 567/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 583/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 600/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 616/700 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 195/586 kB | 616/700 kB | 16/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 212/586 kB | 616/700 kB | 16/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 212/586 kB | 616/700 kB | 32/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 228/586 kB | 616/700 kB | 32/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 228/586 kB | 616/700 kB | 49/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 228/586 kB | 616/700 kB | 65/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 244/586 kB | 616/700 kB | 65/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 244/586 kB | 616/700 kB | 81/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 261/586 kB | 616/700 kB | 81/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 261/586 kB | 616/700 kB | 98/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 277/586 kB | 616/700 kB | 98/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 277/586 kB | 616/700 kB | 114/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 294/586 kB | 616/700 kB | 114/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 294/586 kB | 616/700 kB | 130/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 310/586 kB | 616/700 kB | 130/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 310/586 kB | 616/700 kB | 147/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 326/586 kB | 616/700 kB | 147/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 326/586 kB | 616/700 kB | 163/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 343/586 kB | 616/700 kB | 163/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 343/586 kB | 616/700 kB | 180/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 359/586 kB | 616/700 kB | 180/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 359/586 kB | 616/700 kB | 196/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 376/586 kB | 616/700 kB | 196/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 376/586 kB | 616/700 kB | 212/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 392/586 kB | 616/700 kB | 212/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 392/586 kB | 616/700 kB | 229/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 408/586 kB | 616/700 kB | 229/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 408/586 kB | 616/700 kB | 245/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 425/586 kB | 616/700 kB | 245/257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 425/586 kB | 616/700 kB | 257 kB    
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 441/586 kB | 616/700 kB | 257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 457/586 kB | 616/700 kB | 257 kB
 Progress (5): 1.8/1.9 MB | 0.9/1.3 MB | 474/586 kB | 616/700 kB | 257 kB
                                                                         
 Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-agent/1.14.11/byte-buddy-agent-1.14.11.jar (257 kB at 1.3 MB/s)
 #24 7.087 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 490/586 kB | 616/700 kB
                                                                
 Downloading from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/3.3/objenesis-3.3.jar
 #24 7.087 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 507/586 kB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 523/586 kB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 539/586 kB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 556/586 kB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 556/586 kB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 572/586 kB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 572/586 kB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 0.9/1.3 MB | 586 kB | 616/700 kB    
 Progress (4): 1.8/1.9 MB | 1.0/1.3 MB | 586 kB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 1.0/1.3 MB | 586 kB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 1.0/1.3 MB | 586 kB | 616/700 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar (586 kB at 3.0 MB/s)
 #24 7.089 Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar
 #24 7.089 Progress (3): 1.8/1.9 MB | 1.0/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.0/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.0/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.1/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.2/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
 Progress (4): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB | 16/49 kB
 Progress (4): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB | 33/49 kB
 Progress (4): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB | 49/49 kB
 Progress (4): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB | 49 kB   
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/3.3/objenesis-3.3.jar (49 kB at 245 kB/s)
 #24 7.094 Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.3/1.3 MB | 616/700 kB
 Progress (3): 1.8/1.9 MB | 1.3 MB | 616/700 kB    
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar (1.3 MB at 6.6 MB/s)
 #24 7.095 Downloading from central: https://repo.maven.apache.org/maven2/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar
 #24 7.095 Downloading from central: https://repo.maven.apache.org/maven2/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar
 #24 7.095 Progress (2): 1.8/1.9 MB | 633/700 kB
 Progress (2): 1.8/1.9 MB | 649/700 kB
 Progress (2): 1.8/1.9 MB | 665/700 kB
 Progress (2): 1.8/1.9 MB | 682/700 kB
 Progress (2): 1.8/1.9 MB | 682/700 kB
 Progress (2): 1.9/1.9 MB | 682/700 kB
 Progress (2): 1.9/1.9 MB | 682/700 kB
 Progress (2): 1.9/1.9 MB | 682/700 kB
 Progress (2): 1.9/1.9 MB | 682/700 kB
 Progress (2): 1.9/1.9 MB | 682/700 kB
 Progress (2): 1.9 MB | 682/700 kB    
 Progress (2): 1.9 MB | 698/700 kB
 Progress (2): 1.9 MB | 700 kB    
                              
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-autoconfigure/3.2.2/spring-boot-autoconfigure-3.2.2.jar (1.9 MB at 9.1 MB/s)
 #24 7.097 Downloading from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar
 #24 7.098 Progress (2): 700 kB | 16/31 kB
 Progress (3): 700 kB | 16/31 kB | 8.8 kB
 Progress (3): 700 kB | 31 kB | 8.8 kB   
                                      
 Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar (8.8 kB at 43 kB/s)
 #24 7.098 Downloading from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.7.1/postgresql-42.7.1.jar
 #24 7.099 Progress (3): 700 kB | 31 kB | 16/18 kB
 Progress (3): 700 kB | 31 kB | 18 kB   
                                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar (700 kB at 3.4 MB/s)
 #24 7.099 Downloading from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.41.0/checker-qual-3.41.0.jar
 #24 7.099 Downloaded from central: https://repo.maven.apache.org/maven2/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar (18 kB at 88 kB/s)
 #24 7.099 Downloaded from central: https://repo.maven.apache.org/maven2/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar (31 kB at 148 kB/s)
 #24 7.099 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar
 #24 7.099 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar
 #24 7.104 Progress (1): 16/175 kB
 Progress (1): 32/175 kB
 Progress (1): 49/175 kB
 Progress (1): 65/175 kB
 Progress (1): 80/175 kB
 Progress (1): 96/175 kB
 Progress (1): 112/175 kB
 Progress (1): 129/175 kB
 Progress (1): 145/175 kB
 Progress (1): 162/175 kB
 Progress (1): 175 kB    
 Progress (2): 175 kB | 16/229 kB
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar (175 kB at 842 kB/s)
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar
 #24 7.104 Progress (1): 33/229 kB
 Progress (1): 49/229 kB
 Progress (1): 63/229 kB
 Progress (1): 79/229 kB
 Progress (1): 96/229 kB
 Progress (1): 112/229 kB
 Progress (1): 128/229 kB
 Progress (2): 128/229 kB | 16/247 kB
 Progress (2): 145/229 kB | 16/247 kB
 Progress (2): 145/229 kB | 33/247 kB
 Progress (2): 161/229 kB | 33/247 kB
 Progress (2): 161/229 kB | 49/247 kB
 Progress (2): 161/229 kB | 63/247 kB
 Progress (2): 161/229 kB | 79/247 kB
 Progress (2): 161/229 kB | 95/247 kB
 Progress (2): 161/229 kB | 112/247 kB
 Progress (2): 161/229 kB | 128/247 kB
 Progress (2): 161/229 kB | 145/247 kB
 Progress (3): 161/229 kB | 145/247 kB | 16/205 kB
 Progress (3): 161/229 kB | 161/247 kB | 16/205 kB
 Progress (3): 177/229 kB | 161/247 kB | 16/205 kB
 Progress (3): 177/229 kB | 161/247 kB | 32/205 kB
 Progress (3): 177/229 kB | 177/247 kB | 32/205 kB
 Progress (3): 194/229 kB | 177/247 kB | 32/205 kB
 Progress (3): 194/229 kB | 177/247 kB | 49/205 kB
 Progress (3): 194/229 kB | 177/247 kB | 65/205 kB
 Progress (3): 210/229 kB | 177/247 kB | 65/205 kB
 Progress (4): 210/229 kB | 177/247 kB | 65/205 kB | 14 kB
 Progress (4): 210/229 kB | 177/247 kB | 81/205 kB | 14 kB
 Progress (4): 227/229 kB | 177/247 kB | 81/205 kB | 14 kB
 Progress (4): 229 kB | 177/247 kB | 81/205 kB | 14 kB    
 Progress (4): 229 kB | 177/247 kB | 98/205 kB | 14 kB
 Progress (4): 229 kB | 177/247 kB | 114/205 kB | 14 kB
                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar (14 kB at 68 kB/s)
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar
 #24 7.104 Downloaded from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.41.0/checker-qual-3.41.0.jar (229 kB at 1.1 MB/s)
 #24 7.104 Progress (2): 177/247 kB | 130/205 kB
 Progress (2): 177/247 kB | 147/205 kB
 Progress (2): 177/247 kB | 163/205 kB
 Progress (2): 177/247 kB | 180/205 kB
 Progress (2): 177/247 kB | 196/205 kB
 Progress (2): 177/247 kB | 205 kB    
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar (205 kB at 980 kB/s)
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar
 #24 7.104 Progress (1): 194/247 kB
 Progress (1): 210/247 kB
 Progress (1): 226/247 kB
 Progress (2): 226/247 kB | 16/211 kB
 Progress (2): 243/247 kB | 16/211 kB
 Progress (2): 247 kB | 16/211 kB    
 Progress (2): 247 kB | 33/211 kB
 Progress (2): 247 kB | 49/211 kB
 Progress (2): 247 kB | 63/211 kB
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar (247 kB at 1.2 MB/s)
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-data-jpa/3.2.2/spring-boot-starter-data-jpa-3.2.2.jar
 #24 7.104 Progress (1): 80/211 kB
 Progress (2): 80/211 kB | 6.8 kB
 Progress (2): 96/211 kB | 6.8 kB
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar (6.8 kB at 33 kB/s)
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-aop/3.2.2/spring-boot-starter-aop-3.2.2.jar
 #24 7.104 Progress (1): 112/211 kB
 Progress (1): 129/211 kB
 Progress (1): 145/211 kB
 Progress (1): 162/211 kB
 Progress (1): 178/211 kB
 Progress (1): 194/211 kB
 Progress (1): 211/211 kB
 Progress (1): 211 kB    
 Progress (2): 211 kB | 0/1.1 MB
 Progress (2): 211 kB | 0/1.1 MB
 Progress (2): 211 kB | 0/1.1 MB
 Progress (2): 211 kB | 0.1/1.1 MB
 Progress (2): 211 kB | 0.1/1.1 MB
 Progress (2): 211 kB | 0.1/1.1 MB
 Progress (2): 211 kB | 0.1/1.1 MB
 Progress (2): 211 kB | 0.1/1.1 MB
 Progress (3): 211 kB | 0.1/1.1 MB | 4.8 kB
 Progress (3): 211 kB | 0.1/1.1 MB | 4.8 kB
                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-data-jpa/3.2.2/spring-boot-starter-data-jpa-3.2.2.jar (4.8 kB at 23 kB/s)
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/aspectj/aspectjweaver/1.9.21/aspectjweaver-1.9.21.jar
 #24 7.104 Progress (2): 211 kB | 0.2/1.1 MB
 Progress (2): 211 kB | 0.2/1.1 MB
 Progress (2): 211 kB | 0.2/1.1 MB
 Progress (2): 211 kB | 0.2/1.1 MB
 Progress (2): 211 kB | 0.2/1.1 MB
 Progress (2): 211 kB | 0.2/1.1 MB
 Progress (2): 211 kB | 0.3/1.1 MB
 Progress (3): 211 kB | 0.3/1.1 MB | 4.8 kB
 Progress (3): 211 kB | 0.3/1.1 MB | 4.8 kB
 Progress (3): 211 kB | 0.3/1.1 MB | 4.8 kB
                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-aop/3.2.2/spring-boot-starter-aop-3.2.2.jar (4.8 kB at 23 kB/s)
 #24 7.104 Progress (2): 211 kB | 0.3/1.1 MB
                                  
 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-jdbc/3.2.2/spring-boot-starter-jdbc-3.2.2.jar
 #24 7.104 Progress (2): 211 kB | 0.3/1.1 MB
 Progress (2): 211 kB | 0.3/1.1 MB
 Progress (2): 211 kB | 0.4/1.1 MB
 Progress (2): 211 kB | 0.4/1.1 MB
 Progress (2): 211 kB | 0.4/1.1 MB
 Progress (2): 211 kB | 0.4/1.1 MB
 Progress (3): 211 kB | 0.4/1.1 MB | 16/106 kB
 Progress (3): 211 kB | 0.4/1.1 MB | 32/106 kB
 Progress (3): 211 kB | 0.4/1.1 MB | 49/106 kB
 Progress (3): 211 kB | 0.4/1.1 MB | 65/106 kB
 Progress (3): 211 kB | 0.4/1.1 MB | 81/106 kB
 Progress (3): 211 kB | 0.4/1.1 MB | 98/106 kB
 Progress (3): 211 kB | 0.4/1.1 MB | 106 kB   
                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar (106 kB at 504 kB/s)
 #24 7.104 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar (211 kB at 1000 kB/s)
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jdbc/6.1.3/spring-jdbc-6.1.3.jar
 #24 7.104 Progress (1): 0.4/1.1 MB
 Progress (1): 0.4/1.1 MB
 Progress (2): 0.4/1.1 MB | 4.8 kB
 Progress (2): 0.5/1.1 MB | 4.8 kB
 Progress (2): 0.5/1.1 MB | 4.8 kB
 Progress (2): 0.5/1.1 MB | 4.8 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-jdbc/3.2.2/spring-boot-starter-jdbc-3.2.2.jar (4.8 kB at 23 kB/s)
 #24 7.104 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa/3.2.2/spring-data-jpa-3.2.2.jar
 #24 7.104 Progress (1): 0.5/1.1 MB
 Progress (1): 0.5/1.1 MB
 Progress (2): 0.5/1.1 MB | 0/2.1 MB
 Progress (2): 0.5/1.1 MB | 0/2.1 MB
 Progress (2): 0.5/1.1 MB | 0/2.1 MB
 Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
 Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
 Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
 Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
 Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
 Progress (2): 0.5/1.1 MB | 0.1/2.1 MB
 Progress (2): 0.5/1.1 MB | 0.2/2.1 MB
 Progress (2): 0.5/1.1 MB | 0.2/2.1 MB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 16/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 33/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 33/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 49/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 49/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 63/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 63/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 79/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 96/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 96/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 112/162 kB
 Progress (3): 0.5/1.1 MB | 0.2/2.1 MB | 128/162 kB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 128/162 kB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 128/162 kB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 145/162 kB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 145/162 kB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 161/162 kB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 162 kB    
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 162 kB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 162 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar (162 kB at 760 kB/s)
 #24 7.106 Progress (2): 0.5/1.1 MB | 0.3/2.1 MB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
 Progress (3): 0.5/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
 Progress (3): 0.6/1.1 MB | 0.3/2.1 MB | 0/1.5 MB
 Progress (4): 0.6/1.1 MB | 0.3/2.1 MB | 0/1.5 MB | 15/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 15/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 31/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 31/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 31/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 31/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 48/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 48/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 48/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0/1.5 MB | 64/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 64/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 64/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 81/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 81/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 81/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 97/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 97/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 97/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 112/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 112/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 112/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 128/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 128/461 kB
 Progress (4): 0.6/1.1 MB | 0.4/2.1 MB | 0.1/1.5 MB | 128/461 kB
 Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 128/461 kB
 Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 145/461 kB
 Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 145/461 kB
 Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 161/461 kB
 Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 161/461 kB
 Progress (4): 0.6/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 161/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 161/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 178/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 178/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 194/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 194/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 194/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 194/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 210/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 210/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 210/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.1/1.5 MB | 227/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.2/1.5 MB | 227/461 kB
 Progress (4): 0.7/1.1 MB | 0.5/2.1 MB | 0.2/1.5 MB | 227/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 227/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 227/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 227/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 243/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 243/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 243/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 259/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 259/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 259/461 kB
 Progress (4): 0.7/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 276/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 276/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 276/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 292/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 292/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 309/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 309/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 309/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 325/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 325/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 325/461 kB
 Progress (4): 0.8/1.1 MB | 0.6/2.1 MB | 0.2/1.5 MB | 341/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 341/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 358/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 358/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 374/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 374/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 391/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 391/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 407/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 407/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 423/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 423/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 440/461 kB
 Progress (4): 0.8/1.1 MB | 0.7/2.1 MB | 0.2/1.5 MB | 440/461 kB
 Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 440/461 kB
 Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 456/461 kB
 Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB    
 Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
 Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
 Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
 Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
 Progress (4): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB | 461 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jdbc/6.1.3/spring-jdbc-6.1.3.jar (461 kB at 2.0 MB/s)
 #24 7.122 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-commons/3.2.2/spring-data-commons-3.2.2.jar
 #24 7.122 Progress (3): 0.8/1.1 MB | 0.8/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.8/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 0.9/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.2/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.3/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.0/2.1 MB | 0.3/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 0.9/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.3/1.5 MB
 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB
                                                   
 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-orm/6.1.3/spring-orm-6.1.3.jar
 #24 7.125 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB
 Progress (3): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.4/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.1/1.4 MB
 Progress (4): 1.0/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1/1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB    
 Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
 Progress (4): 1.1 MB | 1.1/2.1 MB | 0.5/1.5 MB | 0.2/1.4 MB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.7.1/postgresql-42.7.1.jar (1.1 MB at 4.6 MB/s)
 #24 7.141 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.3/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
                                                   
 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-tx/6.1.3/spring-tx-6.1.3.jar
 #24 7.141 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.4/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.5/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.6/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.5/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 16/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 16/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 33/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 33/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 49/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 49/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 63/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 63/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 80/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 80/284 kB
 Progress (4): 1.1/2.1 MB | 0.6/1.5 MB | 0.7/1.4 MB | 96/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 96/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 113/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 113/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 113/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 129/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 145/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 145/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 162/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 162/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 178/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 178/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 195/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 195/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 195/284 kB
 Progress (4): 1.1/2.1 MB | 0.7/1.5 MB | 0.7/1.4 MB | 211/284 kB
 Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 211/284 kB
 Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 211/284 kB
 Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 211/284 kB
 Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 227/284 kB
 Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 227/284 kB
 Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 227/284 kB
 Progress (4): 1.1/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 244/284 kB
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 244/284 kB
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 260/284 kB
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 260/284 kB
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 260/284 kB
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 276/284 kB
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 276/284 kB
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 284 kB    
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 284 kB
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 284 kB
 Progress (4): 1.2/2.1 MB | 0.8/1.5 MB | 0.7/1.4 MB | 284 kB
 Progress (4): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB | 284 kB
 Progress (4): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB | 284 kB
 Progress (4): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB | 284 kB
 Progress (4): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB | 284 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-tx/6.1.3/spring-tx-6.1.3.jar (284 kB at 1.1 MB/s)
 #24 7.144 Progress (3): 1.2/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.3/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
                                                   
 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aspects/6.1.3/spring-aspects-6.1.3.jar
 #24 7.153 Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.4/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.5/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.7/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.6/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.8/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.7/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 0.9/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.0/1.4 MB
 Progress (3): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB
 Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 15/233 kB
 Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 31/233 kB
 Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 48/233 kB
 Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 48/233 kB
 Progress (4): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 64/233 kB
 Progress (5): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 64/233 kB | 16/50 kB
 Progress (5): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 78/233 kB | 16/50 kB
 Progress (5): 1.8/2.1 MB | 0.9/1.5 MB | 1.1/1.4 MB | 78/233 kB | 33/50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 78/233 kB | 33/50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 94/233 kB | 33/50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 94/233 kB | 49/50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 94/233 kB | 50 kB   
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 111/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 111/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 127/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 143/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 143/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 160/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 176/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 193/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 193/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 209/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 225/233 kB | 50 kB
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 233 kB | 50 kB    
 Progress (5): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 233 kB | 50 kB
                                                                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aspects/6.1.3/spring-aspects-6.1.3.jar (50 kB at 177 kB/s)
 #24 7.177 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5-jakarta/2.13.5/jackson-datatype-hibernate5-jakarta-2.13.5.jar
 #24 7.177 Progress (4): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.0/1.5 MB | 1.1/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.1/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.2/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.3/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
 Progress (4): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB
 Progress (5): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB | 16/28 kB
 Progress (5): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB | 233 kB | 28 kB   
                                                                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-orm/6.1.3/spring-orm-6.1.3.jar (233 kB at 825 kB/s)
 #24 7.177 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar
 #24 7.177 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5-jakarta/2.13.5/jackson-datatype-hibernate5-jakarta-2.13.5.jar (28 kB at 98 kB/s)
 #24 7.177 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar
 #24 7.177 Progress (3): 1.8/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 1.9/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.0/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1/2.1 MB | 1.1/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1/2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1/2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1/2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB    
 Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1 MB | 1.2/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB
 Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 16/29 kB
 Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 16/29 kB
 Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 29 kB   
 Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 29 kB
 Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 29 kB
 Progress (4): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB | 29 kB
                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar (29 kB at 100 kB/s)
 #24 7.180 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar
 #24 7.181 Progress (3): 2.1 MB | 1.3/1.5 MB | 1.4/1.4 MB
 Progress (3): 2.1 MB | 1.4/1.5 MB | 1.4/1.4 MB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/aspectj/aspectjweaver/1.9.21/aspectjweaver-1.9.21.jar (2.1 MB at 7.3 MB/s)
 #24 7.185 Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar
 #24 7.185 Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
 Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
 Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
 Progress (2): 1.4/1.5 MB | 1.4/1.4 MB
 Progress (2): 1.5/1.5 MB | 1.4/1.4 MB
 Progress (2): 1.5/1.5 MB | 1.4/1.4 MB
 Progress (2): 1.5/1.5 MB | 1.4/1.4 MB
 Progress (2): 1.5/1.5 MB | 1.4/1.4 MB
 Progress (2): 1.5 MB | 1.4/1.4 MB    
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-jpa/3.2.2/spring-data-jpa-3.2.2.jar (1.5 MB at 5.2 MB/s)
 #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-web/3.2.2/spring-boot-starter-web-3.2.2.jar
 #24 7.185 Progress (2): 1.4/1.4 MB | 16/549 kB
 Progress (2): 1.4/1.4 MB | 33/549 kB
 Progress (2): 1.4/1.4 MB | 49/549 kB
 Progress (2): 1.4/1.4 MB | 62/549 kB
 Progress (2): 1.4/1.4 MB | 79/549 kB
 Progress (2): 1.4/1.4 MB | 95/549 kB
 Progress (2): 1.4/1.4 MB | 112/549 kB
 Progress (2): 1.4/1.4 MB | 128/549 kB
 Progress (2): 1.4/1.4 MB | 144/549 kB
 Progress (2): 1.4/1.4 MB | 161/549 kB
 Progress (2): 1.4/1.4 MB | 177/549 kB
 Progress (2): 1.4/1.4 MB | 194/549 kB
 Progress (2): 1.4/1.4 MB | 210/549 kB
 Progress (2): 1.4/1.4 MB | 226/549 kB
 Progress (2): 1.4/1.4 MB | 243/549 kB
 Progress (2): 1.4/1.4 MB | 259/549 kB
 Progress (2): 1.4/1.4 MB | 275/549 kB
 Progress (2): 1.4/1.4 MB | 292/549 kB
 Progress (2): 1.4/1.4 MB | 308/549 kB
 Progress (2): 1.4/1.4 MB | 312/549 kB
 Progress (3): 1.4/1.4 MB | 312/549 kB | 4.8 kB
 Progress (3): 1.4/1.4 MB | 325/549 kB | 4.8 kB
 Progress (3): 1.4/1.4 MB | 341/549 kB | 4.8 kB
 Progress (3): 1.4/1.4 MB | 357/549 kB | 4.8 kB
 Progress (3): 1.4/1.4 MB | 374/549 kB | 4.8 kB
 Progress (3): 1.4/1.4 MB | 390/549 kB | 4.8 kB
 Progress (3): 1.4/1.4 MB | 407/549 kB | 4.8 kB
 Progress (3): 1.4/1.4 MB | 423/549 kB | 4.8 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-web/3.2.2/spring-boot-starter-web-3.2.2.jar (4.8 kB at 17 kB/s)
 #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-json/3.2.2/spring-boot-starter-json-3.2.2.jar
 #24 7.185 Progress (2): 1.4/1.4 MB | 439/549 kB
 Progress (2): 1.4/1.4 MB | 456/549 kB
 Progress (3): 1.4/1.4 MB | 456/549 kB | 0/1.6 MB
 Progress (3): 1.4/1.4 MB | 456/549 kB | 0/1.6 MB
 Progress (3): 1.4/1.4 MB | 472/549 kB | 0/1.6 MB
 Progress (3): 1.4/1.4 MB | 472/549 kB | 0/1.6 MB
 Progress (3): 1.4/1.4 MB | 488/549 kB | 0/1.6 MB
 Progress (3): 1.4/1.4 MB | 488/549 kB | 0.1/1.6 MB
 Progress (3): 1.4/1.4 MB | 505/549 kB | 0.1/1.6 MB
 Progress (3): 1.4/1.4 MB | 521/549 kB | 0.1/1.6 MB
 Progress (3): 1.4/1.4 MB | 521/549 kB | 0.1/1.6 MB
 Progress (3): 1.4/1.4 MB | 521/549 kB | 0.1/1.6 MB
 Progress (3): 1.4/1.4 MB | 538/549 kB | 0.1/1.6 MB
 Progress (3): 1.4/1.4 MB | 549 kB | 0.1/1.6 MB    
 Progress (3): 1.4/1.4 MB | 549 kB | 0.1/1.6 MB
 Progress (3): 1.4/1.4 MB | 549 kB | 0.1/1.6 MB
 Progress (3): 1.4/1.4 MB | 549 kB | 0.1/1.6 MB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar (549 kB at 1.9 MB/s)
 #24 7.185 Progress (2): 1.4 MB | 0.1/1.6 MB
 Progress (2): 1.4 MB | 0.2/1.6 MB
 Progress (2): 1.4 MB | 0.2/1.6 MB
 Progress (2): 1.4 MB | 0.2/1.6 MB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/data/spring-data-commons/3.2.2/spring-data-commons-3.2.2.jar (1.4 MB at 4.9 MB/s)
 #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar
 #24 7.185 Progress (1): 0.2/1.6 MB
 Progress (1): 0.2/1.6 MB
 Progress (1): 0.2/1.6 MB
 Progress (1): 0.3/1.6 MB
 Progress (1): 0.3/1.6 MB
 Progress (1): 0.3/1.6 MB
 Progress (1): 0.3/1.6 MB
 Progress (1): 0.3/1.6 MB
 Progress (1): 0.3/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.4/1.6 MB
 Progress (1): 0.5/1.6 MB
 Progress (1): 0.5/1.6 MB
 Progress (1): 0.5/1.6 MB
 Progress (1): 0.5/1.6 MB
 Progress (1): 0.5/1.6 MB
 Progress (1): 0.5/1.6 MB
 Progress (1): 0.6/1.6 MB
 Progress (1): 0.6/1.6 MB
 Progress (1): 0.6/1.6 MB
 Progress (1): 0.6/1.6 MB
 Progress (1): 0.6/1.6 MB
 Progress (1): 0.6/1.6 MB
 Progress (2): 0.6/1.6 MB | 4.7 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-json/3.2.2/spring-boot-starter-json-3.2.2.jar (4.7 kB at 16 kB/s)
 #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar
 #24 7.185 Progress (2): 0.6/1.6 MB | 16/76 kB
 Progress (2): 0.6/1.6 MB | 32/76 kB
 Progress (2): 0.6/1.6 MB | 49/76 kB
 Progress (2): 0.6/1.6 MB | 65/76 kB
 Progress (2): 0.6/1.6 MB | 76 kB   
 Progress (3): 0.6/1.6 MB | 76 kB | 16/123 kB
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar (76 kB at 260 kB/s)
 #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar
 #24 7.185 Progress (2): 0.6/1.6 MB | 32/123 kB
 Progress (2): 0.6/1.6 MB | 49/123 kB
 Progress (2): 0.6/1.6 MB | 49/123 kB
 Progress (2): 0.7/1.6 MB | 49/123 kB
 Progress (2): 0.7/1.6 MB | 65/123 kB
 Progress (2): 0.7/1.6 MB | 65/123 kB
 Progress (2): 0.7/1.6 MB | 65/123 kB
 Progress (2): 0.7/1.6 MB | 65/123 kB
 Progress (2): 0.7/1.6 MB | 81/123 kB
 Progress (2): 0.7/1.6 MB | 81/123 kB
 Progress (2): 0.7/1.6 MB | 81/123 kB
 Progress (2): 0.7/1.6 MB | 98/123 kB
 Progress (2): 0.8/1.6 MB | 98/123 kB
 Progress (2): 0.8/1.6 MB | 98/123 kB
 Progress (2): 0.8/1.6 MB | 98/123 kB
 Progress (2): 0.8/1.6 MB | 98/123 kB
 Progress (2): 0.8/1.6 MB | 114/123 kB
 Progress (3): 0.8/1.6 MB | 114/123 kB | 16/36 kB
 Progress (3): 0.8/1.6 MB | 114/123 kB | 16/36 kB
 Progress (3): 0.8/1.6 MB | 123 kB | 16/36 kB    
 Progress (3): 0.8/1.6 MB | 123 kB | 33/36 kB
 Progress (3): 0.8/1.6 MB | 123 kB | 33/36 kB
 Progress (3): 0.8/1.6 MB | 123 kB | 36 kB   
 Progress (3): 0.9/1.6 MB | 123 kB | 36 kB
 Progress (3): 0.9/1.6 MB | 123 kB | 36 kB
                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar (36 kB at 124 kB/s)
 #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-tomcat/3.2.2/spring-boot-starter-tomcat-3.2.2.jar
 #24 7.185 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar (123 kB at 422 kB/s)
 #24 7.185 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-core/10.1.18/tomcat-embed-core-10.1.18.jar
 #24 7.186 Progress (2): 0.9/1.6 MB | 10 kB
                                 
 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.18/tomcat-embed-websocket-10.1.18.jar
 #24 7.186 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar (10 kB at 35 kB/s)
 #24 7.187 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-web/6.1.3/spring-web-6.1.3.jar
 #24 7.187 Progress (2): 0.9/1.6 MB | 4.8 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-tomcat/3.2.2/spring-boot-starter-tomcat-3.2.2.jar (4.8 kB at 16 kB/s)
 #24 7.188 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-webmvc/6.1.3/spring-webmvc-6.1.3.jar
 #24 7.188 Progress (2): 0.9/1.6 MB | 0/3.5 MB
 Progress (2): 0.9/1.6 MB | 0/3.5 MB
 Progress (3): 0.9/1.6 MB | 0/3.5 MB | 0/1.9 MB
 Progress (3): 0.9/1.6 MB | 0/3.5 MB | 0/1.9 MB
 Progress (3): 0.9/1.6 MB | 0/3.5 MB | 0/1.9 MB
 Progress (3): 0.9/1.6 MB | 0/3.5 MB | 0/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 15/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 15/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 15/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 31/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 31/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 31/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 48/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 48/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 64/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.1/1.9 MB | 81/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.2/1.9 MB | 81/281 kB
 Progress (4): 0.9/1.6 MB | 0.1/3.5 MB | 0.2/1.9 MB | 97/281 kB
 Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 97/281 kB
 Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 97/281 kB
 Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 113/281 kB
 Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB
 Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB
 Progress (4): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.2/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.1/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.3/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.2/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.4/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.3/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.4/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.2/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.5/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.6/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.7/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.3/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.8/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 0.9/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0/1.0 MB
 Progress (5): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 129/281 kB | 1.0 MB    
                                                                         
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-webmvc/6.1.3/spring-webmvc-6.1.3.jar (1.0 MB at 2.9 MB/s)
 #24 7.249 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 145/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 145/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 162/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 178/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 195/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 195/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 211/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 211/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 227/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 227/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.5/1.9 MB | 244/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 244/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 260/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 260/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 277/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 277/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 277/281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 281 kB    
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 281 kB
 Progress (4): 0.9/1.6 MB | 0.4/3.5 MB | 0.6/1.9 MB | 281 kB
 Progress (4): 0.9/1.6 MB | 0.5/3.5 MB | 0.6/1.9 MB | 281 kB
 Progress (4): 0.9/1.6 MB | 0.5/3.5 MB | 0.6/1.9 MB | 281 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.18/tomcat-embed-websocket-10.1.18.jar (281 kB at 793 kB/s)
 #24 7.249 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.6/1.9 MB
                                                   
 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.3.1/spring-security-core-6.3.1.jar
 #24 7.249 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
                                                   
 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-crypto/6.2.1/spring-security-crypto-6.2.1.jar
 #24 7.252 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.5/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.7/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.6/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.8/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 0.9/1.9 MB
 Progress (3): 0.9/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
 Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
 Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
 Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
 Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
 Progress (3): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 16/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 16/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 16/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 16/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 33/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 37/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 37/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 37/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.0/1.9 MB | 37/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 37/559 kB
 Progress (4): 1.0/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 53/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 53/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 53/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 53/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 70/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 70/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 70/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 86/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 86/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 86/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 103/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 103/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 103/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 103/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 119/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 127/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.1/1.9 MB | 127/559 kB
 Progress (4): 1.1/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 127/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 127/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 127/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 144/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 144/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 144/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 160/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 176/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 176/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.2/1.9 MB | 176/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 176/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 193/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 193/559 kB
 Progress (4): 1.2/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 193/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 193/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 209/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 209/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 225/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 225/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 242/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 242/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 258/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 258/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.3/1.9 MB | 275/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 275/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 291/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 291/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 307/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 307/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 307/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 324/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 324/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 324/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 340/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 340/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 357/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.4/1.9 MB | 373/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 373/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 373/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 389/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 406/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 406/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 422/559 kB
 Progress (4): 1.3/1.6 MB | 0.7/3.5 MB | 1.5/1.9 MB | 422/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 422/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 438/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 438/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 438/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 455/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.5/1.9 MB | 471/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 471/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 471/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 471/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 488/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 504/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 504/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 504/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 520/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 537/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 537/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 553/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 553/559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.6/1.9 MB | 559 kB    
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 16/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 16/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 33/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 33/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.7/1.9 MB | 559 kB | 33/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 33/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 49/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 49/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 63/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 63/84 kB
 Progress (5): 1.3/1.6 MB | 0.8/3.5 MB | 1.8/1.9 MB | 559 kB | 79/84 kB
 Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 79/84 kB
 Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB   
 Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
 Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
 Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
 Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
 Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
 Progress (5): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB | 84 kB
                                                                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-crypto/6.2.1/spring-security-crypto-6.2.1.jar (84 kB at 214 kB/s)
 #24 7.289 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aop/6.1.3/spring-aop-6.1.3.jar
 #24 7.289 Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.8/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.9/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.9/1.9 MB | 559 kB
 Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.9 MB | 559 kB    
 Progress (4): 1.3/1.6 MB | 0.9/3.5 MB | 1.9 MB | 559 kB
                                                        
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-core/6.3.1/spring-security-core-6.3.1.jar (559 kB at 1.4 MB/s)
 #24 7.290 Progress (3): 1.3/1.6 MB | 1.0/3.5 MB | 1.9 MB
                                               
 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-beans/6.1.3/spring-beans-6.1.3.jar
 #24 7.291 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-web/6.1.3/spring-web-6.1.3.jar (1.9 MB at 4.7 MB/s)
 #24 7.291 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-context/6.1.3/spring-context-6.1.3.jar
 #24 7.292 Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.0/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.3/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.1/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.2/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.3/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.3/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.3/3.5 MB
 Progress (2): 1.4/1.6 MB | 1.3/3.5 MB
 Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 16/415 kB
 Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 16/415 kB
 Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 32/415 kB
 Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 32/415 kB
 Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 49/415 kB
 Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 49/415 kB
 Progress (3): 1.4/1.6 MB | 1.3/3.5 MB | 65/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 65/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 81/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 98/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 98/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 114/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 128/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 128/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 144/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 144/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 160/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 177/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 177/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 193/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 193/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 210/415 kB
 Progress (3): 1.4/1.6 MB | 1.4/3.5 MB | 226/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 226/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 242/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 242/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 259/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 259/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 275/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 275/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 275/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 291/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 291/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 291/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 308/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 308/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 308/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 324/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 324/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 324/415 kB
 Progress (3): 1.4/1.6 MB | 1.5/3.5 MB | 341/415 kB
 Progress (3): 1.5/1.6 MB | 1.5/3.5 MB | 341/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 341/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 357/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 357/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 357/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 373/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 373/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 373/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 390/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 390/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 390/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
 Progress (3): 1.5/1.6 MB | 1.6/3.5 MB | 406/415 kB
 Progress (3): 1.5/1.6 MB | 1.7/3.5 MB | 406/415 kB
 Progress (3): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB
 Progress (3): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 16/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 16/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 16/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 33/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 33/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 33/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 49/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 49/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 66/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 66/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 66/857 kB
 Progress (4): 1.6/1.6 MB | 1.7/3.5 MB | 406/415 kB | 79/857 kB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 79/857 kB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 95/857 kB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 95/857 kB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 112/857 kB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 112/857 kB | 0/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 112/857 kB | 0/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 128/857 kB | 0/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 128/857 kB | 0/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 128/857 kB | 0/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 128/857 kB | 0/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 145/857 kB | 0/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 145/857 kB | 0.1/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 145/857 kB | 0.1/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 406/415 kB | 145/857 kB | 0.1/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 415 kB | 145/857 kB | 0.1/1.3 MB    
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 415 kB | 145/857 kB | 0.1/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 415 kB | 145/857 kB | 0.1/1.3 MB
 Progress (5): 1.6/1.6 MB | 1.8/3.5 MB | 415 kB | 145/857 kB | 0.1/1.3 MB
                                                                         
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-aop/6.1.3/spring-aop-6.1.3.jar (415 kB at 1.0 MB/s)
 #24 7.303 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-expression/6.1.3/spring-expression-6.1.3.jar
 #24 7.303 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 145/857 kB | 0.1/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 145/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 145/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 145/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 161/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 161/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 161/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 177/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 177/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 194/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 210/857 kB | 0.2/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 210/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 210/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 226/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 226/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 243/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 243/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 259/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 259/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 276/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 276/857 kB | 0.3/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 276/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 292/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 292/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 308/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 308/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 308/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 325/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 325/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB
 Progress (4): 1.6/1.6 MB | 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB
 Progress (4): 1.6 MB | 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB    
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar (1.6 MB at 3.9 MB/s)
 #24 7.307 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 16/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 33/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 49/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 66/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 82/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 98/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 115/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 131/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 147/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 164/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 180/301 kB
                                                                
 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-observation/1.12.2/micrometer-observation-1.12.2.jar
 #24 7.307 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 197/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 213/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 229/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 246/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.4/1.3 MB | 256/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 256/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 272/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 272/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 289/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 289/301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 301 kB    
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 301 kB
 Progress (4): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB | 301 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-expression/6.1.3/spring-expression-6.1.3.jar (301 kB at 729 kB/s)
 #24 7.308 Downloading from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-commons/1.12.2/micrometer-commons-1.12.2.jar
 #24 7.308 Progress (3): 1.8/3.5 MB | 341/857 kB | 0.5/1.3 MB
 Progress (3): 1.8/3.5 MB | 341/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 341/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 358/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 358/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 374/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 374/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 390/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 390/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 407/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 407/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 423/857 kB | 0.6/1.3 MB
 Progress (3): 1.8/3.5 MB | 423/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 439/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 439/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 456/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 456/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 472/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 472/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 489/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 489/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 505/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 505/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 521/857 kB | 0.7/1.3 MB
 Progress (3): 1.8/3.5 MB | 521/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 538/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 538/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 554/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 554/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 571/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 587/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 603/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 620/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 636/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 652/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 669/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 685/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 702/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 718/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 734/857 kB | 0.8/1.3 MB
 Progress (3): 1.8/3.5 MB | 751/857 kB | 0.8/1.3 MB
 Progress (4): 1.8/3.5 MB | 751/857 kB | 0.8/1.3 MB | 16/72 kB
 Progress (4): 1.8/3.5 MB | 767/857 kB | 0.8/1.3 MB | 16/72 kB
 Progress (4): 1.8/3.5 MB | 767/857 kB | 0.8/1.3 MB | 32/72 kB
 Progress (4): 1.8/3.5 MB | 784/857 kB | 0.8/1.3 MB | 32/72 kB
 Progress (4): 1.8/3.5 MB | 784/857 kB | 0.8/1.3 MB | 49/72 kB
 Progress (4): 1.8/3.5 MB | 800/857 kB | 0.8/1.3 MB | 49/72 kB
 Progress (4): 1.8/3.5 MB | 800/857 kB | 0.8/1.3 MB | 65/72 kB
 Progress (4): 1.8/3.5 MB | 800/857 kB | 0.8/1.3 MB | 72 kB   
 Progress (4): 1.8/3.5 MB | 816/857 kB | 0.8/1.3 MB | 72 kB
 Progress (4): 1.8/3.5 MB | 833/857 kB | 0.8/1.3 MB | 72 kB
 Progress (4): 1.8/3.5 MB | 849/857 kB | 0.8/1.3 MB | 72 kB
 Progress (4): 1.8/3.5 MB | 857 kB | 0.8/1.3 MB | 72 kB    
                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-observation/1.12.2/micrometer-observation-1.12.2.jar (72 kB at 165 kB/s)
 #24 7.337 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java/3.3.4/docker-java-3.3.4.jar
 #24 7.337 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-beans/6.1.3/spring-beans-6.1.3.jar (857 kB at 2.0 MB/s)
 #24 7.337 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-core/3.3.4/docker-java-core-3.3.4.jar
 #24 7.337 Progress (2): 1.8/3.5 MB | 0.8/1.3 MB
 Progress (2): 1.8/3.5 MB | 0.8/1.3 MB
 Progress (2): 1.8/3.5 MB | 0.8/1.3 MB
 Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
 Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
 Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
 Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
 Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
 Progress (2): 1.8/3.5 MB | 0.9/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.0/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.1/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.2/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.3/1.3 MB
 Progress (3): 1.8/3.5 MB | 1.3/1.3 MB | 4.5 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java/3.3.4/docker-java-3.3.4.jar (4.5 kB at 10 kB/s)
 #24 7.337 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar
 #24 7.337 Progress (2): 1.8/3.5 MB | 1.3/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.3/1.3 MB
 Progress (2): 1.8/3.5 MB | 1.3 MB    
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-context/6.1.3/spring-context-6.1.3.jar (1.3 MB at 3.0 MB/s)
 #24 7.337 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.jar
 #24 7.337 Progress (1): 1.8/3.5 MB
 Progress (1): 1.9/3.5 MB
 Progress (1): 1.9/3.5 MB
 Progress (1): 1.9/3.5 MB
 Progress (1): 1.9/3.5 MB
 Progress (1): 1.9/3.5 MB
 Progress (1): 1.9/3.5 MB
 Progress (1): 1.9/3.5 MB
 Progress (1): 2.0/3.5 MB
 Progress (1): 2.0/3.5 MB
 Progress (1): 2.0/3.5 MB
 Progress (2): 2.0/3.5 MB | 16/471 kB
 Progress (2): 2.0/3.5 MB | 16/471 kB
 Progress (2): 2.0/3.5 MB | 33/471 kB
 Progress (2): 2.0/3.5 MB | 33/471 kB
 Progress (2): 2.0/3.5 MB | 49/471 kB
 Progress (3): 2.0/3.5 MB | 49/471 kB | 16/484 kB
 Progress (3): 2.0/3.5 MB | 49/471 kB | 33/484 kB
 Progress (3): 2.0/3.5 MB | 49/471 kB | 49/484 kB
 Progress (3): 2.0/3.5 MB | 62/471 kB | 49/484 kB
 Progress (3): 2.0/3.5 MB | 62/471 kB | 62/484 kB
 Progress (3): 2.0/3.5 MB | 78/471 kB | 62/484 kB
 Progress (3): 2.0/3.5 MB | 78/471 kB | 79/484 kB
 Progress (3): 2.0/3.5 MB | 78/471 kB | 95/484 kB
 Progress (3): 2.0/3.5 MB | 94/471 kB | 95/484 kB
 Progress (3): 2.0/3.5 MB | 94/471 kB | 112/484 kB
 Progress (3): 2.0/3.5 MB | 111/471 kB | 112/484 kB
 Progress (3): 2.0/3.5 MB | 111/471 kB | 128/484 kB
 Progress (3): 2.0/3.5 MB | 127/471 kB | 128/484 kB
 Progress (3): 2.0/3.5 MB | 127/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 143/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 160/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 176/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 193/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 209/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 225/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 242/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 258/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 275/471 kB | 144/484 kB
 Progress (3): 2.0/3.5 MB | 275/471 kB | 161/484 kB
 Progress (3): 2.0/3.5 MB | 291/471 kB | 161/484 kB
 Progress (3): 2.0/3.5 MB | 291/471 kB | 177/484 kB
 Progress (3): 2.0/3.5 MB | 307/471 kB | 177/484 kB
 Progress (3): 2.0/3.5 MB | 307/471 kB | 194/484 kB
 Progress (3): 2.0/3.5 MB | 324/471 kB | 194/484 kB
 Progress (3): 2.0/3.5 MB | 324/471 kB | 210/484 kB
 Progress (3): 2.0/3.5 MB | 340/471 kB | 210/484 kB
 Progress (3): 2.0/3.5 MB | 340/471 kB | 226/484 kB
 Progress (3): 2.0/3.5 MB | 356/471 kB | 226/484 kB
 Progress (3): 2.0/3.5 MB | 356/471 kB | 243/484 kB
 Progress (3): 2.0/3.5 MB | 373/471 kB | 243/484 kB
 Progress (3): 2.0/3.5 MB | 373/471 kB | 259/484 kB
 Progress (3): 2.0/3.5 MB | 389/471 kB | 259/484 kB
 Progress (3): 2.0/3.5 MB | 389/471 kB | 275/484 kB
 Progress (3): 2.0/3.5 MB | 406/471 kB | 275/484 kB
 Progress (3): 2.0/3.5 MB | 406/471 kB | 292/484 kB
 Progress (3): 2.0/3.5 MB | 422/471 kB | 292/484 kB
 Progress (3): 2.0/3.5 MB | 422/471 kB | 308/484 kB
 Progress (3): 2.0/3.5 MB | 438/471 kB | 308/484 kB
 Progress (3): 2.0/3.5 MB | 438/471 kB | 325/484 kB
 Progress (3): 2.0/3.5 MB | 455/471 kB | 325/484 kB
 Progress (3): 2.0/3.5 MB | 455/471 kB | 341/484 kB
 Progress (3): 2.0/3.5 MB | 471 kB | 341/484 kB    
 Progress (3): 2.0/3.5 MB | 471 kB | 357/484 kB
 Progress (3): 2.0/3.5 MB | 471 kB | 374/484 kB
 Progress (3): 2.0/3.5 MB | 471 kB | 390/484 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar (471 kB at 1.1 MB/s)
 #24 7.337 Progress (2): 2.0/3.5 MB | 407/484 kB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar
 #24 7.337 Progress (2): 2.0/3.5 MB | 423/484 kB
 Progress (2): 2.0/3.5 MB | 439/484 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 16/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 33/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 48/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 64/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 81/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 97/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 113/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 130/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 146/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 162/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 179/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 195/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 212/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 228/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 244/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 261/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 277/372 kB
 Progress (3): 2.0/3.5 MB | 439/484 kB | 294/372 kB
 Progress (4): 2.0/3.5 MB | 439/484 kB | 294/372 kB | 0/1.0 MB
 Progress (4): 2.0/3.5 MB | 439/484 kB | 310/372 kB | 0/1.0 MB
 Progress (4): 2.0/3.5 MB | 439/484 kB | 326/372 kB | 0/1.0 MB
 Progress (4): 2.0/3.5 MB | 439/484 kB | 326/372 kB | 0/1.0 MB
 Progress (4): 2.0/3.5 MB | 439/484 kB | 343/372 kB | 0/1.0 MB
 Progress (4): 2.0/3.5 MB | 439/484 kB | 359/372 kB | 0/1.0 MB
 Progress (4): 2.0/3.5 MB | 439/484 kB | 359/372 kB | 0/1.0 MB
 Progress (4): 2.0/3.5 MB | 439/484 kB | 372 kB | 0/1.0 MB    
 Progress (4): 2.0/3.5 MB | 439/484 kB | 372 kB | 0.1/1.0 MB
 Progress (4): 2.0/3.5 MB | 456/484 kB | 372 kB | 0.1/1.0 MB
 Progress (4): 2.0/3.5 MB | 456/484 kB | 372 kB | 0.1/1.0 MB
 Progress (5): 2.0/3.5 MB | 456/484 kB | 372 kB | 0.1/1.0 MB | 16/47 kB
 Progress (5): 2.0/3.5 MB | 472/484 kB | 372 kB | 0.1/1.0 MB | 16/47 kB
 Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 16/47 kB    
 Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 33/47 kB
 Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 33/47 kB
 Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 47 kB   
 Progress (5): 2.0/3.5 MB | 484 kB | 372 kB | 0.1/1.0 MB | 47 kB
                                                                
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.jar (484 kB at 1.1 MB/s)
 #24 7.353 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar
 #24 7.353 Downloaded from central: https://repo.maven.apache.org/maven2/io/micrometer/micrometer-commons/1.12.2/micrometer-commons-1.12.2.jar (47 kB at 104 kB/s)
 #24 7.353 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/19.0/guava-19.0.jar
 #24 7.353 Progress (3): 2.0/3.5 MB | 372 kB | 0.1/1.0 MB
 Progress (3): 2.0/3.5 MB | 372 kB | 0.1/1.0 MB
 Progress (3): 2.0/3.5 MB | 372 kB | 0.1/1.0 MB
 Progress (3): 2.0/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.1/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.2/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.2/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.3/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.3/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.3/3.5 MB | 372 kB | 0.3/1.0 MB
 Progress (3): 2.3/3.5 MB | 372 kB | 0.4/1.0 MB
 Progress (3): 2.3/3.5 MB | 372 kB | 0.4/1.0 MB
 Progress (3): 2.3/3.5 MB | 372 kB | 0.4/1.0 MB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-core/3.3.4/docker-java-core-3.3.4.jar (372 kB at 818 kB/s)
 #24 7.353 Progress (2): 2.3/3.5 MB | 0.4/1.0 MB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk18on/1.76/bcpkix-jdk18on-1.76.jar
 #24 7.353 Progress (2): 2.3/3.5 MB | 0.4/1.0 MB
 Progress (2): 2.3/3.5 MB | 0.4/1.0 MB
 Progress (2): 2.3/3.5 MB | 0.4/1.0 MB
 Progress (2): 2.3/3.5 MB | 0.5/1.0 MB
 Progress (3): 2.3/3.5 MB | 0.5/1.0 MB | 16/632 kB
 Progress (3): 2.3/3.5 MB | 0.5/1.0 MB | 16/632 kB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 16/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 33/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 33/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 49/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 49/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 49/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 62/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 62/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 62/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 78/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 78/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.5/1.0 MB | 95/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 95/632 kB | 0/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 95/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 111/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 111/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 111/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 128/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 128/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 128/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 144/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 144/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 144/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 160/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 160/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 160/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.6/1.0 MB | 177/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 177/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 193/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 193/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 193/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 210/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 210/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 210/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 226/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 226/632 kB | 0.1/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 226/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 242/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 242/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 259/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 259/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 259/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.7/1.0 MB | 275/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 275/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
 Progress (4): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB
 Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.8/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.2/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 0.9/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.1/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0/1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB    
 Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.3/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.4/2.3 MB | 0.2/1.1 MB
 Progress (5): 2.3/3.5 MB | 1.0 MB | 291/632 kB | 0.4/2.3 MB | 0.2/1.1 MB
                                                                         
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar (1.0 MB at 2.2 MB/s)
 #24 7.353 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.2/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.3/1.1 MB
 Progress (4): 2.3/3.5 MB | 291/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 308/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 324/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 341/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 357/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 373/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 390/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 406/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 423/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 439/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 455/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
                                                                
 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk18on/1.76/bcprov-jdk18on-1.76.jar
 #24 7.357 Progress (4): 2.3/3.5 MB | 472/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 488/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 504/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 521/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 537/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 554/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 570/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 586/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 603/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 619/632 kB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (4): 2.3/3.5 MB | 632 kB | 0.4/2.3 MB | 0.4/1.1 MB    
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar (632 kB at 1.4 MB/s)
 #24 7.357 Progress (3): 2.3/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.3/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.3/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.3/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.4/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.5/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.6/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.7/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.7/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.7/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.7/3.5 MB | 0.4/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.7/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.5/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.8/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.6/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 2.9/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.7/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.0/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.8/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.4/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.5/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.6/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.7/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.8/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 0.9/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.0/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.1/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.1/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.1/1.1 MB
 Progress (3): 3.1/3.5 MB | 0.9/2.3 MB | 1.1 MB    
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk18on/1.76/bcpkix-jdk18on-1.76.jar (1.1 MB at 2.4 MB/s)
 #24 7.369 Downloading from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcutil-jdk18on/1.76/bcutil-jdk18on-1.76.jar
 #24 7.369 Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
 Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
 Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
 Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
 Progress (2): 3.1/3.5 MB | 0.9/2.3 MB
 Progress (2): 3.2/3.5 MB | 0.9/2.3 MB
 Progress (2): 3.2/3.5 MB | 0.9/2.3 MB
 Progress (2): 3.2/3.5 MB | 0.9/2.3 MB
 Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.2/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.0/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.3/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.1/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-jersey/3.3.4/docker-java-transport-jersey-3.3.4.jar
 #24 7.369 Progress (2): 3.4/3.5 MB | 1.2/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.3/2.3 MB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 16/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 33/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 33/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 49/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 49/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 64/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 80/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 97/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 97/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 113/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 113/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 129/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 146/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 146/677 kB
 Progress (3): 3.4/3.5 MB | 1.3/2.3 MB | 162/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 162/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 179/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 195/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 195/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 195/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 211/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 228/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 228/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 244/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 244/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 244/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 260/677 kB
 Progress (3): 3.4/3.5 MB | 1.4/2.3 MB | 277/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 277/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 277/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 293/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 293/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 310/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 310/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 326/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 326/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 342/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 342/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 359/677 kB
 Progress (3): 3.4/3.5 MB | 1.5/2.3 MB | 375/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 375/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 375/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 392/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 392/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 408/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 408/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 424/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 441/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 457/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 473/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 486/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 502/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 519/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 523/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 539/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 555/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 572/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 588/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 605/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 621/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 637/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 654/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 670/677 kB
 Progress (3): 3.4/3.5 MB | 1.6/2.3 MB | 677 kB    
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcutil-jdk18on/1.76/bcutil-jdk18on-1.76.jar (677 kB at 1.4 MB/s)
 #24 7.371 Progress (2): 3.4/3.5 MB | 1.6/2.3 MB
 Progress (2): 3.4/3.5 MB | 1.6/2.3 MB
 Progress (2): 3.5/3.5 MB | 1.6/2.3 MB
 Progress (2): 3.5/3.5 MB | 1.6/2.3 MB
 Progress (2): 3.5/3.5 MB | 1.6/2.3 MB
 Progress (2): 3.5/3.5 MB | 1.6/2.3 MB
 Progress (2): 3.5 MB | 1.6/2.3 MB    
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-core/10.1.18/tomcat-embed-core-10.1.18.jar (3.5 MB at 7.4 MB/s)
 #24 7.372 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.15.3/jackson-jaxrs-json-provider-2.15.3.jar
 #24 7.372 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.15.3/jackson-jaxrs-base-2.15.3.jar
 #24 7.372 Progress (2): 1.6/2.3 MB | 16/32 kB
 Progress (2): 1.6/2.3 MB | 32 kB   
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-jersey/3.3.4/docker-java-transport-jersey-3.3.4.jar (32 kB at 67 kB/s)
 #24 7.372 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.15.3/jackson-module-jaxb-annotations-2.15.3.jar
 #24 7.372 Progress (2): 1.6/2.3 MB | 0/8.4 MB
 Progress (2): 1.6/2.3 MB | 0/8.4 MB
 Progress (2): 1.6/2.3 MB | 0/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.1/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.1/8.4 MB
 Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 16/17 kB
 Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 17 kB   
 Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 17 kB
 Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 17 kB
 Progress (3): 1.6/2.3 MB | 0.1/8.4 MB | 17 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.15.3/jackson-jaxrs-json-provider-2.15.3.jar (17 kB at 35 kB/s)
 #24 7.375 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/jersey-apache-connector/3.1.5/jersey-apache-connector-3.1.5.jar
 #24 7.375 Progress (2): 1.6/2.3 MB | 0.1/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.2/8.4 MB
 Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 16/32 kB
 Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 16/32 kB
 Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 32 kB   
 Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 32 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.15.3/jackson-jaxrs-base-2.15.3.jar (32 kB at 67 kB/s)
 #24 7.375 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-common/3.1.5/jersey-common-3.1.5.jar
 #24 7.375 Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 16/37 kB
 Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 33/37 kB
 Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 37 kB   
 Progress (3): 1.6/2.3 MB | 0.2/8.4 MB | 37 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.15.3/jackson-module-jaxb-annotations-2.15.3.jar (37 kB at 76 kB/s)
 #24 7.375 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar
 #24 7.375 Progress (2): 1.6/2.3 MB | 0.2/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.2/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.3/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.4/8.4 MB
 Progress (2): 1.6/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.7/2.3 MB | 0.5/8.4 MB
 Progress (2): 1.8/2.3 MB | 0.5/8.4 MB
 Progress (3): 1.8/2.3 MB | 0.5/8.4 MB | 0/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.5/8.4 MB | 0/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.5/8.4 MB | 0/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.8/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 1.9/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.1/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 16/19 kB
 Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 19 kB   
 Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 19 kB
 Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 19 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar (19 kB at 40 kB/s)
 #24 7.381 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.jar
 #24 7.381 Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 16/48 kB
 Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 33/48 kB
 Progress (4): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB | 48 kB   
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/connectors/jersey-apache-connector/3.1.5/jersey-apache-connector-3.1.5.jar (48 kB at 100 kB/s)
 #24 7.381 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar
 #24 7.381 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.6/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.7/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
 Progress (3): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB
 Progress (4): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB | 16/328 kB
 Progress (4): 2.0/2.3 MB | 0.8/8.4 MB | 0.2/1.2 MB | 16/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 16/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 33/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 33/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 49/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 65/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 65/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 82/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 82/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 82/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 98/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 98/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 114/328 kB
 Progress (4): 2.0/2.3 MB | 0.9/8.4 MB | 0.2/1.2 MB | 131/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 131/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 147/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 147/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 164/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 164/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 180/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 180/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 196/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 196/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 213/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 229/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 229/328 kB
 Progress (4): 2.0/2.3 MB | 1.0/8.4 MB | 0.2/1.2 MB | 246/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 246/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 262/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 262/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 278/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 278/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 295/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 295/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 311/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 327/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 327/328 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 328 kB    
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.2/1.2 MB | 328 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar (328 kB at 671 kB/s)
 #24 7.384 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.jar
 #24 7.385 Progress (3): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 16/155 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 16/155 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 16/155 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 33/155 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 33/155 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 49/155 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 49/155 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 49/155 kB
 Progress (4): 2.0/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 63/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 63/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 63/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 63/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 80/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 80/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 80/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.3/1.2 MB | 96/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 96/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 96/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 113/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 113/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 113/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 129/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 129/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 129/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 145/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 145/155 kB
 Progress (4): 2.1/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB    
 Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
 Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
 Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
 Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
 Progress (4): 2.2/2.3 MB | 1.1/8.4 MB | 0.4/1.2 MB | 155 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.jar (155 kB at 315 kB/s)
 #24 7.389 Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.2/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.5/1.2 MB
 Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
 Progress (3): 2.3/2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
 Progress (3): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB    
 Progress (3): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
 Progress (3): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
 Progress (3): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB
                                               
 Downloading from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.jar
 #24 7.389 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 16/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 33/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 49/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 66/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 82/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 98/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 115/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 131/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 147/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 164/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 180/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 197/778 kB
 Progress (4): 2.3 MB | 1.1/8.4 MB | 0.6/1.2 MB | 213/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 213/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 229/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 229/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 246/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 246/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 262/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 279/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 295/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 311/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 311/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 328/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 328/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 344/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 348/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 348/778 kB
 Progress (4): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB
 Progress (5): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 16/361 kB
 Progress (5): 2.3 MB | 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 33/361 kB
                                                                        
 Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/19.0/guava-19.0.jar (2.3 MB at 4.6 MB/s)
 #24 7.395 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 49/361 kB
                                                               
 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-client/3.1.5/jersey-client-3.1.5.jar
 #24 7.395 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 63/361 kB
 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 79/361 kB
 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 365/778 kB | 79/361 kB
 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 381/778 kB | 79/361 kB
 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 381/778 kB | 96/361 kB
 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 381/778 kB | 96/361 kB
 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 393/778 kB | 96/361 kB
 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 393/778 kB | 112/361 kB
 Progress (4): 1.2/8.4 MB | 0.6/1.2 MB | 410/778 kB | 112/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 410/778 kB | 112/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 410/778 kB | 128/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 426/778 kB | 128/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 426/778 kB | 128/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 426/778 kB | 145/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 442/778 kB | 145/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 442/778 kB | 145/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 442/778 kB | 161/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 459/778 kB | 161/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 459/778 kB | 161/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 459/778 kB | 178/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 475/778 kB | 178/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 475/778 kB | 178/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 492/778 kB | 178/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 492/778 kB | 194/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 492/778 kB | 194/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 508/778 kB | 194/361 kB
 Progress (4): 1.2/8.4 MB | 0.7/1.2 MB | 508/778 kB | 210/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 508/778 kB | 210/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 508/778 kB | 227/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 524/778 kB | 227/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 524/778 kB | 227/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 524/778 kB | 243/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 541/778 kB | 243/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 541/778 kB | 243/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 557/778 kB | 243/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 557/778 kB | 260/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 557/778 kB | 260/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 573/778 kB | 260/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 573/778 kB | 276/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 573/778 kB | 276/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 590/778 kB | 276/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 590/778 kB | 292/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 590/778 kB | 292/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 606/778 kB | 292/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 606/778 kB | 309/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 606/778 kB | 309/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 623/778 kB | 309/361 kB
 Progress (4): 1.2/8.4 MB | 0.8/1.2 MB | 623/778 kB | 325/361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 623/778 kB | 325/361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 639/778 kB | 325/361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 639/778 kB | 341/361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 655/778 kB | 341/361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 655/778 kB | 341/361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 655/778 kB | 358/361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 655/778 kB | 361 kB    
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 672/778 kB | 361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 672/778 kB | 361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 688/778 kB | 361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 688/778 kB | 361 kB
 Progress (4): 1.2/8.4 MB | 0.9/1.2 MB | 704/778 kB | 361 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.jar (361 kB at 700 kB/s)
 #24 7.410 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/jersey-hk2/3.1.5/jersey-hk2-3.1.5.jar
 #24 7.410 Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 721/778 kB
 Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 721/778 kB
 Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 737/778 kB
 Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 741/778 kB
 Progress (3): 1.2/8.4 MB | 0.9/1.2 MB | 741/778 kB
 Progress (3): 1.3/8.4 MB | 0.9/1.2 MB | 741/778 kB
 Progress (3): 1.3/8.4 MB | 0.9/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.3/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.0/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
 Progress (3): 1.4/8.4 MB | 1.1/1.2 MB | 758/778 kB
 Progress (3): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB
 Progress (3): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB
 Progress (3): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB
 Progress (4): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 16/307 kB
 Progress (4): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 16/307 kB
 Progress (4): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 33/307 kB
 Progress (5): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 33/307 kB | 16/78 kB
 Progress (5): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 33/307 kB | 16/78 kB
 Progress (5): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 33/307 kB | 33/78 kB
 Progress (5): 1.5/8.4 MB | 1.1/1.2 MB | 758/778 kB | 49/307 kB | 33/78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 49/307 kB | 33/78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 63/307 kB | 33/78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 63/307 kB | 49/78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 80/307 kB | 49/78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 80/307 kB | 49/78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 96/307 kB | 49/78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 96/307 kB | 65/78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 96/307 kB | 65/78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 96/307 kB | 78 kB   
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 113/307 kB | 78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 113/307 kB | 78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 129/307 kB | 78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 129/307 kB | 78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 145/307 kB | 78 kB
 Progress (5): 1.5/8.4 MB | 1.2/1.2 MB | 758/778 kB | 145/307 kB | 78 kB
 Progress (5): 1.5/8.4 MB | 1.2 MB | 758/778 kB | 145/307 kB | 78 kB    
 Progress (5): 1.5/8.4 MB | 1.2 MB | 758/778 kB | 162/307 kB | 78 kB
 Progress (5): 1.5/8.4 MB | 1.2 MB | 758/778 kB | 178/307 kB | 78 kB
                                                                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/inject/jersey-hk2/3.1.5/jersey-hk2-3.1.5.jar (78 kB at 151 kB/s)
 #24 7.416 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-locator/3.0.5/hk2-locator-3.0.5.jar
 #24 7.416 Progress (4): 1.5/8.4 MB | 1.2 MB | 758/778 kB | 195/307 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-common/3.1.5/jersey-common-3.1.5.jar (1.2 MB at 2.4 MB/s)
 #24 7.416 Progress (3): 1.5/8.4 MB | 758/778 kB | 211/307 kB
                                                   
 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/3.0.5/aopalliance-repackaged-3.0.5.jar
 #24 7.416 Progress (3): 1.5/8.4 MB | 758/778 kB | 227/307 kB
 Progress (3): 1.5/8.4 MB | 758/778 kB | 244/307 kB
 Progress (3): 1.5/8.4 MB | 758/778 kB | 260/307 kB
 Progress (3): 1.5/8.4 MB | 758/778 kB | 260/307 kB
 Progress (3): 1.5/8.4 MB | 758/778 kB | 276/307 kB
 Progress (3): 1.5/8.4 MB | 758/778 kB | 276/307 kB
 Progress (3): 1.5/8.4 MB | 758/778 kB | 293/307 kB
 Progress (3): 1.5/8.4 MB | 758/778 kB | 293/307 kB
 Progress (3): 1.5/8.4 MB | 774/778 kB | 293/307 kB
 Progress (3): 1.5/8.4 MB | 774/778 kB | 307 kB    
 Progress (3): 1.5/8.4 MB | 774/778 kB | 307 kB
 Progress (3): 1.6/8.4 MB | 774/778 kB | 307 kB
 Progress (3): 1.6/8.4 MB | 774/778 kB | 307 kB
 Progress (3): 1.6/8.4 MB | 778 kB | 307 kB    
                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jersey/core/jersey-client/3.1.5/jersey-client-3.1.5.jar (307 kB at 587 kB/s)
 #24 7.421 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-api/3.0.5/hk2-api-3.0.5.jar
 #24 7.421 Progress (2): 1.6/8.4 MB | 778 kB
 Progress (2): 1.6/8.4 MB | 778 kB
 Progress (2): 1.6/8.4 MB | 778 kB
 Progress (2): 1.6/8.4 MB | 778 kB
 Progress (2): 1.7/8.4 MB | 778 kB
 Progress (2): 1.7/8.4 MB | 778 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.jar (778 kB at 1.5 MB/s)
 #24 7.422 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-utils/3.0.5/hk2-utils-3.0.5.jar
 #24 7.422 Progress (1): 1.7/8.4 MB
 Progress (1): 1.7/8.4 MB
 Progress (1): 1.7/8.4 MB
 Progress (1): 1.7/8.4 MB
 Progress (1): 1.8/8.4 MB
 Progress (1): 1.8/8.4 MB
 Progress (1): 1.8/8.4 MB
 Progress (1): 1.8/8.4 MB
 Progress (1): 1.8/8.4 MB
 Progress (2): 1.8/8.4 MB | 16/27 kB
 Progress (2): 1.8/8.4 MB | 16/27 kB
 Progress (2): 1.8/8.4 MB | 16/27 kB
 Progress (2): 1.8/8.4 MB | 27 kB   
 Progress (2): 1.9/8.4 MB | 27 kB
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/3.0.5/aopalliance-repackaged-3.0.5.jar (27 kB at 52 kB/s)
 #24 7.429 Downloading from central: https://repo.maven.apache.org/maven2/org/javassist/javassist/3.29.2-GA/javassist-3.29.2-GA.jar
 #24 7.429 Progress (2): 1.9/8.4 MB | 16/205 kB
 Progress (3): 1.9/8.4 MB | 16/205 kB | 0.7/207 kB
 Progress (3): 1.9/8.4 MB | 33/205 kB | 0.7/207 kB
 Progress (3): 1.9/8.4 MB | 49/205 kB | 0.7/207 kB
 Progress (3): 1.9/8.4 MB | 49/205 kB | 17/207 kB 
 Progress (3): 1.9/8.4 MB | 64/205 kB | 17/207 kB
 Progress (3): 1.9/8.4 MB | 81/205 kB | 17/207 kB
 Progress (3): 1.9/8.4 MB | 81/205 kB | 33/207 kB
 Progress (3): 1.9/8.4 MB | 97/205 kB | 33/207 kB
 Progress (3): 1.9/8.4 MB | 97/205 kB | 50/207 kB
 Progress (3): 1.9/8.4 MB | 97/205 kB | 66/207 kB
 Progress (3): 1.9/8.4 MB | 113/205 kB | 66/207 kB
 Progress (3): 1.9/8.4 MB | 113/205 kB | 83/207 kB
 Progress (4): 1.9/8.4 MB | 113/205 kB | 83/207 kB | 16/132 kB
 Progress (4): 1.9/8.4 MB | 113/205 kB | 99/207 kB | 16/132 kB
 Progress (4): 1.9/8.4 MB | 130/205 kB | 99/207 kB | 16/132 kB
 Progress (4): 1.9/8.4 MB | 130/205 kB | 99/207 kB | 33/132 kB
 Progress (4): 1.9/8.4 MB | 130/205 kB | 115/207 kB | 33/132 kB
 Progress (4): 1.9/8.4 MB | 146/205 kB | 115/207 kB | 33/132 kB
 Progress (4): 1.9/8.4 MB | 146/205 kB | 132/207 kB | 33/132 kB
 Progress (4): 1.9/8.4 MB | 146/205 kB | 132/207 kB | 49/132 kB
 Progress (4): 1.9/8.4 MB | 163/205 kB | 132/207 kB | 49/132 kB
 Progress (4): 1.9/8.4 MB | 163/205 kB | 148/207 kB | 49/132 kB
 Progress (4): 1.9/8.4 MB | 163/205 kB | 148/207 kB | 64/132 kB
 Progress (4): 1.9/8.4 MB | 163/205 kB | 164/207 kB | 64/132 kB
 Progress (4): 1.9/8.4 MB | 163/205 kB | 181/207 kB | 64/132 kB
 Progress (4): 1.9/8.4 MB | 163/205 kB | 181/207 kB | 81/132 kB
 Progress (4): 1.9/8.4 MB | 163/205 kB | 197/207 kB | 81/132 kB
 Progress (4): 1.9/8.4 MB | 179/205 kB | 197/207 kB | 81/132 kB
 Progress (4): 1.9/8.4 MB | 179/205 kB | 207 kB | 81/132 kB    
 Progress (4): 1.9/8.4 MB | 179/205 kB | 207 kB | 97/132 kB
 Progress (4): 1.9/8.4 MB | 195/205 kB | 207 kB | 97/132 kB
 Progress (4): 1.9/8.4 MB | 205 kB | 207 kB | 97/132 kB    
 Progress (4): 1.9/8.4 MB | 205 kB | 207 kB | 113/132 kB
 Progress (4): 1.9/8.4 MB | 205 kB | 207 kB | 130/132 kB
                                                        
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-api/3.0.5/hk2-api-3.0.5.jar (207 kB at 387 kB/s)
 #24 7.430 Progress (3): 1.9/8.4 MB | 205 kB | 132 kB
                                           
 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-common/2.6.1/junixsocket-common-2.6.1.jar
 #24 7.430 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-locator/3.0.5/hk2-locator-3.0.5.jar (205 kB at 384 kB/s)
 #24 7.430 Progress (3): 1.9/8.4 MB | 132 kB | 16/794 kB
                                              
 Downloading from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-native-common/2.6.1/junixsocket-native-common-2.6.1.jar
 #24 7.430 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/hk2/hk2-utils/3.0.5/hk2-utils-3.0.5.jar (132 kB at 247 kB/s)
 #24 7.430 Progress (2): 1.9/8.4 MB | 33/794 kB
                                     
 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-netty/3.3.4/docker-java-transport-netty-3.3.4.jar
 #24 7.431 Progress (2): 1.9/8.4 MB | 33/794 kB
 Progress (2): 1.9/8.4 MB | 49/794 kB
 Progress (2): 1.9/8.4 MB | 49/794 kB
 Progress (2): 1.9/8.4 MB | 49/794 kB
 Progress (2): 1.9/8.4 MB | 65/794 kB
 Progress (2): 1.9/8.4 MB | 65/794 kB
 Progress (2): 1.9/8.4 MB | 65/794 kB
 Progress (2): 1.9/8.4 MB | 82/794 kB
 Progress (2): 2.0/8.4 MB | 82/794 kB
 Progress (2): 2.0/8.4 MB | 98/794 kB
 Progress (2): 2.0/8.4 MB | 98/794 kB
 Progress (2): 2.0/8.4 MB | 98/794 kB
 Progress (2): 2.0/8.4 MB | 114/794 kB
 Progress (2): 2.0/8.4 MB | 114/794 kB
 Progress (2): 2.0/8.4 MB | 114/794 kB
 Progress (2): 2.0/8.4 MB | 131/794 kB
 Progress (2): 2.0/8.4 MB | 147/794 kB
 Progress (2): 2.0/8.4 MB | 147/794 kB
 Progress (2): 2.1/8.4 MB | 147/794 kB
 Progress (2): 2.1/8.4 MB | 163/794 kB
 Progress (2): 2.1/8.4 MB | 163/794 kB
 Progress (2): 2.1/8.4 MB | 180/794 kB
 Progress (2): 2.1/8.4 MB | 180/794 kB
 Progress (2): 2.1/8.4 MB | 196/794 kB
 Progress (2): 2.1/8.4 MB | 196/794 kB
 Progress (2): 2.1/8.4 MB | 213/794 kB
 Progress (2): 2.1/8.4 MB | 213/794 kB
 Progress (2): 2.1/8.4 MB | 229/794 kB
 Progress (2): 2.1/8.4 MB | 245/794 kB
 Progress (2): 2.1/8.4 MB | 262/794 kB
 Progress (2): 2.1/8.4 MB | 278/794 kB
 Progress (2): 2.1/8.4 MB | 295/794 kB
 Progress (2): 2.1/8.4 MB | 311/794 kB
 Progress (2): 2.1/8.4 MB | 327/794 kB
 Progress (2): 2.1/8.4 MB | 344/794 kB
 Progress (3): 2.1/8.4 MB | 344/794 kB | 15/433 kB
 Progress (3): 2.1/8.4 MB | 360/794 kB | 15/433 kB
 Progress (3): 2.1/8.4 MB | 360/794 kB | 31/433 kB
 Progress (3): 2.1/8.4 MB | 376/794 kB | 31/433 kB
 Progress (3): 2.1/8.4 MB | 393/794 kB | 31/433 kB
 Progress (3): 2.1/8.4 MB | 393/794 kB | 48/433 kB
 Progress (3): 2.1/8.4 MB | 409/794 kB | 48/433 kB
 Progress (4): 2.1/8.4 MB | 409/794 kB | 48/433 kB | 16/44 kB
 Progress (4): 2.1/8.4 MB | 409/794 kB | 64/433 kB | 16/44 kB
 Progress (4): 2.1/8.4 MB | 426/794 kB | 64/433 kB | 16/44 kB
 Progress (4): 2.1/8.4 MB | 426/794 kB | 81/433 kB | 16/44 kB
 Progress (4): 2.1/8.4 MB | 442/794 kB | 81/433 kB | 16/44 kB
 Progress (4): 2.1/8.4 MB | 442/794 kB | 81/433 kB | 33/44 kB
 Progress (4): 2.1/8.4 MB | 442/794 kB | 97/433 kB | 33/44 kB
 Progress (4): 2.1/8.4 MB | 458/794 kB | 97/433 kB | 33/44 kB
 Progress (4): 2.1/8.4 MB | 458/794 kB | 97/433 kB | 44 kB   
 Progress (4): 2.1/8.4 MB | 458/794 kB | 113/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 475/794 kB | 113/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 491/794 kB | 113/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 491/794 kB | 130/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 508/794 kB | 130/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 508/794 kB | 146/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 524/794 kB | 146/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 524/794 kB | 162/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 540/794 kB | 162/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 540/794 kB | 179/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 557/794 kB | 179/433 kB | 44 kB
 Progress (4): 2.1/8.4 MB | 557/794 kB | 195/433 kB | 44 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-netty/3.3.4/docker-java-transport-netty-3.3.4.jar (44 kB at 80 kB/s)
 #24 7.445 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-http/4.1.105.Final/netty-codec-http-4.1.105.Final.jar
 #24 7.445 Progress (3): 2.1/8.4 MB | 573/794 kB | 195/433 kB
 Progress (3): 2.1/8.4 MB | 573/794 kB | 212/433 kB
 Progress (3): 2.1/8.4 MB | 589/794 kB | 212/433 kB
 Progress (3): 2.1/8.4 MB | 589/794 kB | 228/433 kB
 Progress (3): 2.1/8.4 MB | 606/794 kB | 228/433 kB
 Progress (3): 2.1/8.4 MB | 606/794 kB | 244/433 kB
 Progress (3): 2.1/8.4 MB | 622/794 kB | 244/433 kB
 Progress (3): 2.1/8.4 MB | 622/794 kB | 261/433 kB
 Progress (3): 2.1/8.4 MB | 639/794 kB | 261/433 kB
 Progress (3): 2.1/8.4 MB | 639/794 kB | 277/433 kB
 Progress (3): 2.1/8.4 MB | 655/794 kB | 277/433 kB
 Progress (3): 2.1/8.4 MB | 655/794 kB | 293/433 kB
 Progress (3): 2.1/8.4 MB | 671/794 kB | 293/433 kB
 Progress (3): 2.1/8.4 MB | 671/794 kB | 310/433 kB
 Progress (3): 2.1/8.4 MB | 688/794 kB | 310/433 kB
 Progress (3): 2.1/8.4 MB | 688/794 kB | 326/433 kB
 Progress (3): 2.1/8.4 MB | 688/794 kB | 343/433 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 16/684 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 33/684 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 49/684 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 66/684 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 82/684 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 98/684 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 115/684 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 131/684 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 147/684 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 147/684 kB | 16/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 164/684 kB | 16/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 164/684 kB | 33/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 180/684 kB | 33/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 180/684 kB | 49/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 197/684 kB | 49/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 197/684 kB | 62/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 213/684 kB | 62/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 213/684 kB | 79/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 229/684 kB | 79/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 229/684 kB | 95/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 246/684 kB | 95/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 246/684 kB | 111/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 262/684 kB | 111/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 262/684 kB | 128/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 279/684 kB | 128/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 279/684 kB | 144/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 295/684 kB | 144/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 295/684 kB | 161/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 311/684 kB | 161/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 311/684 kB | 177/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 328/684 kB | 177/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 328/684 kB | 193/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 344/684 kB | 193/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 344/684 kB | 210/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 360/684 kB | 210/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 360/684 kB | 226/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 377/684 kB | 226/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 377/684 kB | 243/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 393/684 kB | 243/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 393/684 kB | 259/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 410/684 kB | 259/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 410/684 kB | 275/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 426/684 kB | 275/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 426/684 kB | 292/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 442/684 kB | 292/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 442/684 kB | 308/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 459/684 kB | 308/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 459/684 kB | 324/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 475/684 kB | 324/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 475/684 kB | 341/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 492/684 kB | 341/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 492/684 kB | 357/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 508/684 kB | 357/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 508/684 kB | 374/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 343/433 kB | 508/684 kB | 390/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 359/433 kB | 508/684 kB | 390/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 375/433 kB | 508/684 kB | 390/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 375/433 kB | 508/684 kB | 406/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 392/433 kB | 508/684 kB | 406/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 392/433 kB | 508/684 kB | 423/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 408/433 kB | 508/684 kB | 423/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 408/433 kB | 508/684 kB | 439/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 425/433 kB | 508/684 kB | 439/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 425/433 kB | 508/684 kB | 455/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 433 kB | 508/684 kB | 455/665 kB    
 Progress (5): 2.1/8.4 MB | 688/794 kB | 433 kB | 508/684 kB | 472/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 433 kB | 508/684 kB | 488/665 kB
 Progress (5): 2.1/8.4 MB | 688/794 kB | 433 kB | 508/684 kB | 505/665 kB
                                                                         
 Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-common/2.6.1/junixsocket-common-2.6.1.jar (433 kB at 754 kB/s)
 #24 7.471 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-common/4.1.105.Final/netty-common-4.1.105.Final.jar
 #24 7.471 Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 521/665 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 537/665 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 554/665 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 570/665 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 570/665 kB
 Progress (4): 2.1/8.4 MB | 688/794 kB | 508/684 kB | 587/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 587/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 603/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 603/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 619/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 619/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 636/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 636/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 652/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 652/665 kB
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 665 kB    
 Progress (4): 2.2/8.4 MB | 688/794 kB | 508/684 kB | 665 kB
 Progress (4): 2.3/8.4 MB | 688/794 kB | 508/684 kB | 665 kB
 Progress (4): 2.3/8.4 MB | 688/794 kB | 508/684 kB | 665 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-http/4.1.105.Final/netty-codec-http-4.1.105.Final.jar (665 kB at 1.2 MB/s)
 #24 7.473 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-buffer/4.1.105.Final/netty-buffer-4.1.105.Final.jar
 #24 7.473 Progress (3): 2.3/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.3/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.3/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.3/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.4/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.5/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.6/8.4 MB | 688/794 kB | 508/684 kB
 Progress (3): 2.7/8.4 MB | 688/794 kB | 508/684 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 508/684 kB | 16/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 508/684 kB | 33/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 508/684 kB | 49/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 508/684 kB | 62/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 524/684 kB | 62/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 524/684 kB | 78/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 541/684 kB | 78/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 541/684 kB | 95/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 557/684 kB | 95/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 557/684 kB | 111/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 573/684 kB | 111/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 573/684 kB | 128/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 590/684 kB | 128/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 590/684 kB | 144/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 606/684 kB | 144/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 606/684 kB | 160/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 623/684 kB | 160/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 623/684 kB | 177/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 639/684 kB | 177/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 639/684 kB | 193/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 655/684 kB | 193/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 655/684 kB | 209/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 672/684 kB | 209/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 672/684 kB | 226/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 684 kB | 226/308 kB    
 Progress (4): 2.7/8.4 MB | 688/794 kB | 684 kB | 242/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 684 kB | 259/308 kB
 Progress (4): 2.7/8.4 MB | 688/794 kB | 684 kB | 275/308 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/com/kohlschutter/junixsocket/junixsocket-native-common/2.6.1/junixsocket-native-common-2.6.1.jar (684 kB at 1.2 MB/s)
 #24 7.483 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport/4.1.105.Final/netty-transport-4.1.105.Final.jar
 #24 7.483 Progress (3): 2.7/8.4 MB | 688/794 kB | 291/308 kB
 Progress (3): 2.7/8.4 MB | 688/794 kB | 308 kB    
 Progress (3): 2.7/8.4 MB | 688/794 kB | 308 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-buffer/4.1.105.Final/netty-buffer-4.1.105.Final.jar (308 kB at 524 kB/s)
 #24 7.483 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec/4.1.105.Final/netty-codec-4.1.105.Final.jar
 #24 7.483 Progress (2): 2.7/8.4 MB | 704/794 kB
 Progress (2): 2.7/8.4 MB | 720/794 kB
 Progress (2): 2.7/8.4 MB | 737/794 kB
 Progress (2): 2.7/8.4 MB | 753/794 kB
 Progress (2): 2.7/8.4 MB | 770/794 kB
 Progress (2): 2.7/8.4 MB | 786/794 kB
 Progress (3): 2.7/8.4 MB | 786/794 kB | 16/661 kB
 Progress (3): 2.7/8.4 MB | 794 kB | 16/661 kB    
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/org/javassist/javassist/3.29.2-GA/javassist-3.29.2-GA.jar (794 kB at 1.4 MB/s)
 #24 7.485 Progress (2): 2.7/8.4 MB | 32/661 kB
                                     
 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler/4.1.105.Final/netty-handler-4.1.105.Final.jar
 #24 7.485 Progress (2): 2.7/8.4 MB | 49/661 kB
 Progress (2): 2.7/8.4 MB | 65/661 kB
 Progress (2): 2.7/8.4 MB | 80/661 kB
 Progress (2): 2.7/8.4 MB | 96/661 kB
 Progress (2): 2.7/8.4 MB | 112/661 kB
 Progress (2): 2.7/8.4 MB | 129/661 kB
 Progress (2): 2.7/8.4 MB | 145/661 kB
 Progress (2): 2.7/8.4 MB | 162/661 kB
 Progress (2): 2.7/8.4 MB | 178/661 kB
 Progress (2): 2.7/8.4 MB | 194/661 kB
 Progress (2): 2.7/8.4 MB | 211/661 kB
 Progress (2): 2.7/8.4 MB | 227/661 kB
 Progress (2): 2.7/8.4 MB | 244/661 kB
 Progress (2): 2.7/8.4 MB | 260/661 kB
 Progress (2): 2.7/8.4 MB | 276/661 kB
 Progress (2): 2.7/8.4 MB | 293/661 kB
 Progress (2): 2.7/8.4 MB | 309/661 kB
 Progress (2): 2.7/8.4 MB | 325/661 kB
 Progress (2): 2.7/8.4 MB | 342/661 kB
 Progress (2): 2.7/8.4 MB | 358/661 kB
 Progress (2): 2.7/8.4 MB | 375/661 kB
 Progress (2): 2.7/8.4 MB | 391/661 kB
 Progress (2): 2.7/8.4 MB | 407/661 kB
 Progress (2): 2.7/8.4 MB | 424/661 kB
 Progress (2): 2.7/8.4 MB | 440/661 kB
 Progress (2): 2.7/8.4 MB | 457/661 kB
 Progress (2): 2.7/8.4 MB | 473/661 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 16/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 33/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 49/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 64/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 64/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 80/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 80/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 97/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 97/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 113/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 129/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 129/497 kB
 Progress (3): 2.7/8.4 MB | 473/661 kB | 146/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 146/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 162/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 162/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 179/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 179/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 195/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 195/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 211/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 211/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 211/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 228/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 228/497 kB
 Progress (3): 2.8/8.4 MB | 473/661 kB | 244/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 244/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 261/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 261/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 277/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 277/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 293/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 293/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 310/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 310/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 326/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 326/497 kB
 Progress (3): 2.9/8.4 MB | 473/661 kB | 342/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 342/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 359/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 359/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 359/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 375/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 375/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 392/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 392/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 392/497 kB
 Progress (3): 3.0/8.4 MB | 473/661 kB | 408/497 kB
 Progress (3): 3.1/8.4 MB | 473/661 kB | 408/497 kB
 Progress (3): 3.1/8.4 MB | 473/661 kB | 424/497 kB
 Progress (3): 3.1/8.4 MB | 473/661 kB | 424/497 kB
 Progress (3): 3.1/8.4 MB | 473/661 kB | 441/497 kB
 Progress (3): 3.1/8.4 MB | 473/661 kB | 441/497 kB
 Progress (3): 3.1/8.4 MB | 473/661 kB | 457/497 kB
 Progress (3): 3.1/8.4 MB | 473/661 kB | 457/497 kB
 Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 16/345 kB
 Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 33/345 kB
 Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 49/345 kB
 Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 66/345 kB
 Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 82/345 kB
 Progress (4): 3.1/8.4 MB | 473/661 kB | 457/497 kB | 98/345 kB
 Progress (4): 3.1/8.4 MB | 489/661 kB | 457/497 kB | 98/345 kB
 Progress (4): 3.1/8.4 MB | 489/661 kB | 457/497 kB | 115/345 kB
 Progress (4): 3.1/8.4 MB | 506/661 kB | 457/497 kB | 115/345 kB
 Progress (4): 3.1/8.4 MB | 506/661 kB | 457/497 kB | 131/345 kB
 Progress (4): 3.1/8.4 MB | 522/661 kB | 457/497 kB | 131/345 kB
 Progress (4): 3.1/8.4 MB | 522/661 kB | 457/497 kB | 147/345 kB
 Progress (4): 3.1/8.4 MB | 538/661 kB | 457/497 kB | 147/345 kB
 Progress (4): 3.1/8.4 MB | 538/661 kB | 457/497 kB | 164/345 kB
 Progress (4): 3.1/8.4 MB | 555/661 kB | 457/497 kB | 164/345 kB
 Progress (4): 3.1/8.4 MB | 555/661 kB | 457/497 kB | 180/345 kB
 Progress (4): 3.1/8.4 MB | 571/661 kB | 457/497 kB | 180/345 kB
 Progress (4): 3.1/8.4 MB | 571/661 kB | 457/497 kB | 197/345 kB
 Progress (4): 3.1/8.4 MB | 588/661 kB | 457/497 kB | 197/345 kB
 Progress (4): 3.1/8.4 MB | 588/661 kB | 457/497 kB | 213/345 kB
 Progress (4): 3.1/8.4 MB | 604/661 kB | 457/497 kB | 213/345 kB
 Progress (4): 3.1/8.4 MB | 604/661 kB | 457/497 kB | 229/345 kB
 Progress (4): 3.1/8.4 MB | 620/661 kB | 457/497 kB | 229/345 kB
 Progress (4): 3.1/8.4 MB | 620/661 kB | 457/497 kB | 246/345 kB
 Progress (4): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 246/345 kB
 Progress (4): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 262/345 kB
 Progress (4): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 16/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 33/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 49/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 64/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 80/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 97/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 113/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 129/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 146/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 162/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 178/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 195/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 211/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 279/345 kB | 228/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 295/345 kB | 228/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 295/345 kB | 228/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 311/345 kB | 228/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 311/345 kB | 228/562 kB
 Progress (5): 3.1/8.4 MB | 637/661 kB | 457/497 kB | 328/345 kB | 228/562 kB
 Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 328/345 kB | 228/562 kB
 Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 328/345 kB | 228/562 kB
 Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 344/345 kB | 228/562 kB
 Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB    
 Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB
 Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB
 Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB
 Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 228/562 kB
 Progress (5): 3.2/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 244/562 kB
 Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 244/562 kB
 Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 244/562 kB
 Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 244/562 kB
 Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 260/562 kB
 Progress (5): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 345 kB | 260/562 kB
                                                                         
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec/4.1.105.Final/netty-codec-4.1.105.Final.jar (345 kB at 568 kB/s)
 #24 7.504 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-resolver/4.1.105.Final/netty-resolver-4.1.105.Final.jar
 #24 7.504 Progress (4): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 260/562 kB
 Progress (4): 3.3/8.4 MB | 637/661 kB | 457/497 kB | 260/562 kB
 Progress (4): 3.3/8.4 MB | 653/661 kB | 457/497 kB | 260/562 kB
 Progress (4): 3.3/8.4 MB | 661 kB | 457/497 kB | 260/562 kB    
 Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 260/562 kB
 Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 277/562 kB
 Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 277/562 kB
 Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 293/562 kB
 Progress (4): 3.4/8.4 MB | 661 kB | 457/497 kB | 293/562 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-common/4.1.105.Final/netty-common-4.1.105.Final.jar (661 kB at 1.1 MB/s)
 #24 7.504 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-unix-common/4.1.105.Final/netty-transport-native-unix-common-4.1.105.Final.jar
 #24 7.504 Progress (3): 3.4/8.4 MB | 457/497 kB | 293/562 kB
 Progress (3): 3.4/8.4 MB | 457/497 kB | 293/562 kB
 Progress (3): 3.4/8.4 MB | 457/497 kB | 310/562 kB
 Progress (3): 3.4/8.4 MB | 457/497 kB | 310/562 kB
 Progress (3): 3.4/8.4 MB | 457/497 kB | 326/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 326/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 342/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 342/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 359/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 359/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 359/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 375/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 375/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 391/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 391/562 kB
 Progress (3): 3.5/8.4 MB | 457/497 kB | 408/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 408/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 424/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 424/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 441/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 441/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 457/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 457/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 473/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 473/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 473/562 kB
 Progress (3): 3.6/8.4 MB | 457/497 kB | 490/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 490/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 506/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 506/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 523/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 523/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 539/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 539/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 555/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 555/562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 562 kB    
 Progress (3): 3.7/8.4 MB | 457/497 kB | 562 kB
 Progress (3): 3.7/8.4 MB | 457/497 kB | 562 kB
 Progress (3): 3.8/8.4 MB | 457/497 kB | 562 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler/4.1.105.Final/netty-handler-4.1.105.Final.jar (562 kB at 916 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler-proxy/4.1.105.Final/netty-handler-proxy-4.1.105.Final.jar
 #24 7.512 Progress (3): 3.8/8.4 MB | 457/497 kB | 16/38 kB
 Progress (3): 3.8/8.4 MB | 457/497 kB | 33/38 kB
 Progress (3): 3.8/8.4 MB | 457/497 kB | 38 kB   
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-resolver/4.1.105.Final/netty-resolver-4.1.105.Final.jar (38 kB at 62 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-socks/4.1.105.Final/netty-codec-socks-4.1.105.Final.jar
 #24 7.512 Progress (3): 3.8/8.4 MB | 457/497 kB | 16/44 kB
 Progress (3): 3.8/8.4 MB | 457/497 kB | 33/44 kB
 Progress (3): 3.8/8.4 MB | 457/497 kB | 44 kB   
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-unix-common/4.1.105.Final/netty-transport-native-unix-common-4.1.105.Final.jar (44 kB at 72 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-epoll/4.1.105.Final/netty-transport-native-epoll-4.1.105.Final-linux-x86_64.jar
 #24 7.512 Progress (2): 3.8/8.4 MB | 457/497 kB
 Progress (2): 3.8/8.4 MB | 457/497 kB
 Progress (2): 3.8/8.4 MB | 457/497 kB
 Progress (2): 3.8/8.4 MB | 474/497 kB
 Progress (2): 3.8/8.4 MB | 490/497 kB
 Progress (2): 3.8/8.4 MB | 490/497 kB
 Progress (2): 3.8/8.4 MB | 497 kB    
 Progress (2): 3.8/8.4 MB | 497 kB
 Progress (2): 3.9/8.4 MB | 497 kB
 Progress (3): 3.9/8.4 MB | 497 kB | 16/26 kB
 Progress (3): 3.9/8.4 MB | 497 kB | 16/26 kB
 Progress (3): 3.9/8.4 MB | 497 kB | 26 kB   
                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport/4.1.105.Final/netty-transport-4.1.105.Final.jar (497 kB at 809 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-epoll/4.1.105.Final/netty-transport-classes-epoll-4.1.105.Final.jar
 #24 7.512 Progress (2): 3.9/8.4 MB | 26 kB
 Progress (2): 3.9/8.4 MB | 26 kB
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-handler-proxy/4.1.105.Final/netty-handler-proxy-4.1.105.Final.jar (26 kB at 42 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-kqueue/4.1.105.Final/netty-transport-native-kqueue-4.1.105.Final-osx-x86_64.jar
 #24 7.512 Progress (1): 3.9/8.4 MB
 Progress (1): 3.9/8.4 MB
 Progress (1): 4.0/8.4 MB
 Progress (1): 4.0/8.4 MB
 Progress (1): 4.0/8.4 MB
 Progress (1): 4.0/8.4 MB
 Progress (1): 4.0/8.4 MB
 Progress (1): 4.0/8.4 MB
 Progress (1): 4.1/8.4 MB
 Progress (1): 4.1/8.4 MB
 Progress (1): 4.1/8.4 MB
 Progress (1): 4.1/8.4 MB
 Progress (1): 4.1/8.4 MB
 Progress (2): 4.1/8.4 MB | 16/121 kB
 Progress (2): 4.1/8.4 MB | 16/121 kB
 Progress (2): 4.2/8.4 MB | 16/121 kB
 Progress (2): 4.2/8.4 MB | 16/121 kB
 Progress (2): 4.2/8.4 MB | 16/121 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 16/40 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 16/40 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 33/40 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 40 kB   
 Progress (3): 4.2/8.4 MB | 16/121 kB | 40 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 40 kB
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-epoll/4.1.105.Final/netty-transport-native-epoll-4.1.105.Final-linux-x86_64.jar (40 kB at 65 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-kqueue/4.1.105.Final/netty-transport-classes-kqueue-4.1.105.Final.jar
 #24 7.512 Progress (3): 4.2/8.4 MB | 16/121 kB | 16/25 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 25 kB   
 Progress (4): 4.2/8.4 MB | 16/121 kB | 25 kB | 15/147 kB
                                                         
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-native-kqueue/4.1.105.Final/netty-transport-native-kqueue-4.1.105.Final-osx-x86_64.jar (25 kB at 41 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/2.0.11/jcl-over-slf4j-2.0.11.jar
 #24 7.512 Progress (3): 4.2/8.4 MB | 16/121 kB | 31/147 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 48/147 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 64/147 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 80/147 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 97/147 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 113/147 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 130/147 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 146/147 kB
 Progress (3): 4.2/8.4 MB | 16/121 kB | 147 kB    
 Progress (3): 4.2/8.4 MB | 32/121 kB | 147 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-epoll/4.1.105.Final/netty-transport-classes-epoll-4.1.105.Final.jar (147 kB at 239 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-httpclient5/3.3.4/docker-java-transport-httpclient5-3.3.4.jar
 #24 7.512 Progress (2): 4.3/8.4 MB | 32/121 kB
 Progress (2): 4.3/8.4 MB | 32/121 kB
 Progress (2): 4.3/8.4 MB | 32/121 kB
 Progress (2): 4.3/8.4 MB | 32/121 kB
 Progress (2): 4.3/8.4 MB | 32/121 kB
 Progress (2): 4.3/8.4 MB | 32/121 kB
 Progress (3): 4.3/8.4 MB | 32/121 kB | 16/18 kB
 Progress (3): 4.3/8.4 MB | 32/121 kB | 18 kB   
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/2.0.11/jcl-over-slf4j-2.0.11.jar (18 kB at 30 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar
 #24 7.512 Progress (2): 4.3/8.4 MB | 49/121 kB
 Progress (2): 4.3/8.4 MB | 65/121 kB
 Progress (2): 4.4/8.4 MB | 65/121 kB
 Progress (2): 4.4/8.4 MB | 81/121 kB
 Progress (2): 4.4/8.4 MB | 81/121 kB
 Progress (2): 4.4/8.4 MB | 98/121 kB
 Progress (2): 4.4/8.4 MB | 98/121 kB
 Progress (2): 4.4/8.4 MB | 114/121 kB
 Progress (2): 4.4/8.4 MB | 114/121 kB
 Progress (2): 4.4/8.4 MB | 121 kB    
 Progress (2): 4.4/8.4 MB | 121 kB
 Progress (2): 4.4/8.4 MB | 121 kB
 Progress (2): 4.5/8.4 MB | 121 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-codec-socks/4.1.105.Final/netty-codec-socks-4.1.105.Final.jar (121 kB at 197 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar
 #24 7.512 Progress (2): 4.5/8.4 MB | 16/109 kB
 Progress (2): 4.5/8.4 MB | 33/109 kB
 Progress (2): 4.5/8.4 MB | 49/109 kB
 Progress (2): 4.5/8.4 MB | 66/109 kB
 Progress (2): 4.5/8.4 MB | 82/109 kB
 Progress (2): 4.5/8.4 MB | 98/109 kB
 Progress (2): 4.5/8.4 MB | 109 kB   
 Progress (3): 4.5/8.4 MB | 109 kB | 16/38 kB
 Progress (3): 4.5/8.4 MB | 109 kB | 33/38 kB
 Progress (3): 4.5/8.4 MB | 109 kB | 38 kB   
                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/io/netty/netty-transport-classes-kqueue/4.1.105.Final/netty-transport-classes-kqueue-4.1.105.Final.jar (109 kB at 176 kB/s)
 #24 7.512 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar (38 kB at 61 kB/s)
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.jar
 #24 7.512 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.jar
 #24 7.512 Progress (2): 4.5/8.4 MB | 16/18 kB
 Progress (2): 4.5/8.4 MB | 18 kB   
 Progress (2): 4.5/8.4 MB | 18 kB
 Progress (2): 4.5/8.4 MB | 18 kB
 Progress (2): 4.5/8.4 MB | 18 kB
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/com/github/docker-java/docker-java-transport-httpclient5/3.3.4/docker-java-transport-httpclient5-3.3.4.jar (18 kB at 28 kB/s)
 #24 7.512 Progress (1): 4.5/8.4 MB
                         
 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.jar
 #24 7.512 Progress (1): 4.5/8.4 MB
 Progress (1): 4.6/8.4 MB
 Progress (1): 4.6/8.4 MB
 Progress (1): 4.6/8.4 MB
 Progress (1): 4.6/8.4 MB
 Progress (1): 4.6/8.4 MB
 Progress (1): 4.6/8.4 MB
 Progress (1): 4.7/8.4 MB
 Progress (1): 4.7/8.4 MB
 Progress (2): 4.7/8.4 MB | 16/862 kB
 Progress (2): 4.7/8.4 MB | 33/862 kB
 Progress (2): 4.7/8.4 MB | 49/862 kB
 Progress (3): 4.7/8.4 MB | 49/862 kB | 16/855 kB
 Progress (3): 4.7/8.4 MB | 49/862 kB | 33/855 kB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 33/855 kB | 0/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 49/855 kB | 0/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 49/855 kB | 0/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 49/855 kB | 0/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 64/855 kB | 0/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 64/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 64/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 81/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 81/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 97/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 97/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 114/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 114/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 130/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 146/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 146/855 kB | 0.1/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 146/855 kB | 0.2/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 163/855 kB | 0.2/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 179/855 kB | 0.2/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 179/855 kB | 0.2/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 179/855 kB | 0.2/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 179/855 kB | 0.2/1.9 MB
 Progress (4): 4.7/8.4 MB | 49/862 kB | 195/855 kB | 0.2/1.9 MB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 195/855 kB | 0.2/1.9 MB | 16/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 195/855 kB | 0.2/1.9 MB | 16/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 212/855 kB | 0.2/1.9 MB | 16/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 212/855 kB | 0.2/1.9 MB | 33/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 228/855 kB | 0.2/1.9 MB | 33/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 228/855 kB | 0.2/1.9 MB | 33/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 228/855 kB | 0.2/1.9 MB | 49/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.2/1.9 MB | 49/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 49/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 64/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 64/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 80/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 80/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 97/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 113/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 130/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 146/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 162/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 179/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 195/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 211/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 245/855 kB | 0.3/1.9 MB | 228/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 261/855 kB | 0.3/1.9 MB | 228/237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 261/855 kB | 0.3/1.9 MB | 237 kB    
 Progress (5): 4.7/8.4 MB | 49/862 kB | 277/855 kB | 0.3/1.9 MB | 237 kB
 Progress (5): 4.7/8.4 MB | 49/862 kB | 294/855 kB | 0.3/1.9 MB | 237 kB
                                                                        
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.jar (237 kB at 373 kB/s)
 #24 7.533 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/2.0.11/slf4j-api-2.0.11.jar
 #24 7.533 Progress (4): 4.7/8.4 MB | 64/862 kB | 294/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 81/862 kB | 294/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 97/862 kB | 294/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 97/862 kB | 310/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 113/862 kB | 310/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 130/862 kB | 310/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 146/862 kB | 310/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 162/862 kB | 310/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 179/862 kB | 310/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 179/862 kB | 327/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 195/862 kB | 327/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 212/862 kB | 327/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 228/862 kB | 327/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 228/862 kB | 343/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 244/862 kB | 343/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 261/862 kB | 343/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 277/862 kB | 343/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 294/862 kB | 343/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 294/862 kB | 359/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 310/862 kB | 359/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 326/862 kB | 359/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 343/862 kB | 359/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 343/862 kB | 376/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 359/862 kB | 376/855 kB | 0.3/1.9 MB
 Progress (4): 4.7/8.4 MB | 375/862 kB | 376/855 kB | 0.3/1.9 MB
 Progress (5): 4.7/8.4 MB | 375/862 kB | 376/855 kB | 0.3/1.9 MB | 16/68 kB
 Progress (5): 4.7/8.4 MB | 392/862 kB | 376/855 kB | 0.3/1.9 MB | 16/68 kB
 Progress (5): 4.7/8.4 MB | 392/862 kB | 376/855 kB | 0.3/1.9 MB | 33/68 kB
 Progress (5): 4.7/8.4 MB | 408/862 kB | 376/855 kB | 0.3/1.9 MB | 33/68 kB
 Progress (5): 4.7/8.4 MB | 408/862 kB | 392/855 kB | 0.3/1.9 MB | 33/68 kB
 Progress (5): 4.7/8.4 MB | 408/862 kB | 392/855 kB | 0.3/1.9 MB | 49/68 kB
 Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 49/68 kB
 Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 66/68 kB
 Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 68 kB   
 Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 68 kB
 Progress (5): 4.7/8.4 MB | 425/862 kB | 392/855 kB | 0.3/1.9 MB | 68 kB
 Progress (5): 4.7/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB | 68 kB
 Progress (5): 4.7/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB | 68 kB
 Progress (5): 4.7/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB | 68 kB
                                                                        
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/2.0.11/slf4j-api-2.0.11.jar (68 kB at 107 kB/s)
 #24 7.533 Progress (4): 4.7/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB
                                                                
 Downloading from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar
 #24 7.533 Progress (4): 4.8/8.4 MB | 425/862 kB | 408/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 425/862 kB | 425/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 425/862 kB | 425/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 425/862 kB | 441/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 425/862 kB | 441/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 425/862 kB | 458/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 425/862 kB | 458/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 425/862 kB | 458/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 425/862 kB | 474/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 425/862 kB | 474/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 441/862 kB | 474/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 441/862 kB | 490/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 441/862 kB | 490/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 441/862 kB | 507/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 457/862 kB | 507/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 507/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 523/855 kB | 0.3/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 523/855 kB | 0.4/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 540/855 kB | 0.4/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 540/855 kB | 0.4/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 556/855 kB | 0.4/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 556/855 kB | 0.4/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 556/855 kB | 0.4/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 556/855 kB | 0.4/1.9 MB
 Progress (4): 4.8/8.4 MB | 474/862 kB | 572/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 572/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 572/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 572/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 589/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 589/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 589/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 605/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 605/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 605/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 621/855 kB | 0.4/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 621/855 kB | 0.5/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 621/855 kB | 0.5/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 638/855 kB | 0.5/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 638/855 kB | 0.5/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 638/855 kB | 0.5/1.9 MB
 Progress (4): 4.9/8.4 MB | 474/862 kB | 654/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 654/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 671/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 671/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 671/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 687/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 687/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 687/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 703/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 703/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 703/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 720/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 720/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 720/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 736/855 kB | 0.5/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 736/855 kB | 0.6/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 736/855 kB | 0.6/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 753/855 kB | 0.6/1.9 MB
 Progress (4): 5.0/8.4 MB | 474/862 kB | 753/855 kB | 0.6/1.9 MB
 Progress (4): 5.1/8.4 MB | 474/862 kB | 753/855 kB | 0.6/1.9 MB
 Progress (4): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB | 16/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB | 16/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB | 16/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 769/855 kB | 0.6/1.9 MB | 33/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 785/855 kB | 0.6/1.9 MB | 33/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 785/855 kB | 0.6/1.9 MB | 33/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 785/855 kB | 0.6/1.9 MB | 33/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 785/855 kB | 0.6/1.9 MB | 49/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 802/855 kB | 0.6/1.9 MB | 49/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 802/855 kB | 0.6/1.9 MB | 49/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 802/855 kB | 0.6/1.9 MB | 66/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 818/855 kB | 0.6/1.9 MB | 66/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 818/855 kB | 0.6/1.9 MB | 66/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 818/855 kB | 0.6/1.9 MB | 66/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 66/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 82/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 82/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 82/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 834/855 kB | 0.6/1.9 MB | 98/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 851/855 kB | 0.6/1.9 MB | 98/126 kB
 Progress (5): 5.1/8.4 MB | 474/862 kB | 855 kB | 0.6/1.9 MB | 98/126 kB    
 Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.6/1.9 MB | 98/126 kB
 Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.6/1.9 MB | 115/126 kB
 Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 115/126 kB
 Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB    
 Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
 Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
 Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
 Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
 Progress (5): 5.2/8.4 MB | 474/862 kB | 855 kB | 0.7/1.9 MB | 126 kB
                                                                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.jar (855 kB at 1.3 MB/s)
 #24 7.545 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client/6.10.0/kubernetes-client-6.10.0.jar
 #24 7.545 Progress (4): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB | 126 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar (126 kB at 194 kB/s)
 #24 7.545 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-api/6.10.0/kubernetes-client-api-6.10.0.jar
 #24 7.545 Progress (3): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB
 Progress (3): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB
 Progress (3): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB
 Progress (3): 5.2/8.4 MB | 474/862 kB | 0.7/1.9 MB
 Progress (3): 5.3/8.4 MB | 474/862 kB | 0.7/1.9 MB
 Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.3/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 474/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 490/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 507/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 523/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 539/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 556/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 572/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 588/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 605/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 621/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 638/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 654/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 670/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 687/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 703/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 720/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 736/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 752/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 769/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 785/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 801/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 818/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 834/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 851/862 kB | 0.8/1.9 MB
 Progress (3): 5.4/8.4 MB | 862 kB | 0.8/1.9 MB    
 Progress (4): 5.4/8.4 MB | 862 kB | 0.8/1.9 MB | 16/479 kB
 Progress (4): 5.4/8.4 MB | 862 kB | 0.8/1.9 MB | 33/479 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.jar (862 kB at 1.3 MB/s)
 #24 7.548 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 49/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 66/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 82/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 98/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 115/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 131/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 147/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 164/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 180/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 197/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 213/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 229/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 246/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 262/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 279/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 295/479 kB
 Progress (3): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 16/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 33/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 33/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 49/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 49/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 65/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 65/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 82/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 82/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 82/402 kB
 Progress (4): 5.4/8.4 MB | 0.8/1.9 MB | 311/479 kB | 98/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 98/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 115/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 115/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 131/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 147/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 147/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 164/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 164/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 180/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 180/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 197/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 197/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 213/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 213/402 kB
 Progress (4): 5.4/8.4 MB | 0.9/1.9 MB | 311/479 kB | 229/402 kB
 Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 311/479 kB | 229/402 kB
 Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 311/479 kB | 246/402 kB
 Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 311/479 kB | 246/402 kB
 Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 311/479 kB | 262/402 kB
 Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 328/479 kB | 262/402 kB
                                                                
 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-core/6.10.0/kubernetes-model-core-6.10.0.jar
 #24 7.557 Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 344/479 kB | 262/402 kB
 Progress (4): 5.4/8.4 MB | 1.0/1.9 MB | 360/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 360/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 377/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 393/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 393/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 393/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 410/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 410/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 426/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 442/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 442/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 459/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 459/479 kB | 262/402 kB
 Progress (4): 5.5/8.4 MB | 1.0/1.9 MB | 459/479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 459/479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 475/479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB    
 Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.0/1.9 MB | 479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.1/1.9 MB | 479 kB | 262/402 kB
 Progress (4): 5.6/8.4 MB | 1.1/1.9 MB | 479 kB | 262/402 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client-api/6.10.0/kubernetes-client-api-6.10.0.jar (479 kB at 726 kB/s)
 #24 7.557 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-common/6.10.0/kubernetes-model-common-6.10.0.jar
 #24 7.557 Progress (3): 5.6/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.6/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.1/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 262/402 kB
 Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 278/402 kB
 Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 278/402 kB
 Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 278/402 kB
 Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 295/402 kB
 Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 295/402 kB
 Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 295/402 kB
 Progress (3): 5.7/8.4 MB | 1.2/1.9 MB | 311/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 311/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 311/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 328/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 328/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 344/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 344/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 344/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 360/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 360/402 kB
 Progress (3): 5.8/8.4 MB | 1.2/1.9 MB | 360/402 kB
 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 360/402 kB
 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 377/402 kB
 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 377/402 kB
 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 393/402 kB
 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB    
 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB
 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB
 Progress (4): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB | 0/3.6 MB
 Progress (4): 5.8/8.4 MB | 1.3/1.9 MB | 402 kB | 0/3.6 MB
                                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-client/6.10.0/kubernetes-client-6.10.0.jar (402 kB at 593 kB/s)
 #24 7.577 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-gatewayapi/6.10.0/kubernetes-model-gatewayapi-6.10.0.jar
 #24 7.577 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 0/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.3/1.9 MB | 0/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB
 Progress (4): 5.8/8.4 MB | 1.4/1.9 MB | 0.1/3.6 MB | 9.6/56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 9.6/56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 15/56 kB 
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 15/56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 31/56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 31/56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 31/56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 48/56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 48/56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 56 kB   
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.1/3.6 MB | 56 kB
 Progress (4): 5.8/8.4 MB | 1.5/1.9 MB | 0.2/3.6 MB | 56 kB
 Progress (4): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB | 56 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-common/6.10.0/kubernetes-model-common-6.10.0.jar (56 kB at 83 kB/s)
 #24 7.577 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-resource/6.10.0/kubernetes-model-resource-6.10.0.jar
 #24 7.577 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.2/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.3/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.8/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.9/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.9/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.9/8.4 MB | 1.6/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
 Progress (3): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB
 Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 16/193 kB
 Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 16/193 kB
 Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 16/193 kB
 Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 33/193 kB
 Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 33/193 kB
 Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 33/193 kB
 Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 49/193 kB
 Progress (4): 5.9/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 49/193 kB
 Progress (4): 6.0/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 49/193 kB
 Progress (4): 6.0/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 66/193 kB
 Progress (4): 6.0/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 66/193 kB
 Progress (4): 6.0/8.4 MB | 1.7/1.9 MB | 0.4/3.6 MB | 82/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 82/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 96/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 96/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 96/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 113/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 113/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 113/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 129/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 129/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 129/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 146/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 146/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 146/193 kB
 Progress (4): 6.0/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 162/193 kB
 Progress (4): 6.1/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 162/193 kB
 Progress (4): 6.1/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 162/193 kB
 Progress (4): 6.1/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 178/193 kB
 Progress (4): 6.1/8.4 MB | 1.8/1.9 MB | 0.4/3.6 MB | 178/193 kB
 Progress (4): 6.1/8.4 MB | 1.9/1.9 MB | 0.4/3.6 MB | 178/193 kB
 Progress (4): 6.1/8.4 MB | 1.9/1.9 MB | 0.4/3.6 MB | 193 kB    
 Progress (4): 6.1/8.4 MB | 1.9/1.9 MB | 0.4/3.6 MB | 193 kB
 Progress (4): 6.1/8.4 MB | 1.9 MB | 0.4/3.6 MB | 193 kB    
                                                        
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-resource/6.10.0/kubernetes-model-resource-6.10.0.jar (193 kB at 280 kB/s)
 #24 7.588 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-rbac/6.10.0/kubernetes-model-rbac-6.10.0.jar
 #24 7.588 Downloaded from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar (1.9 MB at 2.7 MB/s)
 #24 7.588 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-admissionregistration/6.10.0/kubernetes-model-admissionregistration-6.10.0.jar
 #24 7.588 Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.5/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.6/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.7/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.7/3.6 MB
 Progress (2): 6.1/8.4 MB | 0.7/3.6 MB
 Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 16/973 kB
 Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 16/973 kB
 Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 33/973 kB
 Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 33/973 kB
 Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 49/973 kB
 Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 49/973 kB
 Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 66/973 kB
 Progress (3): 6.1/8.4 MB | 0.7/3.6 MB | 82/973 kB
 Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 82/973 kB
 Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
 Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
 Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
 Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
 Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
 Progress (3): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB
 Progress (4): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB | 0/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.8/3.6 MB | 98/973 kB | 0/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 0.9/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.0/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.1/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.1/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.2/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.2/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.3/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.3/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.4/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.4/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.1/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.5/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.5/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.6/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.2/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.6/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.7/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.3/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.7/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.8/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.4/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 0.9/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.5/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0/1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB    
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB
 Progress (4): 6.6/8.4 MB | 1.8/3.6 MB | 98/973 kB | 1.0 MB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-admissionregistration/6.10.0/kubernetes-model-admissionregistration-6.10.0.jar (1.0 MB at 1.5 MB/s)
 #24 7.597 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apps/6.10.0/kubernetes-model-apps-6.10.0.jar
 #24 7.597 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 98/973 kB
 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 98/973 kB
 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 98/973 kB
 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 98/973 kB
 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 115/973 kB
 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 115/973 kB
 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 131/973 kB
 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 131/973 kB
 Progress (3): 6.7/8.4 MB | 1.8/3.6 MB | 147/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 147/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 164/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 164/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 180/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 180/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 197/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 213/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 229/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 246/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 262/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 279/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 295/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 311/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 328/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 344/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 360/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 377/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 393/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 410/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 426/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 442/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 459/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 475/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 492/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 508/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 524/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 541/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 557/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 573/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 6.8/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 6.9/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.0/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.1/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB
 Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 16/140 kB
 Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 33/140 kB
 Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 49/140 kB
 Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 66/140 kB
 Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 82/140 kB
 Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 98/140 kB
 Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 114/140 kB
 Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 130/140 kB
 Progress (4): 7.2/8.4 MB | 1.8/3.6 MB | 590/973 kB | 140 kB    
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-rbac/6.10.0/kubernetes-model-rbac-6.10.0.jar (140 kB at 200 kB/s)
 #24 7.597 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-autoscaling/6.10.0/kubernetes-model-autoscaling-6.10.0.jar
 #24 7.597 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 606/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 623/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 639/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 655/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 672/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 688/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 705/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 721/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 737/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 737/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 754/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 754/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 770/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 770/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 786/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 786/973 kB
 Progress (3): 7.2/8.4 MB | 1.8/3.6 MB | 803/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 803/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 819/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 819/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 836/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 836/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 852/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 852/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 868/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 868/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 885/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 885/973 kB
 Progress (3): 7.3/8.4 MB | 1.8/3.6 MB | 901/973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 901/973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 918/973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 918/973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 934/973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 934/973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 950/973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 950/973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 967/973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 973 kB    
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 973 kB
 Progress (3): 7.4/8.4 MB | 1.8/3.6 MB | 973 kB
 Progress (3): 7.5/8.4 MB | 1.8/3.6 MB | 973 kB
 Progress (3): 7.5/8.4 MB | 1.8/3.6 MB | 973 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-gatewayapi/6.10.0/kubernetes-model-gatewayapi-6.10.0.jar (973 kB at 1.4 MB/s)
 #24 7.601 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apiextensions/6.10.0/kubernetes-model-apiextensions-6.10.0.jar
 #24 7.601 Progress (2): 7.5/8.4 MB | 1.8/3.6 MB
 Progress (2): 7.5/8.4 MB | 1.8/3.6 MB
 Progress (2): 7.5/8.4 MB | 1.8/3.6 MB
 Progress (2): 7.5/8.4 MB | 1.8/3.6 MB
 Progress (2): 7.6/8.4 MB | 1.8/3.6 MB
 Progress (2): 7.6/8.4 MB | 1.8/3.6 MB
 Progress (2): 7.6/8.4 MB | 1.8/3.6 MB
 Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 16/408 kB
 Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 16/408 kB
 Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 33/408 kB
 Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 33/408 kB
 Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 49/408 kB
 Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 49/408 kB
 Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 63/408 kB
 Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 63/408 kB
 Progress (3): 7.6/8.4 MB | 1.8/3.6 MB | 79/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 79/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 95/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 95/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 112/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 112/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 128/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 128/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 145/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 145/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 145/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 161/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 161/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 161/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 177/408 kB
 Progress (3): 7.7/8.4 MB | 1.8/3.6 MB | 177/408 kB
 Progress (3): 7.8/8.4 MB | 1.8/3.6 MB | 177/408 kB
 Progress (3): 7.8/8.4 MB | 1.8/3.6 MB | 194/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 194/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 194/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 210/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 210/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 210/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 210/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 226/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 226/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 243/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 243/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 243/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 243/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 259/408 kB
 Progress (3): 7.8/8.4 MB | 1.9/3.6 MB | 259/408 kB
 Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 259/408 kB
 Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 276/408 kB
 Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 276/408 kB
 Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 276/408 kB
 Progress (3): 7.9/8.4 MB | 1.9/3.6 MB | 292/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 292/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 292/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 292/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 308/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 308/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 325/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 325/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 325/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 341/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 341/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 341/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 358/408 kB
 Progress (3): 7.9/8.4 MB | 2.0/3.6 MB | 358/408 kB
 Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 358/408 kB
 Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 374/408 kB
 Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 374/408 kB
 Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 374/408 kB
 Progress (3): 8.0/8.4 MB | 2.0/3.6 MB | 390/408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 390/408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 390/408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 407/408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 407/408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB    
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
 Progress (3): 8.0/8.4 MB | 2.1/3.6 MB | 408 kB
 Progress (3): 8.1/8.4 MB | 2.1/3.6 MB | 408 kB
 Progress (3): 8.1/8.4 MB | 2.1/3.6 MB | 408 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apps/6.10.0/kubernetes-model-apps-6.10.0.jar (408 kB at 574 kB/s)
 #24 7.613 Progress (2): 8.1/8.4 MB | 2.1/3.6 MB
 Progress (2): 8.1/8.4 MB | 2.2/3.6 MB
 Progress (2): 8.1/8.4 MB | 2.2/3.6 MB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 16/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 16/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 16/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 16/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 33/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 33/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 49/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 49/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 49/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 66/716 kB
 Progress (3): 8.1/8.4 MB | 2.2/3.6 MB | 66/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 66/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 80/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 80/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 97/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 97/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 113/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 113/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 130/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 130/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 146/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 146/716 kB
 Progress (3): 8.2/8.4 MB | 2.2/3.6 MB | 162/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 162/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 179/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 179/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 195/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 195/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 211/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 211/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 228/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 228/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 244/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 244/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 261/716 kB
 Progress (3): 8.3/8.4 MB | 2.2/3.6 MB | 277/716 kB
 Progress (3): 8.4/8.4 MB | 2.2/3.6 MB | 277/716 kB
 Progress (3): 8.4 MB | 2.2/3.6 MB | 277/716 kB    
 Progress (3): 8.4 MB | 2.2/3.6 MB | 293/716 kB
 Progress (3): 8.4 MB | 2.2/3.6 MB | 310/716 kB
 Progress (3): 8.4 MB | 2.2/3.6 MB | 326/716 kB
 Progress (3): 8.4 MB | 2.2/3.6 MB | 343/716 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk18on/1.76/bcprov-jdk18on-1.76.jar (8.4 MB at 12 MB/s)
 #24 7.613 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-batch/6.10.0/kubernetes-model-batch-6.10.0.jar
 #24 7.613 Progress (2): 2.2/3.6 MB | 359/716 kB
 Progress (2): 2.2/3.6 MB | 375/716 kB
 Progress (2): 2.2/3.6 MB | 392/716 kB
 Progress (2): 2.2/3.6 MB | 408/716 kB
 Progress (2): 2.2/3.6 MB | 424/716 kB
 Progress (2): 2.2/3.6 MB | 441/716 kB
 Progress (2): 2.2/3.6 MB | 457/716 kB
 Progress (2): 2.2/3.6 MB | 474/716 kB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-certificates/6.10.0/kubernetes-model-certificates-6.10.0.jar
 #24 7.613 Progress (2): 2.2/3.6 MB | 474/716 kB
 Progress (2): 2.3/3.6 MB | 474/716 kB
 Progress (2): 2.3/3.6 MB | 474/716 kB
 Progress (2): 2.3/3.6 MB | 474/716 kB
 Progress (2): 2.3/3.6 MB | 474/716 kB
 Progress (2): 2.3/3.6 MB | 474/716 kB
 Progress (2): 2.3/3.6 MB | 474/716 kB
 Progress (2): 2.3/3.6 MB | 474/716 kB
 Progress (2): 2.4/3.6 MB | 474/716 kB
 Progress (2): 2.4/3.6 MB | 474/716 kB
 Progress (2): 2.4/3.6 MB | 474/716 kB
 Progress (2): 2.4/3.6 MB | 474/716 kB
 Progress (2): 2.4/3.6 MB | 474/716 kB
 Progress (2): 2.4/3.6 MB | 474/716 kB
 Progress (2): 2.5/3.6 MB | 474/716 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 5.4/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 22/243 kB 
 Progress (3): 2.5/3.6 MB | 474/716 kB | 22/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 38/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 38/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 55/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 55/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 71/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 71/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 87/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 87/243 kB
 Progress (3): 2.5/3.6 MB | 474/716 kB | 104/243 kB
 Progress (3): 2.6/3.6 MB | 474/716 kB | 104/243 kB
 Progress (3): 2.6/3.6 MB | 474/716 kB | 120/243 kB
 Progress (3): 2.6/3.6 MB | 474/716 kB | 120/243 kB
 Progress (3): 2.6/3.6 MB | 474/716 kB | 137/243 kB
 Progress (3): 2.6/3.6 MB | 474/716 kB | 153/243 kB
 Progress (3): 2.6/3.6 MB | 474/716 kB | 153/243 kB
 Progress (3): 2.6/3.6 MB | 474/716 kB | 169/243 kB
 Progress (3): 2.6/3.6 MB | 474/716 kB | 169/243 kB
 Progress (3): 2.6/3.6 MB | 474/716 kB | 186/243 kB
 Progress (4): 2.6/3.6 MB | 474/716 kB | 186/243 kB | 16/147 kB
 Progress (4): 2.6/3.6 MB | 474/716 kB | 186/243 kB | 16/147 kB
 Progress (4): 2.6/3.6 MB | 474/716 kB | 202/243 kB | 16/147 kB
 Progress (4): 2.6/3.6 MB | 474/716 kB | 202/243 kB | 33/147 kB
 Progress (4): 2.6/3.6 MB | 474/716 kB | 202/243 kB | 33/147 kB
 Progress (4): 2.6/3.6 MB | 474/716 kB | 218/243 kB | 33/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 218/243 kB | 33/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 218/243 kB | 49/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 235/243 kB | 49/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 235/243 kB | 65/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 235/243 kB | 65/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 65/147 kB    
 Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 65/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 82/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 98/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 98/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 114/147 kB
 Progress (4): 2.7/3.6 MB | 474/716 kB | 243 kB | 114/147 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-batch/6.10.0/kubernetes-model-batch-6.10.0.jar (243 kB at 340 kB/s)
 #24 7.614 Progress (3): 2.7/3.6 MB | 474/716 kB | 114/147 kB
 Progress (3): 2.7/3.6 MB | 474/716 kB | 131/147 kB
 Progress (3): 2.8/3.6 MB | 474/716 kB | 131/147 kB
 Progress (3): 2.8/3.6 MB | 474/716 kB | 147 kB    
 Progress (3): 2.8/3.6 MB | 474/716 kB | 147 kB
 Progress (3): 2.8/3.6 MB | 474/716 kB | 147 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-certificates/6.10.0/kubernetes-model-certificates-6.10.0.jar (147 kB at 205 kB/s)
 #24 7.615 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-coordination/6.10.0/kubernetes-model-coordination-6.10.0.jar
 #24 7.615 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-discovery/6.10.0/kubernetes-model-discovery-6.10.0.jar
 #24 7.615 Progress (2): 2.8/3.6 MB | 474/716 kB
 Progress (2): 2.8/3.6 MB | 474/716 kB
 Progress (2): 2.8/3.6 MB | 474/716 kB
 Progress (2): 2.9/3.6 MB | 474/716 kB
 Progress (2): 2.9/3.6 MB | 474/716 kB
 Progress (2): 2.9/3.6 MB | 474/716 kB
 Progress (2): 2.9/3.6 MB | 474/716 kB
 Progress (2): 2.9/3.6 MB | 474/716 kB
 Progress (2): 2.9/3.6 MB | 474/716 kB
 Progress (2): 3.0/3.6 MB | 474/716 kB
 Progress (2): 3.0/3.6 MB | 474/716 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 2.1/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 19/736 kB 
 Progress (3): 3.0/3.6 MB | 474/716 kB | 35/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 51/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 68/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 84/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 100/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 117/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 133/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 150/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 166/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 182/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 199/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 215/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 232/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 248/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 264/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 281/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 297/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 313/736 kB
 Progress (4): 3.0/3.6 MB | 474/716 kB | 313/736 kB | 15/42 kB
 Progress (4): 3.0/3.6 MB | 474/716 kB | 330/736 kB | 15/42 kB
 Progress (4): 3.0/3.6 MB | 474/716 kB | 330/736 kB | 31/42 kB
 Progress (4): 3.0/3.6 MB | 474/716 kB | 346/736 kB | 31/42 kB
 Progress (4): 3.0/3.6 MB | 474/716 kB | 346/736 kB | 42 kB   
 Progress (4): 3.0/3.6 MB | 474/716 kB | 363/736 kB | 42 kB
 Progress (4): 3.0/3.6 MB | 474/716 kB | 379/736 kB | 42 kB
 Progress (4): 3.0/3.6 MB | 474/716 kB | 391/736 kB | 42 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-coordination/6.10.0/kubernetes-model-coordination-6.10.0.jar (42 kB at 57 kB/s)
 #24 7.623 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-events/6.10.0/kubernetes-model-events-6.10.0.jar
 #24 7.624 Progress (3): 3.0/3.6 MB | 474/716 kB | 408/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 424/736 kB
 Progress (3): 3.0/3.6 MB | 474/716 kB | 440/736 kB
 Progress (3): 3.0/3.6 MB | 490/716 kB | 440/736 kB
 Progress (3): 3.0/3.6 MB | 490/716 kB | 457/736 kB
 Progress (3): 3.0/3.6 MB | 506/716 kB | 457/736 kB
 Progress (3): 3.0/3.6 MB | 506/716 kB | 473/736 kB
 Progress (3): 3.0/3.6 MB | 523/716 kB | 473/736 kB
 Progress (3): 3.0/3.6 MB | 523/716 kB | 490/736 kB
 Progress (3): 3.0/3.6 MB | 539/716 kB | 490/736 kB
 Progress (3): 3.0/3.6 MB | 539/716 kB | 506/736 kB
 Progress (3): 3.0/3.6 MB | 556/716 kB | 506/736 kB
 Progress (3): 3.0/3.6 MB | 556/716 kB | 522/736 kB
 Progress (3): 3.0/3.6 MB | 572/716 kB | 522/736 kB
 Progress (3): 3.0/3.6 MB | 572/716 kB | 539/736 kB
 Progress (3): 3.0/3.6 MB | 588/716 kB | 539/736 kB
 Progress (3): 3.0/3.6 MB | 588/716 kB | 555/736 kB
 Progress (3): 3.0/3.6 MB | 605/716 kB | 555/736 kB
 Progress (3): 3.0/3.6 MB | 605/716 kB | 571/736 kB
 Progress (3): 3.0/3.6 MB | 621/716 kB | 571/736 kB
 Progress (3): 3.0/3.6 MB | 621/716 kB | 588/736 kB
 Progress (3): 3.0/3.6 MB | 637/716 kB | 588/736 kB
 Progress (3): 3.0/3.6 MB | 637/716 kB | 604/736 kB
 Progress (3): 3.0/3.6 MB | 654/716 kB | 604/736 kB
 Progress (3): 3.0/3.6 MB | 654/716 kB | 621/736 kB
 Progress (3): 3.0/3.6 MB | 670/716 kB | 621/736 kB
 Progress (3): 3.0/3.6 MB | 670/716 kB | 637/736 kB
 Progress (3): 3.0/3.6 MB | 670/716 kB | 653/736 kB
 Progress (3): 3.0/3.6 MB | 687/716 kB | 653/736 kB
 Progress (3): 3.0/3.6 MB | 703/716 kB | 653/736 kB
 Progress (3): 3.0/3.6 MB | 703/716 kB | 670/736 kB
 Progress (3): 3.0/3.6 MB | 716 kB | 670/736 kB    
 Progress (3): 3.0/3.6 MB | 716 kB | 686/736 kB
 Progress (3): 3.0/3.6 MB | 716 kB | 703/736 kB
 Progress (3): 3.0/3.6 MB | 716 kB | 719/736 kB
 Progress (3): 3.0/3.6 MB | 716 kB | 735/736 kB
 Progress (3): 3.0/3.6 MB | 716 kB | 736 kB    
 Progress (4): 3.0/3.6 MB | 716 kB | 736 kB | 16/155 kB
 Progress (4): 3.0/3.6 MB | 716 kB | 736 kB | 33/155 kB
 Progress (4): 3.0/3.6 MB | 716 kB | 736 kB | 49/155 kB
                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-apiextensions/6.10.0/kubernetes-model-apiextensions-6.10.0.jar (716 kB at 978 kB/s)
 #24 7.629 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-autoscaling/6.10.0/kubernetes-model-autoscaling-6.10.0.jar (736 kB at 1.0 MB/s)
 #24 7.629 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-flowcontrol/6.10.0/kubernetes-model-flowcontrol-6.10.0.jar
 #24 7.629 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-extensions/6.10.0/kubernetes-model-extensions-6.10.0.jar
 #24 7.629 Progress (2): 3.0/3.6 MB | 66/155 kB
 Progress (2): 3.0/3.6 MB | 78/155 kB
 Progress (2): 3.0/3.6 MB | 94/155 kB
 Progress (2): 3.0/3.6 MB | 111/155 kB
 Progress (2): 3.0/3.6 MB | 111/155 kB
 Progress (2): 3.0/3.6 MB | 127/155 kB
 Progress (2): 3.0/3.6 MB | 127/155 kB
 Progress (2): 3.0/3.6 MB | 144/155 kB
 Progress (2): 3.0/3.6 MB | 144/155 kB
 Progress (2): 3.0/3.6 MB | 155 kB    
 Progress (2): 3.0/3.6 MB | 155 kB
 Progress (2): 3.1/3.6 MB | 155 kB
 Progress (3): 3.1/3.6 MB | 155 kB | 16/85 kB
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-discovery/6.10.0/kubernetes-model-discovery-6.10.0.jar (155 kB at 212 kB/s)
 #24 7.631 Progress (2): 3.1/3.6 MB | 16/85 kB
                                    
 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-networking/6.10.0/kubernetes-model-networking-6.10.0.jar
 #24 7.631 Progress (2): 3.1/3.6 MB | 32/85 kB
 Progress (2): 3.1/3.6 MB | 32/85 kB
 Progress (2): 3.1/3.6 MB | 49/85 kB
 Progress (2): 3.1/3.6 MB | 49/85 kB
 Progress (2): 3.1/3.6 MB | 65/85 kB
 Progress (2): 3.1/3.6 MB | 65/85 kB
 Progress (2): 3.1/3.6 MB | 81/85 kB
 Progress (2): 3.1/3.6 MB | 85 kB   
 Progress (2): 3.1/3.6 MB | 85 kB
 Progress (2): 3.2/3.6 MB | 85 kB
 Progress (2): 3.2/3.6 MB | 85 kB
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-events/6.10.0/kubernetes-model-events-6.10.0.jar (85 kB at 115 kB/s)
 #24 7.637 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-metrics/6.10.0/kubernetes-model-metrics-6.10.0.jar
 #24 7.637 Progress (1): 3.2/3.6 MB
 Progress (1): 3.2/3.6 MB
 Progress (1): 3.2/3.6 MB
 Progress (1): 3.2/3.6 MB
 Progress (1): 3.2/3.6 MB
 Progress (1): 3.3/3.6 MB
 Progress (1): 3.3/3.6 MB
 Progress (1): 3.3/3.6 MB
 Progress (1): 3.3/3.6 MB
 Progress (1): 3.3/3.6 MB
 Progress (1): 3.3/3.6 MB
 Progress (1): 3.4/3.6 MB
 Progress (2): 3.4/3.6 MB | 16/451 kB
 Progress (2): 3.4/3.6 MB | 16/451 kB
 Progress (2): 3.4/3.6 MB | 16/451 kB
 Progress (2): 3.4/3.6 MB | 33/451 kB
 Progress (2): 3.4/3.6 MB | 33/451 kB
 Progress (2): 3.4/3.6 MB | 33/451 kB
 Progress (3): 3.4/3.6 MB | 33/451 kB | 16/492 kB
 Progress (3): 3.4/3.6 MB | 33/451 kB | 16/492 kB
 Progress (3): 3.4/3.6 MB | 33/451 kB | 33/492 kB
 Progress (3): 3.4/3.6 MB | 33/451 kB | 49/492 kB
 Progress (3): 3.5/3.6 MB | 33/451 kB | 49/492 kB
 Progress (3): 3.5/3.6 MB | 33/451 kB | 66/492 kB
 Progress (3): 3.5/3.6 MB | 33/451 kB | 66/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 66/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 82/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 82/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 98/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 98/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 114/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 114/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 131/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 147/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 147/492 kB
 Progress (3): 3.5/3.6 MB | 49/451 kB | 164/492 kB
 Progress (3): 3.6/3.6 MB | 49/451 kB | 164/492 kB
 Progress (3): 3.6/3.6 MB | 49/451 kB | 180/492 kB
 Progress (3): 3.6/3.6 MB | 49/451 kB | 180/492 kB
 Progress (3): 3.6/3.6 MB | 49/451 kB | 196/492 kB
 Progress (4): 3.6/3.6 MB | 49/451 kB | 196/492 kB | 16/65 kB
 Progress (4): 3.6/3.6 MB | 49/451 kB | 196/492 kB | 16/65 kB
 Progress (4): 3.6/3.6 MB | 49/451 kB | 213/492 kB | 16/65 kB
 Progress (4): 3.6/3.6 MB | 49/451 kB | 213/492 kB | 31/65 kB
 Progress (4): 3.6/3.6 MB | 49/451 kB | 229/492 kB | 31/65 kB
 Progress (4): 3.6/3.6 MB | 49/451 kB | 229/492 kB | 31/65 kB
 Progress (4): 3.6/3.6 MB | 49/451 kB | 246/492 kB | 31/65 kB
 Progress (4): 3.6/3.6 MB | 49/451 kB | 246/492 kB | 31/65 kB
 Progress (4): 3.6/3.6 MB | 49/451 kB | 246/492 kB | 48/65 kB
 Progress (4): 3.6 MB | 49/451 kB | 246/492 kB | 48/65 kB    
 Progress (4): 3.6 MB | 49/451 kB | 262/492 kB | 48/65 kB
 Progress (4): 3.6 MB | 49/451 kB | 262/492 kB | 64/65 kB
 Progress (4): 3.6 MB | 49/451 kB | 262/492 kB | 65 kB   
 Progress (4): 3.6 MB | 49/451 kB | 278/492 kB | 65 kB
 Progress (4): 3.6 MB | 49/451 kB | 295/492 kB | 65 kB
 Progress (4): 3.6 MB | 49/451 kB | 311/492 kB | 65 kB
                                                      
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-core/6.10.0/kubernetes-model-core-6.10.0.jar (3.6 MB at 4.9 MB/s)
 #24 7.637 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-policy/6.10.0/kubernetes-model-policy-6.10.0.jar
 #24 7.637 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-metrics/6.10.0/kubernetes-model-metrics-6.10.0.jar (65 kB at 88 kB/s)
 #24 7.637 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-scheduling/6.10.0/kubernetes-model-scheduling-6.10.0.jar
 #24 7.637 Progress (2): 49/451 kB | 327/492 kB
 Progress (2): 49/451 kB | 344/492 kB
 Progress (2): 49/451 kB | 360/492 kB
 Progress (2): 65/451 kB | 360/492 kB
 Progress (2): 65/451 kB | 377/492 kB
 Progress (2): 81/451 kB | 377/492 kB
 Progress (2): 81/451 kB | 393/492 kB
 Progress (2): 97/451 kB | 393/492 kB
 Progress (3): 97/451 kB | 393/492 kB | 16/903 kB
 Progress (3): 97/451 kB | 409/492 kB | 16/903 kB
 Progress (3): 114/451 kB | 409/492 kB | 16/903 kB
 Progress (3): 114/451 kB | 409/492 kB | 33/903 kB
 Progress (3): 114/451 kB | 426/492 kB | 33/903 kB
 Progress (3): 130/451 kB | 426/492 kB | 33/903 kB
 Progress (3): 130/451 kB | 426/492 kB | 49/903 kB
 Progress (3): 130/451 kB | 442/492 kB | 49/903 kB
 Progress (3): 146/451 kB | 442/492 kB | 49/903 kB
 Progress (3): 146/451 kB | 442/492 kB | 63/903 kB
 Progress (3): 146/451 kB | 459/492 kB | 63/903 kB
 Progress (3): 163/451 kB | 459/492 kB | 63/903 kB
 Progress (3): 163/451 kB | 459/492 kB | 79/903 kB
 Progress (3): 163/451 kB | 475/492 kB | 79/903 kB
 Progress (3): 179/451 kB | 475/492 kB | 79/903 kB
 Progress (3): 179/451 kB | 475/492 kB | 95/903 kB
 Progress (3): 179/451 kB | 491/492 kB | 95/903 kB
 Progress (3): 179/451 kB | 492 kB | 95/903 kB    
 Progress (3): 196/451 kB | 492 kB | 95/903 kB
 Progress (3): 196/451 kB | 492 kB | 112/903 kB
 Progress (3): 212/451 kB | 492 kB | 112/903 kB
 Progress (3): 212/451 kB | 492 kB | 128/903 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-networking/6.10.0/kubernetes-model-networking-6.10.0.jar (492 kB at 668 kB/s)
 #24 7.637 Progress (2): 228/451 kB | 128/903 kB
 Progress (2): 228/451 kB | 145/903 kB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-storageclass/6.10.0/kubernetes-model-storageclass-6.10.0.jar
 #24 7.637 Progress (2): 228/451 kB | 161/903 kB
 Progress (2): 245/451 kB | 161/903 kB
 Progress (2): 245/451 kB | 177/903 kB
 Progress (2): 261/451 kB | 177/903 kB
 Progress (2): 278/451 kB | 177/903 kB
 Progress (2): 278/451 kB | 194/903 kB
 Progress (2): 278/451 kB | 210/903 kB
 Progress (2): 294/451 kB | 210/903 kB
 Progress (2): 294/451 kB | 226/903 kB
 Progress (2): 310/451 kB | 226/903 kB
 Progress (2): 310/451 kB | 243/903 kB
 Progress (2): 327/451 kB | 243/903 kB
 Progress (2): 343/451 kB | 243/903 kB
 Progress (2): 343/451 kB | 259/903 kB
 Progress (2): 359/451 kB | 259/903 kB
 Progress (2): 359/451 kB | 276/903 kB
 Progress (2): 376/451 kB | 276/903 kB
 Progress (2): 376/451 kB | 292/903 kB
 Progress (2): 376/451 kB | 308/903 kB
 Progress (2): 392/451 kB | 308/903 kB
 Progress (2): 409/451 kB | 308/903 kB
 Progress (2): 409/451 kB | 325/903 kB
 Progress (2): 409/451 kB | 341/903 kB
 Progress (2): 425/451 kB | 341/903 kB
 Progress (2): 425/451 kB | 358/903 kB
 Progress (2): 425/451 kB | 374/903 kB
 Progress (2): 425/451 kB | 390/903 kB
 Progress (2): 425/451 kB | 407/903 kB
 Progress (2): 425/451 kB | 423/903 kB
 Progress (2): 425/451 kB | 439/903 kB
 Progress (2): 425/451 kB | 456/903 kB
 Progress (2): 425/451 kB | 472/903 kB
 Progress (2): 425/451 kB | 489/903 kB
 Progress (2): 425/451 kB | 505/903 kB
 Progress (2): 425/451 kB | 521/903 kB
 Progress (2): 425/451 kB | 538/903 kB
 Progress (2): 425/451 kB | 554/903 kB
 Progress (2): 425/451 kB | 571/903 kB
 Progress (2): 425/451 kB | 587/903 kB
 Progress (2): 425/451 kB | 603/903 kB
 Progress (2): 425/451 kB | 620/903 kB
 Progress (2): 425/451 kB | 636/903 kB
 Progress (2): 425/451 kB | 652/903 kB
 Progress (2): 425/451 kB | 669/903 kB
 Progress (2): 425/451 kB | 685/903 kB
 Progress (2): 425/451 kB | 702/903 kB
 Progress (2): 425/451 kB | 718/903 kB
 Progress (3): 425/451 kB | 718/903 kB | 16/56 kB
 Progress (3): 425/451 kB | 718/903 kB | 33/56 kB
 Progress (3): 425/451 kB | 718/903 kB | 49/56 kB
 Progress (3): 425/451 kB | 718/903 kB | 56 kB   
 Progress (4): 425/451 kB | 718/903 kB | 56 kB | 16/339 kB
                                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-scheduling/6.10.0/kubernetes-model-scheduling-6.10.0.jar (56 kB at 74 kB/s)
 #24 7.653 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-node/6.10.0/kubernetes-model-node-6.10.0.jar
 #24 7.653 Progress (3): 425/451 kB | 718/903 kB | 32/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 49/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 65/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 81/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 98/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 114/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 130/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 147/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 163/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 180/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 196/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 212/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 229/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 245/339 kB
 Progress (3): 425/451 kB | 718/903 kB | 262/339 kB
 Progress (3): 441/451 kB | 718/903 kB | 262/339 kB
 Progress (3): 451 kB | 718/903 kB | 262/339 kB    
 Progress (3): 451 kB | 718/903 kB | 278/339 kB
 Progress (3): 451 kB | 718/903 kB | 294/339 kB
 Progress (3): 451 kB | 718/903 kB | 311/339 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-extensions/6.10.0/kubernetes-model-extensions-6.10.0.jar (451 kB at 599 kB/s)
 #24 7.653 Progress (2): 718/903 kB | 327/339 kB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/org/snakeyaml/snakeyaml-engine/2.7/snakeyaml-engine-2.7.jar
 #24 7.653 Progress (2): 718/903 kB | 339 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-storageclass/6.10.0/kubernetes-model-storageclass-6.10.0.jar (339 kB at 451 kB/s)
 #24 7.653 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar
 #24 7.653 Progress (2): 718/903 kB | 16/129 kB
 Progress (2): 718/903 kB | 33/129 kB
 Progress (3): 718/903 kB | 33/129 kB | 15/293 kB
 Progress (3): 718/903 kB | 49/129 kB | 15/293 kB
 Progress (3): 718/903 kB | 49/129 kB | 31/293 kB
 Progress (3): 718/903 kB | 64/129 kB | 31/293 kB
 Progress (3): 718/903 kB | 64/129 kB | 48/293 kB
 Progress (3): 718/903 kB | 80/129 kB | 48/293 kB
 Progress (3): 718/903 kB | 80/129 kB | 64/293 kB
 Progress (3): 718/903 kB | 96/129 kB | 64/293 kB
 Progress (3): 718/903 kB | 96/129 kB | 80/293 kB
 Progress (3): 718/903 kB | 113/129 kB | 80/293 kB
 Progress (3): 718/903 kB | 113/129 kB | 97/293 kB
 Progress (3): 718/903 kB | 129 kB | 97/293 kB    
 Progress (3): 718/903 kB | 129 kB | 113/293 kB
 Progress (4): 718/903 kB | 129 kB | 113/293 kB | 15/269 kB
 Progress (4): 718/903 kB | 129 kB | 129/293 kB | 15/269 kB
 Progress (4): 718/903 kB | 129 kB | 146/293 kB | 15/269 kB
 Progress (4): 718/903 kB | 129 kB | 146/293 kB | 31/269 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-node/6.10.0/kubernetes-model-node-6.10.0.jar (129 kB at 171 kB/s)
 #24 7.653 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-httpclient-okhttp/6.10.0/kubernetes-httpclient-okhttp-6.10.0.jar
 #24 7.653 Progress (3): 718/903 kB | 146/293 kB | 48/269 kB
 Progress (3): 718/903 kB | 162/293 kB | 48/269 kB
 Progress (3): 718/903 kB | 179/293 kB | 48/269 kB
 Progress (3): 718/903 kB | 179/293 kB | 64/269 kB
 Progress (3): 718/903 kB | 179/293 kB | 78/269 kB
 Progress (3): 718/903 kB | 195/293 kB | 78/269 kB
 Progress (3): 718/903 kB | 195/293 kB | 95/269 kB
 Progress (3): 718/903 kB | 211/293 kB | 95/269 kB
 Progress (3): 718/903 kB | 211/293 kB | 111/269 kB
 Progress (3): 718/903 kB | 228/293 kB | 111/269 kB
 Progress (3): 718/903 kB | 244/293 kB | 111/269 kB
 Progress (3): 718/903 kB | 244/293 kB | 128/269 kB
 Progress (3): 718/903 kB | 260/293 kB | 128/269 kB
 Progress (3): 718/903 kB | 260/293 kB | 144/269 kB
 Progress (3): 718/903 kB | 277/293 kB | 144/269 kB
 Progress (3): 718/903 kB | 277/293 kB | 160/269 kB
 Progress (3): 718/903 kB | 293/293 kB | 160/269 kB
 Progress (3): 718/903 kB | 293 kB | 160/269 kB    
 Progress (3): 718/903 kB | 293 kB | 177/269 kB
 Progress (4): 718/903 kB | 293 kB | 177/269 kB | 16/55 kB
 Progress (4): 718/903 kB | 293 kB | 193/269 kB | 16/55 kB
 Progress (4): 718/903 kB | 293 kB | 193/269 kB | 32/55 kB
                                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/org/snakeyaml/snakeyaml-engine/2.7/snakeyaml-engine-2.7.jar (293 kB at 382 kB/s)
 #24 7.667 Progress (3): 718/903 kB | 193/269 kB | 49/55 kB
 Progress (3): 718/903 kB | 210/269 kB | 49/55 kB
                                                 
 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp/4.12.0/okhttp-4.12.0.jar
 #24 7.667 Progress (3): 718/903 kB | 210/269 kB | 55 kB
 Progress (3): 718/903 kB | 226/269 kB | 55 kB
 Progress (3): 718/903 kB | 242/269 kB | 55 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar (55 kB at 71 kB/s)
 #24 7.667 Progress (2): 718/903 kB | 259/269 kB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio/3.6.0/okio-3.6.0.jar
 #24 7.668 Progress (2): 718/903 kB | 269 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-policy/6.10.0/kubernetes-model-policy-6.10.0.jar (269 kB at 350 kB/s)
 #24 7.668 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio-jvm/3.6.0/okio-jvm-3.6.0.jar
 #24 7.668 Progress (2): 718/903 kB | 16/31 kB
 Progress (2): 718/903 kB | 31 kB   
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-httpclient-okhttp/6.10.0/kubernetes-httpclient-okhttp-6.10.0.jar (31 kB at 41 kB/s)
 #24 7.668 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-common/1.9.22/kotlin-stdlib-common-1.9.22.jar
 #24 7.668 Progress (1): 734/903 kB
 Progress (2): 734/903 kB | 16/26 kB
 Progress (2): 734/903 kB | 26 kB   
 Progress (2): 751/903 kB | 26 kB
 Progress (2): 767/903 kB | 26 kB
 Progress (3): 767/903 kB | 26 kB | 16/790 kB
 Progress (3): 784/903 kB | 26 kB | 16/790 kB
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio/3.6.0/okio-3.6.0.jar (26 kB at 33 kB/s)
 #24 7.673 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.22/kotlin-stdlib-jdk8-1.9.22.jar
 #24 7.673 Progress (2): 800/903 kB | 16/790 kB
 Progress (2): 800/903 kB | 33/790 kB
 Progress (2): 816/903 kB | 33/790 kB
 Progress (2): 833/903 kB | 33/790 kB
 Progress (2): 833/903 kB | 49/790 kB
 Progress (2): 849/903 kB | 49/790 kB
 Progress (2): 849/903 kB | 63/790 kB
 Progress (2): 865/903 kB | 63/790 kB
 Progress (2): 865/903 kB | 80/790 kB
 Progress (2): 882/903 kB | 80/790 kB
 Progress (2): 882/903 kB | 96/790 kB
 Progress (2): 898/903 kB | 96/790 kB
 Progress (2): 903 kB | 96/790 kB    
 Progress (2): 903 kB | 113/790 kB
 Progress (2): 903 kB | 129/790 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/kubernetes-model-flowcontrol/6.10.0/kubernetes-model-flowcontrol-6.10.0.jar (903 kB at 1.2 MB/s)
 #24 7.674 Progress (1): 145/790 kB
                         
 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.9.22/kotlin-stdlib-1.9.22.jar
 #24 7.674 Progress (1): 162/790 kB
 Progress (2): 162/790 kB | 16/227 kB
 Progress (2): 178/790 kB | 16/227 kB
 Progress (2): 194/790 kB | 16/227 kB
 Progress (2): 194/790 kB | 33/227 kB
 Progress (2): 211/790 kB | 33/227 kB
 Progress (2): 211/790 kB | 49/227 kB
 Progress (2): 227/790 kB | 49/227 kB
 Progress (2): 227/790 kB | 66/227 kB
 Progress (2): 244/790 kB | 66/227 kB
 Progress (2): 244/790 kB | 80/227 kB
 Progress (2): 260/790 kB | 80/227 kB
 Progress (2): 260/790 kB | 97/227 kB
 Progress (2): 276/790 kB | 97/227 kB
 Progress (2): 276/790 kB | 113/227 kB
 Progress (2): 293/790 kB | 113/227 kB
 Progress (2): 309/790 kB | 113/227 kB
 Progress (3): 309/790 kB | 113/227 kB | 967 B
 Progress (3): 326/790 kB | 113/227 kB | 967 B
 Progress (3): 342/790 kB | 113/227 kB | 967 B
 Progress (3): 358/790 kB | 113/227 kB | 967 B
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.22/kotlin-stdlib-jdk8-1.9.22.jar (967 B at 1.2 kB/s)
 #24 7.676 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.22/kotlin-stdlib-jdk7-1.9.22.jar
 #24 7.676 Progress (2): 375/790 kB | 113/227 kB
 Progress (2): 391/790 kB | 113/227 kB
 Progress (2): 391/790 kB | 129/227 kB
 Progress (2): 407/790 kB | 129/227 kB
 Progress (2): 407/790 kB | 146/227 kB
 Progress (2): 424/790 kB | 146/227 kB
 Progress (2): 424/790 kB | 162/227 kB
 Progress (2): 440/790 kB | 162/227 kB
 Progress (2): 440/790 kB | 178/227 kB
 Progress (2): 457/790 kB | 178/227 kB
 Progress (2): 457/790 kB | 195/227 kB
 Progress (2): 473/790 kB | 195/227 kB
 Progress (2): 473/790 kB | 211/227 kB
 Progress (2): 489/790 kB | 211/227 kB
 Progress (2): 489/790 kB | 227 kB    
 Progress (2): 506/790 kB | 227 kB
 Progress (2): 522/790 kB | 227 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-common/1.9.22/kotlin-stdlib-common-1.9.22.jar (227 kB at 293 kB/s)
 #24 7.677 Progress (1): 539/790 kB
                         
 Downloading from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/logging-interceptor/4.12.0/logging-interceptor-4.12.0.jar
 #24 7.677 Progress (1): 555/790 kB
 Progress (1): 571/790 kB
 Progress (1): 588/790 kB
 Progress (1): 604/790 kB
 Progress (1): 620/790 kB
 Progress (1): 637/790 kB
 Progress (1): 653/790 kB
 Progress (1): 670/790 kB
 Progress (2): 670/790 kB | 961 B
 Progress (2): 686/790 kB | 961 B
 Progress (2): 702/790 kB | 961 B
 Progress (2): 719/790 kB | 961 B
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.22/kotlin-stdlib-jdk7-1.9.22.jar (961 B at 1.2 kB/s)
 #24 7.677 Downloading from central: https://repo.maven.apache.org/maven2/io/fabric8/zjsonpatch/0.3.0/zjsonpatch-0.3.0.jar
 #24 7.677 Progress (1): 735/790 kB
 Progress (1): 752/790 kB
 Progress (1): 768/790 kB
 Progress (1): 784/790 kB
 Progress (1): 790 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/okhttp/4.12.0/okhttp-4.12.0.jar (790 kB at 1.0 MB/s)
 #24 7.678 Downloading from central: https://repo.maven.apache.org/maven2/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar
 #24 7.678 Progress (1): 16/360 kB
 Progress (1): 32/360 kB
 Progress (1): 49/360 kB
 Progress (1): 65/360 kB
 Progress (1): 81/360 kB
 Progress (1): 97/360 kB
 Progress (1): 113/360 kB
 Progress (1): 130/360 kB
 Progress (2): 130/360 kB | 16/36 kB
 Progress (2): 146/360 kB | 16/36 kB
 Progress (2): 162/360 kB | 16/36 kB
 Progress (2): 162/360 kB | 32/36 kB
 Progress (3): 162/360 kB | 32/36 kB | 0/1.7 MB
 Progress (3): 162/360 kB | 36 kB | 0/1.7 MB   
 Progress (3): 179/360 kB | 36 kB | 0/1.7 MB
 Progress (3): 179/360 kB | 36 kB | 0/1.7 MB
 Progress (3): 195/360 kB | 36 kB | 0/1.7 MB
 Progress (3): 195/360 kB | 36 kB | 0/1.7 MB
                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/io/fabric8/zjsonpatch/0.3.0/zjsonpatch-0.3.0.jar (36 kB at 46 kB/s)
 #24 7.679 Progress (2): 195/360 kB | 0.1/1.7 MB
                                      
 Downloading from central: https://repo.maven.apache.org/maven2/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar
 #24 7.679 Progress (2): 195/360 kB | 0.1/1.7 MB
 Progress (2): 195/360 kB | 0.1/1.7 MB
 Progress (3): 195/360 kB | 0.1/1.7 MB | 16 kB
 Progress (3): 195/360 kB | 0.1/1.7 MB | 16 kB
 Progress (3): 195/360 kB | 0.1/1.7 MB | 16 kB
 Progress (3): 195/360 kB | 0.1/1.7 MB | 16 kB
 Progress (4): 195/360 kB | 0.1/1.7 MB | 16 kB | 16/334 kB
                                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okhttp3/logging-interceptor/4.12.0/logging-interceptor-4.12.0.jar (16 kB at 20 kB/s)
 #24 7.681 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-websocket/3.2.2/spring-boot-starter-websocket-3.2.2.jar
 #24 7.681 Progress (3): 195/360 kB | 0.1/1.7 MB | 33/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 33/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 49/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 49/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 65/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 81/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 97/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 114/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 114/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 130/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 130/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 147/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 147/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 163/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 163/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 179/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 196/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 212/334 kB
 Progress (3): 195/360 kB | 0.2/1.7 MB | 229/334 kB
 Progress (3): 195/360 kB | 0.3/1.7 MB | 229/334 kB
 Progress (3): 195/360 kB | 0.3/1.7 MB | 245/334 kB
 Progress (3): 195/360 kB | 0.3/1.7 MB | 261/334 kB
 Progress (4): 195/360 kB | 0.3/1.7 MB | 261/334 kB | 0/2.0 MB
 Progress (4): 195/360 kB | 0.3/1.7 MB | 278/334 kB | 0/2.0 MB
 Progress (4): 195/360 kB | 0.3/1.7 MB | 278/334 kB | 0/2.0 MB
 Progress (4): 195/360 kB | 0.3/1.7 MB | 294/334 kB | 0/2.0 MB
 Progress (4): 195/360 kB | 0.3/1.7 MB | 310/334 kB | 0/2.0 MB
 Progress (4): 195/360 kB | 0.3/1.7 MB | 310/334 kB | 0/2.0 MB
 Progress (4): 195/360 kB | 0.3/1.7 MB | 327/334 kB | 0/2.0 MB
 Progress (4): 195/360 kB | 0.3/1.7 MB | 334 kB | 0/2.0 MB    
 Progress (4): 195/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
 Progress (4): 195/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
 Progress (4): 212/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
 Progress (4): 228/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
 Progress (4): 228/360 kB | 0.3/1.7 MB | 334 kB | 0.1/2.0 MB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar (334 kB at 427 kB/s)
 #24 7.685 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-websocket/6.1.3/spring-websocket-6.1.3.jar
 #24 7.685 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.1/2.0 MB
 Progress (4): 228/360 kB | 0.3/1.7 MB | 0.1/2.0 MB | 4.8 kB
 Progress (4): 228/360 kB | 0.3/1.7 MB | 0.1/2.0 MB | 4.8 kB
 Progress (4): 228/360 kB | 0.3/1.7 MB | 0.1/2.0 MB | 4.8 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-websocket/3.2.2/spring-boot-starter-websocket-3.2.2.jar (4.8 kB at 6.1 kB/s)
 #24 7.685 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-devtools/3.2.2/spring-boot-devtools-3.2.2.jar
 #24 7.685 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.2/2.0 MB
 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 228/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 244/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 244/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 261/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 261/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 277/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 277/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 294/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 310/360 kB | 0.3/1.7 MB | 0.3/2.0 MB
 Progress (3): 310/360 kB | 0.3/1.7 MB | 0.4/2.0 MB
 Progress (3): 326/360 kB | 0.3/1.7 MB | 0.4/2.0 MB
 Progress (3): 326/360 kB | 0.3/1.7 MB | 0.4/2.0 MB
 Progress (4): 326/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 16/203 kB
 Progress (4): 343/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 16/203 kB
 Progress (4): 359/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 16/203 kB
 Progress (4): 359/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 16/203 kB
 Progress (4): 359/360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 33/203 kB
 Progress (4): 360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 33/203 kB    
 Progress (4): 360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 33/203 kB
 Progress (4): 360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 49/203 kB
 Progress (4): 360 kB | 0.3/1.7 MB | 0.4/2.0 MB | 49/203 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/com/squareup/okio/okio-jvm/3.6.0/okio-jvm-3.6.0.jar (360 kB at 456 kB/s)
 #24 7.690 Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar
 #24 7.690 Progress (3): 0.3/1.7 MB | 0.4/2.0 MB | 49/203 kB
 Progress (3): 0.3/1.7 MB | 0.4/2.0 MB | 66/203 kB
 Progress (3): 0.3/1.7 MB | 0.4/2.0 MB | 80/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 80/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 96/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 96/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 113/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 113/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 113/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 129/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 145/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 145/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 162/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 162/203 kB
 Progress (3): 0.3/1.7 MB | 0.5/2.0 MB | 178/203 kB
 Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 178/203 kB
 Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 195/203 kB
 Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 203 kB    
 Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 203 kB
 Progress (3): 0.3/1.7 MB | 0.6/2.0 MB | 203 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-devtools/3.2.2/spring-boot-devtools-3.2.2.jar (203 kB at 257 kB/s)
 #24 7.692 Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar
 #24 7.692 Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
 Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
 Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
 Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
 Progress (2): 0.3/1.7 MB | 0.6/2.0 MB
 Progress (2): 0.4/1.7 MB | 0.6/2.0 MB
 Progress (2): 0.4/1.7 MB | 0.6/2.0 MB
 Progress (2): 0.4/1.7 MB | 0.6/2.0 MB
 Progress (2): 0.4/1.7 MB | 0.6/2.0 MB
 Progress (3): 0.4/1.7 MB | 0.6/2.0 MB | 16/385 kB
 Progress (3): 0.4/1.7 MB | 0.6/2.0 MB | 16/385 kB
 Progress (3): 0.4/1.7 MB | 0.6/2.0 MB | 16/385 kB
 Progress (3): 0.4/1.7 MB | 0.6/2.0 MB | 33/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 33/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 33/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 49/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 49/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 64/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 64/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 81/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 81/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 97/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 97/385 kB
 Progress (3): 0.5/1.7 MB | 0.6/2.0 MB | 113/385 kB
 Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 113/385 kB
 Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 130/385 kB
 Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 130/385 kB
 Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 146/385 kB
 Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 146/385 kB
 Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 146/385 kB | 1.5 kB
 Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 163/385 kB | 1.5 kB
 Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 163/385 kB | 1.5 kB
 Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 179/385 kB | 1.5 kB
 Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 179/385 kB | 1.5 kB
 Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 195/385 kB | 1.5 kB
 Progress (4): 0.6/1.7 MB | 0.6/2.0 MB | 195/385 kB | 1.5 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar (1.5 kB at 1.9 kB/s)
 #24 7.697 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-validation/3.2.2/spring-boot-starter-validation-3.2.2.jar
 #24 7.697 Progress (3): 0.6/1.7 MB | 0.6/2.0 MB | 212/385 kB
 Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 212/385 kB
 Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 228/385 kB
 Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 228/385 kB
 Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 228/385 kB
 Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 245/385 kB
 Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 245/385 kB
 Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 261/385 kB
 Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 277/385 kB
 Progress (3): 0.7/1.7 MB | 0.6/2.0 MB | 277/385 kB
 Progress (4): 0.7/1.7 MB | 0.6/2.0 MB | 277/385 kB | 15/443 kB
 Progress (4): 0.7/1.7 MB | 0.6/2.0 MB | 277/385 kB | 15/443 kB
 Progress (4): 0.7/1.7 MB | 0.6/2.0 MB | 294/385 kB | 15/443 kB
 Progress (4): 0.7/1.7 MB | 0.6/2.0 MB | 294/385 kB | 31/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 294/385 kB | 31/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 310/385 kB | 31/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 310/385 kB | 48/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 310/385 kB | 48/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 326/385 kB | 48/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 326/385 kB | 64/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 326/385 kB | 64/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 343/385 kB | 64/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 343/385 kB | 81/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 343/385 kB | 81/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 343/385 kB | 81/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 359/385 kB | 81/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 359/385 kB | 97/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 359/385 kB | 97/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 359/385 kB | 113/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 376/385 kB | 113/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 385 kB | 113/443 kB    
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 385 kB | 113/443 kB
 Progress (4): 0.8/1.7 MB | 0.6/2.0 MB | 385 kB | 129/443 kB
 Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 129/443 kB
 Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 146/443 kB
 Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 146/443 kB
 Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 162/443 kB
 Progress (4): 0.9/1.7 MB | 0.6/2.0 MB | 385 kB | 162/443 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar (385 kB at 483 kB/s)
 #24 7.697 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 179/443 kB
                                                   
 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-el/10.1.18/tomcat-embed-el-10.1.18.jar
 #24 7.697 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 179/443 kB
 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 195/443 kB
 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 195/443 kB
 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 211/443 kB
 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 211/443 kB
 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 228/443 kB
 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 228/443 kB
 Progress (3): 0.9/1.7 MB | 0.6/2.0 MB | 244/443 kB
 Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 244/443 kB
 Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB
 Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB
 Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB
 Progress (3): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB
 Progress (4): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB | 4.8 kB
 Progress (4): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB | 4.8 kB
 Progress (4): 1.0/1.7 MB | 0.6/2.0 MB | 260/443 kB | 4.8 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-validation/3.2.2/spring-boot-starter-validation-3.2.2.jar (4.8 kB at 6.0 kB/s)
 #24 7.698 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar
 #24 7.698 Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.6/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.7/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.8/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 0.9/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.0/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.1/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 260/443 kB
 Progress (3): 1.1/1.7 MB | 1.2/2.0 MB | 277/443 kB
 Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 277/443 kB
 Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 293/443 kB
 Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 293/443 kB
 Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB
 Progress (3): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB
 Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.3/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.4/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.1/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.5/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.2/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.6/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.3/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 310/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.7/2.0 MB | 326/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 326/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 342/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 342/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 359/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 359/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 375/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 375/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 392/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 392/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.4/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.8/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.5/1.3 MB
 Progress (4): 1.1/1.7 MB | 1.9/2.0 MB | 408/443 kB | 0.6/1.3 MB
 Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
 Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
 Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
 Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
 Progress (4): 1.1/1.7 MB | 2.0/2.0 MB | 408/443 kB | 0.6/1.3 MB
 Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.6/1.3 MB    
 Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.6/1.3 MB
 Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.6/1.3 MB
 Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.6/1.3 MB
 Progress (4): 1.1/1.7 MB | 2.0 MB | 408/443 kB | 0.7/1.3 MB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar (2.0 MB at 2.5 MB/s)
 #24 7.717 Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
                                                   
 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar
 #24 7.717 Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
 Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
 Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
 Progress (3): 1.1/1.7 MB | 408/443 kB | 0.7/1.3 MB
 Progress (3): 1.1/1.7 MB | 424/443 kB | 0.7/1.3 MB
 Progress (3): 1.1/1.7 MB | 424/443 kB | 0.8/1.3 MB
 Progress (3): 1.1/1.7 MB | 441/443 kB | 0.8/1.3 MB
 Progress (3): 1.1/1.7 MB | 443 kB | 0.8/1.3 MB    
 Progress (3): 1.1/1.7 MB | 443 kB | 0.8/1.3 MB
 Progress (3): 1.1/1.7 MB | 443 kB | 0.8/1.3 MB
 Progress (3): 1.1/1.7 MB | 443 kB | 0.8/1.3 MB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-websocket/6.1.3/spring-websocket-6.1.3.jar (443 kB at 545 kB/s)
 #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.jar
 #24 7.717 Progress (2): 1.1/1.7 MB | 0.8/1.3 MB
 Progress (2): 1.1/1.7 MB | 0.8/1.3 MB
 Progress (2): 1.1/1.7 MB | 0.8/1.3 MB
 Progress (2): 1.1/1.7 MB | 0.8/1.3 MB
 Progress (2): 1.1/1.7 MB | 0.9/1.3 MB
 Progress (2): 1.1/1.7 MB | 0.9/1.3 MB
 Progress (2): 1.1/1.7 MB | 0.9/1.3 MB
 Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 16/261 kB
 Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 16/261 kB
 Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 16/261 kB
 Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 33/261 kB
 Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 33/261 kB
 Progress (3): 1.1/1.7 MB | 0.9/1.3 MB | 49/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 49/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 66/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 66/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 82/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 82/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 98/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 98/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 115/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 115/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 131/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 131/261 kB
 Progress (3): 1.1/1.7 MB | 1.0/1.3 MB | 147/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 147/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 164/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 164/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 180/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 180/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 197/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 197/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 213/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 229/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 246/261 kB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 261 kB    
 Progress (4): 1.1/1.7 MB | 1.1/1.3 MB | 261 kB | 16/18 kB
 Progress (4): 1.1/1.7 MB | 1.1/1.3 MB | 261 kB | 18 kB   
                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/tomcat/embed/tomcat-embed-el/10.1.18/tomcat-embed-el-10.1.18.jar (261 kB at 321 kB/s)
 #24 7.717 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.jar (18 kB at 22 kB/s)
 #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.jar
 #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar
 #24 7.717 Progress (2): 1.1/1.7 MB | 1.1/1.3 MB
 Progress (2): 1.1/1.7 MB | 1.1/1.3 MB
 Progress (2): 1.1/1.7 MB | 1.1/1.3 MB
 Progress (3): 1.1/1.7 MB | 1.1/1.3 MB | 16/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 16/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 16/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 16/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 32/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 32/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 49/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 49/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 49/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 49/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 65/93 kB
 Progress (3): 1.1/1.7 MB | 1.2/1.3 MB | 65/93 kB
 Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 65/93 kB
 Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 81/93 kB
 Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 81/93 kB
 Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 93 kB   
 Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 93 kB
 Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 93 kB
 Progress (3): 1.2/1.7 MB | 1.2/1.3 MB | 93 kB
 Progress (3): 1.2/1.7 MB | 1.3/1.3 MB | 93 kB
 Progress (3): 1.2/1.7 MB | 1.3/1.3 MB | 93 kB
 Progress (3): 1.2/1.7 MB | 1.3/1.3 MB | 93 kB
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar (93 kB at 114 kB/s)
 #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar
 #24 7.717 Progress (2): 1.2/1.7 MB | 1.3/1.3 MB
 Progress (2): 1.2/1.7 MB | 1.3/1.3 MB
 Progress (2): 1.2/1.7 MB | 1.3/1.3 MB
 Progress (2): 1.2/1.7 MB | 1.3/1.3 MB
 Progress (2): 1.3/1.7 MB | 1.3/1.3 MB
 Progress (2): 1.3/1.7 MB | 1.3/1.3 MB
 Progress (2): 1.3/1.7 MB | 1.3 MB    
 Progress (2): 1.3/1.7 MB | 1.3 MB
 Progress (2): 1.3/1.7 MB | 1.3 MB
 Progress (2): 1.3/1.7 MB | 1.3 MB
 Progress (2): 1.3/1.7 MB | 1.3 MB
 Progress (2): 1.3/1.7 MB | 1.3 MB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar (1.3 MB at 1.6 MB/s)
 #24 7.717 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar
 #24 7.717 Progress (1): 1.4/1.7 MB
 Progress (1): 1.4/1.7 MB
 Progress (1): 1.4/1.7 MB
 Progress (1): 1.4/1.7 MB
 Progress (2): 1.4/1.7 MB | 16/165 kB
 Progress (2): 1.4/1.7 MB | 16/165 kB
 Progress (2): 1.4/1.7 MB | 33/165 kB
 Progress (2): 1.4/1.7 MB | 33/165 kB
 Progress (2): 1.4/1.7 MB | 49/165 kB
 Progress (2): 1.4/1.7 MB | 62/165 kB
 Progress (2): 1.4/1.7 MB | 78/165 kB
 Progress (2): 1.4/1.7 MB | 95/165 kB
 Progress (2): 1.4/1.7 MB | 111/165 kB
 Progress (2): 1.4/1.7 MB | 115/165 kB
 Progress (2): 1.4/1.7 MB | 128/165 kB
 Progress (2): 1.4/1.7 MB | 144/165 kB
 Progress (2): 1.4/1.7 MB | 160/165 kB
 Progress (2): 1.4/1.7 MB | 165 kB    
 Progress (3): 1.4/1.7 MB | 165 kB | 16/59 kB
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar (165 kB at 202 kB/s)
 #24 7.721 Downloading from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar
 #24 7.721 Progress (2): 1.4/1.7 MB | 32/59 kB
 Progress (2): 1.4/1.7 MB | 49/59 kB
 Progress (2): 1.4/1.7 MB | 59 kB   
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar (59 kB at 72 kB/s)
 #24 7.721 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar
 #24 7.721 Progress (2): 1.4/1.7 MB | 0/12 MB
 Progress (2): 1.4/1.7 MB | 0/12 MB
 Progress (2): 1.4/1.7 MB | 0/12 MB
 Progress (2): 1.4/1.7 MB | 0.1/12 MB
 Progress (2): 1.4/1.7 MB | 0.1/12 MB
 Progress (2): 1.4/1.7 MB | 0.1/12 MB
 Progress (2): 1.4/1.7 MB | 0.1/12 MB
 Progress (2): 1.4/1.7 MB | 0.1/12 MB
 Progress (2): 1.4/1.7 MB | 0.1/12 MB
 Progress (2): 1.4/1.7 MB | 0.2/12 MB
 Progress (2): 1.4/1.7 MB | 0.2/12 MB
 Progress (2): 1.4/1.7 MB | 0.2/12 MB
 Progress (2): 1.4/1.7 MB | 0.2/12 MB
 Progress (2): 1.4/1.7 MB | 0.2/12 MB
 Progress (3): 1.4/1.7 MB | 0.2/12 MB | 16/69 kB
 Progress (3): 1.4/1.7 MB | 0.2/12 MB | 16/69 kB
 Progress (3): 1.4/1.7 MB | 0.2/12 MB | 33/69 kB
 Progress (3): 1.4/1.7 MB | 0.3/12 MB | 33/69 kB
 Progress (3): 1.4/1.7 MB | 0.3/12 MB | 49/69 kB
 Progress (3): 1.4/1.7 MB | 0.3/12 MB | 49/69 kB
 Progress (3): 1.4/1.7 MB | 0.3/12 MB | 66/69 kB
 Progress (3): 1.4/1.7 MB | 0.3/12 MB | 69 kB   
 Progress (3): 1.4/1.7 MB | 0.3/12 MB | 69 kB
 Progress (3): 1.4/1.7 MB | 0.3/12 MB | 69 kB
 Progress (3): 1.4/1.7 MB | 0.3/12 MB | 69 kB
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar (69 kB at 84 kB/s)
 #24 7.723 Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.14.11/byte-buddy-1.14.11.jar
 #24 7.723 Progress (2): 1.4/1.7 MB | 0.3/12 MB
 Progress (2): 1.4/1.7 MB | 0.4/12 MB
 Progress (2): 1.4/1.7 MB | 0.4/12 MB
 Progress (2): 1.4/1.7 MB | 0.4/12 MB
 Progress (2): 1.4/1.7 MB | 0.4/12 MB
 Progress (2): 1.4/1.7 MB | 0.4/12 MB
 Progress (2): 1.4/1.7 MB | 0.4/12 MB
 Progress (2): 1.4/1.7 MB | 0.5/12 MB
 Progress (2): 1.4/1.7 MB | 0.5/12 MB
 Progress (2): 1.4/1.7 MB | 0.5/12 MB
 Progress (2): 1.4/1.7 MB | 0.5/12 MB
 Progress (2): 1.4/1.7 MB | 0.5/12 MB
 Progress (2): 1.4/1.7 MB | 0.5/12 MB
 Progress (2): 1.4/1.7 MB | 0.6/12 MB
 Progress (2): 1.4/1.7 MB | 0.6/12 MB
 Progress (2): 1.4/1.7 MB | 0.6/12 MB
 Progress (2): 1.4/1.7 MB | 0.6/12 MB
 Progress (2): 1.4/1.7 MB | 0.6/12 MB
 Progress (2): 1.4/1.7 MB | 0.6/12 MB
 Progress (2): 1.5/1.7 MB | 0.6/12 MB
 Progress (2): 1.5/1.7 MB | 0.7/12 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.7/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.1/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.8/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.2/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 16/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 16/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 33/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 33/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 49/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 49/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 65/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 65/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 82/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 82/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.3/4.2 MB | 98/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 98/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 115/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 115/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 131/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 131/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 147/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 164/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 164/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 180/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 180/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 196/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 196/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.4/4.2 MB | 213/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 213/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 229/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 229/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 246/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 246/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 262/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 262/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 278/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 278/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 278/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 295/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.5/4.2 MB | 311/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 311/327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB    
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB | 327 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar (327 kB at 395 kB/s)
 #24 7.733 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar
 #24 7.733 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.6/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 16/68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 16/68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 33/68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 33/68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 49/68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 49/68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 49/68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 66/68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 68 kB   
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.7/4.2 MB | 68 kB
 Progress (4): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB | 68 kB
                                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar (68 kB at 82 kB/s)
 #24 7.733 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
                                                  
 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar
 #24 7.733 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 0.9/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
 Progress (3): 1.5/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.0/12 MB | 0.8/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.8/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (3): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 16/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 16/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 16/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 32/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 32/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 32/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 49/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 49/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 65/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 65/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 78/139 kB
 Progress (4): 1.6/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 94/139 kB
 Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 94/139 kB
 Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 111/139 kB
 Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 111/139 kB
 Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 127/139 kB
 Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 139 kB    
 Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 139 kB
 Progress (4): 1.7/1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 139 kB
 Progress (4): 1.7 MB | 1.1/12 MB | 0.9/4.2 MB | 139 kB    
                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar (139 kB at 166 kB/s)
 #24 7.737 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar
 #24 7.737 Downloaded from central: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.9.22/kotlin-stdlib-1.9.22.jar (1.7 MB at 2.1 MB/s)
 #24 7.737 Progress (2): 1.2/12 MB | 0.9/4.2 MB
 Progress (2): 1.2/12 MB | 0.9/4.2 MB
 Progress (2): 1.2/12 MB | 1.0/4.2 MB
 Progress (2): 1.2/12 MB | 1.0/4.2 MB
 Progress (2): 1.2/12 MB | 1.0/4.2 MB
 Progress (2): 1.2/12 MB | 1.0/4.2 MB
 Progress (2): 1.2/12 MB | 1.0/4.2 MB
 Progress (2): 1.2/12 MB | 1.0/4.2 MB
 Progress (2): 1.3/12 MB | 1.0/4.2 MB
 Progress (2): 1.3/12 MB | 1.0/4.2 MB
 Progress (2): 1.3/12 MB | 1.0/4.2 MB
 Progress (2): 1.3/12 MB | 1.0/4.2 MB
 Progress (2): 1.3/12 MB | 1.0/4.2 MB
 Progress (2): 1.3/12 MB | 1.0/4.2 MB
 Progress (2): 1.4/12 MB | 1.0/4.2 MB
 Progress (2): 1.4/12 MB | 1.0/4.2 MB
 Progress (2): 1.4/12 MB | 1.0/4.2 MB
 Progress (2): 1.4/12 MB | 1.0/4.2 MB
 Progress (2): 1.4/12 MB | 1.0/4.2 MB
 Progress (2): 1.4/12 MB | 1.0/4.2 MB
 Progress (2): 1.4/12 MB | 1.0/4.2 MB
 Progress (3): 1.4/12 MB | 1.0/4.2 MB | 16/27 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 16/27 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 27 kB   
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 27 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 27 kB
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar (27 kB at 33 kB/s)
 #24 7.749 Progress (2): 1.4/12 MB | 1.1/4.2 MB
                                     
 Downloading from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar
 #24 7.749 Progress (2): 1.4/12 MB | 1.1/4.2 MB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 16/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 32/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 49/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 65/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 81/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 98/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 114/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 130/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 147/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 163/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 180/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 196/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 212/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 229/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 245/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 262/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 278/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 294/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 311/920 kB
 Progress (3): 1.4/12 MB | 1.1/4.2 MB | 311/920 kB
 Progress (3): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB
 Progress (3): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB
 Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 16/73 kB
 Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 16/73 kB
 Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 32/73 kB
 Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 32/73 kB
 Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 49/73 kB
 Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 49/73 kB
 Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 65/73 kB
 Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 73 kB   
 Progress (4): 1.4/12 MB | 1.2/4.2 MB | 311/920 kB | 73 kB
 Progress (4): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB | 73 kB
 Progress (4): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB | 73 kB
                                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar (73 kB at 87 kB/s)
 #24 7.749 Downloading from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar
 #24 7.749 Progress (3): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB
 Progress (3): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB
 Progress (3): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB
 Progress (3): 1.4/12 MB | 1.3/4.2 MB | 311/920 kB
 Progress (3): 1.4/12 MB | 1.3/4.2 MB | 327/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 327/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 343/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 343/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 360/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 360/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 376/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 376/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 393/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 402/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 402/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 402/920 kB
 Progress (3): 1.4/12 MB | 1.4/4.2 MB | 418/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 418/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 435/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 435/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 451/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 451/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 468/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 468/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 484/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 500/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 500/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 517/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 517/920 kB
 Progress (3): 1.4/12 MB | 1.5/4.2 MB | 533/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 533/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 549/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 549/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 566/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 566/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 582/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 582/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 599/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 599/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 615/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 615/920 kB
 Progress (3): 1.4/12 MB | 1.6/4.2 MB | 631/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 631/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 648/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 648/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 664/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 664/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 681/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 681/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 697/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 697/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 713/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 713/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 730/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 730/920 kB
 Progress (3): 1.4/12 MB | 1.7/4.2 MB | 746/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 746/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 762/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 762/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 779/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 779/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 795/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 795/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 812/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 812/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 812/920 kB
 Progress (3): 1.4/12 MB | 1.8/4.2 MB | 828/920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 828/920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 844/920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 844/920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 861/920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 877/920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 894/920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 910/920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 920 kB    
                                              
 Downloading from central: https://repo.maven.apache.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar
 #24 7.749 Progress (4): 1.4/12 MB | 1.9/4.2 MB | 920 kB | 16/26 kB
 Progress (4): 1.4/12 MB | 1.9/4.2 MB | 920 kB | 26 kB   
                                                      
 Downloaded from central: https://repo.maven.apache.org/maven2/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar (26 kB at 31 kB/s)
 #24 7.749 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar
 #24 7.749 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.4/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.5/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.6/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.6/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.6/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.6/12 MB | 1.9/4.2 MB | 920 kB
 Progress (4): 1.6/12 MB | 1.9/4.2 MB | 920 kB | 11 kB
 Progress (4): 1.6/12 MB | 1.9/4.2 MB | 920 kB | 11 kB
 Progress (4): 1.6/12 MB | 1.9/4.2 MB | 920 kB | 11 kB
                                                      
 Downloaded from central: https://repo.maven.apache.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar (11 kB at 13 kB/s)
 #24 7.749 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-annotations/3.5.6-Final/hibernate-annotations-3.5.6-Final.jar
 #24 7.749 Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 16/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 33/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 49/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 62/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 79/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 95/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 112/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 128/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 144/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 161/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 177/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 194/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 198/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 214/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 218/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 234/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 251/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 259/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 275/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 292/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 308/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 325/326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 326 kB    
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 326 kB
 Progress (4): 1.7/12 MB | 1.9/4.2 MB | 920 kB | 326 kB
                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar (326 kB at 386 kB/s)
 #24 7.749 Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.7/12 MB | 1.9/4.2 MB | 920 kB
 Progress (3): 1.7/12 MB | 2.0/4.2 MB | 920 kB
 Progress (3): 1.7/12 MB | 2.0/4.2 MB | 920 kB
 Progress (3): 1.7/12 MB | 2.0/4.2 MB | 920 kB
 Progress (3): 1.7/12 MB | 2.0/4.2 MB | 920 kB
 Progress (4): 1.7/12 MB | 2.0/4.2 MB | 920 kB | 15/366 kB
 Progress (4): 1.7/12 MB | 2.0/4.2 MB | 920 kB | 15/366 kB
 Progress (4): 1.7/12 MB | 2.0/4.2 MB | 920 kB | 15/366 kB
 Progress (4): 1.7/12 MB | 2.0/4.2 MB | 920 kB | 31/366 kB
 Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 31/366 kB
 Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 31/366 kB
 Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 48/366 kB
 Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 48/366 kB
 Progress (4): 1.8/12 MB | 2.0/4.2 MB | 920 kB | 48/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 48/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 64/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 64/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 64/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 81/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 81/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 97/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 97/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 97/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 112/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 112/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 112/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 128/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 128/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 128/366 kB
 Progress (4): 1.8/12 MB | 2.1/4.2 MB | 920 kB | 145/366 kB
 Progress (4): 1.8/12 MB | 2.2/4.2 MB | 920 kB | 145/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 145/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 161/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 161/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 161/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 178/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 178/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 178/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 194/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 194/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 194/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 210/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 210/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 210/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 227/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 227/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 227/366 kB
 Progress (4): 1.9/12 MB | 2.2/4.2 MB | 920 kB | 243/366 kB
 Progress (4): 1.9/12 MB | 2.3/4.2 MB | 920 kB | 243/366 kB
 Progress (4): 1.9/12 MB | 2.3/4.2 MB | 920 kB | 243/366 kB
 Progress (4): 1.9/12 MB | 2.3/4.2 MB | 920 kB | 259/366 kB
 Progress (4): 1.9/12 MB | 2.3/4.2 MB | 920 kB | 259/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 259/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 276/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 292/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 292/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 292/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 309/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 309/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 309/366 kB
 Progress (4): 2.0/12 MB | 2.3/4.2 MB | 920 kB | 325/366 kB
 Progress (4): 2.0/12 MB | 2.4/4.2 MB | 920 kB | 325/366 kB
 Progress (4): 2.0/12 MB | 2.4/4.2 MB | 920 kB | 325/366 kB
 Progress (4): 2.0/12 MB | 2.4/4.2 MB | 920 kB | 341/366 kB
 Progress (4): 2.0/12 MB | 2.4/4.2 MB | 920 kB | 341/366 kB
 Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 341/366 kB
 Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 358/366 kB
 Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB    
 Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
 Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
 Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
 Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
 Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
 Progress (4): 2.1/12 MB | 2.4/4.2 MB | 920 kB | 366 kB
                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-annotations/3.5.6-Final/hibernate-annotations-3.5.6-Final.jar (366 kB at 424 kB/s)
 #24 7.765 Downloading from central: https://repo.maven.apache.org/maven2/antlr/antlr/2.7.6/antlr-2.7.6.jar
 #24 7.765 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-core/3.5.6-Final/hibernate-core-3.5.6-Final.jar
 #24 7.765 Downloaded from central: https://repo.maven.apache.org/maven2/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar (920 kB at 1.1 MB/s)
 #24 7.765 Downloading from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.jar
 #24 7.765 Progress (2): 2.1/12 MB | 2.4/4.2 MB
 Progress (2): 2.1/12 MB | 2.4/4.2 MB
 Progress (2): 2.2/12 MB | 2.4/4.2 MB
 Progress (2): 2.2/12 MB | 2.4/4.2 MB
 Progress (2): 2.2/12 MB | 2.4/4.2 MB
 Progress (2): 2.2/12 MB | 2.4/4.2 MB
 Progress (2): 2.2/12 MB | 2.4/4.2 MB
 Progress (2): 2.2/12 MB | 2.4/4.2 MB
 Progress (2): 2.3/12 MB | 2.4/4.2 MB
 Progress (2): 2.3/12 MB | 2.4/4.2 MB
 Progress (2): 2.3/12 MB | 2.4/4.2 MB
 Progress (2): 2.3/12 MB | 2.4/4.2 MB
 Progress (2): 2.3/12 MB | 2.4/4.2 MB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 16/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 33/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 49/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 65/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 81/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 98/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 114/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 131/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 147/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 163/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 180/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 192/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 196/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 213/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 229/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 245/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 249/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 262/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 278/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 294/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 311/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 327/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 344/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 360/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 376/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 393/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 409/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 426/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 442/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 458/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 475/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 491/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 507/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 524/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 540/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 557/559 kB
 Progress (3): 2.3/12 MB | 2.4/4.2 MB | 559 kB    
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 16/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 32/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 49/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 65/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 81/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 98/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 114/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 130/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 147/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 163/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 180/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 196/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 212/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 229/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 245/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 245/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 262/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 278/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 294/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 311/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 327/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 343/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 360/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 376/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 393/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 409/443 kB
 Progress (4): 2.3/12 MB | 2.4/4.2 MB | 559 kB | 425/443 kB
 Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 425/443 kB
 Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 442/443 kB
 Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB    
 Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB
 Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB
 Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB
 Progress (4): 2.3/12 MB | 2.5/4.2 MB | 559 kB | 443 kB
                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/antlr/antlr/2.7.6/antlr-2.7.6.jar (443 kB at 510 kB/s)
 #24 7.777 Progress (3): 2.3/12 MB | 2.5/4.2 MB | 559 kB
 Progress (3): 2.3/12 MB | 2.6/4.2 MB | 559 kB
 Progress (3): 2.3/12 MB | 2.6/4.2 MB | 559 kB
 Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
 Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
 Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
 Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
 Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
 Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0/2.6 MB
 Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.6/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.1/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.2/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.2/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.2/2.6 MB
 Progress (4): 2.3/12 MB | 2.7/4.2 MB | 559 kB | 0.2/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.2/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.3/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.4/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
                                                           
 Downloading from central: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar
 #24 7.777 Progress (4): 2.3/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.4/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.5/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 16/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 33/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 49/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 63/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 63/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 79/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 79/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 96/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 96/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 112/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 112/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 129/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 129/314 kB
 Progress (5): 2.6/12 MB | 2.8/4.2 MB | 559 kB | 0.5/2.6 MB | 145/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 145/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 161/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 178/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 178/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 194/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 194/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 210/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 210/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 210/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 227/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 227/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 243/314 kB
 Progress (5): 2.6/12 MB | 2.9/4.2 MB | 559 kB | 0.5/2.6 MB | 260/314 kB
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 260/314 kB
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 276/314 kB
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 276/314 kB
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 292/314 kB
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 292/314 kB
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 292/314 kB
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 309/314 kB
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 314 kB    
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 314 kB
 Progress (5): 2.6/12 MB | 3.0/4.2 MB | 559 kB | 0.5/2.6 MB | 314 kB
 Progress (5): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.5/2.6 MB | 314 kB
                                                                    
 Downloaded from central: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar (314 kB at 358 kB/s)
 #24 7.781 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.5/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.6/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.7/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
 Progress (4): 2.6/12 MB | 3.1/4.2 MB | 559 kB | 0.8/2.6 MB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.jar (559 kB at 636 kB/s)
 #24 7.783 Downloading from central: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar
 #24 7.783 Progress (3): 2.6/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.6/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.6/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.1/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.7/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.2/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.8/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
                                                  
 Downloading from central: https://repo.maven.apache.org/maven2/javax/transaction/jta/1.1/jta-1.1.jar
 #24 7.789 Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 16/109 kB
 Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 32/109 kB
 Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 49/109 kB
 Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 65/109 kB
 Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 81/109 kB
 Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 98/109 kB
 Progress (4): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB | 109 kB   
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar (109 kB at 124 kB/s)
 #24 7.789 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.8/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 0.9/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.0/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.1/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.2/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (4): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB | 15 kB
                                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/javax/transaction/jta/1.1/jta-1.1.jar (15 kB at 17 kB/s)
 #24 7.789 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-commons-annotations/3.2.0.Final/hibernate-commons-annotations-3.2.0.Final.jar
 #24 7.789 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 2.9/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.0/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.1/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.2/12 MB | 3.3/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.2/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.3/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.4/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.4/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.5/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 16/71 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 33/71 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 49/71 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 64/71 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.3/2.6 MB | 71 kB   
                                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-commons-annotations/3.2.0.Final/hibernate-commons-annotations-3.2.0.Final.jar (71 kB at 81 kB/s)
 #24 7.789 Downloading from central: https://repo.maven.apache.org/maven2/org/hibernate/javax/persistence/hibernate-jpa-2.0-api/1.0.0.Final/hibernate-jpa-2.0-api-1.0.0.Final.jar
 #24 7.789 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.10/spring-messaging-6.1.10.jar
 #24 7.789 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.4/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.5/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.6/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 15/101 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 31/101 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 48/101 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 64/101 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 81/101 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 96/101 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 101 kB   
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/javax/persistence/hibernate-jpa-2.0-api/1.0.0.Final/hibernate-jpa-2.0-api-1.0.0.Final.jar (101 kB at 114 kB/s)
 #24 7.793 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 16/615 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 16/615 kB
 Progress (4): 3.5/12 MB | 3.6/4.2 MB | 1.7/2.6 MB | 33/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 33/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 49/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 49/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 66/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 81/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 81/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 98/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 98/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 114/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 114/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 131/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 131/615 kB
 Progress (4): 3.5/12 MB | 3.7/4.2 MB | 1.7/2.6 MB | 147/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 147/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 163/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 163/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 180/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 180/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 196/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 196/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 213/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 213/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 229/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 245/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 245/615 kB
 Progress (4): 3.5/12 MB | 3.8/4.2 MB | 1.7/2.6 MB | 262/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 262/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 278/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 278/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 294/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 294/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 311/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 311/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 327/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 327/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 344/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 344/615 kB
 Progress (4): 3.5/12 MB | 3.9/4.2 MB | 1.7/2.6 MB | 360/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 360/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 376/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 393/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 393/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 409/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 409/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 426/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 426/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 442/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 458/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 458/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 475/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 491/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 491/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 507/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 524/615 kB
 Progress (4): 3.5/12 MB | 4.0/4.2 MB | 1.7/2.6 MB | 540/615 kB
 Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 540/615 kB
 Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 557/615 kB
 Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 573/615 kB
 Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 589/615 kB
 Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 589/615 kB
 Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 606/615 kB
 Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 615 kB    
 Progress (4): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB | 615 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-messaging/6.1.10/spring-messaging-6.1.10.jar (615 kB at 689 kB/s)
 #24 7.805 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-test/6.1.3/spring-test-6.1.3.jar
 #24 7.805 Progress (3): 3.5/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.6/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.7/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.8/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.8/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.8/12 MB | 4.1/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.8/12 MB | 4.2/4.2 MB | 1.7/2.6 MB
 Progress (3): 3.8/12 MB | 4.2 MB | 1.7/2.6 MB    
 Progress (3): 3.8/12 MB | 4.2 MB | 1.7/2.6 MB
 Progress (4): 3.8/12 MB | 4.2 MB | 1.7/2.6 MB | 16/854 kB
 Progress (4): 3.8/12 MB | 4.2 MB | 1.7/2.6 MB | 33/854 kB
                                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.14.11/byte-buddy-1.14.11.jar (4.2 MB at 4.7 MB/s)
 #24 7.805 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 49/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 65/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 81/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 97/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 114/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 130/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 146/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 163/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 179/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 196/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 212/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 228/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 245/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 261/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 278/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 294/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 310/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 327/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 343/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 359/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 376/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 392/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 409/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 425/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 441/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 458/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 474/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 491/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 507/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 523/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 540/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
                                                  
 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-api/0.12.6/jjwt-api-0.12.6.jar
 #24 7.805 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.7/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.8/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 1.9/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.0/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.1/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.2/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
 Progress (3): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB
 Progress (4): 3.8/12 MB | 2.3/2.6 MB | 556/854 kB | 16/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 16/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 32/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 32/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 49/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 49/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 65/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 65/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 81/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 81/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 81/140 kB
 Progress (4): 3.8/12 MB | 2.4/2.6 MB | 556/854 kB | 98/140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 98/140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 114/140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 114/140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 130/140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 130/140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 140 kB    
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 556/854 kB | 140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 572/854 kB | 140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 589/854 kB | 140 kB
 Progress (4): 3.8/12 MB | 2.5/2.6 MB | 605/854 kB | 140 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-api/0.12.6/jjwt-api-0.12.6.jar (140 kB at 156 kB/s)
 #24 7.809 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 622/854 kB
                                                  
 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-impl/0.12.6/jjwt-impl-0.12.6.jar
 #24 7.809 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 638/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 654/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 671/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 687/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 704/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 720/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 736/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 753/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 769/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 785/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 802/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 818/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 835/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 851/854 kB
 Progress (3): 3.8/12 MB | 2.5/2.6 MB | 854 kB    
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-test/6.1.3/spring-test-6.1.3.jar (854 kB at 946 kB/s)
 #24 7.809 Downloading from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-jackson/0.12.6/jjwt-jackson-0.12.6.jar
 #24 7.809 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-web/6.3.1/spring-security-web-6.3.1.jar
 #24 7.809 Progress (2): 3.8/12 MB | 2.5/2.6 MB
 Progress (2): 3.8/12 MB | 2.5/2.6 MB
 Progress (2): 3.9/12 MB | 2.5/2.6 MB
 Progress (2): 3.9/12 MB | 2.5/2.6 MB
 Progress (2): 3.9/12 MB | 2.5/2.6 MB
 Progress (2): 3.9/12 MB | 2.5/2.6 MB
 Progress (2): 3.9/12 MB | 2.5/2.6 MB
 Progress (2): 3.9/12 MB | 2.5/2.6 MB
 Progress (2): 4.0/12 MB | 2.5/2.6 MB
 Progress (2): 4.0/12 MB | 2.5/2.6 MB
 Progress (2): 4.0/12 MB | 2.5/2.6 MB
 Progress (2): 4.0/12 MB | 2.5/2.6 MB
 Progress (2): 4.0/12 MB | 2.5/2.6 MB
 Progress (2): 4.0/12 MB | 2.5/2.6 MB
 Progress (2): 4.0/12 MB | 2.5/2.6 MB
 Progress (2): 4.1/12 MB | 2.5/2.6 MB
 Progress (2): 4.1/12 MB | 2.5/2.6 MB
 Progress (2): 4.1/12 MB | 2.5/2.6 MB
 Progress (3): 4.1/12 MB | 2.5/2.6 MB | 16/473 kB
 Progress (3): 4.1/12 MB | 2.5/2.6 MB | 16/473 kB
 Progress (3): 4.1/12 MB | 2.5/2.6 MB | 16/473 kB
 Progress (3): 4.1/12 MB | 2.5/2.6 MB | 33/473 kB
 Progress (3): 4.1/12 MB | 2.5/2.6 MB | 33/473 kB
 Progress (3): 4.1/12 MB | 2.5/2.6 MB | 49/473 kB
 Progress (3): 4.2/12 MB | 2.5/2.6 MB | 49/473 kB
 Progress (3): 4.2/12 MB | 2.5/2.6 MB | 49/473 kB
 Progress (3): 4.2/12 MB | 2.5/2.6 MB | 49/473 kB
 Progress (3): 4.2/12 MB | 2.5/2.6 MB | 66/473 kB
 Progress (3): 4.2/12 MB | 2.5/2.6 MB | 66/473 kB
 Progress (3): 4.2/12 MB | 2.5/2.6 MB | 66/473 kB
 Progress (3): 4.2/12 MB | 2.5/2.6 MB | 82/473 kB
 Progress (3): 4.2/12 MB | 2.5/2.6 MB | 98/473 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 98/473 kB | 16/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 115/473 kB | 16/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 115/473 kB | 33/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 115/473 kB | 49/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 131/473 kB | 49/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 131/473 kB | 63/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 131/473 kB | 80/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 147/473 kB | 80/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 147/473 kB | 96/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 164/473 kB | 96/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 164/473 kB | 112/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 164/473 kB | 129/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 180/473 kB | 129/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 180/473 kB | 145/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 180/473 kB | 161/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 197/473 kB | 161/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 197/473 kB | 178/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 213/473 kB | 178/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 213/473 kB | 194/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 213/473 kB | 211/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 229/473 kB | 211/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 229/473 kB | 227/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 246/473 kB | 227/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 246/473 kB | 243/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 256/473 kB | 243/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 256/473 kB | 260/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 272/473 kB | 260/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 272/473 kB | 276/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 289/473 kB | 276/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 289/473 kB | 293/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 289/473 kB | 309/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 305/473 kB | 309/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 305/473 kB | 325/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 321/473 kB | 325/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 321/473 kB | 342/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 338/473 kB | 342/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 338/473 kB | 358/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 354/473 kB | 358/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 354/473 kB | 374/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 370/473 kB | 374/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 387/473 kB | 374/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 403/473 kB | 374/804 kB
 Progress (5): 4.2/12 MB | 2.5/2.6 MB | 403/473 kB | 374/804 kB | 9.4 kB
 Progress (5): 4.2/12 MB | 2.5/2.6 MB | 420/473 kB | 374/804 kB | 9.4 kB
 Progress (5): 4.2/12 MB | 2.5/2.6 MB | 436/473 kB | 374/804 kB | 9.4 kB
                                                                        
 Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-jackson/0.12.6/jjwt-jackson-0.12.6.jar (9.4 kB at 10 kB/s)
 #24 7.809 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-config/6.3.1/spring-security-config-6.3.1.jar
 #24 7.809 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 452/473 kB | 374/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 469/473 kB | 374/804 kB
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 473 kB | 374/804 kB    
 Progress (4): 4.2/12 MB | 2.5/2.6 MB | 473 kB | 374/804 kB
 Progress (4): 4.3/12 MB | 2.5/2.6 MB | 473 kB | 374/804 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/io/jsonwebtoken/jjwt-impl/0.12.6/jjwt-impl-0.12.6.jar (473 kB at 523 kB/s)
 #24 7.809 Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.3/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.4/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.5/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.6/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.7/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.8/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 374/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 391/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 407/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 424/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 440/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 456/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 473/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 489/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 506/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 522/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 538/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 555/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 571/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 587/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 604/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 608/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 624/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 641/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 657/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 673/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 690/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 706/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 723/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 739/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 755/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 772/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 788/804 kB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 804 kB    
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-web/6.3.1/spring-security-web-6.3.1.jar (804 kB at 886 kB/s)
 #24 7.813 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.1/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.2/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.3/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.3/1.9 MB
 Progress (3): 4.9/12 MB | 2.5/2.6 MB | 0.3/1.9 MB
 Progress (3): 4.9/12 MB | 2.6/2.6 MB | 0.3/1.9 MB
 Progress (3): 4.9/12 MB | 2.6 MB | 0.3/1.9 MB    
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/hibernate-core/3.5.6-Final/hibernate-core-3.5.6-Final.jar (2.6 MB at 2.8 MB/s)
 #24 7.813 Progress (2): 4.9/12 MB | 0.3/1.9 MB
 Progress (2): 4.9/12 MB | 0.3/1.9 MB
 Progress (2): 4.9/12 MB | 0.3/1.9 MB
 Progress (2): 4.9/12 MB | 0.4/1.9 MB
 Progress (2): 4.9/12 MB | 0.4/1.9 MB
 Progress (2): 4.9/12 MB | 0.4/1.9 MB
 Progress (2): 4.9/12 MB | 0.4/1.9 MB
 Progress (2): 4.9/12 MB | 0.4/1.9 MB
 Progress (2): 4.9/12 MB | 0.4/1.9 MB
 Progress (2): 4.9/12 MB | 0.5/1.9 MB
 Progress (2): 4.9/12 MB | 0.5/1.9 MB
 Progress (2): 4.9/12 MB | 0.5/1.9 MB
 Progress (2): 4.9/12 MB | 0.5/1.9 MB
 Progress (2): 4.9/12 MB | 0.5/1.9 MB
 Progress (2): 4.9/12 MB | 0.5/1.9 MB
 Progress (2): 4.9/12 MB | 0.6/1.9 MB
 Progress (2): 4.9/12 MB | 0.6/1.9 MB
 Progress (2): 4.9/12 MB | 0.6/1.9 MB
 Progress (2): 4.9/12 MB | 0.6/1.9 MB
 Progress (2): 4.9/12 MB | 0.6/1.9 MB
 Progress (2): 4.9/12 MB | 0.6/1.9 MB
 Progress (2): 4.9/12 MB | 0.7/1.9 MB
 Progress (2): 4.9/12 MB | 0.7/1.9 MB
 Progress (2): 4.9/12 MB | 0.7/1.9 MB
 Progress (2): 4.9/12 MB | 0.7/1.9 MB
 Progress (2): 4.9/12 MB | 0.7/1.9 MB
 Progress (2): 4.9/12 MB | 0.7/1.9 MB
 Progress (2): 4.9/12 MB | 0.8/1.9 MB
 Progress (2): 4.9/12 MB | 0.8/1.9 MB
 Progress (2): 4.9/12 MB | 0.8/1.9 MB
 Progress (2): 4.9/12 MB | 0.8/1.9 MB
 Progress (2): 4.9/12 MB | 0.8/1.9 MB
 Progress (2): 4.9/12 MB | 0.8/1.9 MB
 Progress (2): 4.9/12 MB | 0.9/1.9 MB
 Progress (2): 4.9/12 MB | 0.9/1.9 MB
 Progress (2): 4.9/12 MB | 0.9/1.9 MB
 Progress (2): 4.9/12 MB | 0.9/1.9 MB
 Progress (2): 4.9/12 MB | 0.9/1.9 MB
 Progress (2): 4.9/12 MB | 0.9/1.9 MB
 Progress (2): 4.9/12 MB | 0.9/1.9 MB
 Progress (2): 4.9/12 MB | 1.0/1.9 MB
 Progress (2): 4.9/12 MB | 1.0/1.9 MB
 Progress (2): 4.9/12 MB | 1.0/1.9 MB
 Progress (2): 4.9/12 MB | 1.0/1.9 MB
 Progress (2): 4.9/12 MB | 1.0/1.9 MB
 Progress (2): 4.9/12 MB | 1.0/1.9 MB
 Progress (2): 4.9/12 MB | 1.0/1.9 MB
 Progress (2): 5.0/12 MB | 1.0/1.9 MB
 Progress (2): 5.0/12 MB | 1.0/1.9 MB
 Progress (2): 5.0/12 MB | 1.0/1.9 MB
 Progress (2): 5.0/12 MB | 1.0/1.9 MB
 Progress (2): 5.0/12 MB | 1.0/1.9 MB
 Progress (2): 5.0/12 MB | 1.0/1.9 MB
 Progress (2): 5.0/12 MB | 1.0/1.9 MB
 Progress (2): 5.1/12 MB | 1.0/1.9 MB
 Progress (2): 5.1/12 MB | 1.0/1.9 MB
 Progress (2): 5.1/12 MB | 1.0/1.9 MB
 Progress (2): 5.1/12 MB | 1.0/1.9 MB
 Progress (2): 5.1/12 MB | 1.0/1.9 MB
 Progress (2): 5.1/12 MB | 1.0/1.9 MB
 Progress (2): 5.2/12 MB | 1.0/1.9 MB
 Progress (2): 5.2/12 MB | 1.0/1.9 MB
 Progress (2): 5.2/12 MB | 1.0/1.9 MB
 Progress (2): 5.2/12 MB | 1.0/1.9 MB
 Progress (2): 5.2/12 MB | 1.0/1.9 MB
 Progress (2): 5.2/12 MB | 1.0/1.9 MB
 Progress (2): 5.3/12 MB | 1.0/1.9 MB
 Progress (2): 5.3/12 MB | 1.0/1.9 MB
 Progress (2): 5.3/12 MB | 1.0/1.9 MB
 Progress (2): 5.3/12 MB | 1.0/1.9 MB
 Progress (2): 5.3/12 MB | 1.0/1.9 MB
 Progress (2): 5.3/12 MB | 1.0/1.9 MB
 Progress (2): 5.4/12 MB | 1.0/1.9 MB
 Progress (2): 5.4/12 MB | 1.0/1.9 MB
 Progress (2): 5.4/12 MB | 1.0/1.9 MB
 Progress (2): 5.4/12 MB | 1.0/1.9 MB
 Progress (2): 5.4/12 MB | 1.0/1.9 MB
 Progress (2): 5.4/12 MB | 1.0/1.9 MB
 Progress (2): 5.5/12 MB | 1.0/1.9 MB
 Progress (2): 5.5/12 MB | 1.0/1.9 MB
 Progress (2): 5.5/12 MB | 1.0/1.9 MB
 Progress (2): 5.5/12 MB | 1.0/1.9 MB
 Progress (2): 5.5/12 MB | 1.0/1.9 MB
 Progress (2): 5.5/12 MB | 1.0/1.9 MB
 Progress (2): 5.6/12 MB | 1.0/1.9 MB
 Progress (2): 5.6/12 MB | 1.0/1.9 MB
 Progress (2): 5.6/12 MB | 1.0/1.9 MB
 Progress (2): 5.6/12 MB | 1.0/1.9 MB
 Progress (2): 5.6/12 MB | 1.0/1.9 MB
 Progress (2): 5.6/12 MB | 1.0/1.9 MB
 Progress (2): 5.7/12 MB | 1.0/1.9 MB
 Progress (2): 5.7/12 MB | 1.0/1.9 MB
 Progress (2): 5.7/12 MB | 1.0/1.9 MB
 Progress (2): 5.7/12 MB | 1.0/1.9 MB
 Progress (2): 5.7/12 MB | 1.0/1.9 MB
 Progress (2): 5.7/12 MB | 1.0/1.9 MB
 Progress (2): 5.8/12 MB | 1.0/1.9 MB
 Progress (2): 5.8/12 MB | 1.0/1.9 MB
 Progress (2): 5.8/12 MB | 1.0/1.9 MB
 Progress (2): 5.8/12 MB | 1.0/1.9 MB
 Progress (2): 5.8/12 MB | 1.0/1.9 MB
 Progress (2): 5.8/12 MB | 1.0/1.9 MB
 Progress (2): 5.9/12 MB | 1.0/1.9 MB
 Progress (2): 5.9/12 MB | 1.0/1.9 MB
 Progress (2): 5.9/12 MB | 1.0/1.9 MB
 Progress (2): 5.9/12 MB | 1.0/1.9 MB
 Progress (2): 5.9/12 MB | 1.0/1.9 MB
 Progress (2): 5.9/12 MB | 1.0/1.9 MB
 Progress (2): 6.0/12 MB | 1.0/1.9 MB
 Progress (2): 6.0/12 MB | 1.0/1.9 MB
 Progress (2): 6.0/12 MB | 1.0/1.9 MB
 Progress (2): 6.0/12 MB | 1.0/1.9 MB
 Progress (2): 6.0/12 MB | 1.0/1.9 MB
 Progress (2): 6.0/12 MB | 1.0/1.9 MB
 Progress (2): 6.0/12 MB | 1.0/1.9 MB
 Progress (2): 6.1/12 MB | 1.0/1.9 MB
 Progress (2): 6.1/12 MB | 1.0/1.9 MB
 Progress (2): 6.1/12 MB | 1.0/1.9 MB
 Progress (2): 6.1/12 MB | 1.0/1.9 MB
 Progress (2): 6.1/12 MB | 1.0/1.9 MB
 Progress (2): 6.1/12 MB | 1.1/1.9 MB
 Progress (2): 6.1/12 MB | 1.1/1.9 MB
 Progress (2): 6.1/12 MB | 1.1/1.9 MB
 Progress (2): 6.1/12 MB | 1.1/1.9 MB
 Progress (2): 6.1/12 MB | 1.1/1.9 MB
 Progress (2): 6.1/12 MB | 1.1/1.9 MB
 Progress (2): 6.1/12 MB | 1.2/1.9 MB
 Progress (2): 6.1/12 MB | 1.2/1.9 MB
 Progress (2): 6.1/12 MB | 1.2/1.9 MB
 Progress (2): 6.1/12 MB | 1.2/1.9 MB
 Progress (2): 6.1/12 MB | 1.2/1.9 MB
 Progress (2): 6.1/12 MB | 1.2/1.9 MB
 Progress (2): 6.1/12 MB | 1.3/1.9 MB
 Progress (2): 6.1/12 MB | 1.3/1.9 MB
 Progress (2): 6.1/12 MB | 1.3/1.9 MB
 Progress (2): 6.1/12 MB | 1.3/1.9 MB
 Progress (2): 6.1/12 MB | 1.3/1.9 MB
 Progress (2): 6.1/12 MB | 1.3/1.9 MB
 Progress (2): 6.1/12 MB | 1.4/1.9 MB
 Progress (2): 6.1/12 MB | 1.4/1.9 MB
 Progress (2): 6.1/12 MB | 1.4/1.9 MB
 Progress (2): 6.1/12 MB | 1.4/1.9 MB
 Progress (2): 6.1/12 MB | 1.4/1.9 MB
 Progress (2): 6.1/12 MB | 1.4/1.9 MB
 Progress (2): 6.1/12 MB | 1.4/1.9 MB
 Progress (2): 6.1/12 MB | 1.5/1.9 MB
 Progress (2): 6.1/12 MB | 1.5/1.9 MB
 Progress (2): 6.1/12 MB | 1.5/1.9 MB
 Progress (2): 6.1/12 MB | 1.5/1.9 MB
 Progress (2): 6.1/12 MB | 1.5/1.9 MB
 Progress (2): 6.1/12 MB | 1.5/1.9 MB
 Progress (2): 6.1/12 MB | 1.6/1.9 MB
 Progress (2): 6.1/12 MB | 1.6/1.9 MB
 Progress (2): 6.1/12 MB | 1.6/1.9 MB
 Progress (2): 6.1/12 MB | 1.6/1.9 MB
 Progress (2): 6.1/12 MB | 1.6/1.9 MB
 Progress (2): 6.1/12 MB | 1.6/1.9 MB
 Progress (2): 6.1/12 MB | 1.7/1.9 MB
 Progress (2): 6.1/12 MB | 1.7/1.9 MB
 Progress (2): 6.1/12 MB | 1.7/1.9 MB
 Progress (2): 6.1/12 MB | 1.7/1.9 MB
 Progress (2): 6.1/12 MB | 1.7/1.9 MB
 Progress (2): 6.1/12 MB | 1.7/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.1/12 MB | 1.8/1.9 MB
 Progress (2): 6.2/12 MB | 1.8/1.9 MB
 Progress (2): 6.2/12 MB | 1.8/1.9 MB
 Progress (2): 6.2/12 MB | 1.8/1.9 MB
 Progress (2): 6.2/12 MB | 1.8/1.9 MB
 Progress (2): 6.2/12 MB | 1.8/1.9 MB
 Progress (2): 6.2/12 MB | 1.8/1.9 MB
 Progress (2): 6.3/12 MB | 1.8/1.9 MB
 Progress (2): 6.3/12 MB | 1.8/1.9 MB
 Progress (2): 6.3/12 MB | 1.8/1.9 MB
 Progress (2): 6.3/12 MB | 1.8/1.9 MB
 Progress (2): 6.3/12 MB | 1.8/1.9 MB
 Progress (2): 6.3/12 MB | 1.8/1.9 MB
 Progress (2): 6.4/12 MB | 1.8/1.9 MB
 Progress (2): 6.4/12 MB | 1.8/1.9 MB
 Progress (2): 6.4/12 MB | 1.8/1.9 MB
 Progress (2): 6.4/12 MB | 1.8/1.9 MB
 Progress (2): 6.4/12 MB | 1.8/1.9 MB
 Progress (2): 6.4/12 MB | 1.8/1.9 MB
 Progress (2): 6.5/12 MB | 1.8/1.9 MB
 Progress (2): 6.5/12 MB | 1.8/1.9 MB
 Progress (2): 6.5/12 MB | 1.8/1.9 MB
 Progress (2): 6.5/12 MB | 1.8/1.9 MB
 Progress (2): 6.5/12 MB | 1.9/1.9 MB
 Progress (2): 6.5/12 MB | 1.9/1.9 MB
 Progress (2): 6.5/12 MB | 1.9/1.9 MB
 Progress (2): 6.5/12 MB | 1.9 MB    
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/security/spring-security-config/6.3.1/spring-security-config-6.3.1.jar (1.9 MB at 2.1 MB/s)
 #24 7.825 Progress (1): 6.5/12 MB
 Progress (1): 6.5/12 MB
 Progress (1): 6.6/12 MB
 Progress (1): 6.6/12 MB
 Progress (1): 6.6/12 MB
 Progress (1): 6.6/12 MB
 Progress (1): 6.6/12 MB
 Progress (1): 6.6/12 MB
 Progress (1): 6.7/12 MB
 Progress (1): 6.7/12 MB
 Progress (1): 6.7/12 MB
 Progress (1): 6.7/12 MB
 Progress (1): 6.7/12 MB
 Progress (1): 6.7/12 MB
 Progress (1): 6.8/12 MB
 Progress (1): 6.8/12 MB
 Progress (1): 6.8/12 MB
 Progress (1): 6.8/12 MB
 Progress (1): 6.8/12 MB
 Progress (1): 6.8/12 MB
 Progress (1): 6.9/12 MB
 Progress (1): 6.9/12 MB
 Progress (1): 6.9/12 MB
 Progress (1): 6.9/12 MB
 Progress (1): 6.9/12 MB
 Progress (1): 6.9/12 MB
 Progress (1): 6.9/12 MB
 Progress (1): 7.0/12 MB
 Progress (1): 7.0/12 MB
 Progress (1): 7.0/12 MB
 Progress (1): 7.0/12 MB
 Progress (1): 7.0/12 MB
 Progress (1): 7.0/12 MB
 Progress (1): 7.1/12 MB
 Progress (1): 7.1/12 MB
 Progress (1): 7.1/12 MB
 Progress (1): 7.1/12 MB
 Progress (1): 7.1/12 MB
 Progress (1): 7.1/12 MB
 Progress (1): 7.2/12 MB
 Progress (1): 7.2/12 MB
 Progress (1): 7.2/12 MB
 Progress (1): 7.2/12 MB
 Progress (1): 7.2/12 MB
 Progress (1): 7.2/12 MB
 Progress (1): 7.3/12 MB
 Progress (1): 7.3/12 MB
 Progress (1): 7.3/12 MB
 Progress (1): 7.3/12 MB
 Progress (1): 7.3/12 MB
 Progress (1): 7.3/12 MB
 Progress (1): 7.4/12 MB
 Progress (1): 7.4/12 MB
 Progress (1): 7.4/12 MB
 Progress (1): 7.4/12 MB
 Progress (1): 7.4/12 MB
 Progress (1): 7.4/12 MB
 Progress (1): 7.5/12 MB
 Progress (1): 7.5/12 MB
 Progress (1): 7.5/12 MB
 Progress (1): 7.5/12 MB
 Progress (1): 7.5/12 MB
 Progress (1): 7.5/12 MB
 Progress (1): 7.6/12 MB
 Progress (1): 7.6/12 MB
 Progress (1): 7.6/12 MB
 Progress (1): 7.6/12 MB
 Progress (1): 7.6/12 MB
 Progress (1): 7.6/12 MB
 Progress (1): 7.7/12 MB
 Progress (1): 7.7/12 MB
 Progress (1): 7.7/12 MB
 Progress (1): 7.7/12 MB
 Progress (1): 7.7/12 MB
 Progress (1): 7.7/12 MB
 Progress (1): 7.8/12 MB
 Progress (1): 7.8/12 MB
 Progress (1): 7.8/12 MB
 Progress (1): 7.8/12 MB
 Progress (1): 7.8/12 MB
 Progress (1): 7.8/12 MB
 Progress (1): 7.9/12 MB
 Progress (1): 7.9/12 MB
 Progress (1): 7.9/12 MB
 Progress (1): 7.9/12 MB
 Progress (1): 7.9/12 MB
 Progress (1): 7.9/12 MB
 Progress (1): 7.9/12 MB
 Progress (1): 8.0/12 MB
 Progress (1): 8.0/12 MB
 Progress (1): 8.0/12 MB
 Progress (1): 8.0/12 MB
 Progress (1): 8.0/12 MB
 Progress (1): 8.0/12 MB
 Progress (1): 8.1/12 MB
 Progress (1): 8.1/12 MB
 Progress (1): 8.1/12 MB
 Progress (1): 8.1/12 MB
 Progress (1): 8.1/12 MB
 Progress (1): 8.1/12 MB
 Progress (1): 8.2/12 MB
 Progress (1): 8.2/12 MB
 Progress (1): 8.2/12 MB
 Progress (1): 8.2/12 MB
 Progress (1): 8.2/12 MB
 Progress (1): 8.2/12 MB
 Progress (1): 8.3/12 MB
 Progress (1): 8.3/12 MB
 Progress (1): 8.3/12 MB
 Progress (1): 8.3/12 MB
 Progress (1): 8.3/12 MB
 Progress (1): 8.3/12 MB
 Progress (1): 8.4/12 MB
 Progress (1): 8.4/12 MB
 Progress (1): 8.4/12 MB
 Progress (1): 8.4/12 MB
 Progress (1): 8.4/12 MB
 Progress (1): 8.4/12 MB
 Progress (1): 8.5/12 MB
 Progress (1): 8.5/12 MB
 Progress (1): 8.5/12 MB
 Progress (1): 8.5/12 MB
 Progress (1): 8.5/12 MB
 Progress (1): 8.5/12 MB
 Progress (1): 8.6/12 MB
 Progress (1): 8.6/12 MB
 Progress (1): 8.6/12 MB
 Progress (1): 8.6/12 MB
 Progress (1): 8.6/12 MB
 Progress (1): 8.6/12 MB
 Progress (1): 8.7/12 MB
 Progress (1): 8.7/12 MB
 Progress (1): 8.7/12 MB
 Progress (1): 8.7/12 MB
 Progress (1): 8.7/12 MB
 Progress (1): 8.7/12 MB
 Progress (1): 8.7/12 MB
 Progress (1): 8.8/12 MB
 Progress (1): 8.8/12 MB
 Progress (1): 8.8/12 MB
 Progress (1): 8.8/12 MB
 Progress (1): 8.8/12 MB
 Progress (1): 8.8/12 MB
 Progress (1): 8.9/12 MB
 Progress (1): 8.9/12 MB
 Progress (1): 8.9/12 MB
 Progress (1): 8.9/12 MB
 Progress (1): 8.9/12 MB
 Progress (1): 8.9/12 MB
 Progress (1): 9.0/12 MB
 Progress (1): 9.0/12 MB
 Progress (1): 9.0/12 MB
 Progress (1): 9.0/12 MB
 Progress (1): 9.0/12 MB
 Progress (1): 9.0/12 MB
 Progress (1): 9.1/12 MB
 Progress (1): 9.1/12 MB
 Progress (1): 9.1/12 MB
 Progress (1): 9.1/12 MB
 Progress (1): 9.1/12 MB
 Progress (1): 9.1/12 MB
 Progress (1): 9.1/12 MB
 Progress (1): 9.2/12 MB
 Progress (1): 9.2/12 MB
 Progress (1): 9.2/12 MB
 Progress (1): 9.2/12 MB
 Progress (1): 9.2/12 MB
 Progress (1): 9.2/12 MB
 Progress (1): 9.3/12 MB
 Progress (1): 9.3/12 MB
 Progress (1): 9.3/12 MB
 Progress (1): 9.3/12 MB
 Progress (1): 9.3/12 MB
 Progress (1): 9.3/12 MB
 Progress (1): 9.4/12 MB
 Progress (1): 9.4/12 MB
 Progress (1): 9.4/12 MB
 Progress (1): 9.4/12 MB
 Progress (1): 9.4/12 MB
 Progress (1): 9.4/12 MB
 Progress (1): 9.5/12 MB
 Progress (1): 9.5/12 MB
 Progress (1): 9.5/12 MB
 Progress (1): 9.5/12 MB
 Progress (1): 9.5/12 MB
 Progress (1): 9.5/12 MB
 Progress (1): 9.6/12 MB
 Progress (1): 9.6/12 MB
 Progress (1): 9.6/12 MB
 Progress (1): 9.6/12 MB
 Progress (1): 9.6/12 MB
 Progress (1): 9.6/12 MB
 Progress (1): 9.7/12 MB
 Progress (1): 9.7/12 MB
 Progress (1): 9.7/12 MB
 Progress (1): 9.7/12 MB
 Progress (1): 9.7/12 MB
 Progress (1): 9.7/12 MB
 Progress (1): 9.8/12 MB
 Progress (1): 9.8/12 MB
 Progress (1): 9.8/12 MB
 Progress (1): 9.8/12 MB
 Progress (1): 9.8/12 MB
 Progress (1): 9.8/12 MB
 Progress (1): 9.9/12 MB
 Progress (1): 9.9/12 MB
 Progress (1): 9.9/12 MB
 Progress (1): 9.9/12 MB
 Progress (1): 9.9/12 MB
 Progress (1): 9.9/12 MB
 Progress (1): 10.0/12 MB
 Progress (1): 10.0/12 MB
 Progress (1): 10.0/12 MB
 Progress (1): 10/12 MB  
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 10/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 11/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12/12 MB
 Progress (1): 12 MB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.jar (12 MB at 12 MB/s)
 #24 7.962 [INFO] 
 #24 7.962 [INFO] --- clean:3.3.2:clean (default-clean) @ backend ---
 #24 7.969 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.pom
 #24 7.973 Progress (1): 8.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.pom (8.7 kB at 1.7 MB/s)
 #24 7.975 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/13/plexus-13.pom
 #24 7.979 Progress (1): 16/27 kB
 Progress (1): 27 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/13/plexus-13.pom (27 kB at 4.6 MB/s)
 #24 7.985 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.jar
 #24 7.989 Progress (1): 16/192 kB
 Progress (1): 33/192 kB
 Progress (1): 49/192 kB
 Progress (1): 62/192 kB
 Progress (1): 78/192 kB
 Progress (1): 94/192 kB
 Progress (1): 111/192 kB
 Progress (1): 127/192 kB
 Progress (1): 143/192 kB
 Progress (1): 160/192 kB
 Progress (1): 176/192 kB
 Progress (1): 192 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.jar (192 kB at 32 MB/s)
 #24 8.032 [INFO] 
 #24 8.032 [INFO] --- resources:3.3.1:resources (default-resources) @ backend ---
 #24 8.036 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.pom
 #24 8.039 Progress (1): 2.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.pom (2.7 kB at 531 kB/s)
 #24 8.042 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom
 #24 8.045 Progress (1): 16/23 kB
 Progress (1): 23 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom (23 kB at 4.5 MB/s)
 #24 8.049 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.pom
 #24 8.053 Progress (1): 8.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.pom (8.8 kB at 1.8 MB/s)
 #24 8.055 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/10/plexus-10.pom
 #24 8.059 Progress (1): 16/25 kB
 Progress (1): 25 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/10/plexus-10.pom (25 kB at 5.1 MB/s)
 #24 8.063 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.pom
 #24 8.067 Progress (1): 6.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.pom (6.0 kB at 1.5 MB/s)
 #24 8.069 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/39/maven-shared-components-39.pom
 #24 8.073 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/39/maven-shared-components-39.pom (3.2 kB at 805 kB/s)
 #24 8.076 Downloading from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.pom
 #24 8.080 Progress (1): 612 B
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.pom (612 B at 153 kB/s)
 #24 8.083 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.pom
 #24 8.086 Progress (1): 2.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.pom (2.7 kB at 686 kB/s)
 #24 8.088 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.36/slf4j-parent-1.7.36.pom
 #24 8.091 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.36/slf4j-parent-1.7.36.pom (14 kB at 3.5 MB/s)
 #24 8.094 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.pom
 #24 8.098 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.pom (3.2 kB at 801 kB/s)
 #24 8.100 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/15/spice-parent-15.pom
 #24 8.103 Progress (1): 8.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/15/spice-parent-15.pom (8.4 kB at 2.8 MB/s)
 #24 8.105 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom
 #24 8.109 Progress (1): 8.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (8.4 kB at 1.7 MB/s)
 #24 8.112 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.pom
 #24 8.116 Progress (1): 8.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.pom (8.0 kB at 2.0 MB/s)
 #24 8.119 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.pom
 #24 8.123 Progress (1): 16/20 kB
 Progress (1): 20 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.pom (20 kB at 4.9 MB/s)
 #24 8.128 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.2/junit-bom-5.7.2.pom
 #24 8.132 Progress (1): 5.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.2/junit-bom-5.7.2.pom (5.1 kB at 1.3 MB/s)
 #24 8.135 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.pom
 #24 8.139 Progress (1): 16/31 kB
 Progress (1): 31 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.pom (31 kB at 6.1 MB/s)
 #24 8.144 Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.1/junit-bom-5.7.1.pom
 #24 8.147 Progress (1): 5.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.1/junit-bom-5.7.1.pom (5.1 kB at 1.3 MB/s)
 #24 8.151 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar
 #24 8.155 Progress (1): 16/85 kB
 Progress (1): 32/85 kB
 Progress (1): 49/85 kB
 Progress (1): 65/85 kB
 Progress (1): 81/85 kB
 Progress (1): 85 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar (85 kB at 14 MB/s)
 #24 8.158 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.jar
 #24 8.159 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.jar
 #24 8.160 Downloading from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.jar
 #24 8.161 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
 #24 8.165 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar
 #24 8.166 Progress (1): 16/269 kB
 Progress (1): 32/269 kB
 Progress (1): 49/269 kB
 Progress (2): 49/269 kB | 2.5 kB
 Progress (2): 65/269 kB | 2.5 kB
 Progress (2): 80/269 kB | 2.5 kB
 Progress (2): 96/269 kB | 2.5 kB
 Progress (2): 113/269 kB | 2.5 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.jar (2.5 kB at 277 kB/s)
 #24 8.169 Progress (1): 129/269 kB
                         
 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar
 #24 8.170 Progress (1): 145/269 kB
 Progress (1): 162/269 kB
 Progress (1): 178/269 kB
 Progress (1): 194/269 kB
 Progress (1): 211/269 kB
 Progress (2): 211/269 kB | 16/55 kB
 Progress (2): 227/269 kB | 16/55 kB
 Progress (2): 227/269 kB | 32/55 kB
 Progress (2): 244/269 kB | 32/55 kB
 Progress (2): 244/269 kB | 49/55 kB
 Progress (2): 244/269 kB | 55 kB   
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.jar (55 kB at 3.7 MB/s)
 #24 8.173 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar
 #24 8.173 Progress (2): 244/269 kB | 16/327 kB
 Progress (2): 244/269 kB | 32/327 kB
 Progress (2): 244/269 kB | 49/327 kB
 Progress (2): 244/269 kB | 65/327 kB
 Progress (2): 244/269 kB | 78/327 kB
 Progress (2): 244/269 kB | 94/327 kB
 Progress (2): 244/269 kB | 111/327 kB
 Progress (2): 244/269 kB | 127/327 kB
 Progress (2): 244/269 kB | 143/327 kB
 Progress (2): 244/269 kB | 160/327 kB
 Progress (2): 244/269 kB | 176/327 kB
 Progress (2): 244/269 kB | 193/327 kB
 Progress (2): 244/269 kB | 209/327 kB
 Progress (2): 244/269 kB | 225/327 kB
 Progress (2): 244/269 kB | 242/327 kB
 Progress (2): 244/269 kB | 258/327 kB
 Progress (2): 244/269 kB | 275/327 kB
 Progress (2): 244/269 kB | 291/327 kB
 Progress (2): 244/269 kB | 307/327 kB
 Progress (2): 244/269 kB | 324/327 kB
 Progress (2): 244/269 kB | 327 kB    
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar (327 kB at 23 MB/s)
 #24 8.176 Progress (2): 244/269 kB | 8.5 kB
 Progress (2): 260/269 kB | 8.5 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar (8.5 kB at 530 kB/s)
 #24 8.178 Progress (1): 269 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.jar (269 kB at 13 MB/s)
 #24 8.179 Progress (1): 16/587 kB
 Progress (1): 32/587 kB
 Progress (1): 49/587 kB
 Progress (1): 65/587 kB
 Progress (1): 80/587 kB
 Progress (1): 96/587 kB
 Progress (1): 113/587 kB
 Progress (1): 129/587 kB
 Progress (1): 145/587 kB
 Progress (1): 162/587 kB
 Progress (1): 178/587 kB
 Progress (1): 194/587 kB
 Progress (1): 211/587 kB
 Progress (1): 227/587 kB
 Progress (1): 244/587 kB
 Progress (1): 260/587 kB
 Progress (1): 276/587 kB
 Progress (1): 293/587 kB
 Progress (1): 309/587 kB
 Progress (1): 326/587 kB
 Progress (1): 342/587 kB
 Progress (1): 358/587 kB
 Progress (1): 375/587 kB
 Progress (1): 391/587 kB
 Progress (1): 407/587 kB
 Progress (1): 424/587 kB
 Progress (1): 440/587 kB
 Progress (1): 457/587 kB
 Progress (1): 473/587 kB
 Progress (1): 489/587 kB
 Progress (1): 506/587 kB
 Progress (1): 522/587 kB
 Progress (1): 539/587 kB
 Progress (1): 555/587 kB
 Progress (1): 571/587 kB
 Progress (1): 587 kB    
 Progress (2): 587 kB | 16/41 kB
                                
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar (587 kB at 23 MB/s)
 #24 8.187 Progress (1): 32/41 kB
 Progress (1): 41 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar (41 kB at 1.5 MB/s)
 #24 8.242 [INFO] Copying 1 resource from src/main/resources to target/classes
 #24 8.255 [INFO] Copying 1 resource from src/main/resources to target/classes
 #24 8.257 [INFO] 
 #24 8.257 [INFO] --- compiler:3.11.0:compile (default-compile) @ backend ---
 #24 8.260 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.pom
 #24 8.266 Progress (1): 5.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.pom (5.8 kB at 833 kB/s)
 #24 8.271 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/34/maven-shared-components-34.pom
 #24 8.275 Progress (1): 5.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/34/maven-shared-components-34.pom (5.1 kB at 1.3 MB/s)
 #24 8.277 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/34/maven-parent-34.pom
 #24 8.281 Progress (1): 16/43 kB
 Progress (1): 33/43 kB
 Progress (1): 43 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/34/maven-parent-34.pom (43 kB at 11 MB/s)
 #24 8.286 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.pom
 #24 8.289 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.pom (14 kB at 3.6 MB/s)
 #24 8.292 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom
 #24 8.296 Progress (1): 16/68 kB
 Progress (1): 32/68 kB
 Progress (1): 49/68 kB
 Progress (1): 65/68 kB
 Progress (1): 68 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom (68 kB at 14 MB/s)
 #24 8.300 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pom
 #24 8.304 Progress (1): 16 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pom (16 kB at 3.9 MB/s)
 #24 8.307 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom
 #24 8.311 Progress (1): 4.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom (4.7 kB at 1.2 MB/s)
 #24 8.313 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom
 #24 8.317 Progress (1): 6.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom (6.4 kB at 1.6 MB/s)
 #24 8.319 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/23/maven-parent-23.pom
 #24 8.323 Progress (1): 16/33 kB
 Progress (1): 33 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/23/maven-parent-23.pom (33 kB at 8.1 MB/s)
 #24 8.327 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom
 #24 8.330 Progress (1): 815 B
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom (815 B at 204 kB/s)
 #24 8.333 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom
 #24 8.336 Progress (1): 4.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom (4.2 kB at 1.1 MB/s)
 #24 8.338 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom
 #24 8.342 Progress (1): 16/17 kB
 Progress (1): 17 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom (17 kB at 4.3 MB/s)
 #24 8.346 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.2/plexus-java-1.1.2.pom
 #24 8.349 Progress (1): 5.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.2/plexus-java-1.1.2.pom (5.0 kB at 994 kB/s)
 #24 8.352 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-languages/1.1.2/plexus-languages-1.1.2.pom
 #24 8.355 Progress (1): 4.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-languages/1.1.2/plexus-languages-1.1.2.pom (4.1 kB at 1.0 MB/s)
 #24 8.358 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.4/asm-9.4.pom
 #24 8.362 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.4/asm-9.4.pom (2.4 kB at 592 kB/s)
 #24 8.365 Downloading from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.pom
 #24 8.368 Progress (1): 16/17 kB
 Progress (1): 17 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.pom (17 kB at 3.4 MB/s)
 #24 8.373 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.13.0/plexus-compiler-api-2.13.0.pom
 #24 8.384 Progress (1): 1.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.13.0/plexus-compiler-api-2.13.0.pom (1.1 kB at 88 kB/s)
 #24 8.387 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler/2.13.0/plexus-compiler-2.13.0.pom
 #24 8.391 Progress (1): 8.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler/2.13.0/plexus-compiler-2.13.0.pom (8.4 kB at 1.7 MB/s)
 #24 8.395 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/10.0/plexus-components-10.0.pom
 #24 8.399 Progress (1): 2.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/10.0/plexus-components-10.0.pom (2.7 kB at 536 kB/s)
 #24 8.404 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.13.0/plexus-compiler-manager-2.13.0.pom
 #24 8.408 Progress (1): 1.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.13.0/plexus-compiler-manager-2.13.0.pom (1.1 kB at 228 kB/s)
 #24 8.412 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/2.1.1/plexus-component-annotations-2.1.1.pom
 #24 8.415 Progress (1): 770 B
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/2.1.1/plexus-component-annotations-2.1.1.pom (770 B at 154 kB/s)
 #24 8.418 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/2.1.1/plexus-containers-2.1.1.pom
 #24 8.421 Progress (1): 6.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/2.1.1/plexus-containers-2.1.1.pom (6.0 kB at 1.5 MB/s)
 #24 8.425 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/6.5/plexus-6.5.pom
 #24 8.428 Progress (1): 16/26 kB
 Progress (1): 26 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/6.5/plexus-6.5.pom (26 kB at 5.1 MB/s)
 #24 8.433 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.13.0/plexus-compiler-javac-2.13.0.pom
 #24 8.437 Progress (1): 1.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.13.0/plexus-compiler-javac-2.13.0.pom (1.2 kB at 301 kB/s)
 #24 8.439 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compilers/2.13.0/plexus-compilers-2.13.0.pom
 #24 8.443 Progress (1): 1.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compilers/2.13.0/plexus-compilers-2.13.0.pom (1.3 kB at 331 kB/s)
 #24 8.449 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar
 #24 8.453 Progress (1): 16/153 kB
 Progress (1): 33/153 kB
 Progress (1): 49/153 kB
 Progress (1): 65/153 kB
 Progress (1): 81/153 kB
 Progress (1): 97/153 kB
 Progress (1): 114/153 kB
 Progress (1): 130/153 kB
 Progress (1): 147/153 kB
 Progress (1): 153 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar (153 kB at 22 MB/s)
 #24 8.456 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.jar
 #24 8.457 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar
 #24 8.457 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar
 #24 8.459 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.2/plexus-java-1.1.2.jar
 #24 8.459 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.4/asm-9.4.jar
 #24 8.462 Progress (1): 16/215 kB
 Progress (1): 33/215 kB
 Progress (1): 49/215 kB
 Progress (1): 65/215 kB
 Progress (2): 65/215 kB | 14 kB
 Progress (2): 81/215 kB | 14 kB
 Progress (2): 97/215 kB | 14 kB
 Progress (3): 97/215 kB | 14 kB | 4.2 kB
 Progress (3): 114/215 kB | 14 kB | 4.2 kB
 Progress (3): 130/215 kB | 14 kB | 4.2 kB
                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar (14 kB at 2.3 MB/s)
 #24 8.462 Downloading from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.jar
 #24 8.462 Progress (2): 147/215 kB | 4.2 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar (4.2 kB at 702 kB/s)
 #24 8.462 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.13.0/plexus-compiler-api-2.13.0.jar
 #24 8.462 Progress (1): 163/215 kB
 Progress (1): 179/215 kB
 Progress (1): 196/215 kB
 Progress (1): 212/215 kB
 Progress (1): 215 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.jar (215 kB at 27 MB/s)
 #24 8.463 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.jar
 #24 8.464 Progress (1): 16/122 kB
 Progress (2): 16/122 kB | 16/27 kB
 Progress (2): 32/122 kB | 16/27 kB
 Progress (2): 49/122 kB | 16/27 kB
 Progress (3): 49/122 kB | 16/27 kB | 16/334 kB
 Progress (3): 65/122 kB | 16/27 kB | 16/334 kB
 Progress (3): 81/122 kB | 16/27 kB | 16/334 kB
 Progress (3): 81/122 kB | 16/27 kB | 33/334 kB
 Progress (3): 98/122 kB | 16/27 kB | 33/334 kB
 Progress (3): 98/122 kB | 16/27 kB | 49/334 kB
 Progress (3): 114/122 kB | 16/27 kB | 49/334 kB
 Progress (3): 122 kB | 16/27 kB | 49/334 kB    
 Progress (3): 122 kB | 16/27 kB | 63/334 kB
 Progress (3): 122 kB | 16/27 kB | 80/334 kB
 Progress (3): 122 kB | 16/27 kB | 96/334 kB
 Progress (3): 122 kB | 16/27 kB | 113/334 kB
 Progress (4): 122 kB | 16/27 kB | 113/334 kB | 16/267 kB
                                                         
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.4/asm-9.4.jar (122 kB at 14 MB/s)
 #24 8.467 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.13.0/plexus-compiler-manager-2.13.0.jar
 #24 8.467 Progress (3): 16/27 kB | 129/334 kB | 16/267 kB
 Progress (3): 16/27 kB | 129/334 kB | 33/267 kB
 Progress (3): 16/27 kB | 145/334 kB | 33/267 kB
 Progress (3): 16/27 kB | 162/334 kB | 33/267 kB
 Progress (3): 16/27 kB | 162/334 kB | 49/267 kB
 Progress (3): 16/27 kB | 162/334 kB | 64/267 kB
 Progress (3): 16/27 kB | 178/334 kB | 64/267 kB
 Progress (3): 16/27 kB | 178/334 kB | 80/267 kB
 Progress (3): 16/27 kB | 178/334 kB | 97/267 kB
 Progress (3): 16/27 kB | 194/334 kB | 97/267 kB
 Progress (3): 16/27 kB | 194/334 kB | 113/267 kB
 Progress (3): 16/27 kB | 194/334 kB | 129/267 kB
 Progress (3): 16/27 kB | 211/334 kB | 129/267 kB
 Progress (3): 16/27 kB | 211/334 kB | 146/267 kB
 Progress (3): 16/27 kB | 211/334 kB | 162/267 kB
 Progress (3): 16/27 kB | 211/334 kB | 179/267 kB
 Progress (3): 16/27 kB | 227/334 kB | 179/267 kB
 Progress (3): 16/27 kB | 227/334 kB | 195/267 kB
 Progress (3): 16/27 kB | 244/334 kB | 195/267 kB
 Progress (3): 16/27 kB | 244/334 kB | 211/267 kB
 Progress (3): 16/27 kB | 244/334 kB | 228/267 kB
 Progress (3): 16/27 kB | 244/334 kB | 244/267 kB
 Progress (3): 27 kB | 244/334 kB | 244/267 kB   
 Progress (3): 27 kB | 244/334 kB | 261/267 kB
 Progress (3): 27 kB | 244/334 kB | 267 kB    
 Progress (3): 27 kB | 260/334 kB | 267 kB
 Progress (3): 27 kB | 276/334 kB | 267 kB
                                          
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.jar (267 kB at 22 MB/s)
 #24 8.470 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.13.0/plexus-compiler-javac-2.13.0.jar
 #24 8.470 Progress (2): 27 kB | 293/334 kB
 Progress (2): 27 kB | 309/334 kB
 Progress (2): 27 kB | 326/334 kB
 Progress (2): 27 kB | 334 kB    
                             
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.13.0/plexus-compiler-api-2.13.0.jar (27 kB at 2.1 MB/s)
 #24 8.471 Downloaded from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.jar (334 kB at 26 MB/s)
 #24 8.471 Progress (1): 16/55 kB
 Progress (1): 32/55 kB
 Progress (1): 49/55 kB
 Progress (1): 55 kB   
 Progress (2): 55 kB | 16/23 kB
 Progress (2): 55 kB | 23 kB   
                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.13.0/plexus-compiler-javac-2.13.0.jar (23 kB at 1.5 MB/s)
 #24 8.474 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.2/plexus-java-1.1.2.jar (55 kB at 3.2 MB/s)
 #24 8.475 Progress (1): 4.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.13.0/plexus-compiler-manager-2.13.0.jar (4.7 kB at 274 kB/s)
 #24 8.570 [INFO] Changes detected - recompiling the module! :source
 #24 8.573 [INFO] Compiling 148 source files with javac [debug release 17] to target/classes
 #24 13.50 [INFO] Annotation processing is enabled because one or more processors were found
 #24 13.50   on the class path. A future release of javac may disable annotation processing
 #24 13.50   unless at least one processor is specified by name (-processor), or a search
 #24 13.50   path is specified (--processor-path, --processor-module-path), or annotation
 #24 13.50   processing is enabled explicitly (-proc:only, -proc:full).
 #24 13.50   Use -Xlint:-options to suppress this message.
 #24 13.50   Use -proc:none to disable annotation processing.
 #24 13.50 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
 #24 13.50   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java:[20,27] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java:[21,27] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[65,42] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[68,33] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[78,31] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[81,33] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[97,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[100,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[103,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[106,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[109,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/database/Excersize.java:[112,11] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/RequstHandling/Requests/CodeTestRequest.java:[29,23] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Program/RawProgram.java:[12,10] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Program/SolutionProgram.java:[30,24] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.50 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Program/SolutionProgram.java:[31,16] @SuperBuilder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
 #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/RequstHandling/Requests/SpecifiedSingleDatabaseExerciseTestRequest.java:[19,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
 #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/Messages/ExecutionResponses/ExecutionResponseStatusUpdate.java:[15,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
 #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/RequstHandling/Requests/SaveExerciseSolutionRequest.java:[12,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
 #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/Messages/ExecutionResponses/ExecutionChainScheme.java:[19,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
 #24 13.51 [WARNING] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Program/RawProgram.java:[8,1] Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.
 #24 13.51 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
 #24 13.51   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
 #24 13.51 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
 #24 13.51   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
 #24 13.51 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
 #24 13.51   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
 #24 13.51 [WARNING] unknown enum constant org.immutables.value.Value.Style.ImplementationVisibility.PACKAGE
 #24 13.51   reason: class file for org.immutables.value.Value$Style$ImplementationVisibility not found
 #24 13.51 [INFO] /backend/src/main/java/com/redocode/backend/Secuirity/JwtService.java: Some input files use or override a deprecated API.
 #24 13.51 [INFO] /backend/src/main/java/com/redocode/backend/Secuirity/JwtService.java: Recompile with -Xlint:deprecation for details.
 #24 13.51 [INFO] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java: /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java uses unchecked or unsafe operations.
 #24 13.51 [INFO] /backend/src/main/java/com/redocode/backend/VmAcces/CodeRunners/Variables/Variables.java: Recompile with -Xlint:unchecked for details.
 #24 13.51 [INFO] 
 #24 13.51 [INFO] --- resources:3.3.1:testResources (default-testResources) @ backend ---
 #24 13.51 [INFO] skip non existing resourceDirectory /backend/src/test/resources
 #24 13.51 [INFO] 
 #24 13.51 [INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ backend ---
 #24 13.53 [INFO] Changes detected - recompiling the module! :dependency
 #24 13.53 [INFO] Compiling 66 source files with javac [debug release 17] to target/test-classes
 #24 15.41 [INFO] Annotation processing is enabled because one or more processors were found
 #24 15.41   on the class path. A future release of javac may disable annotation processing
 #24 15.41   unless at least one processor is specified by name (-processor), or a search
 #24 15.41   path is specified (--processor-path, --processor-module-path), or annotation
 #24 15.41   processing is enabled explicitly (-proc:only, -proc:full).
 #24 15.41   Use -Xlint:-options to suppress this message.
 #24 15.41   Use -proc:none to disable annotation processing.
 #24 15.41 [INFO] /backend/src/test/java/com/redocode/backend/WebSocketTestBase.java: Some input files use or override a deprecated API.
 #24 15.41 [INFO] /backend/src/test/java/com/redocode/backend/WebSocketTestBase.java: Recompile with -Xlint:deprecation for details.
 #24 15.41 [INFO] /backend/src/test/java/com/redocode/backend/endpoints/ExcecisesEndpointsTest.java: Some input files use unchecked or unsafe operations.
 #24 15.41 [INFO] /backend/src/test/java/com/redocode/backend/endpoints/ExcecisesEndpointsTest.java: Recompile with -Xlint:unchecked for details.
 #24 15.41 [INFO] 
 #24 15.41 [INFO] --- surefire:3.1.2:test (default-test) @ backend ---
 #24 15.42 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/3.1.2/maven-surefire-common-3.1.2.pom
 #24 15.43 Progress (1): 6.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/3.1.2/maven-surefire-common-3.1.2.pom (6.1 kB at 677 kB/s)
 #24 15.44 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/3.1.2/surefire-api-3.1.2.pom
 #24 15.44 Progress (1): 3.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/3.1.2/surefire-api-3.1.2.pom (3.5 kB at 706 kB/s)
 #24 15.44 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-logger-api/3.1.2/surefire-logger-api-3.1.2.pom
 #24 15.45 Progress (1): 3.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-logger-api/3.1.2/surefire-logger-api-3.1.2.pom (3.3 kB at 652 kB/s)
 #24 15.45 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-shared-utils/3.1.2/surefire-shared-utils-3.1.2.pom
 #24 15.46 Progress (1): 4.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-shared-utils/3.1.2/surefire-shared-utils-3.1.2.pom (4.1 kB at 812 kB/s)
 #24 15.46 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-api/3.1.2/surefire-extensions-api-3.1.2.pom
 #24 15.46 Progress (1): 3.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-api/3.1.2/surefire-extensions-api-3.1.2.pom (3.3 kB at 826 kB/s)
 #24 15.47 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/3.1.2/surefire-booter-3.1.2.pom
 #24 15.47 Progress (1): 4.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/3.1.2/surefire-booter-3.1.2.pom (4.5 kB at 1.1 MB/s)
 #24 15.47 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-spi/3.1.2/surefire-extensions-spi-3.1.2.pom
 #24 15.48 Progress (1): 1.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-spi/3.1.2/surefire-extensions-spi-3.1.2.pom (1.8 kB at 352 kB/s)
 #24 15.48 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.pom
 #24 15.49 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.pom (2.2 kB at 548 kB/s)
 #24 15.49 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether/1.0.0.v20140518/aether-1.0.0.v20140518.pom
 #24 15.50 Progress (1): 16/30 kB
 Progress (1): 30 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether/1.0.0.v20140518/aether-1.0.0.v20140518.pom (30 kB at 3.8 MB/s)
 #24 15.50 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.pom
 #24 15.50 Progress (1): 1.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.pom (1.9 kB at 379 kB/s)
 #24 15.51 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.1.1/maven-common-artifact-filters-3.1.1.pom
 #24 15.51 Progress (1): 5.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.1.1/maven-common-artifact-filters-3.1.1.pom (5.8 kB at 1.2 MB/s)
 #24 15.52 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.pom
 #24 15.53 Progress (1): 2.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.pom (2.3 kB at 235 kB/s)
 #24 15.53 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/3.2.5/maven-3.2.5.pom
 #24 15.53 Progress (1): 16/22 kB
 Progress (1): 22 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/3.2.5/maven-3.2.5.pom (22 kB at 3.2 MB/s)
 #24 15.54 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/25/maven-parent-25.pom
 #24 15.54 Progress (1): 16/37 kB
 Progress (1): 33/37 kB
 Progress (1): 37 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/25/maven-parent-25.pom (37 kB at 7.5 MB/s)
 #24 15.55 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/15/apache-15.pom
 #24 15.55 Progress (1): 15 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/15/apache-15.pom (15 kB at 1.9 MB/s)
 #24 15.56 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.pom
 #24 15.56 Progress (1): 8.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.pom (8.1 kB at 1.6 MB/s)
 #24 15.57 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.pom
 #24 15.57 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.pom (2.2 kB at 362 kB/s)
 #24 15.58 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.pom
 #24 15.58 Progress (1): 2.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.pom (2.6 kB at 371 kB/s)
 #24 15.59 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.pom
 #24 15.59 Progress (1): 1.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.pom (1.5 kB at 308 kB/s)
 #24 15.60 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.3.1/plexus-components-1.3.1.pom
 #24 15.60 Progress (1): 3.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.3.1/plexus-components-1.3.1.pom (3.1 kB at 613 kB/s)
 #24 15.61 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.3.1/plexus-3.3.1.pom
 #24 15.61 Progress (1): 16/20 kB
 Progress (1): 20 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.3.1/plexus-3.3.1.pom (20 kB at 3.4 MB/s)
 #24 15.61 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/17/spice-parent-17.pom
 #24 15.62 Progress (1): 6.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/17/spice-parent-17.pom (6.8 kB at 751 kB/s)
 #24 15.63 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/10/forge-parent-10.pom
 #24 15.63 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/10/forge-parent-10.pom (14 kB at 2.3 MB/s)
 #24 15.63 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.pom
 #24 15.64 Progress (1): 3.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.pom (3.0 kB at 494 kB/s)
 #24 15.64 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/12/spice-parent-12.pom
 #24 15.65 Progress (1): 6.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/12/spice-parent-12.pom (6.8 kB at 1.4 MB/s)
 #24 15.65 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/4/forge-parent-4.pom
 #24 15.66 Progress (1): 8.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/4/forge-parent-4.pom (8.4 kB at 1.4 MB/s)
 #24 15.66 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.pom
 #24 15.66 Progress (1): 2.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.pom (2.1 kB at 516 kB/s)
 #24 15.66 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.pom
 #24 15.67 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.pom (2.2 kB at 557 kB/s)
 #24 15.67 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.pom
 #24 15.68 Progress (1): 3.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.pom (3.0 kB at 605 kB/s)
 #24 15.68 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.5/org.eclipse.sisu.plexus-0.3.5.pom
 #24 15.68 Progress (1): 4.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.5/org.eclipse.sisu.plexus-0.3.5.pom (4.3 kB at 857 kB/s)
 #24 15.69 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/sisu-plexus/0.3.5/sisu-plexus-0.3.5.pom
 #24 15.69 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/sisu-plexus/0.3.5/sisu-plexus-0.3.5.pom (14 kB at 2.7 MB/s)
 #24 15.70 Downloading from central: https://repo.maven.apache.org/maven2/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.pom
 #24 15.70 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.pom (13 kB at 1.7 MB/s)
 #24 15.71 Downloading from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/3/jvnet-parent-3.pom
 #24 15.71 Progress (1): 4.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/3/jvnet-parent-3.pom (4.8 kB at 798 kB/s)
 #24 15.71 Downloading from central: https://repo.maven.apache.org/maven2/javax/enterprise/cdi-api/1.2/cdi-api-1.2.pom
 #24 15.72 Progress (1): 6.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/javax/enterprise/cdi-api/1.2/cdi-api-1.2.pom (6.3 kB at 897 kB/s)
 #24 15.72 Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/weld/weld-parent/26/weld-parent-26.pom
 #24 15.73 Progress (1): 16/32 kB
 Progress (1): 32 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jboss/weld/weld-parent/26/weld-parent-26.pom (32 kB at 5.4 MB/s)
 #24 15.73 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.5/org.eclipse.sisu.inject-0.3.5.pom
 #24 15.74 Progress (1): 2.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.5/org.eclipse.sisu.inject-0.3.5.pom (2.6 kB at 525 kB/s)
 #24 15.74 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/sisu-inject/0.3.5/sisu-inject-0.3.5.pom
 #24 15.74 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/sisu-inject/0.3.5/sisu-inject-0.3.5.pom (14 kB at 2.9 MB/s)
 #24 15.75 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.pom
 #24 15.75 Progress (1): 7.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.pom (7.3 kB at 913 kB/s)
 #24 15.76 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.pom
 #24 15.76 Progress (1): 3.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.pom (3.0 kB at 599 kB/s)
 #24 15.77 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.pom
 #24 15.77 Progress (1): 4.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.pom (4.2 kB at 1.1 MB/s)
 #24 15.78 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.pom
 #24 15.78 Progress (1): 2.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.pom (2.1 kB at 410 kB/s)
 #24 15.78 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.pom
 #24 15.79 Progress (1): 3.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.pom (3.5 kB at 695 kB/s)
 #24 15.79 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3.pom
 #24 15.80 Progress (1): 11 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3.pom (11 kB at 2.2 MB/s)
 #24 15.80 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/sisu/inject/guice-parent/3.2.3/guice-parent-3.2.3.pom
 #24 15.80 Progress (1): 13 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/sisu/inject/guice-parent/3.2.3/guice-parent-3.2.3.pom (13 kB at 2.7 MB/s)
 #24 15.81 Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/38/forge-parent-38.pom
 #24 15.81 Progress (1): 16/19 kB
 Progress (1): 19 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/38/forge-parent-38.pom (19 kB at 3.7 MB/s)
 #24 15.82 Downloading from central: https://repo.maven.apache.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.pom
 #24 15.82 Progress (1): 363 B
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.pom (363 B at 73 kB/s)
 #24 15.83 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/16.0.1/guava-16.0.1.pom
 #24 15.83 Progress (1): 6.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/16.0.1/guava-16.0.1.pom (6.1 kB at 1.5 MB/s)
 #24 15.83 Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/16.0.1/guava-parent-16.0.1.pom
 #24 15.84 Progress (1): 7.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/16.0.1/guava-parent-16.0.1.pom (7.3 kB at 1.8 MB/s)
 #24 15.84 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.12.0/commons-io-2.12.0.pom
 #24 15.84 Progress (1): 16/20 kB
 Progress (1): 20 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.12.0/commons-io-2.12.0.pom (20 kB at 3.4 MB/s)
 #24 15.85 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/57/commons-parent-57.pom
 #24 15.85 Progress (1): 16/83 kB
 Progress (1): 33/83 kB
 Progress (1): 37/83 kB
 Progress (1): 53/83 kB
 Progress (1): 69/83 kB
 Progress (1): 83 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/57/commons-parent-57.pom (83 kB at 14 MB/s)
 #24 15.86 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/3.1.2/maven-surefire-common-3.1.2.jar
 #24 15.87 Progress (1): 16/306 kB
 Progress (1): 33/306 kB
 Progress (1): 49/306 kB
 Progress (1): 65/306 kB
 Progress (1): 81/306 kB
 Progress (1): 97/306 kB
 Progress (1): 114/306 kB
 Progress (1): 130/306 kB
 Progress (1): 147/306 kB
 Progress (1): 163/306 kB
 Progress (1): 179/306 kB
 Progress (1): 196/306 kB
 Progress (1): 212/306 kB
 Progress (1): 228/306 kB
 Progress (1): 245/306 kB
 Progress (1): 261/306 kB
 Progress (1): 278/306 kB
 Progress (1): 294/306 kB
 Progress (1): 306 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/3.1.2/maven-surefire-common-3.1.2.jar (306 kB at 28 MB/s)
 #24 15.88 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/3.1.2/surefire-api-3.1.2.jar
 #24 15.88 Progress (1): 16/171 kB
 Progress (1): 33/171 kB
 Progress (1): 49/171 kB
 Progress (1): 64/171 kB
 Progress (1): 80/171 kB
 Progress (1): 97/171 kB
 Progress (1): 113/171 kB
 Progress (1): 130/171 kB
                         
 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-logger-api/3.1.2/surefire-logger-api-3.1.2.jar
 #24 15.88 Progress (1): 146/171 kB
 Progress (1): 162/171 kB
 Progress (1): 171 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/3.1.2/surefire-api-3.1.2.jar (171 kB at 17 MB/s)
 #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-api/3.1.2/surefire-extensions-api-3.1.2.jar
 #24 15.89 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-logger-api/3.1.2/surefire-logger-api-3.1.2.jar (14 kB at 1.0 MB/s)
 #24 15.89 Progress (1): 16/26 kB
 Progress (1): 26 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-api/3.1.2/surefire-extensions-api-3.1.2.jar (26 kB at 2.9 MB/s)
 #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/3.1.2/surefire-booter-3.1.2.jar
 #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.jar
 #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-spi/3.1.2/surefire-extensions-spi-3.1.2.jar
 #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.1.1/maven-common-artifact-filters-3.1.1.jar
 #24 15.89 Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.jar
 #24 15.89 Progress (1): 16/118 kB
 Progress (1): 32/118 kB
 Progress (1): 49/118 kB
 Progress (1): 65/118 kB
 Progress (1): 81/118 kB
 Progress (1): 98/118 kB
 Progress (1): 114/118 kB
 Progress (1): 118 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/3.1.2/surefire-booter-3.1.2.jar (118 kB at 9.0 MB/s)
 #24 15.90 Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.12.0/commons-io-2.12.0.jar
 #24 15.90 Progress (1): 16/146 kB
 Progress (2): 16/146 kB | 16/61 kB
 Progress (2): 33/146 kB | 16/61 kB
 Progress (2): 33/146 kB | 32/61 kB
 Progress (2): 49/146 kB | 32/61 kB
 Progress (2): 49/146 kB | 49/61 kB
 Progress (2): 64/146 kB | 49/61 kB
 Progress (2): 64/146 kB | 61 kB   
 Progress (2): 80/146 kB | 61 kB
 Progress (2): 97/146 kB | 61 kB
 Progress (2): 113/146 kB | 61 kB
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.1.1/maven-common-artifact-filters-3.1.1.jar (61 kB at 4.7 MB/s)
 #24 15.90 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-shared-utils/3.1.2/surefire-shared-utils-3.1.2.jar
 #24 15.91 Progress (1): 129/146 kB
 Progress (1): 146/146 kB
 Progress (1): 146 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.jar (146 kB at 9.7 MB/s)
 #24 15.91 Progress (1): 16/136 kB
 Progress (1): 33/136 kB
 Progress (1): 49/136 kB
 Progress (1): 62/136 kB
 Progress (2): 62/136 kB | 8.2 kB
                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-extensions-spi/3.1.2/surefire-extensions-spi-3.1.2.jar (8.2 kB at 409 kB/s)
 #24 15.91 Progress (1): 78/136 kB
 Progress (1): 95/136 kB
 Progress (1): 111/136 kB
 Progress (1): 128/136 kB
 Progress (1): 136 kB    
 Progress (2): 136 kB | 0/2.3 MB
                                
 Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.jar (136 kB at 6.2 MB/s)
 #24 15.91 Progress (1): 0/2.3 MB
 Progress (1): 0/2.3 MB
 Progress (1): 0.1/2.3 MB
 Progress (2): 0.1/2.3 MB | 16/474 kB
 Progress (2): 0.1/2.3 MB | 33/474 kB
 Progress (2): 0.1/2.3 MB | 49/474 kB
 Progress (2): 0.1/2.3 MB | 49/474 kB
 Progress (2): 0.1/2.3 MB | 65/474 kB
 Progress (2): 0.1/2.3 MB | 81/474 kB
 Progress (2): 0.1/2.3 MB | 81/474 kB
 Progress (2): 0.1/2.3 MB | 98/474 kB
 Progress (2): 0.1/2.3 MB | 98/474 kB
 Progress (2): 0.1/2.3 MB | 114/474 kB
 Progress (2): 0.1/2.3 MB | 114/474 kB
 Progress (2): 0.1/2.3 MB | 131/474 kB
 Progress (2): 0.1/2.3 MB | 147/474 kB
 Progress (2): 0.1/2.3 MB | 163/474 kB
 Progress (2): 0.1/2.3 MB | 163/474 kB
 Progress (2): 0.1/2.3 MB | 180/474 kB
 Progress (2): 0.1/2.3 MB | 196/474 kB
 Progress (2): 0.1/2.3 MB | 212/474 kB
 Progress (2): 0.2/2.3 MB | 212/474 kB
 Progress (2): 0.2/2.3 MB | 229/474 kB
 Progress (2): 0.2/2.3 MB | 229/474 kB
 Progress (2): 0.2/2.3 MB | 245/474 kB
 Progress (2): 0.2/2.3 MB | 262/474 kB
 Progress (2): 0.2/2.3 MB | 262/474 kB
 Progress (2): 0.2/2.3 MB | 278/474 kB
 Progress (2): 0.2/2.3 MB | 278/474 kB
 Progress (2): 0.2/2.3 MB | 294/474 kB
 Progress (2): 0.2/2.3 MB | 311/474 kB
 Progress (2): 0.2/2.3 MB | 327/474 kB
 Progress (2): 0.2/2.3 MB | 327/474 kB
 Progress (2): 0.2/2.3 MB | 344/474 kB
 Progress (2): 0.2/2.3 MB | 344/474 kB
 Progress (2): 0.2/2.3 MB | 360/474 kB
 Progress (2): 0.2/2.3 MB | 376/474 kB
 Progress (2): 0.3/2.3 MB | 376/474 kB
 Progress (2): 0.3/2.3 MB | 393/474 kB
 Progress (2): 0.3/2.3 MB | 409/474 kB
 Progress (2): 0.3/2.3 MB | 409/474 kB
 Progress (2): 0.3/2.3 MB | 425/474 kB
 Progress (2): 0.3/2.3 MB | 425/474 kB
 Progress (2): 0.3/2.3 MB | 442/474 kB
 Progress (2): 0.3/2.3 MB | 454/474 kB
 Progress (2): 0.3/2.3 MB | 454/474 kB
 Progress (2): 0.3/2.3 MB | 471/474 kB
 Progress (2): 0.3/2.3 MB | 474 kB    
 Progress (2): 0.3/2.3 MB | 474 kB
 Progress (2): 0.3/2.3 MB | 474 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.12.0/commons-io-2.12.0.jar (474 kB at 18 MB/s)
 #24 15.92 Progress (1): 0.4/2.3 MB
 Progress (1): 0.4/2.3 MB
 Progress (1): 0.4/2.3 MB
 Progress (1): 0.4/2.3 MB
 Progress (1): 0.4/2.3 MB
 Progress (1): 0.4/2.3 MB
 Progress (1): 0.5/2.3 MB
 Progress (1): 0.5/2.3 MB
 Progress (1): 0.5/2.3 MB
 Progress (1): 0.5/2.3 MB
 Progress (1): 0.5/2.3 MB
 Progress (1): 0.5/2.3 MB
 Progress (1): 0.6/2.3 MB
 Progress (1): 0.6/2.3 MB
 Progress (1): 0.6/2.3 MB
 Progress (1): 0.6/2.3 MB
 Progress (1): 0.6/2.3 MB
 Progress (1): 0.6/2.3 MB
 Progress (1): 0.7/2.3 MB
 Progress (1): 0.7/2.3 MB
 Progress (1): 0.7/2.3 MB
 Progress (1): 0.7/2.3 MB
 Progress (1): 0.7/2.3 MB
 Progress (1): 0.7/2.3 MB
 Progress (1): 0.8/2.3 MB
 Progress (1): 0.8/2.3 MB
 Progress (1): 0.8/2.3 MB
 Progress (1): 0.8/2.3 MB
 Progress (1): 0.8/2.3 MB
 Progress (1): 0.8/2.3 MB
 Progress (1): 0.9/2.3 MB
 Progress (1): 0.9/2.3 MB
 Progress (1): 0.9/2.3 MB
 Progress (1): 0.9/2.3 MB
 Progress (1): 0.9/2.3 MB
 Progress (1): 0.9/2.3 MB
 Progress (1): 0.9/2.3 MB
 Progress (1): 1.0/2.3 MB
 Progress (1): 1.0/2.3 MB
 Progress (1): 1.0/2.3 MB
 Progress (1): 1.0/2.3 MB
 Progress (1): 1.0/2.3 MB
 Progress (1): 1.0/2.3 MB
 Progress (1): 1.1/2.3 MB
 Progress (1): 1.1/2.3 MB
 Progress (1): 1.1/2.3 MB
 Progress (1): 1.1/2.3 MB
 Progress (1): 1.1/2.3 MB
 Progress (1): 1.1/2.3 MB
 Progress (1): 1.2/2.3 MB
 Progress (1): 1.2/2.3 MB
 Progress (1): 1.2/2.3 MB
 Progress (1): 1.2/2.3 MB
 Progress (1): 1.2/2.3 MB
 Progress (1): 1.2/2.3 MB
 Progress (1): 1.3/2.3 MB
 Progress (1): 1.3/2.3 MB
 Progress (1): 1.3/2.3 MB
 Progress (1): 1.3/2.3 MB
 Progress (1): 1.3/2.3 MB
 Progress (1): 1.3/2.3 MB
 Progress (1): 1.4/2.3 MB
 Progress (1): 1.4/2.3 MB
 Progress (1): 1.4/2.3 MB
 Progress (1): 1.4/2.3 MB
 Progress (1): 1.4/2.3 MB
 Progress (1): 1.4/2.3 MB
 Progress (1): 1.5/2.3 MB
 Progress (1): 1.5/2.3 MB
 Progress (1): 1.5/2.3 MB
 Progress (1): 1.5/2.3 MB
 Progress (1): 1.5/2.3 MB
 Progress (1): 1.5/2.3 MB
 Progress (1): 1.6/2.3 MB
 Progress (1): 1.6/2.3 MB
 Progress (1): 1.6/2.3 MB
 Progress (1): 1.6/2.3 MB
 Progress (1): 1.6/2.3 MB
 Progress (1): 1.6/2.3 MB
 Progress (1): 1.7/2.3 MB
 Progress (1): 1.7/2.3 MB
 Progress (1): 1.7/2.3 MB
 Progress (1): 1.7/2.3 MB
 Progress (1): 1.7/2.3 MB
 Progress (1): 1.7/2.3 MB
 Progress (1): 1.8/2.3 MB
 Progress (1): 1.8/2.3 MB
 Progress (1): 1.8/2.3 MB
 Progress (1): 1.8/2.3 MB
 Progress (1): 1.8/2.3 MB
 Progress (1): 1.8/2.3 MB
 Progress (1): 1.9/2.3 MB
 Progress (1): 1.9/2.3 MB
 Progress (1): 1.9/2.3 MB
 Progress (1): 1.9/2.3 MB
 Progress (1): 1.9/2.3 MB
 Progress (1): 1.9/2.3 MB
 Progress (1): 1.9/2.3 MB
 Progress (1): 2.0/2.3 MB
 Progress (1): 2.0/2.3 MB
 Progress (1): 2.0/2.3 MB
 Progress (1): 2.0/2.3 MB
 Progress (1): 2.0/2.3 MB
 Progress (1): 2.0/2.3 MB
 Progress (1): 2.1/2.3 MB
 Progress (1): 2.1/2.3 MB
 Progress (1): 2.1/2.3 MB
 Progress (1): 2.1/2.3 MB
 Progress (1): 2.1/2.3 MB
 Progress (1): 2.1/2.3 MB
 Progress (1): 2.2/2.3 MB
 Progress (1): 2.2/2.3 MB
 Progress (1): 2.2/2.3 MB
 Progress (1): 2.2/2.3 MB
 Progress (1): 2.2/2.3 MB
 Progress (1): 2.2/2.3 MB
 Progress (1): 2.3/2.3 MB
 Progress (1): 2.3/2.3 MB
 Progress (1): 2.3/2.3 MB
 Progress (1): 2.3/2.3 MB
 Progress (1): 2.3/2.3 MB
 Progress (1): 2.3/2.3 MB
 Progress (1): 2.3/2.3 MB
 Progress (1): 2.3 MB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-shared-utils/3.1.2/surefire-shared-utils-3.1.2.jar (2.3 MB at 57 MB/s)
 #24 16.02 [INFO] Tests are skipped.
 #24 16.03 [INFO] 
 #24 16.03 [INFO] --- jar:3.3.0:jar (default-jar) @ backend ---
 #24 16.03 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.pom
 #24 16.03 Progress (1): 4.5 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.pom (4.5 kB at 897 kB/s)
 #24 16.03 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/36/maven-shared-components-36.pom
 #24 16.04 Progress (1): 4.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/36/maven-shared-components-36.pom (4.9 kB at 1.2 MB/s)
 #24 16.04 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/36/maven-parent-36.pom
 #24 16.04 Progress (1): 16/45 kB
 Progress (1): 32/45 kB
 Progress (1): 45 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/36/maven-parent-36.pom (45 kB at 9.1 MB/s)
 #24 16.05 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/26/apache-26.pom
 #24 16.05 Progress (1): 16/21 kB
 Progress (1): 21 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/26/apache-26.pom (21 kB at 3.4 MB/s)
 #24 16.06 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.pom
 #24 16.06 Progress (1): 5.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.pom (5.2 kB at 1.3 MB/s)
 #24 16.06 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/3.6.0/maven-archiver-3.6.0.pom
 #24 16.07 Progress (1): 3.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/3.6.0/maven-archiver-3.6.0.pom (3.9 kB at 784 kB/s)
 #24 16.07 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/3.4.0/plexus-io-3.4.0.pom
 #24 16.07 Progress (1): 6.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/3.4.0/plexus-io-3.4.0.pom (6.0 kB at 1.5 MB/s)
 #24 16.08 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/4.4.0/plexus-archiver-4.4.0.pom
 #24 16.08 Progress (1): 6.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/4.4.0/plexus-archiver-4.4.0.pom (6.3 kB at 1.6 MB/s)
 #24 16.08 Downloading from central: https://repo.maven.apache.org/maven2/org/iq80/snappy/snappy/0.4/snappy-0.4.pom
 #24 16.09 Progress (1): 15 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/iq80/snappy/snappy/0.4/snappy-0.4.pom (15 kB at 3.6 MB/s)
 #24 16.09 Downloading from central: https://repo.maven.apache.org/maven2/org/tukaani/xz/1.9/xz-1.9.pom
 #24 16.10 Progress (1): 2.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/tukaani/xz/1.9/xz-1.9.pom (2.0 kB at 409 kB/s)
 #24 16.10 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.pom
 #24 16.10 Progress (1): 8.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.pom (8.2 kB at 2.1 MB/s)
 #24 16.11 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/8/plexus-8.pom
 #24 16.11 Progress (1): 16/25 kB
 Progress (1): 25 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/8/plexus-8.pom (25 kB at 5.1 MB/s)
 #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.jar
 #24 16.12 Progress (1): 16/36 kB
 Progress (1): 32/36 kB
 Progress (1): 36 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.jar (36 kB at 7.3 MB/s)
 #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/3.6.0/maven-archiver-3.6.0.jar
 #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/3.4.0/plexus-io-3.4.0.jar
 #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/tukaani/xz/1.9/xz-1.9.jar
 #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/4.4.0/plexus-archiver-4.4.0.jar
 #24 16.12 Downloading from central: https://repo.maven.apache.org/maven2/org/iq80/snappy/snappy/0.4/snappy-0.4.jar
 #24 16.13 Progress (1): 16/26 kB
 Progress (2): 16/26 kB | 16/79 kB
 Progress (2): 26 kB | 16/79 kB   
 Progress (2): 26 kB | 32/79 kB
 Progress (2): 26 kB | 49/79 kB
                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/3.6.0/maven-archiver-3.6.0.jar (26 kB at 3.7 MB/s)
 #24 16.13 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.jar
 #24 16.13 Progress (1): 65/79 kB
 Progress (1): 79 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/3.4.0/plexus-io-3.4.0.jar (79 kB at 9.9 MB/s)
 #24 16.13 Progress (1): 0.1/267 kB
 Progress (2): 0.1/267 kB | 16/211 kB
 Progress (2): 16/267 kB | 16/211 kB 
 Progress (2): 16/267 kB | 33/211 kB
 Progress (2): 33/267 kB | 33/211 kB
 Progress (2): 33/267 kB | 49/211 kB
 Progress (2): 33/267 kB | 61/211 kB
 Progress (2): 33/267 kB | 78/211 kB
 Progress (2): 49/267 kB | 78/211 kB
 Progress (2): 49/267 kB | 94/211 kB
 Progress (2): 66/267 kB | 94/211 kB
 Progress (2): 66/267 kB | 111/211 kB
 Progress (2): 82/267 kB | 111/211 kB
 Progress (2): 82/267 kB | 127/211 kB
 Progress (2): 98/267 kB | 127/211 kB
 Progress (2): 98/267 kB | 143/211 kB
 Progress (2): 115/267 kB | 143/211 kB
 Progress (2): 115/267 kB | 160/211 kB
 Progress (3): 115/267 kB | 160/211 kB | 16/58 kB
 Progress (3): 115/267 kB | 160/211 kB | 33/58 kB
 Progress (3): 115/267 kB | 160/211 kB | 49/58 kB
 Progress (3): 115/267 kB | 160/211 kB | 58 kB   
                                              
 Downloaded from central: https://repo.maven.apache.org/maven2/org/iq80/snappy/snappy/0.4/snappy-0.4.jar (58 kB at 3.9 MB/s)
 #24 16.14 Progress (2): 131/267 kB | 160/211 kB
 Progress (2): 131/267 kB | 176/211 kB
 Progress (2): 148/267 kB | 176/211 kB
 Progress (2): 148/267 kB | 193/211 kB
 Progress (2): 164/267 kB | 193/211 kB
 Progress (2): 164/267 kB | 209/211 kB
 Progress (2): 164/267 kB | 211 kB    
 Progress (2): 180/267 kB | 211 kB
 Progress (2): 197/267 kB | 211 kB
 Progress (2): 213/267 kB | 211 kB
 Progress (2): 229/267 kB | 211 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/4.4.0/plexus-archiver-4.4.0.jar (211 kB at 12 MB/s)
 #24 16.14 Progress (1): 246/267 kB
 Progress (1): 262/267 kB
 Progress (1): 267 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.jar (267 kB at 16 MB/s)
 #24 16.14 Progress (1): 16/116 kB
 Progress (1): 32/116 kB
 Progress (1): 49/116 kB
 Progress (1): 65/116 kB
 Progress (1): 81/116 kB
 Progress (1): 98/116 kB
 Progress (1): 114/116 kB
 Progress (1): 116 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/tukaani/xz/1.9/xz-1.9.jar (116 kB at 5.0 MB/s)
 #24 16.32 [INFO] Building jar: /backend/target/backend-0.0.1-SNAPSHOT.jar
 #24 16.41 [INFO] 
 #24 16.41 [INFO] --- spring-boot:3.2.2:repackage (repackage) @ backend ---
 #24 16.41 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-buildpack-platform/3.2.2/spring-boot-buildpack-platform-3.2.2.pom
 #24 16.42 Progress (1): 3.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-buildpack-platform/3.2.2/spring-boot-buildpack-platform-3.2.2.pom (3.2 kB at 402 kB/s)
 #24 16.42 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.pom
 #24 16.43 Progress (1): 16/19 kB
 Progress (1): 19 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.pom (19 kB at 4.9 MB/s)
 #24 16.43 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.14.2/jackson-base-2.14.2.pom
 #24 16.43 Progress (1): 10 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-base/2.14.2/jackson-base-2.14.2.pom (10 kB at 2.0 MB/s)
 #24 16.44 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.14.2/jackson-bom-2.14.2.pom
 #24 16.44 Progress (1): 16/17 kB
 Progress (1): 17 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-bom/2.14.2/jackson-bom-2.14.2.pom (17 kB at 4.4 MB/s)
 #24 16.44 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.14/jackson-parent-2.14.pom
 #24 16.45 Progress (1): 7.7 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jackson-parent/2.14/jackson-parent-2.14.pom (7.7 kB at 1.9 MB/s)
 #24 16.45 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/48/oss-parent-48.pom
 #24 16.45 Progress (1): 16/24 kB
 Progress (1): 24 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/oss-parent/48/oss-parent-48.pom (24 kB at 5.9 MB/s)
 #24 16.45 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.14.2/jackson-annotations-2.14.2.pom
 #24 16.46 Progress (1): 6.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.14.2/jackson-annotations-2.14.2.pom (6.2 kB at 1.6 MB/s)
 #24 16.46 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.14.2/jackson-core-2.14.2.pom
 #24 16.47 Progress (1): 7.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.14.2/jackson-core-2.14.2.pom (7.0 kB at 1.4 MB/s)
 #24 16.47 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.14.2/jackson-module-parameter-names-2.14.2.pom
 #24 16.47 Progress (1): 4.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.14.2/jackson-module-parameter-names-2.14.2.pom (4.4 kB at 1.1 MB/s)
 #24 16.47 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-java8/2.14.2/jackson-modules-java8-2.14.2.pom
 #24 16.48 Progress (1): 3.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-java8/2.14.2/jackson-modules-java8-2.14.2.pom (3.1 kB at 775 kB/s)
 #24 16.48 Downloading from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna-platform/5.13.0/jna-platform-5.13.0.pom
 #24 16.48 Progress (1): 2.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna-platform/5.13.0/jna-platform-5.13.0.pom (2.3 kB at 563 kB/s)
 #24 16.49 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.pom
 #24 16.49 Progress (1): 16/22 kB
 Progress (1): 22 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.pom (22 kB at 4.4 MB/s)
 #24 16.49 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/56/commons-parent-56.pom
 #24 16.50 Progress (1): 16/82 kB
 Progress (1): 33/82 kB
 Progress (1): 49/82 kB
 Progress (1): 66/82 kB
 Progress (1): 82/82 kB
 Progress (1): 82 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/56/commons-parent-56.pom (82 kB at 16 MB/s)
 #24 16.50 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.0.10/spring-core-6.0.10.pom
 #24 16.51 Progress (1): 2.0 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.0.10/spring-core-6.0.10.pom (2.0 kB at 403 kB/s)
 #24 16.51 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.0.10/spring-jcl-6.0.10.pom
 #24 16.52 Progress (1): 1.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.0.10/spring-jcl-6.0.10.pom (1.8 kB at 368 kB/s)
 #24 16.52 Downloading from central: https://repo.maven.apache.org/maven2/org/tomlj/tomlj/1.0.0/tomlj-1.0.0.pom
 #24 16.52 Progress (1): 2.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/tomlj/tomlj/1.0.0/tomlj-1.0.0.pom (2.8 kB at 706 kB/s)
 #24 16.52 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.7.2/antlr4-runtime-4.7.2.pom
 #24 16.53 Progress (1): 3.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.7.2/antlr4-runtime-4.7.2.pom (3.6 kB at 904 kB/s)
 #24 16.53 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-master/4.7.2/antlr4-master-4.7.2.pom
 #24 16.54 Progress (1): 4.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-master/4.7.2/antlr4-master-4.7.2.pom (4.4 kB at 881 kB/s)
 #24 16.54 Downloading from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.pom
 #24 16.55 Progress (1): 4.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.pom (4.3 kB at 857 kB/s)
 #24 16.55 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-loader-tools/3.2.2/spring-boot-loader-tools-3.2.2.pom
 #24 16.56 Progress (1): 2.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-loader-tools/3.2.2/spring-boot-loader-tools-3.2.2.pom (2.2 kB at 374 kB/s)
 #24 16.56 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.3.2/maven-common-artifact-filters-3.3.2.pom
 #24 16.56 Progress (1): 5.3 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.3.2/maven-common-artifact-filters-3.3.2.pom (5.3 kB at 1.1 MB/s)
 #24 16.56 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/37/maven-shared-components-37.pom
 #24 16.57 Progress (1): 4.9 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/37/maven-shared-components-37.pom (4.9 kB at 816 kB/s)
 #24 16.57 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom
 #24 16.58 Progress (1): 8.1 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom (8.1 kB at 1.3 MB/s)
 #24 16.58 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom
 #24 16.58 Progress (1): 12 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom (12 kB at 2.3 MB/s)
 #24 16.59 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-shade-plugin/3.5.0/maven-shade-plugin-3.5.0.pom
 #24 16.59 Progress (1): 12 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-shade-plugin/3.5.0/maven-shade-plugin-3.5.0.pom (12 kB at 2.5 MB/s)
 #24 16.60 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.pom
 #24 16.60 Progress (1): 3.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.pom (3.8 kB at 959 kB/s)
 #24 16.60 Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.32/slf4j-parent-1.7.32.pom
 #24 16.60 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.32/slf4j-parent-1.7.32.pom (14 kB at 3.5 MB/s)
 #24 16.61 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.pom
 #24 16.61 Progress (1): 2.4 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.pom (2.4 kB at 592 kB/s)
 #24 16.61 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-commons/9.5/asm-commons-9.5.pom
 #24 16.62 Progress (1): 2.8 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-commons/9.5/asm-commons-9.5.pom (2.8 kB at 697 kB/s)
 #24 16.62 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-tree/9.5/asm-tree-9.5.pom
 #24 16.62 Progress (1): 2.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-tree/9.5/asm-tree-9.5.pom (2.6 kB at 432 kB/s)
 #24 16.63 Downloading from central: https://repo.maven.apache.org/maven2/org/jdom/jdom2/2.0.6.1/jdom2-2.0.6.1.pom
 #24 16.63 Progress (1): 4.6 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jdom/jdom2/2.0.6.1/jdom2-2.0.6.1.pom (4.6 kB at 767 kB/s)
 #24 16.64 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/3.2.1/maven-dependency-tree-3.2.1.pom
 #24 16.64 Progress (1): 6.2 kB
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/3.2.1/maven-dependency-tree-3.2.1.pom (6.2 kB at 1.2 MB/s)
 #24 16.65 Downloading from central: https://repo.maven.apache.org/maven2/org/vafer/jdependency/2.8.0/jdependency-2.8.0.pom
 #24 16.65 Progress (1): 14 kB
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/vafer/jdependency/2.8.0/jdependency-2.8.0.pom (14 kB at 3.5 MB/s)
 #24 16.65 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.pom
 #24 16.66 Progress (1): 16/24 kB
 Progress (1): 24 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.pom (24 kB at 4.8 MB/s)
 #24 16.66 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/48/commons-parent-48.pom
 #24 16.66 Progress (1): 16/72 kB
 Progress (1): 33/72 kB
 Progress (1): 49/72 kB
 Progress (1): 66/72 kB
 Progress (1): 72 kB   
                    
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/48/commons-parent-48.pom (72 kB at 12 MB/s)
 #24 16.68 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-buildpack-platform/3.2.2/spring-boot-buildpack-platform-3.2.2.jar
 #24 16.68 Progress (1): 16/272 kB
 Progress (1): 33/272 kB
 Progress (1): 49/272 kB
 Progress (1): 64/272 kB
 Progress (1): 81/272 kB
 Progress (1): 97/272 kB
 Progress (1): 114/272 kB
 Progress (1): 130/272 kB
 Progress (1): 146/272 kB
 Progress (1): 163/272 kB
 Progress (1): 179/272 kB
 Progress (1): 195/272 kB
 Progress (1): 212/272 kB
 Progress (1): 228/272 kB
 Progress (1): 245/272 kB
 Progress (1): 261/272 kB
 Progress (1): 272 kB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-buildpack-platform/3.2.2/spring-boot-buildpack-platform-3.2.2.jar (272 kB at 30 MB/s)
 #24 16.69 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.14.2/jackson-core-2.14.2.jar
 #24 16.69 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.jar
 #24 16.69 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.14.2/jackson-annotations-2.14.2.jar
 #24 16.69 Progress (1): 0/1.6 MB
 Progress (2): 0/1.6 MB | 16/459 kB
 Progress (2): 0/1.6 MB | 33/459 kB
                                   
 Downloading from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.14.2/jackson-module-parameter-names-2.14.2.jar
 #24 16.69 Progress (2): 0/1.6 MB | 49/459 kB
 Progress (2): 0/1.6 MB | 65/459 kB
 Progress (2): 0/1.6 MB | 82/459 kB
 Progress (2): 0/1.6 MB | 98/459 kB
 Progress (2): 0/1.6 MB | 114/459 kB
 Progress (2): 0/1.6 MB | 131/459 kB
 Progress (2): 0/1.6 MB | 147/459 kB
 Progress (2): 0/1.6 MB | 164/459 kB
 Progress (2): 0/1.6 MB | 180/459 kB
 Progress (2): 0/1.6 MB | 196/459 kB
 Progress (2): 0/1.6 MB | 213/459 kB
 Progress (2): 0/1.6 MB | 229/459 kB
 Progress (2): 0/1.6 MB | 245/459 kB
 Progress (2): 0/1.6 MB | 262/459 kB
 Progress (2): 0/1.6 MB | 278/459 kB
 Progress (2): 0/1.6 MB | 295/459 kB
 Progress (2): 0/1.6 MB | 311/459 kB
 Progress (2): 0/1.6 MB | 327/459 kB
 Progress (2): 0/1.6 MB | 344/459 kB
 Progress (3): 0/1.6 MB | 344/459 kB | 16/77 kB
 Progress (3): 0/1.6 MB | 344/459 kB | 33/77 kB
 Progress (3): 0/1.6 MB | 344/459 kB | 49/77 kB
                                               
 Downloading from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna-platform/5.13.0/jna-platform-5.13.0.jar
 #24 16.70 Progress (3): 0/1.6 MB | 344/459 kB | 66/77 kB
 Progress (3): 0/1.6 MB | 344/459 kB | 77 kB   
                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.14.2/jackson-annotations-2.14.2.jar (77 kB at 4.5 MB/s)
 #24 16.71 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.jar
 #24 16.71 Progress (3): 0/1.6 MB | 344/459 kB | 9.5 kB
                                             
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.14.2/jackson-module-parameter-names-2.14.2.jar (9.5 kB at 526 kB/s)
 #24 16.71 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.2.3/httpclient5-5.2.3.jar
 #24 16.71 Progress (2): 0/1.6 MB | 360/459 kB
 Progress (2): 0/1.6 MB | 377/459 kB
 Progress (2): 0/1.6 MB | 393/459 kB
 Progress (2): 0/1.6 MB | 409/459 kB
 Progress (2): 0/1.6 MB | 426/459 kB
 Progress (2): 0/1.6 MB | 442/459 kB
 Progress (2): 0/1.6 MB | 458/459 kB
 Progress (2): 0/1.6 MB | 459 kB    
                                
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.14.2/jackson-core-2.14.2.jar (459 kB at 24 MB/s)
 #24 16.71 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.0.10/spring-core-6.0.10.jar
 #24 16.71 Progress (2): 0/1.6 MB | 0/1.4 MB
 Progress (2): 0/1.6 MB | 0/1.4 MB
 Progress (2): 0/1.6 MB | 0/1.4 MB
 Progress (3): 0/1.6 MB | 0/1.4 MB | 0/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.1/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.1/1.1 MB
 Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
 Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
 Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
 Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
 Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
 Progress (3): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB
 Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.2/1.1 MB | 16/843 kB
 Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 16/843 kB
 Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 16/843 kB
 Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 33/843 kB
 Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 33/843 kB
 Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 49/843 kB
 Progress (4): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 63/843 kB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 63/843 kB | 0/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 80/843 kB | 0/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 80/843 kB | 0/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 96/843 kB | 0/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 96/843 kB | 0/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 113/843 kB | 0/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 113/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 113/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 129/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 145/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 145/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 162/843 kB | 0.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 162/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 162/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 178/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 194/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 194/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 194/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 211/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.3/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.2/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.4/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 227/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.5/1.1 MB | 244/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 244/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 260/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.6/1.1 MB | 276/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 276/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 276/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 276/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.3/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 293/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.7/1.1 MB | 309/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 309/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 309/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 326/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 342/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 342/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 342/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.8/1.1 MB | 342/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 342/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 342/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 342/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 342/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.4/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 358/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 0.9/1.1 MB | 375/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 375/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.4/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 391/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 395/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 395/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 395/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 395/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.6/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 412/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 428/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 444/843 kB | 0.7/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 444/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 444/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 444/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 457/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.8/1.8 MB
 Progress (5): 0/1.6 MB | 0.5/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 473/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 489/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 0.9/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 506/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 522/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.0/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 539/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 555/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.1/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.6/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.0/1.1 MB | 571/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 571/843 kB | 1.2/1.8 MB    
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 571/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 588/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 604/843 kB | 1.2/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 604/843 kB | 1.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 604/843 kB | 1.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 620/843 kB | 1.3/1.8 MB
 Progress (5): 0/1.6 MB | 0.7/1.4 MB | 1.1 MB | 620/843 kB | 1.3/1.8 MB
                                                                       
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.jar (1.1 MB at 14 MB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.0.10/spring-jcl-6.0.10.jar
 #24 16.78 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 620/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 637/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 637/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 637/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 637/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 653/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 653/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 653/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.3/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.4/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.4/1.8 MB
 Progress (4): 0/1.6 MB | 0.7/1.4 MB | 670/843 kB | 1.4/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 670/843 kB | 1.4/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 670/843 kB | 1.4/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.4/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.4/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.4/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.4/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 686/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 702/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 719/843 kB | 1.5/1.8 MB
 Progress (5): 0/1.6 MB | 0.8/1.4 MB | 719/843 kB | 1.5/1.8 MB | 16/24 kB
 Progress (5): 0/1.6 MB | 0.8/1.4 MB | 719/843 kB | 1.5/1.8 MB | 16/24 kB
 Progress (5): 0/1.6 MB | 0.8/1.4 MB | 735/843 kB | 1.5/1.8 MB | 16/24 kB
 Progress (5): 0/1.6 MB | 0.8/1.4 MB | 735/843 kB | 1.5/1.8 MB | 24 kB   
 Progress (5): 0/1.6 MB | 0.8/1.4 MB | 752/843 kB | 1.5/1.8 MB | 24 kB
 Progress (5): 0/1.6 MB | 0.8/1.4 MB | 752/843 kB | 1.5/1.8 MB | 24 kB
                                                                      
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-jcl/6.0.10/spring-jcl-6.0.10.jar (24 kB at 308 kB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/tomlj/tomlj/1.0.0/tomlj-1.0.0.jar
 #24 16.78 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 752/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.5/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.6/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.6/1.8 MB
 Progress (4): 0/1.6 MB | 0.8/1.4 MB | 768/843 kB | 1.6/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 768/843 kB | 1.6/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.6/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.6/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.6/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.6/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 784/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 801/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.7/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.8/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.8/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 817/843 kB | 1.8/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 833/843 kB | 1.8/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8/1.8 MB    
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8/1.8 MB
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB    
 Progress (4): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB
 Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 16/157 kB
 Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 16/157 kB
 Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 33/157 kB
 Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 49/157 kB
 Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 65/157 kB
 Progress (5): 0/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 81/157 kB
 Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 81/157 kB
 Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 98/157 kB
 Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 98/157 kB
 Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 114/157 kB
 Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 130/157 kB
 Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 147/157 kB
 Progress (5): 0.1/1.6 MB | 0.9/1.4 MB | 843 kB | 1.8 MB | 157 kB    
 Progress (5): 0.1/1.6 MB | 1.0/1.4 MB | 843 kB | 1.8 MB | 157 kB
                                                                 
 Downloaded from central: https://repo.maven.apache.org/maven2/org/tomlj/tomlj/1.0.0/tomlj-1.0.0.jar (157 kB at 2.0 MB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.7.2/antlr4-runtime-4.7.2.jar
 #24 16.78 Progress (4): 0.1/1.6 MB | 1.0/1.4 MB | 843 kB | 1.8 MB
                                                        
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/spring-core/6.0.10/spring-core-6.0.10.jar (1.8 MB at 23 MB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
 #24 16.78 Progress (3): 0.1/1.6 MB | 1.0/1.4 MB | 843 kB
 Progress (3): 0.1/1.6 MB | 1.0/1.4 MB | 843 kB
                                               
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/httpcomponents/client5/httpclient5/5.2.3/httpclient5-5.2.3.jar (843 kB at 11 MB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-loader-tools/3.2.2/spring-boot-loader-tools-3.2.2.jar
 #24 16.78 Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
 Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
 Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
 Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
 Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
 Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
 Progress (2): 0.1/1.6 MB | 1.0/1.4 MB
 Progress (3): 0.1/1.6 MB | 1.0/1.4 MB | 16/338 kB
 Progress (3): 0.1/1.6 MB | 1.0/1.4 MB | 33/338 kB
 Progress (3): 0.2/1.6 MB | 1.0/1.4 MB | 33/338 kB
 Progress (3): 0.2/1.6 MB | 1.0/1.4 MB | 49/338 kB
 Progress (3): 0.2/1.6 MB | 1.0/1.4 MB | 63/338 kB
 Progress (3): 0.2/1.6 MB | 1.0/1.4 MB | 79/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 79/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 96/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 96/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 112/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 16/20 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 16/20 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 20 kB   
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 20 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 20 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 129/338 kB | 20 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar (20 kB at 256 kB/s)
 #24 16.78 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 145/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 145/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 161/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 161/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 178/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 194/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 211/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 227/338 kB
 Progress (3): 0.2/1.6 MB | 1.1/1.4 MB | 243/338 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 243/338 kB | 16/434 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 260/338 kB | 16/434 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 260/338 kB | 33/434 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 276/338 kB | 33/434 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 276/338 kB | 49/434 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 292/338 kB | 49/434 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 292/338 kB | 65/434 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 309/338 kB | 65/434 kB
                                                               
 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.3.2/maven-common-artifact-filters-3.3.2.jar
 #24 16.78 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 309/338 kB | 81/434 kB
 Progress (4): 0.2/1.6 MB | 1.1/1.4 MB | 309/338 kB | 81/434 kB
 Progress (4): 0.3/1.6 MB | 1.1/1.4 MB | 309/338 kB | 81/434 kB
 Progress (4): 0.3/1.6 MB | 1.1/1.4 MB | 309/338 kB | 98/434 kB
 Progress (4): 0.3/1.6 MB | 1.1/1.4 MB | 325/338 kB | 98/434 kB
 Progress (4): 0.3/1.6 MB | 1.1/1.4 MB | 338 kB | 98/434 kB    
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 338 kB | 98/434 kB
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 338 kB | 98/434 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr4-runtime/4.7.2/antlr4-runtime-4.7.2.jar (338 kB at 4.3 MB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.jar
 #24 16.78 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 114/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 114/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 114/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 130/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 130/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 130/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 130/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 147/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 147/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB
 Progress (3): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB | 16/58 kB
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB | 33/58 kB
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 163/434 kB | 49/58 kB
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 180/434 kB | 49/58 kB
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 180/434 kB | 58 kB   
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 180/434 kB | 58 kB
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 180/434 kB | 58 kB
 Progress (4): 0.3/1.6 MB | 1.2/1.4 MB | 196/434 kB | 58 kB
                                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.3.2/maven-common-artifact-filters-3.3.2.jar (58 kB at 738 kB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-shade-plugin/3.5.0/maven-shade-plugin-3.5.0.jar
 #24 16.78 Progress (3): 0.4/1.6 MB | 1.2/1.4 MB | 196/434 kB
 Progress (3): 0.4/1.6 MB | 1.2/1.4 MB | 196/434 kB
 Progress (3): 0.4/1.6 MB | 1.2/1.4 MB | 212/434 kB
 Progress (4): 0.4/1.6 MB | 1.2/1.4 MB | 212/434 kB | 16/268 kB
 Progress (4): 0.4/1.6 MB | 1.2/1.4 MB | 212/434 kB | 16/268 kB
 Progress (4): 0.4/1.6 MB | 1.2/1.4 MB | 212/434 kB | 19/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 212/434 kB | 19/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 212/434 kB | 36/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 212/434 kB | 52/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 229/434 kB | 52/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 229/434 kB | 52/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 229/434 kB | 65/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 65/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 81/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 81/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 97/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 114/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 130/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 130/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 146/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 146/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 245/434 kB | 163/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 163/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 179/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 179/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 196/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 212/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 212/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 228/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 245/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 261/434 kB | 261/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 278/434 kB | 261/268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 278/434 kB | 268 kB    
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 278/434 kB | 268 kB
 Progress (4): 0.4/1.6 MB | 1.3/1.4 MB | 278/434 kB | 268 kB
                                                            
 Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.jar (268 kB at 3.3 MB/s)
 #24 16.78 Progress (3): 0.4/1.6 MB | 1.3/1.4 MB | 294/434 kB
 Progress (3): 0.5/1.6 MB | 1.3/1.4 MB | 294/434 kB
 Progress (3): 0.5/1.6 MB | 1.3/1.4 MB | 294/434 kB
 Progress (4): 0.5/1.6 MB | 1.3/1.4 MB | 294/434 kB | 16/147 kB
 Progress (4): 0.5/1.6 MB | 1.3/1.4 MB | 311/434 kB | 16/147 kB
 Progress (4): 0.5/1.6 MB | 1.3/1.4 MB | 311/434 kB | 33/147 kB
 Progress (4): 0.5/1.6 MB | 1.3/1.4 MB | 311/434 kB | 49/147 kB
 Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 49/147 kB
 Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 63/147 kB
 Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 63/147 kB
 Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 79/147 kB
 Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 311/434 kB | 95/147 kB
 Progress (4): 0.5/1.6 MB | 1.4/1.4 MB | 327/434 kB | 95/147 kB
 Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 95/147 kB    
 Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 112/147 kB
 Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 128/147 kB
 Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 145/147 kB
 Progress (4): 0.5/1.6 MB | 1.4 MB | 327/434 kB | 147 kB    
                                                        
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-shade-plugin/3.5.0/maven-shade-plugin-3.5.0.jar (147 kB at 1.7 MB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar
 #24 16.78 Progress (3): 0.5/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.5/1.6 MB | 1.4 MB | 327/434 kB
                                               
 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-commons/9.5/asm-commons-9.5.jar
 #24 16.78 Progress (3): 0.5/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.5/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.6/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.7/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.8/1.6 MB | 1.4 MB | 327/434 kB
 Progress (3): 0.8/1.6 MB | 1.4 MB | 327/434 kB
 Progress (4): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 16/122 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 16/122 kB | 16/72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 33/122 kB | 16/72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 33/122 kB | 33/72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 49/122 kB | 33/72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 49/122 kB | 49/72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 66/122 kB | 49/72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 66/122 kB | 66/72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 82/122 kB | 66/72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 82/122 kB | 72 kB   
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 98/122 kB | 72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 115/122 kB | 72 kB
 Progress (5): 0.8/1.6 MB | 1.4 MB | 327/434 kB | 122 kB | 72 kB    
                                                                
 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-commons/9.5/asm-commons-9.5.jar (72 kB at 860 kB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-tree/9.5/asm-tree-9.5.jar
 #24 16.78 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar (122 kB at 1.5 MB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/jdom/jdom2/2.0.6.1/jdom2-2.0.6.1.jar
 #24 16.78 Progress (3): 0.8/1.6 MB | 1.4 MB | 343/434 kB
 Progress (3): 0.8/1.6 MB | 1.4 MB | 360/434 kB
 Progress (3): 0.8/1.6 MB | 1.4 MB | 376/434 kB
 Progress (3): 0.8/1.6 MB | 1.4 MB | 393/434 kB
 Progress (3): 0.8/1.6 MB | 1.4 MB | 409/434 kB
 Progress (3): 0.8/1.6 MB | 1.4 MB | 425/434 kB
 Progress (3): 0.8/1.6 MB | 1.4 MB | 434 kB    
                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-loader-tools/3.2.2/spring-boot-loader-tools-3.2.2.jar (434 kB at 5.2 MB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/3.2.1/maven-dependency-tree-3.2.1.jar
 #24 16.78 Downloaded from central: https://repo.maven.apache.org/maven2/net/java/dev/jna/jna-platform/5.13.0/jna-platform-5.13.0.jar (1.4 MB at 15 MB/s)
 #24 16.78 Downloading from central: https://repo.maven.apache.org/maven2/org/vafer/jdependency/2.8.0/jdependency-2.8.0.jar
 #24 16.78 Progress (1): 0.8/1.6 MB
 Progress (1): 0.8/1.6 MB
 Progress (2): 0.8/1.6 MB | 16/328 kB
 Progress (2): 0.8/1.6 MB | 33/328 kB
 Progress (2): 0.8/1.6 MB | 49/328 kB
 Progress (2): 0.8/1.6 MB | 63/328 kB
 Progress (2): 0.8/1.6 MB | 79/328 kB
 Progress (2): 0.8/1.6 MB | 95/328 kB
 Progress (2): 0.8/1.6 MB | 112/328 kB
 Progress (2): 0.8/1.6 MB | 128/328 kB
 Progress (2): 0.8/1.6 MB | 144/328 kB
 Progress (2): 0.8/1.6 MB | 161/328 kB
 Progress (2): 0.8/1.6 MB | 177/328 kB
 Progress (2): 0.8/1.6 MB | 194/328 kB
 Progress (2): 0.8/1.6 MB | 210/328 kB
 Progress (2): 0.8/1.6 MB | 226/328 kB
 Progress (2): 0.8/1.6 MB | 243/328 kB
 Progress (2): 0.8/1.6 MB | 259/328 kB
 Progress (2): 0.8/1.6 MB | 276/328 kB
 Progress (3): 0.8/1.6 MB | 276/328 kB | 16/233 kB
 Progress (3): 0.8/1.6 MB | 292/328 kB | 16/233 kB
 Progress (3): 0.8/1.6 MB | 308/328 kB | 16/233 kB
 Progress (3): 0.8/1.6 MB | 308/328 kB | 33/233 kB
 Progress (3): 0.8/1.6 MB | 308/328 kB | 49/233 kB
 Progress (3): 0.8/1.6 MB | 308/328 kB | 65/233 kB
 Progress (4): 0.8/1.6 MB | 308/328 kB | 65/233 kB | 16/43 kB
 Progress (5): 0.8/1.6 MB | 308/328 kB | 65/233 kB | 16/43 kB | 16/52 kB
 Progress (5): 0.8/1.6 MB | 308/328 kB | 81/233 kB | 16/43 kB | 16/52 kB
 Progress (5): 0.8/1.6 MB | 308/328 kB | 81/233 kB | 33/43 kB | 16/52 kB
 Progress (5): 0.8/1.6 MB | 308/328 kB | 81/233 kB | 33/43 kB | 32/52 kB
 Progress (5): 0.8/1.6 MB | 308/328 kB | 81/233 kB | 43 kB | 32/52 kB   
 Progress (5): 0.8/1.6 MB | 308/328 kB | 97/233 kB | 43 kB | 32/52 kB
 Progress (5): 0.8/1.6 MB | 308/328 kB | 97/233 kB | 43 kB | 49/52 kB
 Progress (5): 0.8/1.6 MB | 308/328 kB | 97/233 kB | 43 kB | 52 kB   
 Progress (5): 0.8/1.6 MB | 308/328 kB | 114/233 kB | 43 kB | 52 kB
 Progress (5): 0.8/1.6 MB | 308/328 kB | 130/233 kB | 43 kB | 52 kB
                                                                   
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/3.2.1/maven-dependency-tree-3.2.1.jar (43 kB at 501 kB/s)
 #24 16.78 Progress (4): 0.8/1.6 MB | 308/328 kB | 146/233 kB | 52 kB
                                                           
 Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar
 #24 16.78 Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm-tree/9.5/asm-tree-9.5.jar (52 kB at 611 kB/s)
 #24 16.78 Progress (3): 0.8/1.6 MB | 308/328 kB | 163/233 kB
 Progress (3): 0.8/1.6 MB | 308/328 kB | 179/233 kB
 Progress (3): 0.8/1.6 MB | 308/328 kB | 196/233 kB
 Progress (3): 0.8/1.6 MB | 325/328 kB | 196/233 kB
 Progress (3): 0.8/1.6 MB | 328 kB | 196/233 kB    
 Progress (3): 0.8/1.6 MB | 328 kB | 212/233 kB
 Progress (3): 0.8/1.6 MB | 328 kB | 228/233 kB
 Progress (3): 0.8/1.6 MB | 328 kB | 233 kB    
                                           
 Downloaded from central: https://repo.maven.apache.org/maven2/org/jdom/jdom2/2.0.6.1/jdom2-2.0.6.1.jar (328 kB at 3.9 MB/s)
 #24 16.78 Progress (2): 0.8/1.6 MB | 233 kB
 Progress (2): 0.8/1.6 MB | 233 kB
 Progress (2): 0.9/1.6 MB | 233 kB
 Progress (2): 0.9/1.6 MB | 233 kB
 Progress (2): 0.9/1.6 MB | 233 kB
 Progress (2): 0.9/1.6 MB | 233 kB
 Progress (2): 0.9/1.6 MB | 233 kB
 Progress (2): 0.9/1.6 MB | 233 kB
 Progress (2): 1.0/1.6 MB | 233 kB
 Progress (2): 1.0/1.6 MB | 233 kB
 Progress (2): 1.0/1.6 MB | 233 kB
 Progress (2): 1.0/1.6 MB | 233 kB
 Progress (2): 1.0/1.6 MB | 233 kB
 Progress (2): 1.0/1.6 MB | 233 kB
 Progress (2): 1.1/1.6 MB | 233 kB
 Progress (2): 1.1/1.6 MB | 233 kB
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/vafer/jdependency/2.8.0/jdependency-2.8.0.jar (233 kB at 2.7 MB/s)
 #24 16.78 Progress (1): 1.1/1.6 MB
 Progress (1): 1.1/1.6 MB
 Progress (1): 1.1/1.6 MB
 Progress (1): 1.1/1.6 MB
 Progress (2): 1.1/1.6 MB | 16/752 kB
 Progress (2): 1.1/1.6 MB | 33/752 kB
 Progress (2): 1.1/1.6 MB | 49/752 kB
 Progress (2): 1.1/1.6 MB | 64/752 kB
 Progress (2): 1.1/1.6 MB | 80/752 kB
 Progress (2): 1.1/1.6 MB | 96/752 kB
 Progress (2): 1.1/1.6 MB | 113/752 kB
 Progress (2): 1.1/1.6 MB | 129/752 kB
 Progress (2): 1.1/1.6 MB | 145/752 kB
 Progress (2): 1.1/1.6 MB | 162/752 kB
 Progress (2): 1.1/1.6 MB | 178/752 kB
 Progress (2): 1.1/1.6 MB | 195/752 kB
 Progress (2): 1.1/1.6 MB | 211/752 kB
 Progress (2): 1.1/1.6 MB | 227/752 kB
 Progress (2): 1.1/1.6 MB | 244/752 kB
 Progress (2): 1.1/1.6 MB | 260/752 kB
 Progress (2): 1.1/1.6 MB | 277/752 kB
 Progress (2): 1.1/1.6 MB | 293/752 kB
 Progress (2): 1.1/1.6 MB | 309/752 kB
 Progress (2): 1.1/1.6 MB | 326/752 kB
 Progress (2): 1.1/1.6 MB | 342/752 kB
 Progress (2): 1.1/1.6 MB | 358/752 kB
 Progress (2): 1.1/1.6 MB | 375/752 kB
 Progress (2): 1.1/1.6 MB | 391/752 kB
 Progress (2): 1.1/1.6 MB | 408/752 kB
 Progress (2): 1.1/1.6 MB | 424/752 kB
 Progress (2): 1.1/1.6 MB | 440/752 kB
 Progress (2): 1.1/1.6 MB | 457/752 kB
 Progress (2): 1.1/1.6 MB | 473/752 kB
 Progress (2): 1.1/1.6 MB | 490/752 kB
 Progress (2): 1.1/1.6 MB | 506/752 kB
 Progress (2): 1.1/1.6 MB | 522/752 kB
 Progress (2): 1.1/1.6 MB | 539/752 kB
 Progress (2): 1.1/1.6 MB | 539/752 kB
 Progress (2): 1.2/1.6 MB | 539/752 kB
 Progress (2): 1.2/1.6 MB | 539/752 kB
 Progress (2): 1.2/1.6 MB | 539/752 kB
 Progress (2): 1.2/1.6 MB | 539/752 kB
 Progress (2): 1.2/1.6 MB | 539/752 kB
 Progress (2): 1.2/1.6 MB | 539/752 kB
 Progress (2): 1.3/1.6 MB | 539/752 kB
 Progress (2): 1.3/1.6 MB | 539/752 kB
 Progress (2): 1.3/1.6 MB | 539/752 kB
 Progress (2): 1.3/1.6 MB | 539/752 kB
 Progress (2): 1.3/1.6 MB | 539/752 kB
 Progress (2): 1.3/1.6 MB | 539/752 kB
 Progress (2): 1.4/1.6 MB | 539/752 kB
 Progress (2): 1.4/1.6 MB | 539/752 kB
 Progress (2): 1.4/1.6 MB | 539/752 kB
 Progress (2): 1.4/1.6 MB | 539/752 kB
 Progress (2): 1.4/1.6 MB | 539/752 kB
 Progress (2): 1.4/1.6 MB | 539/752 kB
 Progress (2): 1.5/1.6 MB | 539/752 kB
 Progress (2): 1.5/1.6 MB | 539/752 kB
 Progress (2): 1.5/1.6 MB | 539/752 kB
 Progress (2): 1.5/1.6 MB | 539/752 kB
 Progress (2): 1.5/1.6 MB | 539/752 kB
 Progress (2): 1.5/1.6 MB | 539/752 kB
 Progress (2): 1.5/1.6 MB | 555/752 kB
 Progress (2): 1.5/1.6 MB | 571/752 kB
 Progress (2): 1.5/1.6 MB | 588/752 kB
 Progress (2): 1.5/1.6 MB | 604/752 kB
 Progress (2): 1.5/1.6 MB | 621/752 kB
 Progress (2): 1.5/1.6 MB | 637/752 kB
 Progress (2): 1.5/1.6 MB | 653/752 kB
 Progress (2): 1.5/1.6 MB | 670/752 kB
 Progress (2): 1.5/1.6 MB | 686/752 kB
 Progress (2): 1.5/1.6 MB | 702/752 kB
 Progress (2): 1.5/1.6 MB | 719/752 kB
 Progress (2): 1.5/1.6 MB | 735/752 kB
 Progress (2): 1.5/1.6 MB | 752/752 kB
 Progress (2): 1.5/1.6 MB | 752 kB    
                                  
 Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar (752 kB at 8.7 MB/s)
 #24 16.78 Progress (1): 1.6/1.6 MB
 Progress (1): 1.6/1.6 MB
 Progress (1): 1.6/1.6 MB
 Progress (1): 1.6/1.6 MB
 Progress (1): 1.6 MB    
                     
 Downloaded from central: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.jar (1.6 MB at 16 MB/s)
 #24 17.35 [INFO] Replacing main artifact /backend/target/backend-0.0.1-SNAPSHOT.jar with repackaged archive, adding nested dependencies in BOOT-INF/.
 #24 17.35 [INFO] The original artifact has been renamed to /backend/target/backend-0.0.1-SNAPSHOT.jar.original
 #24 17.35 [INFO] 
 #24 17.35 [INFO] --- install:3.1.1:install (default-install) @ backend ---
 #24 17.38 [INFO] Installing /backend/pom.xml to /root/.m2/repository/com/redocode/backend/0.0.1-SNAPSHOT/backend-0.0.1-SNAPSHOT.pom
 #24 17.38 [INFO] Installing /backend/target/backend-0.0.1-SNAPSHOT.jar to /root/.m2/repository/com/redocode/backend/0.0.1-SNAPSHOT/backend-0.0.1-SNAPSHOT.jar
 #24 17.51 [INFO] ------------------------------------------------------------------------
 #24 17.51 [INFO] BUILD SUCCESS
 #24 17.51 [INFO] ------------------------------------------------------------------------
 #24 17.52 [INFO] Total time:  15.461 s
 #24 17.52 [INFO] Finished at: 2024-08-30T19:20:38Z
 #24 17.52 [INFO] ------------------------------------------------------------------------
 #24 DONE 18.3s
 
 #26 [api production-stage 5/5] COPY --from=build-stage /backend/target/backend-0.0.1-SNAPSHOT.jar /backend/backend.jar
 #26 DONE 0.2s
 
 #27 [api] exporting to image
 #27 exporting layers
 #27 exporting layers 0.7s done
 #27 writing image sha256:80be31c2ba52fda9e4e29d96917862e6a299672ce3b040a1c33e99529141679d done
 #27 naming to docker.io/library/projectsource-api done
 #27 DONE 0.7s
 
 #28 [api] resolving provenance for metadata file
 #28 DONE 0.0s
 
 #29 [frontend internal] load build definition from Dockerfile
 #29 transferring dockerfile: 439B done
 #29 WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 2)
 #29 WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 13)
 #29 DONE 0.0s
 
 #30 [frontend auth] library/node:pull token for registry-1.docker.io
 #30 DONE 0.0s
 
 #31 [frontend auth] library/nginx:pull token for registry-1.docker.io
 #31 DONE 0.0s
 
 #32 [frontend internal] load metadata for docker.io/library/node:21-alpine
 #32 DONE 0.5s
 
 #33 [frontend internal] load metadata for docker.io/library/nginx:stable-alpine
 #33 DONE 0.5s
 
 #34 [frontend internal] load .dockerignore
 #34 transferring context: 406B done
 #34 DONE 0.0s
 
 #35 [frontend internal] load build context
 #35 transferring context: 4.68MB 0.1s done
 #35 DONE 0.1s
 
 #36 [frontend build-stage 1/8] FROM docker.io/library/node:21-alpine@sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93
 #36 resolve docker.io/library/node:21-alpine@sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93 done
 #36 sha256:14d453f422e7d10a7e49d97e6a77f66239fcc1503954b4a887b7ac16e66220a8 0B / 1.38MB 0.1s
 #36 sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93 1.43kB / 1.43kB done
 #36 sha256:6908bbe242172d79727839290c3d893aa66607aec20e405823c8e56b0b27d8c4 1.16kB / 1.16kB done
 #36 sha256:cad63adc9266f2381a0730aabdb7f8dc65ef32c446cdeb238dae9a54a1ea490f 7.23kB / 7.23kB done
 #36 sha256:d25f557d7f31bf7acfac935859b5153da41d13c41f2b468d16f729a5b883634f 0B / 3.62MB 0.1s
 #36 sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 0B / 43.94MB 0.1s
 #36 sha256:14d453f422e7d10a7e49d97e6a77f66239fcc1503954b4a887b7ac16e66220a8 1.38MB / 1.38MB 0.1s done
 #36 sha256:d25f557d7f31bf7acfac935859b5153da41d13c41f2b468d16f729a5b883634f 3.62MB / 3.62MB 0.1s done
 #36 sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 8.39MB / 43.94MB 0.2s
 #36 extracting sha256:d25f557d7f31bf7acfac935859b5153da41d13c41f2b468d16f729a5b883634f
 #36 sha256:24ff74239155098e7efecdea07095e1d467cb0c2bd55b3795b0a080716951fe7 0B / 450B 0.2s
 #36 sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 25.17MB / 43.94MB 0.3s
 #36 extracting sha256:d25f557d7f31bf7acfac935859b5153da41d13c41f2b468d16f729a5b883634f 0.1s done
 #36 sha256:24ff74239155098e7efecdea07095e1d467cb0c2bd55b3795b0a080716951fe7 450B / 450B 0.2s done
 #36 sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 43.94MB / 43.94MB 0.5s done
 #36 extracting sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f
 #36 ...
 
 #37 [frontend production-stage 1/4] FROM docker.io/library/nginx:stable-alpine@sha256:d4d72ee8e6d028c5ad939454164d3645be2d38afb5c352277926a48e24abf4fa
 #37 resolve docker.io/library/nginx:stable-alpine@sha256:d4d72ee8e6d028c5ad939454164d3645be2d38afb5c352277926a48e24abf4fa 0.0s done
 #37 sha256:d4d72ee8e6d028c5ad939454164d3645be2d38afb5c352277926a48e24abf4fa 9.06kB / 9.06kB done
 #37 sha256:f05d105face814474acc5538160bd3f29309d9398dd895a4e71f676a4fd9a3fc 2.50kB / 2.50kB done
 #37 sha256:9703b2608a982bc40633a891858a59ab10fc1c96156056e888d5754fb427d6ed 11.21kB / 11.21kB done
 #37 sha256:e84a595b509f2cd3a17f9451e677ea9a3fad34a4dacf685d68589bdafe64f675 1.76MB / 1.76MB 0.2s done
 #37 extracting sha256:e84a595b509f2cd3a17f9451e677ea9a3fad34a4dacf685d68589bdafe64f675 0.1s done
 #37 sha256:8e479110e8a8177d2f9462c9efd90a78016306778bc47920b6d01c6b0cae4ab7 956B / 956B 0.3s done
 #37 sha256:ecc9b66af851df3e20f5692dd98202f3699178e161291bce3c4557ecaee3655e 394B / 394B 0.3s done
 #37 sha256:09732b09eef5bd0314b1a68423cd67bdcbf2ee7c3d4ef1b7f2803fee1b5de08e 1.21kB / 1.21kB 0.3s done
 #37 sha256:49fbf0520b780f67800f90704831bc8d461373f30e3ea4f64c82e2c0303948aa 628B / 628B 0.3s done
 #37 sha256:128ae6f0c7f5f795d18361d96629fd7c2571705018259fa3bcca03a07b6b7dd3 13.19MB / 13.19MB 0.5s done
 #37 sha256:2a633cf0ba84ee9a0920946c0c6d46c05fb4e4d898f3ef1a153d1452be9476ca 1.40kB / 1.40kB 0.4s done
 #37 extracting sha256:49fbf0520b780f67800f90704831bc8d461373f30e3ea4f64c82e2c0303948aa done
 #37 extracting sha256:8e479110e8a8177d2f9462c9efd90a78016306778bc47920b6d01c6b0cae4ab7 done
 #37 extracting sha256:ecc9b66af851df3e20f5692dd98202f3699178e161291bce3c4557ecaee3655e done
 #37 extracting sha256:09732b09eef5bd0314b1a68423cd67bdcbf2ee7c3d4ef1b7f2803fee1b5de08e done
 #37 extracting sha256:2a633cf0ba84ee9a0920946c0c6d46c05fb4e4d898f3ef1a153d1452be9476ca done
 #37 extracting sha256:128ae6f0c7f5f795d18361d96629fd7c2571705018259fa3bcca03a07b6b7dd3 0.4s done
 #37 DONE 1.2s
 
 #38 [frontend production-stage 2/4] COPY nginx.conf /etc/nginx/nginx.conf
 #38 DONE 0.0s
 
 #36 [frontend build-stage 1/8] FROM docker.io/library/node:21-alpine@sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93
 #36 ...
 
 #39 [frontend production-stage 3/4] RUN rm -r /etc/nginx/conf.d
 #39 DONE 0.2s
 
 #36 [frontend build-stage 1/8] FROM docker.io/library/node:21-alpine@sha256:78c45726ea205bbe2f23889470f03b46ac988d14b6d813d095e2e9909f586f93
 #36 extracting sha256:9e36186fec5a5e04e517871f6901245a86def1db1f6864470f5669a7baf2582f 1.5s done
 #36 extracting sha256:14d453f422e7d10a7e49d97e6a77f66239fcc1503954b4a887b7ac16e66220a8
 #36 extracting sha256:14d453f422e7d10a7e49d97e6a77f66239fcc1503954b4a887b7ac16e66220a8 0.0s done
 #36 extracting sha256:24ff74239155098e7efecdea07095e1d467cb0c2bd55b3795b0a080716951fe7 done
 #36 DONE 2.2s
 
 #40 [frontend build-stage 2/8] WORKDIR /app
 #40 DONE 0.0s
 
 #41 [frontend build-stage 3/8] COPY package*.json ./
 #41 DONE 0.0s
 
 #42 [frontend build-stage 4/8] RUN yarn
 #42 0.399 yarn install v1.22.19
 #42 0.418 info No lockfile found.
 #42 0.423 [1/4] Resolving packages...
 #42 0.457 (node:1) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
 #42 0.457 (Use `node --trace-deprecation ...` to show where the warning was created)
 #42 2.758 warning gh-pages > globby > glob@7.2.3: Glob versions prior to v9 are no longer supported
 #42 2.817 warning gh-pages > globby > glob > inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
 #42 7.964 warning eslint > @humanwhocodes/config-array@0.11.14: Use @eslint/config-array instead
 #42 8.011 warning eslint > file-entry-cache > flat-cache > rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported
 #42 8.012 warning eslint > file-entry-cache > flat-cache > rimraf > glob@7.2.3: Glob versions prior to v9 are no longer supported
 #42 8.040 warning eslint > @humanwhocodes/config-array > @humanwhocodes/object-schema@2.0.3: Use @eslint/object-schema instead
 #42 10.97 [2/4] Fetching packages...
 #42 22.74 warning chart.js@4.4.4: The engine "pnpm" appears to be invalid.
 #42 22.75 [3/4] Linking dependencies...
 #42 22.75 warning " > @guolao/vue-monaco-editor@1.5.4" has unmet peer dependency "monaco-editor@>=0.43.0".
 #42 22.75 warning "@guolao/vue-monaco-editor > @monaco-editor/loader@1.4.0" has unmet peer dependency "monaco-editor@>= 0.21.0 < 1".
 #42 22.75 warning " > bootstrap@5.3.3" has unmet peer dependency "@popperjs/core@^2.11.8".
 #42 27.22 [4/4] Building fresh packages...
 #42 39.34 success Saved lockfile.
 #42 39.34 Done in 38.95s.
 #42 DONE 42.2s
 
 #43 [frontend build-stage 5/8] COPY . .
 #43 DONE 0.1s
 
 #44 [frontend build-stage 6/8] RUN npm install
 #44 4.223 
 #44 4.223 added 1 package, changed 1 package, and audited 739 packages in 4s
 #44 4.223 
 #44 4.223 178 packages are looking for funding
 #44 4.223   run `npm fund` for details
 #44 4.228 
 #44 4.228 3 moderate severity vulnerabilities
 #44 4.228 
 #44 4.228 To address all issues (including breaking changes), run:
 #44 4.228   npm audit fix --force
 #44 4.228 
 #44 4.228 Run `npm audit` for details.
 #44 4.228 npm notice 
 #44 4.228 npm notice New minor version of npm available! 10.5.0 -> 10.8.3
 #44 4.229 npm notice Changelog: <https://github.com/npm/cli/releases/tag/v10.8.3>
 #44 4.229 npm notice Run `npm install -g npm@10.8.3` to update!
 #44 4.229 npm notice 
 #44 DONE 4.4s
 
 #45 [frontend build-stage 7/8] RUN yarn install
 #45 0.658 ➤ YN0000: · Yarn 4.0.2
 #45 0.675 ➤ YN0000: ┌ Resolution step
 #45 5.723 ➤ YN0085: │ + @guolao/vue-monaco-editor@npm:1.5.4, @rushstack/eslint-patch@npm:1.10.4, @stomp/stompjs@npm:7.0.0, @testing-library/vue@npm:8.1.0, and 786 more.
 #45 5.735 ➤ YN0000: └ Completed in 5s 60ms
 #45 5.736 ➤ YN0000: ┌ Post-resolution validation
 #45 5.736 ➤ YN0002: │ yarn_ts_vue@workspace:. doesn't provide @popperjs/core (p3f8e2), requested by bootstrap.
 #45 5.736 ➤ YN0002: │ yarn_ts_vue@workspace:. doesn't provide monaco-editor (pe0eff), requested by @guolao/vue-monaco-editor.
 #45 5.736 ➤ YN0086: │ Some peer dependencies are incorrectly met; run yarn explain peer-requirements <hash> for details, where <hash> is the six-letter p-prefixed code.
 #45 5.737 ➤ YN0000: └ Completed
 #45 5.737 ➤ YN0000: ┌ Fetch step
 #45 10.70 ➤ YN0013: │ 752 packages were added to the project (+ 279.58 MiB).
 #45 10.70 ➤ YN0000: └ Completed in 4s 963ms
 #45 10.74 ➤ YN0000: ┌ Link step
 #45 16.95 ➤ YN0007: │ cypress@npm:13.14.1 must be built because it never has been before or the last one failed
 #45 16.95 ➤ YN0007: │ vue-demi@npm:0.13.11 [be68b] must be built because it never has been before or the last one failed
 #45 16.95 ➤ YN0007: │ vue-demi@npm:0.14.10 [ad0db] must be built because it never has been before or the last one failed
 #45 16.95 ➤ YN0007: │ esbuild@npm:0.21.5 must be built because it never has been before or the last one failed
 #45 17.61 ➤ YN0000: └ Completed in 6s 873ms
 #45 17.66 ➤ YN0000: · Done with warnings in 17s 4ms
 #45 DONE 18.6s
 
 #46 [frontend build-stage 8/8] RUN yarn build
 #46 1.814 vite v5.4.2 building for production...
 #46 1.877 transforming...
 #46 3.548 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
 #46 3.548 rules will be changing to match the behavior specified by CSS in an upcoming
 #46 3.548 version. To keep the existing behavior, move the declaration above the nested
 #46 3.548 rule. To opt into the new behavior, wrap the declaration in `& {}`.
 #46 3.548 
 #46 3.548 More info: https://sass-lang.com/d/mixed-decls
 #46 3.548 
 #46 3.548     ┌──> node_modules/bootstrap/scss/_reboot.scss
 #46 3.548 503 │     font-weight: $legend-font-weight;
 #46 3.548     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ declaration
 #46 3.548     ╵
 #46 3.548     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
 #46 3.548 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
 #46 3.548 137 │ │       @content;
 #46 3.548 138 │ │     }
 #46 3.548     │ └─── nested rule
 #46 3.548     ╵
 #46 3.548     node_modules/bootstrap/scss/_reboot.scss 503:3   @import
 #46 3.548     node_modules/bootstrap/scss/bootstrap.scss 16:9  @import
 #46 3.548     src/assets/styles/styles.scss 1:9                root stylesheet
 #46 3.548 
 #46 3.552 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
 #46 3.552 rules will be changing to match the behavior specified by CSS in an upcoming
 #46 3.552 version. To keep the existing behavior, move the declaration above the nested
 #46 3.552 rule. To opt into the new behavior, wrap the declaration in `& {}`.
 #46 3.552 
 #46 3.552 More info: https://sass-lang.com/d/mixed-decls
 #46 3.552 
 #46 3.552     ┌──> node_modules/bootstrap/scss/_reboot.scss
 #46 3.552 504 │     line-height: inherit;
 #46 3.552     │     ^^^^^^^^^^^^^^^^^^^^ declaration
 #46 3.552     ╵
 #46 3.552     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
 #46 3.552 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
 #46 3.552 137 │ │       @content;
 #46 3.552 138 │ │     }
 #46 3.552     │ └─── nested rule
 #46 3.552     ╵
 #46 3.552     node_modules/bootstrap/scss/_reboot.scss 504:3   @import
 #46 3.552     node_modules/bootstrap/scss/bootstrap.scss 16:9  @import
 #46 3.552     src/assets/styles/styles.scss 1:9                root stylesheet
 #46 3.552 
 #46 3.602 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
 #46 3.602 rules will be changing to match the behavior specified by CSS in an upcoming
 #46 3.602 version. To keep the existing behavior, move the declaration above the nested
 #46 3.602 rule. To opt into the new behavior, wrap the declaration in `& {}`.
 #46 3.602 
 #46 3.602 More info: https://sass-lang.com/d/mixed-decls
 #46 3.602 
 #46 3.602     ┌──> node_modules/bootstrap/scss/_type.scss
 #46 3.602 38  │       font-family: $display-font-family;
 #46 3.602     │       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ declaration
 #46 3.602     ╵
 #46 3.602     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
 #46 3.602 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
 #46 3.602 137 │ │       @content;
 #46 3.602 138 │ │     }
 #46 3.602     │ └─── nested rule
 #46 3.602     ╵
 #46 3.602     node_modules/bootstrap/scss/_type.scss 38:5      @import
 #46 3.602     node_modules/bootstrap/scss/bootstrap.scss 17:9  @import
 #46 3.602     src/assets/styles/styles.scss 1:9                root stylesheet
 #46 3.602 
 #46 3.604 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
 #46 3.604 rules will be changing to match the behavior specified by CSS in an upcoming
 #46 3.604 version. To keep the existing behavior, move the declaration above the nested
 #46 3.604 rule. To opt into the new behavior, wrap the declaration in `& {}`.
 #46 3.604 
 #46 3.604 More info: https://sass-lang.com/d/mixed-decls
 #46 3.604 
 #46 3.604     ┌──> node_modules/bootstrap/scss/_type.scss
 #46 3.604 39  │       font-style: $display-font-style;
 #46 3.604     │       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ declaration
 #46 3.604     ╵
 #46 3.604     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
 #46 3.604 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
 #46 3.604 137 │ │       @content;
 #46 3.604 138 │ │     }
 #46 3.604     │ └─── nested rule
 #46 3.604     ╵
 #46 3.604     node_modules/bootstrap/scss/_type.scss 39:5      @import
 #46 3.604     node_modules/bootstrap/scss/bootstrap.scss 17:9  @import
 #46 3.604     src/assets/styles/styles.scss 1:9                root stylesheet
 #46 3.604 
 #46 3.607 DEPRECATION WARNING: Sass's behavior for declarations that appear after nested
 #46 3.607 rules will be changing to match the behavior specified by CSS in an upcoming
 #46 3.607 version. To keep the existing behavior, move the declaration above the nested
 #46 3.607 rule. To opt into the new behavior, wrap the declaration in `& {}`.
 #46 3.607 
 #46 3.607 More info: https://sass-lang.com/d/mixed-decls
 #46 3.607 
 #46 3.607     ┌──> node_modules/bootstrap/scss/_type.scss
 #46 3.607 40  │       font-weight: $display-font-weight;
 #46 3.607     │       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ declaration
 #46 3.607     ╵
 #46 3.607     ┌──> node_modules/bootstrap/scss/vendor/_rfs.scss
 #46 3.607 136 │ ┌     @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
 #46 3.607 137 │ │       @content;
 #46 3.607 138 │ │     }
 #46 3.607     │ └─── nested rule
 #46 3.607     ╵
 #46 3.607     node_modules/bootstrap/scss/_type.scss 40:5      @import
 #46 3.607     node_modules/bootstrap/scss/bootstrap.scss 17:9  @import
 #46 3.607     src/assets/styles/styles.scss 1:9                root stylesheet
 #46 3.607 
 #46 8.030 WARNING: 22 repetitive deprecation warnings omitted.
 #46 8.030 
 #46 12.83 ✓ 326 modules transformed.
 #46 13.19 rendering chunks...
 #46 13.49 computing gzip size...
 #46 13.52 dist/index.html                                0.76 kB │ gzip:  0.36 kB
 #46 13.53 dist/assets/fronImage3-3n7qjO-G.png           62.55 kB
 #46 13.53 dist/assets/fronImage2-BA4ZG6tS.png          121.73 kB
 #46 13.53 dist/assets/fronImage1-DEr6hecF.png          179.95 kB
 #46 13.53 dist/assets/Inter-roman.var-C-r5W2Hj.woff2   227.18 kB
 #46 13.53 dist/assets/Inter-italic.var-DhD-tpjY.woff2  245.04 kB
 #46 13.53 dist/assets/RegisterView-C4KoTHqj.css          0.02 kB │ gzip:  0.04 kB
 #46 13.53 dist/assets/HomeView-emTC5DPx.css              0.12 kB │ gzip:  0.11 kB
 #46 13.53 dist/assets/ExcersicesView-CAuvQzI_.css        0.18 kB │ gzip:  0.15 kB
 #46 13.53 dist/assets/CreateView-CbODDtcb.css            0.57 kB │ gzip:  0.25 kB
 #46 13.53 dist/assets/ResultsView-BeMKBENi.css           0.71 kB │ gzip:  0.32 kB
 #46 13.53 dist/assets/components-CIw8x5Tv.css            3.00 kB │ gzip:  0.96 kB
 #46 13.53 dist/assets/index-B431HODb.css               738.40 kB │ gzip: 93.29 kB
 #46 13.53 dist/assets/TestView-BRCq6GG6.js               0.24 kB │ gzip:  0.21 kB
 #46 13.53 dist/assets/PlayGroundView-Cq6DmXlz.js         0.91 kB │ gzip:  0.53 kB
 #46 13.53 dist/assets/ExcersiceView-C1eLbcoQ.js          1.57 kB │ gzip:  0.72 kB
 #46 13.53 dist/assets/types-BPR80lJL.js                  2.75 kB │ gzip:  0.54 kB
 #46 13.53 dist/assets/CreateView-BmX0Cw1U.js             2.80 kB │ gzip:  1.03 kB
 #46 13.53 dist/assets/HomeView-By7B9iTS.js               3.14 kB │ gzip:  1.25 kB
 #46 13.53 dist/assets/AccountView-Dsy0t4Sz.js            3.25 kB │ gzip:  1.51 kB
 #46 13.53 dist/assets/ExcersicesView-3-dZmwYr.js         3.70 kB │ gzip:  1.82 kB
 #46 13.53 dist/assets/ResultsView-FdtD-oOm.js            3.74 kB │ gzip:  1.23 kB
 #46 13.53 dist/assets/RegisterView-DmzxbcAh.js          17.80 kB │ gzip:  6.37 kB
 #46 13.53 dist/assets/controllers-DetOr74Y.js           40.58 kB │ gzip: 10.27 kB
 #46 13.53 dist/assets/components-DHrE_Dzx.js           261.27 kB │ gzip: 91.17 kB
 #46 13.53 dist/assets/index-CrVaDnBK.js                388.76 kB │ gzip: 96.74 kB
 #46 13.53 ✓ built in 11.68s
 #46 DONE 19.3s
 
 #47 [frontend production-stage 4/4] COPY --from=build-stage /app/dist /usr/share/nginx/html
 #47 DONE 0.0s
 
 #48 [frontend] exporting to image
 #48 exporting layers 0.1s done
 #48 writing image sha256:e82cf77ae976a6f34d874a656e994130ed78275c58eece75d489e04939bd8f8b done
 #48 naming to docker.io/library/projectsource-frontend done
 #48 DONE 0.1s
 
 #49 [frontend] resolving provenance for metadata file
 #49 DONE 0.0s
  Network projectsource_frontend  Creating
  Network projectsource_frontend  Created
  Network projectsource_backend  Creating
  Network projectsource_backend  Created
  Network projectsource_docker_net  Creating
  Network projectsource_docker_net  Created
  Container dockerrunner  Creating
  Container projectsource-db-1  Creating
  Container dockerrunner  Created
  Container projectsource-db-1  Created
  Container projectsource-api-1  Creating
  Container projectsource-api-1  Created
  Container projectsource-frontend-1  Creating
  Container projectsource-frontend-1  Created
  Container dockerrunner  Starting
  Container projectsource-db-1  Starting
  Container projectsource-db-1  Started
  Container dockerrunner  Started
  Container projectsource-db-1  Waiting
  Container dockerrunner  Waiting
  Container dockerrunner  Healthy
  Container projectsource-db-1  Healthy
  Container projectsource-api-1  Starting
  Container projectsource-api-1  Started
  Container projectsource-api-1  Waiting
  Container projectsource-api-1  Healthy
  Container projectsource-frontend-1  Starting
  Container projectsource-frontend-1  Started
 CONTAINER ID   IMAGE                        COMMAND                  CREATED          STATUS                    PORTS                                                 NAMES
 026b87e27e09   projectsource-frontend       "/docker-entrypoint.…"   49 seconds ago   Up Less than a second     0.0.0.0:80->80/tcp, :::80->80/tcp                     projectsource-frontend-1
 33985da28c43   projectsource-api            "/__cacert_entrypoin…"   49 seconds ago   Up 43 seconds (healthy)   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp, 9090/tcp   projectsource-api-1
 06dbc40367c0   postgres                     "docker-entrypoint.s…"   49 seconds ago   Up 48 seconds (healthy)   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp             projectsource-db-1
 8ebab56b589f   projectsource-dockerrunner   "/bin/sh /usr/local/…"   49 seconds ago   Up 48 seconds (healthy)   2375/tcp, 0.0.0.0:2376->2376/tcp, :::2376->2376/tcp   dockerrunner
 ##[group]Run actions/setup-node@v3
 with:
   node-version: 20
   always-auth: false
   check-latest: false
   token: ***
 ##[endgroup]
 Found in cache @ /opt/hostedtoolcache/node/20.17.0/x64
 ##[group]Environment details
 node: v20.17.0
 npm: 10.8.2
 yarn: 1.22.22
 ##[endgroup]
 ##[group]Run sudo apt-get update
 [36;1msudo apt-get update[0m
 [36;1msudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb -y[0m
 [36;1mnpm install cypress[0m
 [36;1mnpm install[0m
 shell: /usr/bin/bash -e {0}
 ##[endgroup]
 Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [142 B]
 Hit:6 https://packages.microsoft.com/repos/azure-cli focal InRelease
 Hit:2 http://azure.archive.ubuntu.com/ubuntu focal InRelease
 Hit:7 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease
 Hit:3 http://azure.archive.ubuntu.com/ubuntu focal-updates InRelease
 Hit:8 https://download.docker.com/linux/ubuntu focal InRelease
 Hit:4 http://azure.archive.ubuntu.com/ubuntu focal-backports InRelease
 Hit:5 http://azure.archive.ubuntu.com/ubuntu focal-security InRelease
 Reading package lists...
 Reading package lists...
 Building dependency tree...
 Reading state information...
 libxss1 is already the newest version (1:1.2.3-1).
 libxtst6 is already the newest version (2:1.2.3-1).
 libxtst6 set to manually installed.
 xauth is already the newest version (1:1.1-0ubuntu1).
 xauth set to manually installed.
 libasound2 is already the newest version (1.2.2-2.1ubuntu2.5).
 libasound2 set to manually installed.
 libgbm-dev is already the newest version (21.2.6-0ubuntu0.1~20.04.2).
 libgtk-3-0 is already the newest version (3.24.20-0ubuntu1.2).
 libnss3 is already the newest version (2:3.98-0ubuntu0.20.04.2).
 libnss3 set to manually installed.
 xvfb is already the newest version (2:1.20.13-1ubuntu1~20.04.17).
 The following additional packages will be installed:
   gir1.2-notify-0.7 libgail-common libgail18 libgtk2.0-bin libgtk2.0-common
 Suggested packages:
   gvfs
 The following NEW packages will be installed:
   gir1.2-notify-0.7 libgail-common libgail18 libgtk2.0-0 libgtk2.0-bin
   libgtk2.0-common libnotify-dev
 0 upgraded, 7 newly installed, 0 to remove and 10 not upgraded.
 Need to get 2065 kB of archives.
 After this operation, 7088 kB of additional disk space will be used.
 Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [142 B]
 Get:2 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 gir1.2-notify-0.7 amd64 0.7.9-1ubuntu3.20.04.2 [3588 B]
 Get:3 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgtk2.0-common all 2.24.32-4ubuntu4.1 [126 kB]
 Get:4 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgtk2.0-0 amd64 2.24.32-4ubuntu4.1 [1789 kB]
 Get:5 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgail18 amd64 2.24.32-4ubuntu4.1 [14.8 kB]
 Get:6 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgail-common amd64 2.24.32-4ubuntu4.1 [115 kB]
 Get:7 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libgtk2.0-bin amd64 2.24.32-4ubuntu4.1 [7728 B]
 Get:8 http://azure.archive.ubuntu.com/ubuntu focal-updates/main amd64 libnotify-dev amd64 0.7.9-1ubuntu3.20.04.2 [8672 B]
 Fetched 2065 kB in 0s (5879 kB/s)
 Selecting previously unselected package gir1.2-notify-0.7:amd64.
 (Reading database ... 
 (Reading database ... 5%
 (Reading database ... 10%
 (Reading database ... 15%
 (Reading database ... 20%
 (Reading database ... 25%
 (Reading database ... 30%
 (Reading database ... 35%
 (Reading database ... 40%
 (Reading database ... 45%
 (Reading database ... 50%
 (Reading database ... 55%
 (Reading database ... 60%
 (Reading database ... 65%
 (Reading database ... 70%
 (Reading database ... 75%
 (Reading database ... 80%
 (Reading database ... 85%
 (Reading database ... 90%
 (Reading database ... 95%
 (Reading database ... 100%
 (Reading database ... 271103 files and directories currently installed.)
 Preparing to unpack .../0-gir1.2-notify-0.7_0.7.9-1ubuntu3.20.04.2_amd64.deb ...
 Unpacking gir1.2-notify-0.7:amd64 (0.7.9-1ubuntu3.20.04.2) ...
 Selecting previously unselected package libgtk2.0-common.
 Preparing to unpack .../1-libgtk2.0-common_2.24.32-4ubuntu4.1_all.deb ...
 Unpacking libgtk2.0-common (2.24.32-4ubuntu4.1) ...
 Selecting previously unselected package libgtk2.0-0:amd64.
 Preparing to unpack .../2-libgtk2.0-0_2.24.32-4ubuntu4.1_amd64.deb ...
 Unpacking libgtk2.0-0:amd64 (2.24.32-4ubuntu4.1) ...
 Selecting previously unselected package libgail18:amd64.
 Preparing to unpack .../3-libgail18_2.24.32-4ubuntu4.1_amd64.deb ...
 Unpacking libgail18:amd64 (2.24.32-4ubuntu4.1) ...
 Selecting previously unselected package libgail-common:amd64.
 Preparing to unpack .../4-libgail-common_2.24.32-4ubuntu4.1_amd64.deb ...
 Unpacking libgail-common:amd64 (2.24.32-4ubuntu4.1) ...
 Selecting previously unselected package libgtk2.0-bin.
 Preparing to unpack .../5-libgtk2.0-bin_2.24.32-4ubuntu4.1_amd64.deb ...
 Unpacking libgtk2.0-bin (2.24.32-4ubuntu4.1) ...
 Selecting previously unselected package libnotify-dev:amd64.
 Preparing to unpack .../6-libnotify-dev_0.7.9-1ubuntu3.20.04.2_amd64.deb ...
 Unpacking libnotify-dev:amd64 (0.7.9-1ubuntu3.20.04.2) ...
 Setting up gir1.2-notify-0.7:amd64 (0.7.9-1ubuntu3.20.04.2) ...
 Setting up libgtk2.0-common (2.24.32-4ubuntu4.1) ...
 Setting up libnotify-dev:amd64 (0.7.9-1ubuntu3.20.04.2) ...
 Setting up libgtk2.0-0:amd64 (2.24.32-4ubuntu4.1) ...
 Setting up libgail18:amd64 (2.24.32-4ubuntu4.1) ...
 Setting up libgtk2.0-bin (2.24.32-4ubuntu4.1) ...
 Setting up libgail-common:amd64 (2.24.32-4ubuntu4.1) ...
 Processing triggers for man-db (2.9.1-1) ...
 Processing triggers for libc-bin (2.31-0ubuntu9.16) ...
 
 added 779 packages, and audited 780 packages in 29s
 
 177 packages are looking for funding
   run `npm fund` for details
 
 5 vulnerabilities (4 moderate, 1 high)
 
 To address issues that do not require attention, run:
   npm audit fix
 
 To address all issues (including breaking changes), run:
   npm audit fix --force
 
 Run `npm audit` for details.
 
 up to date, audited 780 packages in 1s
 
 177 packages are looking for funding
   run `npm fund` for details
 
 5 vulnerabilities (4 moderate, 1 high)
 
 To address issues that do not require attention, run:
   npm audit fix
 
 To address all issues (including breaking changes), run:
   npm audit fix --force
 
 Run `npm audit` for details.
 ##[group]Run docker run --network="host" -v $PWD:/e2e -w /e2e --entrypoint cypress cypress/included:latest run --e2e -C config/cypress-prod.config.ts
 [36;1mdocker run --network="host" -v $PWD:/e2e -w /e2e --entrypoint cypress cypress/included:latest run --e2e -C config/cypress-prod.config.ts[0m
 shell: /usr/bin/bash -e {0}
 ##[endgroup]
 Unable to find image 'cypress/included:latest' locally
 latest: Pulling from cypress/included
 e4fff0779e6d: Already exists
 62e0fdbe5305: Pulling fs layer
 eadcfb20679e: Pulling fs layer
 92e354ec81a5: Pulling fs layer
 87840b3dcede: Pulling fs layer
 13a9e1a62870: Pulling fs layer
 2c701d9a5d8a: Pulling fs layer
 e041a568a041: Pulling fs layer
 a7814c83964b: Pulling fs layer
 6b8b01107f3e: Pulling fs layer
 e041a568a041: Waiting
 87840b3dcede: Waiting
 a7814c83964b: Waiting
 13a9e1a62870: Waiting
 6b8b01107f3e: Waiting
 2c701d9a5d8a: Waiting
 eadcfb20679e: Verifying Checksum
 eadcfb20679e: Download complete
 87840b3dcede: Verifying Checksum
 87840b3dcede: Download complete
 92e354ec81a5: Verifying Checksum
 92e354ec81a5: Download complete
 62e0fdbe5305: Verifying Checksum
 62e0fdbe5305: Download complete
 13a9e1a62870: Verifying Checksum
 13a9e1a62870: Download complete
 2c701d9a5d8a: Verifying Checksum
 2c701d9a5d8a: Download complete
 6b8b01107f3e: Verifying Checksum
 6b8b01107f3e: Download complete
 e041a568a041: Verifying Checksum
 e041a568a041: Download complete
 a7814c83964b: Verifying Checksum
 a7814c83964b: Download complete
 62e0fdbe5305: Pull complete
 eadcfb20679e: Pull complete
 92e354ec81a5: Pull complete
 87840b3dcede: Pull complete
 13a9e1a62870: Pull complete
 2c701d9a5d8a: Pull complete
 e041a568a041: Pull complete
 a7814c83964b: Pull complete
 6b8b01107f3e: Pull complete
 Digest: sha256:b91314fbe68afb9777d06c13234ca28f0d0e055f4834a5eae962aec0c4857de6
 Status: Downloaded newer image for cypress/included:latest
 [STARTED] Task without title.
 [SUCCESS] Task without title.
 
 DevTools listening on ws://127.0.0.1:38213/devtools/browser/27656f4f-afc3-4770-9b93-7eb60e9c687c
 (node:369) ExperimentalWarning: `--experimental-loader` may be removed in the future; instead use `register()`:
 --import 'data:text/javascript,import { register } from "node:module"; import { pathToFileURL } from "node:url"; register("file%3A///root/.cache/Cypress/13.14.1/Cypress/resources/app/node_modules/ts-node/esm/transpile-only.mjs", pathToFileURL("./"));'
 (Use `node --trace-warnings ...` to show where the warning was created)
 
 [90m====================================================================================================[39m
 
 [0m  ([4m[1mRun Starting[22m[24m)[0m
 
 [90m  ┌[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m┐[39m
 [90m  │[39m [90mCypress:[39m        13.14.1                                                                        [90m│[39m
 [90m  │[39m [90mBrowser:[39m        Electron 118 [90m(headless)[39m                                                        [90m│[39m
 [90m  │[39m [90mNode Version:[39m   [0mv20.17.0 [90m(/usr/local/bin/node)[39m[0m                                                 [90m│[39m
 [90m  │[39m [90mSpecs:[39m          [0m7 found (CreateNewExercise.cy.ts, FibonachiExercise.cy.ts, HelloWorldCppRun.cy[0m [90m│[39m
 [90m  │[39m                 [0m.ts, HelloWorldJsRun.cy.ts, RegisterAndSingIn.cy.ts, UnauthenticationSwitch.cy[0m [90m│[39m
 [90m  │[39m                 [0m.ts, _ApiConnection.cy.ts)[0m                                                     [90m│[39m
 [90m  │[39m [90mSearched:[39m       [0msrc/__tests__prod/**/*.{cy,spec}.{js,jsx,ts,tsx}[0m                               [90m│[39m
 [90m  │[39m [90mExperiments:[39m    experimentalMemoryManagement=true                                              [90m│[39m
 [90m  └[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m┘[39m
 
 
 [90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m[90m─[39m
                                                                                                     
   Running:  [90mCreateNewExercise.cy.ts[39m                                                         [90m(1 of 7)[39m
 
 [0m[0m
 [0m  Create new exercise[0m
 error: XDG_RUNTIME_DIR is invalid or not set in the environment.
 error: XDG_RUNTIME_DIR is invalid or not set in the environment.
 [32m      cy:command ✔ [39m visit	/
 [37m        cons:log ✱ [39m this._vmStatusSubscription intlize
 [37m        cons:log ✱ [39m new subsciption on /user/public/topic/codeRunnerState
 [37m        cons:log ✱ [39m this._CodeResultsSubscription intlize
 [37m        cons:log ✱ [39m new subsciption on /user/public/topic/codeRunnerResults
 [37m        cons:log ✱ [39m new subsciption on /user/public/topic/ExecutionResponses
 [37m        cons:log ✱ [39m seted
 [37m        cons:log ✱ [39m {}
 [37m        cons:log ✱ [39m _VmStatusSubscriptions  
 [37m        cons:log ✱ [39m method  function () { [native code] }
 [37m        cons:log ✱ [39m method  function
 [37m        cons:log ✱ [39m _VmStatusSubscriptions  function () { [native code] }
 [37m        cons:log ✱ [39m {"codeRunnerType":"UNIDENTIFIED","state":"NONE"}
 [37m        cons:log ✱ [39m creator reset
 [37m        cons:log ✱ [39m this.languages: []
 [37m        cons:log ✱ [39m creator reset
 [37m        cons:log ✱ [39m this.languages: []
 [32m      cy:command ✔ [39m visit	/
 [37m        cons:log ✱ [39m this._vmStatusSubscription intlize
 [37m        cons:log ✱ [39m new subsciption on /user/public/topic/codeRunnerState
 [37m        cons:log ✱ [39m this._CodeResultsSubscription intlize
 [37m        cons:log ✱ [39m new subsciption on /user/public/topic/codeRunnerResults
 [37m        cons:log ✱ [39m new subsciption on /user/public/topic/ExecutionResponses
 [37m        cons:log ✱ [39m seted
 [37m        cons:log ✱ [39m {}
 [37m        cons:log ✱ [39m _VmStatusSubscriptions  
 [37m        cons:log ✱ [39m method  function () { [native code] }
 [37m        cons:log ✱ [39m method  function
 [37m        cons:log ✱ [39m _VmStatusSubscriptions  function () { [native code] }
 [37m        cons:log ✱ [39m {"codeRunnerType":"UNIDENTIFIED","state":"NONE"}
 [37m        cons:log ✱ [39m creator reset
 [37m        cons:log ✱ [39m this.languages: []
 [37m        cons:log ✱ [39m creator reset
 [37m        cons:log ✱ [39m this.languages: []
 [32m      cy:command ✔ [39m get	#login-email
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m get	#login-email
 [32m      cy:command ✔ [39m type	sunny@mail.com
 [32m      cy:command ✔ [39m get	#login-password
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m get	#login-password
 [32m      cy:command ✔ [39m type	Password+123
 [32m      cy:command ✔ [39m get	#login
 [32m      cy:command ✔ [39m click	
 [32m          cy:xhr ➟ [39m POST http://localhost:8080/public/auth/login
                     Status: 200
 [32m      cy:command ✔ [39m get	.p-toast-detail
 [37m        cons:log ✱ [39m Response: {"data":{"token":"***"},"status":200,"statusText":"OK","headers":{"cache-control":"no-cache, no-store, max-age=0, must-revalidate","content-type":"application/json","expires":"0","pragma":"no-cache"},"config":{"transitional":{"silentJSONParsing":true,"forcedJSONParsing":true,"clarifyTimeoutError":false},"adapter":["xhr","http","fetch"],"transformRequest":[null],"transformResponse":[null],"timeout":0,"xsrfCookieName":"XSRF-TOKEN","xsrfHeaderName":"X-XSRF-TOKEN","maxContentLength":-1,"maxBodyLength":-1,"env":{},"headers":{"Accept":"application/json, text/plain, */*","Content-Type":"application/json"},"baseURL":"http://local ...
 [32m      cy:command ✔ [39m contains	Succesfully logged in
 [32m      cy:command ✔ [39m assert	expected **<div.p-toast-detail>** to be **visible**
 [32m      cy:command ✔ [39m new url	http://localhost/Home
 [32m      cy:command ✔ [39m get	.p-toast-detail
 [32m      cy:command ✔ [39m assert	expected **.p-toast-detail** not to exist in the DOM
                     Actual: 	".p-toast-detail"
                     Expected: 	".p-toast-detail"
 [32m      cy:command ✔ [39m get	#switch-exercises
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m new url	http://localhost/Exercises
 [37m        cons:log ✱ [39m load : count changed from undefined to {"page":1,"rowsPerPage":25,"sortBy":"name","sortType":"desc"}
 [37m        cons:log ✱ [39m Getting exercises
 [32m          cy:xhr ➟ [39m GET http://localhost:8080/public/exercises/list?sortBy=name&rowsPerPage=25&page=1&sortDirection=true
                     Status: 200
 [32m      cy:command ✔ [39m url	
 [32m      cy:command ✔ [39m assert	expected **http://localhost/Exercises** to equal **http://localhost/Exercises**
                     Actual: 	"http://localhost/Exercises"
                     Expected: 	"http://localhost/Exercises"
 [32m      cy:command ✔ [39m get	#Create-button
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m new url	http://localhost/Create
 [37m        cons:log ✱ [39m creator reset
 [37m        cons:log ✱ [39m this.languages: []
 [37m        cons:log ✱ [39m props: {"languageChoices":[],"exerciseInfo":{"_languages":[],"ram":128,"timeForTaskMin":15,"timeForExecutionMs":100,"inputType":"SINGLE_INTEGER","outputType":"SINGLE_INTEGER","amountOfAutoTests":1,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"","desc":"","lengthRange":{"min":1,"max":10},"spaceInupt":false,"solutionCodes":{},"manualTestsSolutions":{},"executionTime":100},"starting":""}
 [37m        cons:log ✱ [39m token: ***
 [37m        cons:log ✱ [39m ws://localhost:8080/public/web-socket beforeConnect
 [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {}
 [32m      cy:command ✔ [39m url	
 [32m      cy:command ✔ [39m assert	expected **http://localhost/Create** to equal **http://localhost/Create**
                     Actual: 	"http://localhost/Create"
                     Expected: 	"http://localhost/Create"
 [32m      cy:command ✔ [39m get	.p-toast-detail
 [32m      cy:command ✔ [39m contains	successfully connected
 [32m      cy:command ✔ [39m assert	expected **<div.p-toast-detail>** to be **visible**
 [32m          cy:xhr ➟ [39m POST http://localhost:8080/public/coderunner/state
                     Status: 200
 [37m        cons:log ✱ [39m updateCodeRunner Response:,
                     {
                       "data": "",
                       "status": 200,
                       "statusText": "OK",
                       "headers": {
                         "cache-control": "no-cache, no-store, max-age=0, must-revalidate",
                         "expires": "0",
                         "pragma": "no-cache"
                       },
                       "config": {
                         "transitional": {
                           "silentJSONParsing": true,
                           "forcedJSONParsing": true,
                           "clarifyTimeoutError": false
                         },
                         "adapter": [
                           "xhr",
                           "http",
                           "fetch"
                         ],
                         "transformRequest": [
                           null
                         ],
                         "transformResponse": [
                           null
                         ],
                         "timeout": 0,
                         "xsrfCookieName": "XSRF-TOKEN",
                         "xsrfHeaderName": "X-XSRF-TOKEN",
                         "maxContentLength": -1,
                         "maxBodyLength": -1,
                         "env": {},
                         "headers": {
                           "Accept": "application/json, text/plain, */*",
                           "Content-Type": "application/x-www-form-urlenco ...
 [37m        cons:log ✱ [39m updateCodeRunner Error:,
                     no status codeRunenr
 [37m        cons:log ✱ [39m update: [object Object]
 [37m        cons:log ✱ [39m Exercises respones: {"data":[{"id":1,"name":"fibonachi sequance","languages":[{"name":"cpp"},{"name":"js"}],"difficulty":0,"popularity":0,"description":"Create funciton that returns number at point of fibocnahi squnace so 1->0 2->1 3->1 4->2 5->3 and do on"}],"status":200,"statusText":"OK","headers":{"cache-control":"no-cache, no-store, max-age=0, must-revalidate","content-type":"application/json","expires":"0","pragma":"no-cache"},"config":{"transitional":{"silentJSONParsing":true,"forcedJSONParsing":true,"clarifyTimeoutError":false},"adapter":["xhr","http","fetch"],"transformRequest":[null],"transformResponse":[null],"timeout":0,"xsrfCookieName":"XSRF-TOKEN","xsrfHeaderName":"X-XSRF-TOKEN","maxContentLength":-1,"maxBodyLength":-1,"env":{},"headers":{"Accept":"application/json, text/plain ...
 [37m        cons:log ✱ [39m exerciseData.value: [{"id":1,"name":"fibonachi sequance","languages":[{"name":"cpp"},{"name":"js"}],"difficulty":0,"popularity":0,"description":"Create funciton that returns number at point of fibocnahi squnace so 1->0 2->1 3->1 4->2 5->3 and do on"}]
 [37m        cons:log ✱ [39m ws://localhost:8080/public/web-socket on connect
 [37m        cons:log ✱ [39m on connected evetn
 [37m        cons:log ✱ [39m on connected userAuhtenticaton: "***"
 [37m        cons:log ✱ [39m desitn: /public/app/tokenAuth
 [37m        cons:log ✱ [39m published {"destination":"/public/app/tokenAuth","body":"{\"token\":\"***"}"}
 [37m        cons:log ✱ [39m token: ***
 [32m          cy:xhr ➟ [39m POST http://localhost:8080/public/coderunner/state
                     Status: 200
 [37m        cons:log ✱ [39m updateCodeRunner Response:,
                     {
                       "data": "",
                       "status": 200,
                       "statusText": "OK",
                       "headers": {
                         "cache-control": "no-cache, no-store, max-age=0, must-revalidate",
                         "expires": "0",
                         "pragma": "no-cache"
                       },
                       "config": {
                         "transitional": {
                           "silentJSONParsing": true,
                           "forcedJSONParsing": true,
                           "clarifyTimeoutError": false
                         },
                         "adapter": [
                           "xhr",
                           "http",
                           "fetch"
                         ],
                         "transformRequest": [
                           null
                         ],
                         "transformResponse": [
                           null
                         ],
                         "timeout": 0,
                         "xsrfCookieName": "XSRF-TOKEN",
                         "xsrfHeaderName": "X-XSRF-TOKEN",
                         "maxContentLength": -1,
                         "maxBodyLength": -1,
                         "env": {},
                         "headers": {
                           "Accept": "application/json, text/plain, */*",
                           "Content-Type": "application/x-www-form-urlenco ...
 [37m        cons:log ✱ [39m updateCodeRunner Error:,
                     no status codeRunenr
 [37m        cons:log ✱ [39m update: [object Object]
 [32m      cy:command ✔ [39m get	.p-toast-detail
 [32m      cy:command ✔ [39m assert	expected **.p-toast-detail** not to exist in the DOM
                     Actual: 	".p-toast-detail"
                     Expected: 	".p-toast-detail"
 [32m      cy:command ✔ [39m get	#Exercise-title-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#Exercise-title-input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m get	#Exercise-description-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#Exercise-description-input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m get	#ContentConatiner span
 [32m      cy:command ✔ [39m contains	Setup
 [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
 [32m      cy:command ✔ [39m assert	expected **<a#pv_id_5_1_header_action.p-tabview-nav-link.p-tabview-header-action>** to have attribute **aria-disabled** with the value **true**
                     Actual: 	"true"
                     Expected: 	"true"
 [32m      cy:command ✔ [39m get	#Exercise-title-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#Exercise-title-input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m get	#Exercise-title-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#Exercise-title-input
 [32m      cy:command ✔ [39m type	Cesar cipher
 [32m      cy:command ✔ [39m get	#Exercise-description-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#Exercise-description-input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m get	#Exercise-description-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#Exercise-description-input
 [32m      cy:command ✔ [39m type	move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled
 [32m      cy:command ✔ [39m get	#ContentConatiner span
 [32m      cy:command ✔ [39m contains	Setup
 [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
 [32m      cy:command ✔ [39m assert	expected **<a#pv_id_5_1_header_action.p-tabview-nav-link.p-tabview-header-action>** to have attribute **aria-disabled** with the value **false**
                     Actual: 	"false"
                     Expected: 	"false"
 [32m      cy:command ✔ [39m get	#ContentConatiner span
 [32m      cy:command ✔ [39m contains	Setup
 [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m event: {"originalEvent":{"isTrusted":false,"_vts":1725045872214},"index":1}
 [32m      cy:command ✔ [39m get	#ContentConatiner span
 [32m      cy:command ✔ [39m contains	Solution
 [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
 [32m      cy:command ✔ [39m assert	expected **<a#pv_id_5_2_header_action.p-tabview-nav-link.p-tabview-header-action>** to have attribute **aria-disabled** with the value **true**
                     Actual: 	"true"
                     Expected: 	"true"
 [32m      cy:command ✔ [39m get	#language-selection
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	span
 [32m      cy:command ✔ [39m contains	cpp
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m Update test fields: {"CPP_RUNNER":{"tests":[],"autoTests":[]}}
 [37m        cons:log ✱ [39m starting function generator: SINGLE_INTEGER, SINGLE_INTEGER
 [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {"CPP_RUNNER":"int solution(int x){\n //your solution \n}"}
 [32m      cy:command ✔ [39m get	span
 [32m      cy:command ✔ [39m contains	js
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m Update test fields: {"CPP_RUNNER":{"tests":[],"autoTests":[]},"JS_RUNNER":{"tests":[],"autoTests":[]}}
 [37m        cons:log ✱ [39m starting function generator: SINGLE_INTEGER, SINGLE_INTEGER
 [37m        cons:log ✱ [39m starting function generator: SINGLE_INTEGER, SINGLE_INTEGER
 [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {"CPP_RUNNER":"int solution(int x){\n //your solution \n}","JS_RUNNER":"function solution(x){\n //your solution \n}"}
 [32m      cy:command ✔ [39m get	#ms-number-input > input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#ms-number-input > input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m type	2000
 [32m      cy:command ✔ [39m get	#hour-number-input > input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#hour-number-input > input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m type	1
 [32m      cy:command ✔ [39m get	#minute-number-input > input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#minute-number-input > input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m type	22
 [32m      cy:command ✔ [39m get	#ram-number-input > input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#ram-number-input > input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m type	512
 [32m      cy:command ✔ [39m get	#radio-input-string
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m starting function generator: SINGLE_STRING, SINGLE_INTEGER
 [37m        cons:log ✱ [39m starting function generator: SINGLE_STRING, SINGLE_INTEGER
 [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {"CPP_RUNNER":"#include <string>\nint solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(x){\n //your solution \n}"}
 [32m      cy:command ✔ [39m get	#radio-input-single
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#radio-output-string
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m starting function generator: SINGLE_STRING, SINGLE_STRING
 [37m        cons:log ✱ [39m starting function generator: SINGLE_STRING, SINGLE_STRING
 [37m        cons:log ✱ [39m codeRunnerStore.exerciseCreatorController.solutionCodes: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(x){\n //your solution \n}"}
 [32m      cy:command ✔ [39m get	#radio-output-single
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#add-exercise-button
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m output type: SINGLE_STRING
 [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
 [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
 [37m        cons:log ✱ [39m added: [{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1}]
 [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
 [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
 [37m        cons:log ✱ [39m added: [{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"babab6e7-7c7b-47b1-9dcc-9648b8369198","executionTime":-1}]
 [37m        cons:log ✱ [39m jsonInput.value: ""
 [37m        cons:log ✱ [39m valie: ""
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m jsonInput.value: ""
 [37m        cons:log ✱ [39m valie: ""
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [32m      cy:command ✔ [39m get	#test-input-0-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#test-input-0-input
 [32m      cy:command ✔ [39m clear	
 [37m        cons:log ✱ [39m jsonInput.value: 
 [37m        cons:log ✱ [39m valie: 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [32m      cy:command ✔ [39m get	#test-input-0-input
 [32m      cy:command ✔ [39m type	A
 [37m        cons:log ✱ [39m jsonInput.value: A
 [37m        cons:log ✱ [39m valie: A
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [32m      cy:command ✔ [39m get	#test-input-0-output
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#test-input-0-output
 [32m      cy:command ✔ [39m clear	
 [37m        cons:log ✱ [39m jsonInput.value: 
 [37m        cons:log ✱ [39m valie: 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: 
 [37m        cons:log ✱ [39m set output: 
 [32m      cy:command ✔ [39m get	#test-input-0-output
 [32m      cy:command ✔ [39m type	H
 [37m        cons:log ✱ [39m jsonInput.value: H
 [37m        cons:log ✱ [39m valie: H
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: H
 [37m        cons:log ✱ [39m set output: H
 [32m      cy:command ✔ [39m get	#add-exercise-button
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m output type: SINGLE_STRING
 [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
 [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
 [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1}]
 [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
 [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
 [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"babab6e7-7c7b-47b1-9dcc-9648b8369198","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"8edb87ab-537d-4f45-86dc-a30bb5aa731c","executionTime":-1}]
 [37m        cons:log ✱ [39m jsonInput.value: ""
 [37m        cons:log ✱ [39m valie: ""
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m jsonInput.value: ""
 [37m        cons:log ✱ [39m valie: ""
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [32m      cy:command ✔ [39m get	#test-input-1-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#test-input-1-input
 [32m      cy:command ✔ [39m clear	
 [37m        cons:log ✱ [39m jsonInput.value: 
 [37m        cons:log ✱ [39m valie: 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [32m      cy:command ✔ [39m get	#test-input-1-input
 [32m      cy:command ✔ [39m type	a
 [37m        cons:log ✱ [39m jsonInput.value: a
 [37m        cons:log ✱ [39m valie: a
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [32m      cy:command ✔ [39m get	#test-input-1-output
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#test-input-1-output
 [32m      cy:command ✔ [39m clear	
 [37m        cons:log ✱ [39m jsonInput.value: 
 [37m        cons:log ✱ [39m valie: 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: 
 [37m        cons:log ✱ [39m set output: 
 [32m      cy:command ✔ [39m get	#test-input-1-output
 [32m      cy:command ✔ [39m type	h
 [37m        cons:log ✱ [39m jsonInput.value: h
 [37m        cons:log ✱ [39m valie: h
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: h
 [37m        cons:log ✱ [39m set output: h
 [32m      cy:command ✔ [39m get	#add-exercise-button
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m output type: SINGLE_STRING
 [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
 [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
 [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":-1}]
 [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
 [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
 [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"babab6e7-7c7b-47b1-9dcc-9648b8369198","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"8edb87ab-537d-4f45-86dc-a30bb5aa731c","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"f20386f6-ab67-428f-b809-5ff0c2db9016","executionTime":-1}]
 [37m        cons:log ✱ [39m jsonInput.value: ""
 [37m        cons:log ✱ [39m valie: ""
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m jsonInput.value: ""
 [37m        cons:log ✱ [39m valie: ""
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [32m      cy:command ✔ [39m get	#test-input-2-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#test-input-2-input
 [32m      cy:command ✔ [39m clear	
 [37m        cons:log ✱ [39m jsonInput.value: 
 [37m        cons:log ✱ [39m valie: 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [32m      cy:command ✔ [39m get	#test-input-2-input
 [32m      cy:command ✔ [39m type	The quick brown fox jumps over a lazy dog
 [37m        cons:log ✱ [39m jsonInput.value: T
 [37m        cons:log ✱ [39m valie: T
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: Th
 [37m        cons:log ✱ [39m valie: Th
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The
 [37m        cons:log ✱ [39m valie: The
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The 
 [37m        cons:log ✱ [39m valie: The 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The q
 [37m        cons:log ✱ [39m valie: The q
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The qu
 [37m        cons:log ✱ [39m valie: The qu
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The qui
 [37m        cons:log ✱ [39m valie: The qui
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quic
 [37m        cons:log ✱ [39m valie: The quic
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick
 [37m        cons:log ✱ [39m valie: The quick
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick 
 [37m        cons:log ✱ [39m valie: The quick 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick b
 [37m        cons:log ✱ [39m valie: The quick b
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick br
 [37m        cons:log ✱ [39m valie: The quick br
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick bro
 [37m        cons:log ✱ [39m valie: The quick bro
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brow
 [37m        cons:log ✱ [39m valie: The quick brow
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown
 [37m        cons:log ✱ [39m valie: The quick brown
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown 
 [37m        cons:log ✱ [39m valie: The quick brown 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown f
 [37m        cons:log ✱ [39m valie: The quick brown f
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fo
 [37m        cons:log ✱ [39m valie: The quick brown fo
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox
 [37m        cons:log ✱ [39m valie: The quick brown fox
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox 
 [37m        cons:log ✱ [39m valie: The quick brown fox 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox j
 [37m        cons:log ✱ [39m valie: The quick brown fox j
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox ju
 [37m        cons:log ✱ [39m valie: The quick brown fox ju
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jum
 [37m        cons:log ✱ [39m valie: The quick brown fox jum
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jump
 [37m        cons:log ✱ [39m valie: The quick brown fox jump
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps 
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps o
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps o
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps ov
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps ov
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps ove
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps ove
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over 
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a 
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a l
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a l
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a la
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a la
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a laz
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a laz
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy 
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy d
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy d
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy do
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy do
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The quick brown fox jumps over a lazy dog
 [37m        cons:log ✱ [39m valie: The quick brown fox jumps over a lazy dog
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [32m      cy:command ✔ [39m get	#test-input-2-output
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#test-input-2-output
 [32m      cy:command ✔ [39m clear	
 [37m        cons:log ✱ [39m jsonInput.value: 
 [37m        cons:log ✱ [39m valie: 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: 
 [37m        cons:log ✱ [39m set output: 
 [32m      cy:command ✔ [39m get	#test-input-2-output
 [32m      cy:command ✔ [39m type	Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
 [37m        cons:log ✱ [39m jsonInput.value: A
 [37m        cons:log ✱ [39m valie: A
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: A
 [37m        cons:log ✱ [39m set output: A
 [37m        cons:log ✱ [39m jsonInput.value: Ao
 [37m        cons:log ✱ [39m valie: Ao
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Ao
 [37m        cons:log ✱ [39m set output: Ao
 [37m        cons:log ✱ [39m jsonInput.value: Aol
 [37m        cons:log ✱ [39m valie: Aol
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol
 [37m        cons:log ✱ [39m set output: Aol
 [37m        cons:log ✱ [39m jsonInput.value: Aol 
 [37m        cons:log ✱ [39m valie: Aol 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol 
 [37m        cons:log ✱ [39m set output: Aol 
 [37m        cons:log ✱ [39m jsonInput.value: Aol x
 [37m        cons:log ✱ [39m valie: Aol x
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol x
 [37m        cons:log ✱ [39m set output: Aol x
 [37m        cons:log ✱ [39m jsonInput.value: Aol xb
 [37m        cons:log ✱ [39m valie: Aol xb
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xb
 [37m        cons:log ✱ [39m set output: Aol xb
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbp
 [37m        cons:log ✱ [39m valie: Aol xbp
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbp
 [37m        cons:log ✱ [39m set output: Aol xbp
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpj
 [37m        cons:log ✱ [39m valie: Aol xbpj
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpj
 [37m        cons:log ✱ [39m set output: Aol xbpj
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr
 [37m        cons:log ✱ [39m valie: Aol xbpjr
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr
 [37m        cons:log ✱ [39m set output: Aol xbpjr
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr 
 [37m        cons:log ✱ [39m valie: Aol xbpjr 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr 
 [37m        cons:log ✱ [39m set output: Aol xbpjr 
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr i
 [37m        cons:log ✱ [39m valie: Aol xbpjr i
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr i
 [37m        cons:log ✱ [39m set output: Aol xbpjr i
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iy
 [37m        cons:log ✱ [39m valie: Aol xbpjr iy
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iy
 [37m        cons:log ✱ [39m set output: Aol xbpjr iy
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyv
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyv
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyv
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyv
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvd
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvd
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvd
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvd
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu 
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu 
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu m
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu m
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu m
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu m
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mv
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mv
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mv
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mv
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve 
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve 
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve q
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve q
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve q
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve q
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qb
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qb
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qb
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qb
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbt
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbt
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbt
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbt
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtw
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtw
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtw
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtw
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz 
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz 
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz v
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz v
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz v
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz v
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vc
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vc
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vc
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vc
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcl
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcl
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcl
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcl
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly 
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly 
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h 
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h 
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h s
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h s
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h s
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h s
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h sh
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h sh
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h sh
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h sh
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shg
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shg
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shg
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shg
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf 
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf 
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf k
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf k
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf k
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf k
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf kv
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf kv
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf kv
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf kv
 [37m        cons:log ✱ [39m jsonInput.value: Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
 [37m        cons:log ✱ [39m valie: Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
 [37m        cons:log ✱ [39m set output: Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn
 [32m      cy:command ✔ [39m get	#add-exercise-button
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m output type: SINGLE_STRING
 [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
 [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
 [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"efd68762-a408-44fa-8378-675c74c56885","executionTime":-1}]
 [37m        cons:log ✱ [39m outpout type SINGLE_STRING _  :: "SINGLE_STRING"
 [37m        cons:log ✱ [39m ading SINGLE_STRING _  :: ""
 [37m        cons:log ✱ [39m added: [{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"babab6e7-7c7b-47b1-9dcc-9648b8369198","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"8edb87ab-537d-4f45-86dc-a30bb5aa731c","executionTime":-1},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"f20386f6-ab67-428f-b809-5ff0c2db9016","executionTime":-1},{"input":"","expectedOutput":"","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"96cf7d3c-7d7c-402b-b487-acdfe146c13c","executionTime":-1}]
 [37m        cons:log ✱ [39m jsonInput.value: ""
 [37m        cons:log ✱ [39m valie: ""
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m jsonInput.value: ""
 [37m        cons:log ✱ [39m valie: ""
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [32m      cy:command ✔ [39m get	#test-input-3-input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#test-input-3-input
 [32m      cy:command ✔ [39m clear	
 [37m        cons:log ✱ [39m jsonInput.value: 
 [37m        cons:log ✱ [39m valie: 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [32m      cy:command ✔ [39m get	#test-input-3-input
 [32m      cy:command ✔ [39m type	The five boxing wizards jump quickly
 [37m        cons:log ✱ [39m jsonInput.value: T
 [37m        cons:log ✱ [39m valie: T
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: Th
 [37m        cons:log ✱ [39m valie: Th
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The
 [37m        cons:log ✱ [39m valie: The
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The 
 [37m        cons:log ✱ [39m valie: The 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The f
 [37m        cons:log ✱ [39m valie: The f
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The fi
 [37m        cons:log ✱ [39m valie: The fi
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The fiv
 [37m        cons:log ✱ [39m valie: The fiv
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five
 [37m        cons:log ✱ [39m valie: The five
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five 
 [37m        cons:log ✱ [39m valie: The five 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five b
 [37m        cons:log ✱ [39m valie: The five b
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five bo
 [37m        cons:log ✱ [39m valie: The five bo
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five box
 [37m        cons:log ✱ [39m valie: The five box
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxi
 [37m        cons:log ✱ [39m valie: The five boxi
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxin
 [37m        cons:log ✱ [39m valie: The five boxin
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing
 [37m        cons:log ✱ [39m valie: The five boxing
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing 
 [37m        cons:log ✱ [39m valie: The five boxing 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing w
 [37m        cons:log ✱ [39m valie: The five boxing w
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wi
 [37m        cons:log ✱ [39m valie: The five boxing wi
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wiz
 [37m        cons:log ✱ [39m valie: The five boxing wiz
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wiza
 [37m        cons:log ✱ [39m valie: The five boxing wiza
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizar
 [37m        cons:log ✱ [39m valie: The five boxing wizar
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizard
 [37m        cons:log ✱ [39m valie: The five boxing wizard
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards
 [37m        cons:log ✱ [39m valie: The five boxing wizards
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards 
 [37m        cons:log ✱ [39m valie: The five boxing wizards 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards j
 [37m        cons:log ✱ [39m valie: The five boxing wizards j
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards ju
 [37m        cons:log ✱ [39m valie: The five boxing wizards ju
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jum
 [37m        cons:log ✱ [39m valie: The five boxing wizards jum
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump
 [37m        cons:log ✱ [39m valie: The five boxing wizards jump
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump 
 [37m        cons:log ✱ [39m valie: The five boxing wizards jump 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump q
 [37m        cons:log ✱ [39m valie: The five boxing wizards jump q
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump qu
 [37m        cons:log ✱ [39m valie: The five boxing wizards jump qu
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump qui
 [37m        cons:log ✱ [39m valie: The five boxing wizards jump qui
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump quic
 [37m        cons:log ✱ [39m valie: The five boxing wizards jump quic
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump quick
 [37m        cons:log ✱ [39m valie: The five boxing wizards jump quick
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump quickl
 [37m        cons:log ✱ [39m valie: The five boxing wizards jump quickl
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m jsonInput.value: The five boxing wizards jump quickly
 [37m        cons:log ✱ [39m valie: The five boxing wizards jump quickly
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [32m      cy:command ✔ [39m get	#test-input-3-output
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#test-input-3-output
 [32m      cy:command ✔ [39m clear	
 [37m        cons:log ✱ [39m jsonInput.value: 
 [37m        cons:log ✱ [39m valie: 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: 
 [37m        cons:log ✱ [39m set output: 
 [32m      cy:command ✔ [39m get	#test-input-3-output
 [32m      cy:command ✔ [39m type	Aol mpcl ivepun dpghykz qbtw xbpjrsf
 [37m        cons:log ✱ [39m jsonInput.value: A
 [37m        cons:log ✱ [39m valie: A
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: A
 [37m        cons:log ✱ [39m set output: A
 [37m        cons:log ✱ [39m jsonInput.value: Ao
 [37m        cons:log ✱ [39m valie: Ao
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Ao
 [37m        cons:log ✱ [39m set output: Ao
 [37m        cons:log ✱ [39m jsonInput.value: Aol
 [37m        cons:log ✱ [39m valie: Aol
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol
 [37m        cons:log ✱ [39m set output: Aol
 [37m        cons:log ✱ [39m jsonInput.value: Aol 
 [37m        cons:log ✱ [39m valie: Aol 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol 
 [37m        cons:log ✱ [39m set output: Aol 
 [37m        cons:log ✱ [39m jsonInput.value: Aol m
 [37m        cons:log ✱ [39m valie: Aol m
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol m
 [37m        cons:log ✱ [39m set output: Aol m
 [37m        cons:log ✱ [39m jsonInput.value: Aol mp
 [37m        cons:log ✱ [39m valie: Aol mp
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mp
 [37m        cons:log ✱ [39m set output: Aol mp
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpc
 [37m        cons:log ✱ [39m valie: Aol mpc
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpc
 [37m        cons:log ✱ [39m set output: Aol mpc
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl
 [37m        cons:log ✱ [39m valie: Aol mpcl
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl
 [37m        cons:log ✱ [39m set output: Aol mpcl
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl 
 [37m        cons:log ✱ [39m valie: Aol mpcl 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl 
 [37m        cons:log ✱ [39m set output: Aol mpcl 
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl i
 [37m        cons:log ✱ [39m valie: Aol mpcl i
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl i
 [37m        cons:log ✱ [39m set output: Aol mpcl i
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl iv
 [37m        cons:log ✱ [39m valie: Aol mpcl iv
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl iv
 [37m        cons:log ✱ [39m set output: Aol mpcl iv
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ive
 [37m        cons:log ✱ [39m valie: Aol mpcl ive
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ive
 [37m        cons:log ✱ [39m set output: Aol mpcl ive
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivep
 [37m        cons:log ✱ [39m valie: Aol mpcl ivep
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivep
 [37m        cons:log ✱ [39m set output: Aol mpcl ivep
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepu
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepu
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepu
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepu
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun 
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun 
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun d
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun d
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun d
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun d
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dp
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dp
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dp
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dp
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpg
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpg
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpg
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpg
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpgh
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpgh
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpgh
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpgh
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghy
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghy
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghy
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghy
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghyk
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghyk
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghyk
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghyk
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz 
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz 
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz q
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz q
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz q
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz q
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qb
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qb
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qb
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qb
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbt
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbt
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbt
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbt
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw 
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw 
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw 
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw x
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw x
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw x
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw x
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xb
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xb
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xb
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xb
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbp
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbp
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbp
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbp
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbpj
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbpj
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpj
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpj
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbpjr
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbpjr
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjr
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjr
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbpjrs
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbpjrs
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjrs
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjrs
 [37m        cons:log ✱ [39m jsonInput.value: Aol mpcl ivepun dpghykz qbtw xbpjrsf
 [37m        cons:log ✱ [39m valie: Aol mpcl ivepun dpghykz qbtw xbpjrsf
 [37m        cons:log ✱ [39m isTypeString(type) true
 [37m        cons:log ✱ [39m !isNumber(variable) true
 [37m        cons:log ✱ [39m type: string
 [37m        cons:log ✱ [39m validatea
 [37m        cons:log ✱ [39m validationofData.value: 
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjrsf
 [37m        cons:log ✱ [39m set output: Aol mpcl ivepun dpghykz qbtw xbpjrsf
 [32m      cy:command ✔ [39m get	#amount-of-auto-test-input > input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#amount-of-auto-test-input > input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m type	6
 [32m      cy:command ✔ [39m get	#string-range-low-input > input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#string-range-low-input > input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m get	#string-range-low-input > input
 [32m      cy:command ✔ [39m type	1
 [32m      cy:command ✔ [39m get	#string-range-up-input > input
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#string-range-up-input > input
 [32m      cy:command ✔ [39m clear	
 [32m      cy:command ✔ [39m get	#string-range-up-input > input
 [32m      cy:command ✔ [39m type	20
 [32m      cy:command ✔ [39m get	#lower-case-checkbox > input
 [32m      cy:command ✔ [39m check	
 [32m      cy:command ✔ [39m get	#lower-case-checkbox > input
 [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
 [32m      cy:command ✔ [39m get	#number-checkbox > input
 [32m      cy:command ✔ [39m check	
 [32m      cy:command ✔ [39m get	#number-checkbox > input
 [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
 [32m      cy:command ✔ [39m get	#special-char-checkbox > input
 [32m      cy:command ✔ [39m check	
 [32m      cy:command ✔ [39m get	#special-char-checkbox > input
 [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
 [32m      cy:command ✔ [39m get	#upper-case-checkbox > input
 [32m      cy:command ✔ [39m check	
 [32m      cy:command ✔ [39m get	#upper-case-checkbox > input
 [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
 [32m      cy:command ✔ [39m get	#character-breaks-checkbox > input
 [32m      cy:command ✔ [39m check	
 [32m      cy:command ✔ [39m get	#character-breaks-checkbox > input
 [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** to be **checked**
 [32m      cy:command ✔ [39m get	#space-char-checkbox > input
 [32m      cy:command ✔ [39m uncheck	
 [32m      cy:command ✔ [39m get	#space-char-checkbox > input
 [32m      cy:command ✔ [39m assert	expected **<input.p-checkbox-input>** not to be **checked**
 [32m      cy:command ✔ [39m get	#ContentConatiner span
 [32m      cy:command ✔ [39m contains	Solution
 [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
 [32m      cy:command ✔ [39m assert	expected **<a#pv_id_5_2_header_action.p-tabview-nav-link.p-tabview-header-action>** to have attribute **aria-disabled** with the value **false**
                     Actual: 	"false"
                     Expected: 	"false"
 [32m      cy:command ✔ [39m get	#ContentConatiner span
 [32m      cy:command ✔ [39m contains	Solution
 [32m      cy:command ✔ [39m closest	.p-tabview-nav-link
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m event: {"originalEvent":{"isTrusted":false,"_vts":1725045883469},"index":2}
 [37m        cons:log ✱ [39m coderunner opened
 [32m      cy:command ✔ [39m get	#coderunner-dropdown
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	.p-dropdown-item
 [32m      cy:command ✔ [39m contains	js
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#connect-button
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m connect "JS_RUNNER"
 [37m        cons:log ✱ [39m set awaitng
 [37m        cons:log ✱ [39m {"__v_isShallow":false,"dep":{},"__v_isRef":true,"_rawValue":{"codeRunnerType":"UNIDENTIFIED","state":"NONE"},"_value":{"codeRunnerType":"UNIDENTIFIED","state":"NONE"}}
 [37m        cons:log ✱ [39m {"codeRunnerType":"UNIDENTIFIED","state":"AWAITING"}
 [37m        cons:log ✱ [39m codeRunnerName: "JS_RUNNER"
 [37m        cons:log ✱ [39m requestCodeRunner: {"CodeRunnerType":"JS_RUNNER"}
 [37m        cons:log ✱ [39m codeRunnerRequest: {"CodeRunnerType":"JS_RUNNER"}
 [37m        cons:log ✱ [39m desitn: /public/app/codeRunnerRequest
 [37m        cons:log ✱ [39m published {"destination":"/public/app/codeRunnerRequest","body":"{\"CodeRunnerType\":\"JS_RUNNER\"}"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(x){\n //your solution \n}"},"manualTests ...
 [37m        cons:log ✱ [39m CodeReults props: {"isDataResult":false}
 [32m      cy:command ✔ [39m get	#coderunner-loading-dialog
 [32m      cy:command ✔ [39m assert	expected **#coderunner-loading-dialog** not to exist in the DOM
                     Actual: 	"#coderunner-loading-dialog"
                     Expected: 	"#coderunner-loading-dialog"
 [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
 [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
 [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
 [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
 [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
 [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
 [32m      cy:command ✔ [39m uncaught exception	Error: ResizeObserver loop completed with undelivered notifications.
 [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
 [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
 [37m        cons:log ✱ [39m typeof this.eventHandlers  object
 [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
 [37m        cons:log ✱ [39m length  1
 [37m        cons:log ✱ [39m |Test
 [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
 [37m        cons:log ✱ [39m props chahned-----------------------:  -> function solution(x){
                      //your solution 
                     }
 [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
 [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
 [37m        cons:log ✱ [39m typeof this.eventHandlers  object
 [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
 [37m        cons:log ✱ [39m length  1
 [37m        cons:log ✱ [39m |Test
 [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
 [32m      cy:command ✔ [39m get	#exercise-title
 [32m      cy:command ✔ [39m contains	Cesar cipher
 [32m      cy:command ✔ [39m get	#exercise-description
 [32m      cy:command ✔ [39m contains	move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled
 [32m      cy:command ✔ [39m get	#code-preview
 [32m      cy:command ✔ [39m invoke	.text()
 [32m      cy:command ✔ [39m assert	expected **function solution(x){\n //your solution \n}** to include **function solution(x){**
 [32m      cy:command ✔ [39m wait	1000
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m wait	1000
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{selectAll}{backspace}, {force: true}
 [37m        cons:log ✱ [39m codee update: 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":""}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":""},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"input" ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(x){
                      //your solution 
                     } -> 
 [32m      cy:command ✔ [39m get	#code-preview
 [32m      cy:command ✔ [39m invoke	.text()
 [32m      cy:command ✔ [39m assert	expected **''** to be empty
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	f, {force: true}
 [37m        cons:log ✱ [39m codee update: f
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"f"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"f"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"input ...
 [37m        cons:log ✱ [39m props chahned-----------------------:  -> f
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: fu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"fu"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"fu"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"inpu ...
 [37m        cons:log ✱ [39m props chahned-----------------------: f -> fu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: fun
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"fun"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"fun"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"inp ...
 [37m        cons:log ✱ [39m props chahned-----------------------: fu -> fun
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: func
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"func"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"func"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"in ...
 [37m        cons:log ✱ [39m props chahned-----------------------: fun -> func
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: funct
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"funct"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"funct"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{"i ...
 [37m        cons:log ✱ [39m props chahned-----------------------: func -> funct
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: functi
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"functi"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"functi"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{" ...
 [37m        cons:log ✱ [39m props chahned-----------------------: funct -> functi
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: functio
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"functio"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"functio"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[{ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: functi -> functio
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: function
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function"},"manualTestsSolutions":{"CPP_RUNNER":{"tests":[ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: functio -> function
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function "},"manualTestsSolutions":{"CPP_RUNNER":{"tests": ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function -> function 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: function s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function s"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function s"},"manualTestsSolutions":{"CPP_RUNNER":{"tests" ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function  -> function s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: function so
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function so"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function so"},"manualTestsSolutions":{"CPP_RUNNER":{"tests ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function s -> function so
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: function sol
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function sol"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function sol"},"manualTestsSolutions":{"CPP_RUNNER":{"test ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function so -> function sol
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: function solu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solu"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solu"},"manualTestsSolutions":{"CPP_RUNNER":{"tes ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function sol -> function solu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solut
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solut"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solut"},"manualTestsSolutions":{"CPP_RUNNER":{"te ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solu -> function solut
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function soluti
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function soluti"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function soluti"},"manualTestsSolutions":{"CPP_RUNNER":{"t ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solut -> function soluti
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: function solutio
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solutio"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solutio"},"manualTestsSolutions":{"CPP_RUNNER":{" ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function soluti -> function solutio
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution"},"manualTestsSolutions":{"CPP_RUNNER":{ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solutio -> function solution
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution("}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution("},"manualTestsSolutions":{"CPP_RUNNER": ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution -> function solution(
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(i"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(i"},"manualTestsSolutions":{"CPP_RUNNER" ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution( -> function solution(i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(in
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(in"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(in"},"manualTestsSolutions":{"CPP_RUNNER ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(i -> function solution(in
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	p, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(inp
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(inp"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(inp"},"manualTestsSolutions":{"CPP_RUNNE ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(in -> function solution(inp
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(inpu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(inpu"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(inpu"},"manualTestsSolutions":{"CPP_RUNN ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(inp -> function solution(inpu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input"},"manualTestsSolutions":{"CPP_RUN ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(inpu -> function solution(input
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input)"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input)"},"manualTestsSolutions":{"CPP_RU ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input -> function solution(input)
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) "},"manualTestsSolutions":{"CPP_R ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) -> function solution(input) 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {"},"manualTestsSolutions":{"CPP_ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input)  -> function solution(input) {
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    "},"manualTestsSolutions": ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) { -> function solution(input) {
                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n     "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n     "},"manualTestsSolutions" ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                          -> function solution(input) {
                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n      "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n      "},"manualTestsSolutions ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                           -> function solution(input) {
                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n       "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n       "},"manualTestsSolution ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                            -> function solution(input) {
                            
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n        "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n        "},"manualTestsSolutio ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                             -> function solution(input) {
                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n         "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n         "},"manualTestsSoluti ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                              -> function solution(input) {
                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n          "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n          "},"manualTestsSolut ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                               -> function solution(input) {
                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n           "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n           "},"manualTestsSolu ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                -> function solution(input) {
                                
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n            "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n            "},"manualTestsSol ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                 -> function solution(input) {
                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n             "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n             "},"manualTestsSo ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                  -> function solution(input) {
                                  
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              "},"manualTestsS ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   -> function solution(input) {
                                   
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   l
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              l"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              l"},"manualTests ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                    -> function solution(input) {
                                   l
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   le
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              le"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              le"},"manualTest ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   l -> function solution(input) {
                                   le
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let"},"manualTes ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   le -> function solution(input) {
                                   let
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let "},"manualTe ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let -> function solution(input) {
                                   let 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let r
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let r"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let r"},"manualT ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let  -> function solution(input) {
                                   let r
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let re
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let re"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let re"},"manual ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let r -> function solution(input) {
                                   let re
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let res
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let res"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let res"},"manua ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let re -> function solution(input) {
                                   let res
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let resu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let resu"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let resu"},"manu ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let res -> function solution(input) {
                                   let resu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let resul
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let resul"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let resul"},"man ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let resu -> function solution(input) {
                                   let resul
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let result
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result"},"ma ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let resul -> function solution(input) {
                                   let result
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let result 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result "},"m ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let result -> function solution(input) {
                                   let result 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let result =
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result ="}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result ="}," ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let result  -> function solution(input) {
                                   let result =
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let result = 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = "}, ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let result = -> function solution(input) {
                                   let result = 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	", {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let result = "
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \""}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"" ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let result =  -> function solution(input) {
                                   let result = "
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	", {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let result = ""
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"\""}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let result = " -> function solution(input) {
                                   let result = ""
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                                   let result = "";
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"\";"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n              let result = \"\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let result = "" -> function solution(input) {
                                   let result = "";
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";"},"manu ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                                   let result = ""; -> function solution(input) {
                         let result = "";
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    "} ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = ""; -> function solution(input) {
                         let result = "";
                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n     "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n     " ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                          -> function solution(input) {
                         let result = "";
                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n      "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                           -> function solution(input) {
                         let result = "";
                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                            -> function solution(input) {
                         let result = "";
                            
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n        "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                             -> function solution(input) {
                         let result = "";
                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n         "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                              -> function solution(input) {
                         let result = "";
                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n          "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                               -> function solution(input) {
                         let result = "";
                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n           "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                -> function solution(input) {
                         let result = "";
                                
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n            "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                 -> function solution(input) {
                         let result = "";
                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n             "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                  -> function solution(input) {
                         let result = "";
                                  
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   -> function solution(input) {
                         let result = "";
                                   
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              c"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                    -> function solution(input) {
                         let result = "";
                                   c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   co
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              co"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   c -> function solution(input) {
                         let result = "";
                                   co
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   con
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              con"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   co -> function solution(input) {
                         let result = "";
                                   con
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   cons
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              cons"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   con -> function solution(input) {
                         let result = "";
                                   cons
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   cons -> function solution(input) {
                         let result = "";
                                   const
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const -> function solution(input) {
                         let result = "";
                                   const 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const s"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const  -> function solution(input) {
                         let result = "";
                                   const s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	h, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const sh
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const sh"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const s -> function solution(input) {
                         let result = "";
                                   const sh
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const shi
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shi"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const sh -> function solution(input) {
                         let result = "";
                                   const shi
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	f, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const shif
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shif"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const shi -> function solution(input) {
                         let result = "";
                                   const shif
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const shift
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const shif -> function solution(input) {
                         let result = "";
                                   const shift
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const shift 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const shift -> function solution(input) {
                         let result = "";
                                   const shift 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const shift =
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift ="}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const shift  -> function solution(input) {
                         let result = "";
                                   const shift =
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const shift = 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift = "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const shift = -> function solution(input) {
                         let result = "";
                                   const shift = 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	7, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const shift = 7
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift = 7"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const shift =  -> function solution(input) {
                         let result = "";
                                   const shift = 7
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                                   const shift = 7;
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n              const shift = 7;"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const shift = 7 -> function solution(input) {
                         let result = "";
                                   const shift = 7;
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                                   const shift = 7; -> function solution(input) {
                         let result = "";
                         const shift = 7;
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n    "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7; -> function solution(input) {
                         let result = "";
                         const shift = 7;
                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                          -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n     "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                          -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n      "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                           -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n       "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                            -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                            
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n        "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                             -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n         "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                              -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n          "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                               -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n           "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n            "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                 -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n             "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                  
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	f, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   f
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              f"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                    -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   f
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   fo
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              fo"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   f -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   fo
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   fo -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for ("}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (l
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (l"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for ( -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (l
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (le
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (le"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (l -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (le
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (le -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i =
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i ="}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i =
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i = 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i = "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i = -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i = 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	0, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i = 0
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i = 0"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i =  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i = 0
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i = 0;
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n              for (let i = 0;"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i = 0 -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i = 0;
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0;
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0;"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                                   for (let i = 0; -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0;
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0;  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	<, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i <
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i <"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i <
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < i"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i <  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < in
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < in"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < i -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < in
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	p, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < inp
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < inp"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < in -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < inp
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < inpu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < inpu"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < inp -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < inpu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < inpu -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	., {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input."}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.l
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.l"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input. -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.l
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.le
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.le"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.l -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.le
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.len
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.len"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.le -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.len
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	g, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.leng
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.leng"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.len -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.leng
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.lengt
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.lengt"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.leng -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.lengt
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	h, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.lengt -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length;
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length;"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length;
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length;  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	+, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i+
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i+"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i+
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	+, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i+ -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++)"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++ -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++)
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++)  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) { -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n         "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                              -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n          "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                               -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n           "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n            "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                 -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n             "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                  
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n              "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                   -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                   
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                    
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n               "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                    -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                    
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                     -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                      
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                 "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                      -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                      
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                       
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                  "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                       -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                       
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                        
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                   "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                        -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                        
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                    "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                         -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                     "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                          -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           l
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      l"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                            -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           l
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           le
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      le"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           l -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           le
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           le -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c =
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c ="}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c =
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = i"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c =  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = in
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = in"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = i -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = in
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	p, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = inp
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = inp"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = in -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = inp
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = inpu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = inpu"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = inp -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = inpu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = inpu -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	[, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input["}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input[i"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[ -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	], {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[i]
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input[i]"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[i -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[i]
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[i];
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n                      let c = input[i];"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[i] -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[i];
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                                           let c = input[i]; -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i]; -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n         "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                              -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n          "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                               -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n           "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n            "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                 -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n             "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                  
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n              "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                   -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                   
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                    
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n               "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                    -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                    
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                     -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                      
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                 "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                      -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                      
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                       
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                  "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                       -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                       
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                        
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                   "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                        -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                        
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                    "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                         -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                     "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                          -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      i"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                            -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	f, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           i -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if ("}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	/, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if ( -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	[, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/["}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/ -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[ -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	-, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	z, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-z
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-z"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a- -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-z
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	A, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-z -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	-, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	Z, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA- -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	], {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	/, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z] -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	., {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/."}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/ -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.t
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.t"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/. -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.t
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.te
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.te"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.t -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.te
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.tes
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.tes"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.te -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.tes
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.tes -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test("}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test( -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c)"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c))
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c))"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c) -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c))
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)) 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c)) "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)) -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)) 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)) {
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c)) {"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c))  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)) {
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)) {
                                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n                      if (/[a-zA-Z]/.test(c)) {\n                        "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)) { -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)) {
                                             
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                        "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                                           if (/[a-zA-Z]/.test(c)) {
                                              -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                         "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                              -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                          "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                               -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                           "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                            "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                 -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                             "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                  
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                              "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                   -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                   
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                    
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                               "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                    -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                    
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                     -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                      
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                 "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                      -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                      
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                       
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                  "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                       -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                       
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                        
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                   "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                        -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                        
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                    "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                         -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                     "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                          -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                      "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                           -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                       "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                            -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                            
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                        "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                             -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                         "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                              -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               l
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          l"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                                -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               l
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               le
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          le"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               l -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               le
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               le -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	b, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let b
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let b"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let b
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let ba
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let ba"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let b -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let ba
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let bas
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let bas"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let ba -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let bas
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let bas -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base =
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base ="}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base =
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base =  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	>, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >=
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >="}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c > -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >=
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= '
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= '"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >=  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= '
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= ' -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a'
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a'"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a'
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	&, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' &
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' &"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a'  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' &
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	&, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' &&
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' &&"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' & -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' &&
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' &&  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	<, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <=
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <="}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c < -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <=
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= '
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= '"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <=  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= '
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	z, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= ' -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z'
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z'"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z'
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' "}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	?, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ?
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z'  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ?
 [32m      cy:command ✔ [39m get	#coderunner-run-button
 [32m      cy:command ✔ [39m assert	expected **<button#coderunner-run-button.p-button.p-component>** to be **enabled**
 [32m      cy:command ✔ [39m get	#coderunner-run-button
 [32m      cy:command ✔ [39m assert	expected **<button#coderunner-run-button.p-button.p-component>** to be **visible**
 [32m      cy:command ✔ [39m get	#coderunner-run-button
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m On run code
 [37m        cons:log ✱ [39m exerciseCreatorController: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n   ...
 [37m        cons:log ✱ [39m runSignleExerciseCreationTest: {"code":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?","manualTests":[{"input":"\"A\"","output":null,"expectedOutput":"\"H\"","errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"","executionTime":-1},{"input":"\"a\"","output":null,"expectedOutput":"\"h\"","errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"","executionTime":-1},{"input":"\"The quick brown fox jumps over a lazy dog\"","output":null,"expectedOutput":"\"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn\"","errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"","execution ...
 [37m        cons:log ✱ [39m desitn: /public/app/CodeRun/ExerciseCodeTests
 [37m        cons:log ✱ [39m published {"destination":"/public/app/CodeRun/ExerciseCodeTests","body":"{\"code\":\"function solution(input) {\\n    let result = \\\"\\\";\\n    const shift = 7;\\n\\n    for (let i = 0; i < input.length; i++) {\\n        let c = input[i];\\n        if (/[a-zA-Z]/.test(c)) {\\n                                          let base = c >= 'a' && c <= 'z' ?\",\"manualTests\":[{\"input\":\"\\\"A\\\"\",\"output\":null,\"expectedOutput\":\"\\\"H\\\"\",\"errorOutput\":\"\",\"consoleOutput\":\"\",\"isSolved\":null,\"uuid\":\"\",\"executionTime\":-1},{\"input\":\"\\\"a\\\"\",\"output\":null,\"expectedOutput\":\"\\\"h\\\"\",\"errorOutput\":\"\",\"consoleOutput\":\"\",\"isSolved\":null,\"uuid\":\"\",\"executionTime\":-1},{\"input\":\"\\\"The quick brown fox jumps over a lazy dog\\\"\",\"output\":null, ...
 [32m      cy:command ✔ [39m get	#testResultStatus_0
 [32m      cy:command ✔ [39m assert	expected **<div#testResultStatus_0.statusSector>** to have text **Failed**
                     Actual: 	"Failed"
                     Expected: 	"Failed"
 [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerResults
 [37m        cons:log ✱ [39m _CodeResultsCallBack recived  {"results":[{"consoleOutput":{"exitCode":0,"output":null,"errorOutput":"/app/8de5c8d8-14e9-4417-82ab-41203584d60c.js:16\n const outputGenerator_9350093b6d1e4d10aaa8c6f1de65b50c_fs = require('fs');\n ^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at internalCompileFunction (node:internal/vm:77:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1290:20)\n    at Module._compile (node:internal/modules/cjs/loader:1342:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:4 ...
 [37m        cons:log ✱ [39m ---------------------------------------------------
                     
 [37m        cons:log ✱ [39m create test langauge update: "JS_RUNNER"
 [37m        cons:log ✱ [39m create test rtesult update: [{"consoleOutput":{"exitCode":0,"output":null,"errorOutput":"/app/8de5c8d8-14e9-4417-82ab-41203584d60c.js:16\n const outputGenerator_9350093b6d1e4d10aaa8c6f1de65b50c_fs = require('fs');\n ^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at internalCompileFunction (node:internal/vm:77:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1290:20)\n    at Module._compile (node:internal/modules/cjs/loader:1342:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js  ...
 [37m        cons:log ✱ [39m ---------------------------------------------------
                     
 [37m        cons:log ✱ [39m ---isSolved values: {"CPP_RUNNER":{"tests":[{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":-1},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":" ...
 [37m        cons:log ✱ [39m ---isSolved values amont: : 2 : [{"tests":[{"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1},{"input":"a","expectedOutput":"h","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":-1},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":-1},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"e ...
 [37m        cons:log ✱ [39m test: {"input":"A","expectedOutput":"H","output":null,"errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":-1}
 [37m        cons:log ✱ [39m false
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <string>\nstd::string solution(std::string x){\n //your solution \n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [32m      cy:command ✔ [39m get	#testResultStatus_1
 [32m      cy:command ✔ [39m assert	expected **<div#testResultStatus_1.statusSector>** to be **empty**
 [32m      cy:command ✔ [39m get	#testResultStatus_2
 [32m      cy:command ✔ [39m assert	expected **<div#testResultStatus_2.statusSector>** to be **empty**
 [32m      cy:command ✔ [39m get	#testResultStatus_3
 [32m      cy:command ✔ [39m assert	expected **<div#testResultStatus_3.statusSector>** to be **empty**
 [32m      cy:command ✔ [39m get	#coderunner-langage-dropdown
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	.p-dropdown-item
 [32m      cy:command ✔ [39m contains	cpp
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m test change: CPP_RUNNER
 [32m      cy:command ✔ [39m get	.p-button
 [32m      cy:command ✔ [39m contains	span, Change
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m  confirm change: CPP_RUNNER
 [37m        cons:log ✱ [39m set awaitng
 [37m        cons:log ✱ [39m {"__v_isShallow":false,"dep":{},"__v_isRef":true,"_rawValue":{"codeRunnerType":"JS_RUNNER","state":"ACTIVE"},"_value":{"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}}
 [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"AWAITING"}
 [37m        cons:log ✱ [39m codeRunnerName: "CPP_RUNNER"
 [37m        cons:log ✱ [39m requestCodeRunner: {"CodeRunnerType":"CPP_RUNNER"}
 [37m        cons:log ✱ [39m codeRunnerRequest: {"CodeRunnerType":"CPP_RUNNER"}
 [37m        cons:log ✱ [39m desitn: /public/app/codeRunnerRequest
 [37m        cons:log ✱ [39m published {"destination":"/public/app/codeRunnerRequest","body":"{\"CodeRunnerType\":\"CPP_RUNNER\"}"}
 [32m      cy:command ✔ [39m get	#coderunner-loading-dialog
 [32m      cy:command ✔ [39m assert	expected **#coderunner-loading-dialog** not to exist in the DOM
                     Actual: 	"#coderunner-loading-dialog"
                     Expected: 	"#coderunner-loading-dialog"
 [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
 [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}
 [37m        cons:log ✱ [39m typeof this.eventHandlers  object
 [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
 [37m        cons:log ✱ [39m length  1
 [37m        cons:log ✱ [39m |Test
 [37m        cons:log ✱ [39m {"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? -> #include <string>
                     std::string solution(std::string x){
                      //your solution 
                     }
 [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
 [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}
 [37m        cons:log ✱ [39m typeof this.eventHandlers  object
 [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
 [37m        cons:log ✱ [39m length  1
 [37m        cons:log ✱ [39m |Test
 [37m        cons:log ✱ [39m {"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}
 [32m      cy:command ✔ [39m get	#code-preview
 [32m      cy:command ✔ [39m invoke	.text()
 [32m      cy:command ✔ [39m assert	expected **#include <string>\nstd::string solution(std::string x){\n //your solution \n}** to include **std::string solution(std::string x)**
 [32m      cy:command ✔ [39m wait	1000
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m wait	1000
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{selectAll}{backspace}, {force: true}
 [37m        cons:log ✱ [39m codee update: 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <string>
                     std::string solution(std::string x){
                      //your solution 
                     } -> 
 [32m      cy:command ✔ [39m get	#code-preview
 [32m      cy:command ✔ [39m invoke	.text()
 [32m      cy:command ✔ [39m assert	expected **''** to be empty
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	#, {force: true}
 [37m        cons:log ✱ [39m codee update: #
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let  ...
 [37m        cons:log ✱ [39m props chahned-----------------------:  -> #
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let ...
 [37m        cons:log ✱ [39m props chahned-----------------------: # -> #i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #in
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        le ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #i -> #in
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: #inc
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#inc","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#inc","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        l ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #in -> #inc
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #incl
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#incl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#incl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n         ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #inc -> #incl
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #inclu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#inclu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#inclu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #incl -> #inclu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	d, {force: true}
 [37m        cons:log ✱ [39m codee update: #includ
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#includ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#includ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n       ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #inclu -> #includ
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n      ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #includ -> #include
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n     ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include -> #include 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	<, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n    ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include  -> #include <
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n   ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include < -> #include <i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <io
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <io","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <io","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <i -> #include <io
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <ios
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <ios","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <ios","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <io -> #include <ios
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iost
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iost","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iost","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <ios -> #include <iost
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostr
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostr","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostr","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) { ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iost -> #include <iostr
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostre
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostre","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostre","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++)  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostr -> #include <iostre
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostrea
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostrea","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostrea","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostre -> #include <iostrea
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	m, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostrea -> #include <iostream
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	>, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i+ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream -> #include <iostream>
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length;  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream> -> #include <iostream>
                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	#, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                      -> #include <iostream>
                     #
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     # -> #include <iostream>
                     #i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #in
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.lengt ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #i -> #include <iostream>
                     #in
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #inc
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#inc","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#inc","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.leng ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #in -> #include <iostream>
                     #inc
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #incl
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#incl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#incl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.len ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #inc -> #include <iostream>
                     #incl
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #inclu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#inclu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#inclu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.le ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #incl -> #include <iostream>
                     #inclu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	d, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #includ
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#includ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#includ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.l ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #inclu -> #include <iostream>
                     #includ
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input. ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #includ -> #include <iostream>
                     #include
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include -> #include <iostream>
                     #include 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	<, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < inpu ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include  -> #include <iostream>
                     #include <
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < inp ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include < -> #include <iostream>
                     #include <s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <st
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < in ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <s -> #include <iostream>
                     #include <st
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <str
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < i ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <st -> #include <iostream>
                     #include <str
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <stri
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i <  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <str -> #include <iostream>
                     #include <stri
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <strin
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < ...
32Z [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <stri -> #include <iostream>
                     #include <strin
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	g, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <strin -> #include <iostream>
                     #include <string
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	>, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string -> #include <iostream>
                     #include <string>
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string> -> #include <iostream>
                     #include <string>
                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\n","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i =  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                      -> #include <iostream>
                     #include <string>
                     
                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\ns","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\ns","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                      -> #include <iostream>
                     #include <string>
                     
                     s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     st
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nst","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nst","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     s -> #include <iostream>
                     #include <string>
                     
                     st
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	d, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     st -> #include <iostream>
                     #include <string>
                     
                     std
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	:, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std:
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std -> #include <iostream>
                     #include <string>
                     
                     std:
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	:, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std: -> #include <iostream>
                     #include <string>
                     
                     std::
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (le ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std:: -> #include <iostream>
                     #include <string>
                     
                     std::s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::st
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (l ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::s -> #include <iostream>
                     #include <string>
                     
                     std::st
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::str
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for ( ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::st -> #include <iostream>
                     #include <string>
                     
                     std::str
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::stri
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::str -> #include <iostream>
                     #include <string>
                     
                     std::stri
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::strin
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::stri -> #include <iostream>
                     #include <string>
                     
                     std::strin
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	g, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    fo ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::strin -> #include <iostream>
                     #include <string>
                     
                     std::string
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    f ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string -> #include <iostream>
                     #include <string>
                     
                     std::string 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n     ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string  -> #include <iostream>
                     #include <string>
                     
                     std::string s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string so
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string so","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string so","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string s -> #include <iostream>
                     #include <string>
                     
                     std::string so
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string sol
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string sol","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string sol","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n   ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string so -> #include <iostream>
                     #include <string>
                     
                     std::string sol
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string sol -> #include <iostream>
                     #include <string>
                     
                     std::string solu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solut
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solut","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solut","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solu -> #include <iostream>
                     #include <string>
                     
                     std::string solut
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string soluti
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string soluti","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string soluti","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solut -> #include <iostream>
                     #include <string>
                     
                     std::string soluti
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solutio
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solutio","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solutio","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string soluti -> #include <iostream>
                     #include <string>
                     
                     std::string solutio
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solutio -> #include <iostream>
                     #include <string>
                     
                     std::string solution
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7; ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution -> #include <iostream>
                     #include <string>
                     
                     std::string solution(
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7 ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution( -> #include <iostream>
                     #include <string>
                     
                     std::string solution(s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(st
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift =  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(s -> #include <iostream>
                     #include <string>
                     
                     std::string solution(st
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	d, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(st -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	:, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std:
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std:
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	:, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std: -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shif ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std:: -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::st
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shi ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::s -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::st
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::str
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const sh ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::st -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::str
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::stri
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const s ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::str -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::stri
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::strin
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::stri -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::strin
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	g, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::strin -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    cons ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    con ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string in
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    co ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string i -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string in
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	p, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string inp
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string inp","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string inp","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    c ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string in -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string inp
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string inpu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string inpu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string inpu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n     ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string inp -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string inpu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string inpu -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n   ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input)
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input)  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n    ","JS_RUNNER":"function solution(input) {\n    let result = \ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) { -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n     ","JS_RUNNER":"function solution(input) {\n    let result =  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                          -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n      ","JS_RUNNER":"function solution(input) {\n    let result = ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                           -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n       ","JS_RUNNER":"function solution(input) {\n    let result  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                            -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                            
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        ","JS_RUNNER":"function solution(input) {\n    let result ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        s","JS_RUNNER":"function solution(input) {\n    let resul ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                              -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             st
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        st","JS_RUNNER":"function solution(input) {\n    let resu ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             s -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             st
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	d, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std","JS_RUNNER":"function solution(input) {\n    let res ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             st -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	:, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std:
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std:","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std:","JS_RUNNER":"function solution(input) {\n    let re ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std:
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	:, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::","JS_RUNNER":"function solution(input) {\n    let r ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std: -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::s","JS_RUNNER":"function solution(input) {\n    let  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std:: -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::st
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::st","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::st","JS_RUNNER":"function solution(input) {\n    let ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::s -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::st
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::str
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::str","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::str","JS_RUNNER":"function solution(input) {\n    le ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::st -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::str
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::stri
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::stri","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::stri","JS_RUNNER":"function solution(input) {\n    l ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::str -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::stri
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::strin
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::strin","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::strin","JS_RUNNER":"function solution(input) {\n     ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::stri -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::strin
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	g, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string","JS_RUNNER":"function solution(input) {\n    ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::strin -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string ","JS_RUNNER":"function solution(input) {\n   ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string r
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string r","JS_RUNNER":"function solution(input) {\n  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string r
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string re
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string re","JS_RUNNER":"function solution(input) {\n ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string r -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string re
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string res
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string res","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string res","JS_RUNNER":"function solution(input) {\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string re -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string res
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string resu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string resu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string resu","JS_RUNNER":"function solution(input) { ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string res -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string resu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string resul
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string resul","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string resul","JS_RUNNER":"function solution(input)  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string resu -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string resul
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result","JS_RUNNER":"function solution(input) ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string resul -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result ","JS_RUNNER":"function solution(input ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result =
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result =","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result =","JS_RUNNER":"function solution(inpu ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result =
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = ","JS_RUNNER":"function solution(inp ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	", {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"","JS_RUNNER":"function solution(i ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result =  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	", {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = ""
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\"","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\"","JS_RUNNER":"function solution ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = " -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = ""
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";","JS_RUNNER":"function solutio ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "" -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n        ","JS_RUNNER":"functi ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = ""; -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n         ","JS_RUNNER":"funct ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                              -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n          ","JS_RUNNER":"func ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                               -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n           ","JS_RUNNER":"fun ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            ","JS_RUNNER":"fu ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            i","JS_RUNNER":"f ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 in
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            in","JS_RUNNER":" ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 i -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 in
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int","JS_RUNNER": ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 in -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int ","JS_RUNNER" ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int s","JS_RUNNER ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int s
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	h, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int sh
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int sh","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int sh","JS_RUNNE ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int s -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int sh
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shi
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shi","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shi","JS_RUNN ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int sh -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shi
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	f, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shif
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shif","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shif","JS_RUN ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shi -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shif
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift","JS_RU ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shif -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift ","JS_R ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift =
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift =","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift =","JS_ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift =
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = ","JS ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	7, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7","J ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift =  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;"," ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7 -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n  ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7; -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                  
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                   -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                   
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                    
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                    -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                    
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	f, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     f
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                f","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                      -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     f
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     fo
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                fo","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     f -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     fo
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     fo -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for ( -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	h, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (ch
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (ch","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (c -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (ch
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (cha
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (cha","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (ch -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (cha
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (cha -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	:, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c :
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c :","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c :
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c :  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : in
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : in","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : i -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : in
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	p, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : inp
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : inp","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : in -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : inp
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : inpu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : inpu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : inp -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : inpu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : inpu -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input)
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input)  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) { -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                          -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                           -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                            -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                            
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                             -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                              -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                               -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	f, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 i -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if ( -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (is
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (is","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (i -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (is
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isa
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isa","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (is -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isa
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isal
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isal","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isa -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isal
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	p, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalp
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalp","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isal -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalp
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	h, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalph
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalph","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalp -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalph
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalph -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha( -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c))
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c))","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c) -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c))
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) {
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c))  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) {
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) {  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                      
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                      -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                      
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                       
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                       -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                       
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                        
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                        -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                        
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                         -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                          -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                           -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                            -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                            
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                             -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                              -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                               -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                               
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	h, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 ch
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            ch","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 c -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 ch
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 cha
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            cha","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 ch -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 cha
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 cha -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	b, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char b
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char b","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char b
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char ba
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char ba","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char b -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char ba
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char bas
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char bas","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char ba -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char bas
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char bas -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base =
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base =","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base =
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = i
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = i","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base =  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = i
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = is
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = is","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = i -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = is
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = isl
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = isl","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = is -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = isl
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islo
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islo","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = isl -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islo
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	w, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islow
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islow","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islo -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islow
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islowe
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islowe","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islow -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islowe
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islowe -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower( -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c)
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	?, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ?
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ?","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c)  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ?
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? '
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? '","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ?  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? '
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? ' -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a'
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a'","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a'
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	:, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' :
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' :","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a'  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' :
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : '
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : '","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' :  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : '
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	A, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : ' -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A';
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A';","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A' -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A';
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A';  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                  
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                   -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                   
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                    
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                    -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                    
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                     -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                      
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                      -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                      
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                       
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                       -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                       
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                        
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                        -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                        
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                         -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                          -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                           -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                            -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                            
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             r
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                              -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             r
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             re
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             r -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             re
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             res
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        res","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             re -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             res
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             resu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        resu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             res -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             resu
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             resul
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        resul","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             resu -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             resul
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             resul -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	+, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result +
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result +","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result +
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result +=
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result +=","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result + -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result +=
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result +=  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += ( -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	-, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c -
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c -","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c -
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	b, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - b
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - b","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c -  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - ba
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - ba","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - b -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - bas
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - bas","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - ba -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += ( ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - bas -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result +=  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	+, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base +
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base +","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result + ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + s
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + s","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base +  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	h, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + sh
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + sh","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + s -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             resul ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	i, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shi
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shi","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + sh -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             resu ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	f, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shif
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shif","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shi -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             res ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shif -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             re ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift)","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             r ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                              ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	%, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) %
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) %","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift)  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                            ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	2, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 2
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 2","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) %  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                           ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	6, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 2 -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                          ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                         ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	+, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 +
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 +","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                        ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                       ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	b, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + b
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + b","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 +  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                      ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + ba
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + ba","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + b -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                     ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + bas
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + bas","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + ba -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                    ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + bas -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                   ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base; -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                 ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                              -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c)  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                               -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                 -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower( ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                   -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islowe ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                    
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                    -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islow ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                                                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                     -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islo ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	}, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 }
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            }","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                                                      -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = isl ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                   ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } e
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } e","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 }  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } el
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } el","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } e -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                 ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } els
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } els","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } el -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } els -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                               ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                              ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                             ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else { -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                            ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                      
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                      -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                       
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                       -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                        
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                        -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char bas ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                         -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char ba ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                     ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                          -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char b ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                      ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                           -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                       ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                            -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                        ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                             -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 cha ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                         ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                              -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 ch ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                          ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                               -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 c ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                           ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?"}
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ?" ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 r
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ? ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 re
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z'  ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 r -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                               ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 res
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            res","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z' ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 re -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                              ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 resu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            resu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= 'z ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 res -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                             ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 resul
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            resul","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= ' ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 resu -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                            ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <=  ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 resul -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                           ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c <= ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                          ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	+, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result +
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result +","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c < ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                         ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	=, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result +=
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result +=","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c  ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result + -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                        ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && c ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                       ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' &&  ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result +=  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                      ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                          let base = c >= 'a' && ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                     ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                   ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c; -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                    ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                  ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if ( ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                 ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                   -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                    
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                    -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n               ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                     -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 i ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                      
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n              ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                      -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                       
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n             ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                       -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                        
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n            ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                        -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                                                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n           ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                         -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                               ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	}, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n                                  ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                                          -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                              ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                            ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n    ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 } -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                      ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                             ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n   ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                        ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                              ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n  ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                   -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                       ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                    
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                               ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                    -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                      ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\ ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                     -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                     ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	}, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) {\n               ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                                      -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                    ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c)) ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     } -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 i ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                      
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                 ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c) ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                      -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                       
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                  ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test(c ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                       -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                 ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                        
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                   ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test( ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                        -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.test ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                               ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         r
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.tes ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                          -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                              ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         re
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.te ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         r -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                             ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         ret
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    ret","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/.t ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         re -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                            ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         retu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    retu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/. ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         ret -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                           ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         retur
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    retur","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z]/ ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         retu -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                          ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	n, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z] ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         retur -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                         ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA-Z ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                        ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return r
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return r","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA- ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return  -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                       ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return re
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return re","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-zA ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return r -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                      ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	s, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return res
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return res","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a-z ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return re -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) { ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	u, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return resu
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return resu","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a- ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return res -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input)  ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	l, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return resul
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return resul","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[a ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return resu -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return result
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/[ ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return resul -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return result;
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if (/ ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return result -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : inpu ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return result;
                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n                    ","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = in ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return result; -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : inp ...
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	}, {force: true}
 [37m        cons:log ✱ [39m codee update: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return result;
                     }
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return result;
                                          -> #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                  ...
 [32m      cy:command ✔ [39m get	#coderunner-run-button
 [32m      cy:command ✔ [39m assert	expected **<button#coderunner-run-button.p-button.p-component>** to be **enabled**
 [32m      cy:command ✔ [39m get	#coderunner-run-button
 [32m      cy:command ✔ [39m assert	expected **<button#coderunner-run-button.p-button.p-component>** to be **visible**
 [32m      cy:command ✔ [39m get	#coderunner-run-button
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m On run code
 [37m        cons:log ✱ [39m exerciseCreatorController: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7 ...
 [37m        cons:log ✱ [39m runSignleExerciseCreationTest: {"code":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","manualTests":[{"input":"\"A\"","output":null,"expectedOutput":"\"H\"","errorOutput":"","consoleOutput":"","isSolved":null,"uuid":"","executionTime":-1},{" ...
 [37m        cons:log ✱ [39m desitn: /public/app/CodeRun/ExerciseCodeTests
 [37m        cons:log ✱ [39m published {"destination":"/public/app/CodeRun/ExerciseCodeTests","body":"{\"code\":\"#include <iostream>\\n#include <string>\\n\\nstd::string solution(std::string input) {\\n        std::string result = \\\"\\\";\\n            int shift = 7;\\n\\n                for (char c : input) {\\n                            if (isalpha(c)) { \\n                                            char base = islower(c) ? 'a' : 'A'; \\n                                                        result += (c - base + shift) % 26 + base;\\n                            } else {\\n                                            result += c;\\n                            }\\n                }\\n                    return result;\\n}\",\"manualTests\":[{\"input\":\"\\\"A\\\"\",\"output\":null,\"expectedOutput\":\"\\\"H\\\"\ ...
 [32m      cy:command ✔ [39m get	#TestResultCard0
 [32m      cy:command ✔ [39m contains	span, Result
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#tab-result-expected-container-0
 [32m      cy:command ✔ [39m contains	expeteced: "H"
 [32m      cy:command ✔ [39m get	#tab-result-achived-container-0
 [32m      cy:command ✔ [39m contains	achived: "H"
 [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerResults
 [37m        cons:log ✱ [39m _CodeResultsCallBack recived  {"results":[{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"H","variablesInput":"A","executionTime":53},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"h","variablesInput":"a","executionTime":59},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","variablesInput":"The quick brown fox jumps over a lazy dog","executionTime":55},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","variablesInput":"The five boxing wizards jump quickly","executionTime":57},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"tDmc\tX","variablesInput":"mWfv\tQ","executionTime":62},{"cons ...
 [37m        cons:log ✱ [39m ---------------------------------------------------
                     
 [37m        cons:log ✱ [39m create test langauge update: "CPP_RUNNER"
 [37m        cons:log ✱ [39m create test rtesult update: [{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"H","variablesInput":"A","executionTime":53},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"h","variablesInput":"a","executionTime":59},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","variablesInput":"The quick brown fox jumps over a lazy dog","executionTime":55},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","variablesInput":"The five boxing wizards jump quickly","executionTime":57},{"consoleOutput":{"exitCode":0,"output":"","errorOutput":""},"variables":"tDmc\tX","variablesInput":"mWfv\tQ","executionTime":62},{"consoleOutput":{" ...
 [37m        cons:log ✱ [39m ---------------------------------------------------
                     
 [37m        cons:log ✱ [39m i: 4::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
 [37m        cons:log ✱ [39m i: 5::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
 [37m        cons:log ✱ [39m i: 6::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
 [37m        cons:log ✱ [39m i: 7::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
 [37m        cons:log ✱ [39m i: 8::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
 [37m        cons:log ✱ [39m i: 9::::[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consol ...
 [37m        cons:log ✱ [39m ---isSolved values: {"CPP_RUNNER":{"tests":[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbt ...
 [37m        cons:log ✱ [39m ---isSolved values amont: : 2 : [{"tests":[{"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53},{"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59},{"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55},{"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw ...
 [37m        cons:log ✱ [39m test: {"input":"A","expectedOutput":"H","output":"H","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"80f2b30e-e234-42ed-9149-a6eefcfd08a8","executionTime":53}
 [37m        cons:log ✱ [39m test: {"input":"a","expectedOutput":"h","output":"h","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"20f2390a-7263-4f3f-a835-e4a44734c285","executionTime":59}
 [37m        cons:log ✱ [39m test: {"input":"The quick brown fox jumps over a lazy dog","expectedOutput":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","output":"Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"ce4874bd-b8b5-4f60-9782-0892d759768e","executionTime":55}
 [37m        cons:log ✱ [39m test: {"input":"The five boxing wizards jump quickly","expectedOutput":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","output":"Aol mpcl ivepun dpghykz qbtw xbpjrsf","errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"efd68762-a408-44fa-8378-675c74c56885","executionTime":57}
 [37m        cons:log ✱ [39m test: {"input":"mWfv\tQ","output":"tDmc\tX","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":62}
 [37m        cons:log ✱ [39m test: {"input":"1sqek0w\n8fkGpkq","output":"1zxlr0d\n8mrNwrx","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":45}
 [37m        cons:log ✱ [39m test: {"input":"7","output":"7","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":60}
 [37m        cons:log ✱ [39m test: {"input":"BUTSdqdn","output":"IBAZkxku","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":49}
 [37m        cons:log ✱ [39m test: {"input":"1","output":"1","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":42}
 [37m        cons:log ✱ [39m test: {"input":"p\nl","output":"w\ns","expectedOutput":null,"errorOutput":"","consoleOutput":"","isSolved":true,"uuid":"","executionTime":53}
 [37m        cons:log ✱ [39m test: {"input":"A","expectedOutput":"H","output":null,"errorOutput":"/app/8de5c8d8-14e9-4417-82ab-41203584d60c.js:16\n const outputGenerator_9350093b6d1e4d10aaa8c6f1de65b50c_fs = require('fs');\n ^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at internalCompileFunction (node:internal/vm:77:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1290:20)\n    at Module._compile (node:internal/modules/cjs/loader:1342:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js v21.6.1\n","consoleO ...
 [37m        cons:log ✱ [39m false
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [32m      cy:command ✔ [39m get	#TestResultCard1
 [32m      cy:command ✔ [39m contains	span, Result
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#tab-result-expected-container-1
 [32m      cy:command ✔ [39m contains	expeteced: "h"
 [32m      cy:command ✔ [39m get	#tab-result-achived-container-1
 [32m      cy:command ✔ [39m contains	achived: "h"
 [32m      cy:command ✔ [39m get	#TestResultCard2
 [32m      cy:command ✔ [39m contains	span, Result
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#tab-result-expected-container-2
 [32m      cy:command ✔ [39m contains	expeteced: "Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn"
 [32m      cy:command ✔ [39m get	#tab-result-achived-container-2
 [32m      cy:command ✔ [39m contains	achived: "Aol xbpjr iyvdu mve qbtwz vcly h shgf kvn"
 [32m      cy:command ✔ [39m get	#TestResultCard3
 [32m      cy:command ✔ [39m contains	span, Result
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	#tab-result-expected-container-3
 [32m      cy:command ✔ [39m contains	expeteced: "Aol mpcl ivepun dpghykz qbtw xbpjrsf"
 [32m      cy:command ✔ [39m get	#tab-result-achived-container-3
 [32m      cy:command ✔ [39m contains	achived: "Aol mpcl ivepun dpghykz qbtw xbpjrsf"
 [32m      cy:command ✔ [39m get	#coderunner-langage-dropdown
 [32m      cy:command ✔ [39m click	
 [32m      cy:command ✔ [39m get	.p-dropdown-item
 [32m      cy:command ✔ [39m contains	js
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m test change: JS_RUNNER
 [32m      cy:command ✔ [39m get	.p-button
 [32m      cy:command ✔ [39m contains	span, Change
 [32m      cy:command ✔ [39m click	
 [37m        cons:log ✱ [39m  confirm change: JS_RUNNER
 [37m        cons:log ✱ [39m set awaitng
 [37m        cons:log ✱ [39m {"__v_isShallow":false,"dep":{},"__v_isRef":true,"_rawValue":{"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"},"_value":{"codeRunnerType":"CPP_RUNNER","state":"ACTIVE"}}
 [37m        cons:log ✱ [39m {"codeRunnerType":"CPP_RUNNER","state":"AWAITING"}
 [37m        cons:log ✱ [39m codeRunnerName: "JS_RUNNER"
 [37m        cons:log ✱ [39m requestCodeRunner: {"CodeRunnerType":"JS_RUNNER"}
 [37m        cons:log ✱ [39m codeRunnerRequest: {"CodeRunnerType":"JS_RUNNER"}
 [37m        cons:log ✱ [39m desitn: /public/app/codeRunnerRequest
 [37m        cons:log ✱ [39m published {"destination":"/public/app/codeRunnerRequest","body":"{\"CodeRunnerType\":\"JS_RUNNER\"}"}
 [32m      cy:command ✔ [39m get	#coderunner-loading-dialog
 [32m      cy:command ✔ [39m assert	expected **#coderunner-loading-dialog** not to exist in the DOM
                     Actual: 	"#coderunner-loading-dialog"
                     Expected: 	"#coderunner-loading-dialog"
 [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
 [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
 [37m        cons:log ✱ [39m typeof this.eventHandlers  object
 [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
 [37m        cons:log ✱ [39m length  1
 [37m        cons:log ✱ [39m |Test
 [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
 [37m        cons:log ✱ [39m props chahned-----------------------: #include <iostream>
                     #include <string>
                     
                     std::string solution(std::string input) {
                             std::string result = "";
                                 int shift = 7;
                     
                                     for (char c : input) {
                                                 if (isalpha(c)) { 
                                                                 char base = islower(c) ? 'a' : 'A'; 
                                                                             result += (c - base + shift) % 26 + base;
                                                 } else {
                                                                 result += c;
                                                 }
                                     }
                                         return result;
                     } -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c))  ...
 [37m        cons:log ✱ [39m received message from subscription: /user/public/topic/codeRunnerState
 [37m        cons:log ✱ [39m codeRunnerState recived  {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
 [37m        cons:log ✱ [39m typeof this.eventHandlers  object
 [37m        cons:log ✱ [39m typeof this.eventHandlers  function () { [native code] }
 [37m        cons:log ✱ [39m length  1
 [37m        cons:log ✱ [39m |Test
 [37m        cons:log ✱ [39m {"codeRunnerType":"JS_RUNNER","state":"ACTIVE"}
 [32m      cy:command ✔ [39m wait	1000
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	{moveToEnd}, {force: true}
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? '
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ?  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? '
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? ' -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	., {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a' -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'. -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	h, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.ch
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.c -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.ch
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.cha
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.ch -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.cha
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.char
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.cha -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.char
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	C, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charC
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.char -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charC
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCo
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charC -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCo
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	d, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCod
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCo -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCod
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCode
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCod -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCode
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	A, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeA
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCode -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeA
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeA -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	0, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt( -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0 -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0)
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	:, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) :
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0)  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) :
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : '
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) :  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : '
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	A, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : ' -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	', {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	., {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A' -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	c, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.c
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'. -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.c
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	h, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.ch
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.c -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.ch
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	a, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.cha
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.ch -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.cha
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	r, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.char
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.cha -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.char
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	C, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charC
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.char -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charC
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	o, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCo
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charC -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCo
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	d, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCod
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCo -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCod
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	e, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCode
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCod -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCode
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	A, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeA
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCode -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeA
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	t, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeA -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	(, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	0, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt( -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	), {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0)
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0 -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0)
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	;, {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0) -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                                               let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0); -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	
                     , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                 
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0); -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                 
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                  
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                  -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                  
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                   
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                   -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                   
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                    
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                    -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                    
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                     
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                     -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                     
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                      
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                      -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                      
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                       
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                       -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                       
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                        
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                        -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                        
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                         
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                         -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                         
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                          
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                          -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                          
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                           
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                           -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                           
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                            
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                            -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                            
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                             
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                             -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                             
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                              
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                              -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                              
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m focus	
 [32m      cy:command ✔ [39m get	#coderunner-editor-panel textarea
 [32m      cy:command ✔ [39m type	 , {force: true}
 [37m        cons:log ✱ [39m codee update: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                               
 [37m        cons:log ✱ [39m update: {"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\n                for (char c : input) {\n                            if (isalpha(c)) { \n                                            char base = islower(c) ? 'a' : 'A'; \n                                                        result += (c - base + shift) % 26 + base;\n                            } else {\n                                            result += c;\n                            }\n                }\n                    return result;\n}","JS_RUNNER":"function solution(input) {\n    let result = \"\";\n    const shift = 7;\n\n    for (let i = 0; i < input.length; i++) {\n        let c = input[i];\n        if ...
 [37m        cons:log ✱ [39m IExerciseDescriptionI: {"_languages":["CPP_RUNNER","JS_RUNNER"],"ram":512,"timeForTaskMin":82,"timeForExecutionMs":2000,"inputType":"SINGLE_STRING","outputType":"SINGLE_STRING","amountOfAutoTests":6,"autoTestminValue":-1,"autoTestMaxValue":1,"upperCaseInput":true,"lowerCaseInput":true,"numberInput":true,"specialCharacterInput":true,"breakCharacterInupt":true,"xArrayRange":{"min":1,"max":10},"yArrayRange":{"min":1,"max":10},"title":"Cesar cipher","desc":"move every letter in alphabet by 7 so a -> d and z - g, lower case and upper case letters should be handled","lengthRange":{"min":1,"max":20},"spaceInupt":false,"solutionCodes":{"CPP_RUNNER":"#include <iostream>\n#include <string>\n\nstd::string solution(std::string input) {\n        std::string result = \"\";\n            int shift = 7;\n\ ...
 [37m        cons:log ✱ [39m props chahned-----------------------: function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
                                               -> function solution(input) {
                         let result = "";
                         const shift = 7;
                     
                         for (let i = 0; i < input.length; i++) {
                             let c = input[i];
                             if (/[a-zA-Z]/.test(c)) {
                                 let base = c >= 'a' && c <= 'z' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
