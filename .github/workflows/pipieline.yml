name: pipeline

on:
  push

jobs:
  # build-frontend:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./ProjectSource/RedoCode_frontend
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Use Node.js 20.0
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: 'npm'
  #     - run: npm i
  #     - run: npm run build

  # build-backend:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./ProjectSource/RedoCode_backend
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #         cache: maven
  #     - name: Set up Maven
  #       uses: stCarolas/setup-maven@v5
  #       with:
  #         maven-version: 3.8.2
  #     - name: Build with Maven
  #       run: |
  #         ls
  #         mvn clean install -DskipTests 

  # vue-vitest:
  #   needs:
  #     - build-backend
  #     - build-frontend
  #   defaults:
  #     run:
  #       working-directory: ./ProjectSource/RedoCode_frontend
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Use Node.js 20.0
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: 'npm'
  #     - run: npm i
  #     - run: npm run test:dev:unit

  # vue-e2e-dev:
  #   needs:
  #     - build-backend
  #     - build-frontend
  #   defaults:
  #     run:
  #       working-directory: ./ProjectSource/RedoCode_frontend
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20
  #     - name: Install Dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb -y
  #         npm install
  #     - name: Run Cypress Tests
  #       run: |
  #         npm run test:dev:e2e

  # backend-junit-dev-docker:
  #   needs:
  #     - build-backend
  #     - build-frontend
  #   defaults:
  #     run:
  #       working-directory: ./ProjectSource
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #     - name: install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install ca-certificates curl
  #         sudo install -m 0755 -d /etc/apt/keyrings
  #         sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  #         sudo chmod a+r /etc/apt/keyrings/docker.asc
  #         echo \
  #           "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  #           $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  #           sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  #         sudo apt-get update
  #         sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
  #         sudo docker run hello-world
  #     - name: print docker info
  #       run: |
  #         docker info
  #         ls /etc/docker
  #         docker ps
  #         ls /sys/fs/cgroup/
  #     - name: start containers
  #       run: |
  #         docker compose -f docker-compose-dev.yml up -d
  #     - name: conatainers info
  #       run: docker ps
  #     - name: run test
  #       run: |
  #         docker exec -t projectsource-api-1 mvn clean install
  #       continue-on-error: true
  #     - name: Upload Docker Logs on Failure
  #       if: failure()
  #       run: |
  #         mkdir -p docker-logs
  #         docker ps -a > docker-logs/docker-ps.txt
  #         docker-compose -f docker-compose-dev.yml logs > docker-logs/docker-compose-logs.txt
  #     - name: Upload Artifact
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: docker-logs
  #         path: docker-logs/

  docker_structure_test:
    defaults:
      run:
        working-directory: ./ProjectSource
    # needs:
    #   - vue-vitest
    #   - vue-e2e-dev
    #   - backend-junit-dev-docker
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: install docker
        run: |
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
      - name: start containers
        run: |
          docker compose up -d
          docker ps

      - name: Set up Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 20
        
      - name: install node dependencies
        working-directory: ./ProjectSource/RedoCode_frontend
        run: |
          sudo apt-get update
          sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb -y
          npm install cypress
          npm install
      - name: run test
        working-directory: ./ProjectSource/RedoCode_frontend
        run: |
          tree $PWD
          ls
          ls -r
          docker run  --network="host" -v $PWD:/e2e -w /src/__tests__/e2e cypress/included:12.3.0
      - name: file testing
        working-directory: ./ProjectSource/RedoCode_frontend
        if: always()
        run: |
          tree $PWD
          ls
          ls -r
          pwd
      - name: upload arifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: ./ProjectSource/RedoCode_frontend/cypress/screenshots
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: ./ProjectSource/RedoCode_frontend/cypress/videos
